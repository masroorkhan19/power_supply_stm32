
lcd_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ab0  080079e8  080079e8  000179e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e498  0800e498  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800e498  0800e498  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e498  0800e498  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e498  0800e498  0001e498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e49c  0800e49c  0001e49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800e4a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f44  20000014  0800e4b4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f58  0800e4b4  00020f58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bf2  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002156  00000000  00000000  00031c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00033d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  00035008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e1b  00000000  00000000  000361b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013107  00000000  00000000  0004dfd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f72  00000000  00000000  000610da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb04c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005198  00000000  00000000  000eb09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080079d0 	.word	0x080079d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080079d0 	.word	0x080079d0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <SW3516_init>:
void read_from_register(uint8_t reg_address, uint8_t value){
	HAL_I2C_Mem_Read(&hi2c1, SW3516_address, reg_address, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
}


void SW3516_init(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write(&hi2c1, SW3516_address, I2C_CTRL, I2C_MEMADD_SIZE_8BIT, &Vinenable, 1, 10000);
 8000baa:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bae:	9302      	str	r3, [sp, #8]
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <SW3516_init+0x28>)
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	2213      	movs	r2, #19
 8000bbc:	2178      	movs	r1, #120	; 0x78
 8000bbe:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <SW3516_init+0x2c>)
 8000bc0:	f002 f9d2 	bl	8002f68 <HAL_I2C_Mem_Write>
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000005 	.word	0x20000005
 8000bd0:	20000e40 	.word	0x20000e40

08000bd4 <read_ADC_DATA_BUFFER>:


void read_ADC_DATA_BUFFER(uint8_t value, uint16_t* structure_member, uint8_t data_to_put_in_buff){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af04      	add	r7, sp, #16
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	71bb      	strb	r3, [r7, #6]

	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 8000be4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000be8:	9302      	str	r3, [sp, #8]
 8000bea:	2301      	movs	r3, #1
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	1dbb      	adds	r3, r7, #6
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	223a      	movs	r2, #58	; 0x3a
 8000bf6:	2178      	movs	r1, #120	; 0x78
 8000bf8:	4819      	ldr	r0, [pc, #100]	; (8000c60 <read_ADC_DATA_BUFFER+0x8c>)
 8000bfa:	f002 f9b5 	bl	8002f68 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_H, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 8000bfe:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c02:	9302      	str	r3, [sp, #8]
 8000c04:	2301      	movs	r3, #1
 8000c06:	9301      	str	r3, [sp, #4]
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	223b      	movs	r2, #59	; 0x3b
 8000c10:	2178      	movs	r1, #120	; 0x78
 8000c12:	4813      	ldr	r0, [pc, #76]	; (8000c60 <read_ADC_DATA_BUFFER+0x8c>)
 8000c14:	f002 faa2 	bl	800315c <HAL_I2C_Mem_Read>
	  *structure_member  = (uint16_t)value << 4;
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	011b      	lsls	r3, r3, #4
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	801a      	strh	r2, [r3, #0]
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 8000c24:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c28:	9302      	str	r3, [sp, #8]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	223c      	movs	r2, #60	; 0x3c
 8000c36:	2178      	movs	r1, #120	; 0x78
 8000c38:	4809      	ldr	r0, [pc, #36]	; (8000c60 <read_ADC_DATA_BUFFER+0x8c>)
 8000c3a:	f002 fa8f 	bl	800315c <HAL_I2C_Mem_Read>
	  *structure_member |= (uint16_t)value & 0x000F;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	b21a      	sxth	r2, r3
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	b21b      	sxth	r3, r3
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	801a      	strh	r2, [r3, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000e40 	.word	0x20000e40

08000c64 <convert_ADC>:


void convert_ADC(float* current1, float* current2, float* voltagein, float* voltageout, float* temperature){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af04      	add	r7, sp, #16
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	603b      	str	r3, [r7, #0]

		read_ADC_DATA_BUFFER(reg_value, &current_ADC.currentA_ADC, iout1_buffer_enable);
 8000c72:	4b53      	ldr	r3, [pc, #332]	; (8000dc0 <convert_ADC+0x15c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	4a53      	ldr	r2, [pc, #332]	; (8000dc4 <convert_ADC+0x160>)
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	4953      	ldr	r1, [pc, #332]	; (8000dc8 <convert_ADC+0x164>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ffa9 	bl	8000bd4 <read_ADC_DATA_BUFFER>
		*current1 = current_ADC.currentA_ADC * 2.5;
 8000c82:	4b51      	ldr	r3, [pc, #324]	; (8000dc8 <convert_ADC+0x164>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fbb2 	bl	80003f0 <__aeabi_i2d>
 8000c8c:	f04f 0200 	mov.w	r2, #0
 8000c90:	4b4e      	ldr	r3, [pc, #312]	; (8000dcc <convert_ADC+0x168>)
 8000c92:	f7ff fc17 	bl	80004c4 <__aeabi_dmul>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f7ff fe23 	bl	80008e8 <__aeabi_d2f>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	601a      	str	r2, [r3, #0]
		read_ADC_DATA_BUFFER(reg_value, &current_ADC.currentC_ADC, iout2_buffer_enable);
 8000ca8:	4b45      	ldr	r3, [pc, #276]	; (8000dc0 <convert_ADC+0x15c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4a48      	ldr	r2, [pc, #288]	; (8000dd0 <convert_ADC+0x16c>)
 8000cae:	7812      	ldrb	r2, [r2, #0]
 8000cb0:	4948      	ldr	r1, [pc, #288]	; (8000dd4 <convert_ADC+0x170>)
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff8e 	bl	8000bd4 <read_ADC_DATA_BUFFER>
		*current2 = current_ADC.currentC_ADC * 2.5;
 8000cb8:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <convert_ADC+0x164>)
 8000cba:	885b      	ldrh	r3, [r3, #2]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fb97 	bl	80003f0 <__aeabi_i2d>
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <convert_ADC+0x168>)
 8000cc8:	f7ff fbfc 	bl	80004c4 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f7ff fe08 	bl	80008e8 <__aeabi_d2f>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	601a      	str	r2, [r3, #0]
		read_ADC_DATA_BUFFER(reg_value, &current_ADC.voltagein_ADC, vin_buffer_enable);
 8000cde:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <convert_ADC+0x15c>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4a3d      	ldr	r2, [pc, #244]	; (8000dd8 <convert_ADC+0x174>)
 8000ce4:	7812      	ldrb	r2, [r2, #0]
 8000ce6:	493d      	ldr	r1, [pc, #244]	; (8000ddc <convert_ADC+0x178>)
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff73 	bl	8000bd4 <read_ADC_DATA_BUFFER>
		*voltagein = current_ADC.voltagein_ADC * 10;
 8000cee:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <convert_ADC+0x164>)
 8000cf0:	889b      	ldrh	r3, [r3, #4]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fefd 	bl	8000afc <__aeabi_i2f>
 8000d02:	4602      	mov	r2, r0
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	601a      	str	r2, [r3, #0]
		read_ADC_DATA_BUFFER(reg_value, &current_ADC.voltageout_ADC, vout_buffer_enable);
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <convert_ADC+0x15c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4a34      	ldr	r2, [pc, #208]	; (8000de0 <convert_ADC+0x17c>)
 8000d0e:	7812      	ldrb	r2, [r2, #0]
 8000d10:	4934      	ldr	r1, [pc, #208]	; (8000de4 <convert_ADC+0x180>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff5e 	bl	8000bd4 <read_ADC_DATA_BUFFER>
		*voltageout = current_ADC.voltageout_ADC * 6;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <convert_ADC+0x164>)
 8000d1a:	88db      	ldrh	r3, [r3, #6]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4613      	mov	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4413      	add	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fee8 	bl	8000afc <__aeabi_i2f>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	601a      	str	r2, [r3, #0]
		read_ADC_DATA_BUFFER(reg_value, &current_ADC.temperature_ADC, temp_buffer_enable);
 8000d32:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <convert_ADC+0x15c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	4a2c      	ldr	r2, [pc, #176]	; (8000de8 <convert_ADC+0x184>)
 8000d38:	7812      	ldrb	r2, [r2, #0]
 8000d3a:	492c      	ldr	r1, [pc, #176]	; (8000dec <convert_ADC+0x188>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff49 	bl	8000bd4 <read_ADC_DATA_BUFFER>
		*temperature = current_ADC.temperature_ADC / 100.0;
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <convert_ADC+0x164>)
 8000d44:	891b      	ldrh	r3, [r3, #8]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fb52 	bl	80003f0 <__aeabi_i2d>
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <convert_ADC+0x18c>)
 8000d52:	f7ff fce1 	bl	8000718 <__aeabi_ddiv>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4610      	mov	r0, r2
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff fdc3 	bl	80008e8 <__aeabi_d2f>
 8000d62:	4602      	mov	r2, r0
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	601a      	str	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, SW3516_address, PWR_STATUS, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, 10000);
 8000d68:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d6c:	9302      	str	r3, [sp, #8]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <convert_ADC+0x15c>)
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2301      	movs	r3, #1
 8000d78:	2207      	movs	r2, #7
 8000d7a:	2178      	movs	r1, #120	; 0x78
 8000d7c:	481d      	ldr	r0, [pc, #116]	; (8000df4 <convert_ADC+0x190>)
 8000d7e:	f002 f9ed 	bl	800315c <HAL_I2C_Mem_Read>
		current.status_USBC = reg_value & 0x01;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <convert_ADC+0x15c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	bf14      	ite	ne
 8000d8e:	2301      	movne	r3, #1
 8000d90:	2300      	moveq	r3, #0
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <convert_ADC+0x194>)
 8000d96:	755a      	strb	r2, [r3, #21]
		current.status_USBA = reg_value & 0x01;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <convert_ADC+0x15c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf14      	ite	ne
 8000da4:	2301      	movne	r3, #1
 8000da6:	2300      	moveq	r3, #0
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <convert_ADC+0x194>)
 8000dac:	751a      	strb	r2, [r3, #20]
		current.time_in_secs++;
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <convert_ADC+0x194>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	3301      	adds	r3, #1
 8000db4:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <convert_ADC+0x194>)
 8000db6:	6193      	str	r3, [r2, #24]
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000030 	.word	0x20000030
 8000dc4:	20000002 	.word	0x20000002
 8000dc8:	20000034 	.word	0x20000034
 8000dcc:	40040000 	.word	0x40040000
 8000dd0:	20000003 	.word	0x20000003
 8000dd4:	20000036 	.word	0x20000036
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000038 	.word	0x20000038
 8000de0:	20000001 	.word	0x20000001
 8000de4:	2000003a 	.word	0x2000003a
 8000de8:	20000004 	.word	0x20000004
 8000dec:	2000003c 	.word	0x2000003c
 8000df0:	40590000 	.word	0x40590000
 8000df4:	20000e40 	.word	0x20000e40
 8000df8:	20000040 	.word	0x20000040

08000dfc <Page_1>:





 void Page_1(void){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af02      	add	r7, sp, #8

//	    	UG_WindowHide(&LOGO);
//	 	    UG_Update();


	 	    UG_WindowShow(&window_graph);
 8000e02:	487f      	ldr	r0, [pc, #508]	; (8001000 <Page_1+0x204>)
 8000e04:	f005 fbaa 	bl	800655c <UG_WindowShow>
	 	    UG_Update();
 8000e08:	f005 fa1c 	bl	8006244 <UG_Update>

	 ///////////////////graph window



	 	        UG_FillCircle(297,23, 12, C_GREEN);
 8000e0c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e10:	220c      	movs	r2, #12
 8000e12:	2117      	movs	r1, #23
 8000e14:	f240 1029 	movw	r0, #297	; 0x129
 8000e18:	f004 f946 	bl	80050a8 <UG_FillCircle>

	 	        ///grid
	 	 	    //horizontal lines
	 	        UG_DrawLine(0, 39, 319, 39, C_WHITE);
 8000e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2327      	movs	r3, #39	; 0x27
 8000e24:	f240 123f 	movw	r2, #319	; 0x13f
 8000e28:	2127      	movs	r1, #39	; 0x27
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f004 fa16 	bl	800525c <UG_DrawLine>
	 	 	    for (int i=1;i<5;i++){
 8000e30:	2301      	movs	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e01e      	b.n	8000e74 <Page_1+0x78>
	 	 	    	 UG_DrawLine(73, 39+10*i, 319, 39+10*i, C_WHITE);
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	0092      	lsls	r2, r2, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3327      	adds	r3, #39	; 0x27
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	b219      	sxth	r1, r3
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	461a      	mov	r2, r3
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	3327      	adds	r3, #39	; 0x27
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e62:	9200      	str	r2, [sp, #0]
 8000e64:	f240 123f 	movw	r2, #319	; 0x13f
 8000e68:	2049      	movs	r0, #73	; 0x49
 8000e6a:	f004 f9f7 	bl	800525c <UG_DrawLine>
	 	 	    for (int i=1;i<5;i++){
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	dddd      	ble.n	8000e36 <Page_1+0x3a>
	 	 	    }
	 	 	    for (int i=5;i<18;i++){
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	e01e      	b.n	8000ebe <Page_1+0xc2>
	 	 	    	 UG_DrawLine(0, 39+10*i, 320, 39+10*i, C_WHITE);
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	0092      	lsls	r2, r2, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	3327      	adds	r3, #39	; 0x27
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	b219      	sxth	r1, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	461a      	mov	r2, r3
 8000e9a:	0092      	lsls	r2, r2, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	3327      	adds	r3, #39	; 0x27
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eac:	9200      	str	r2, [sp, #0]
 8000eae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f004 f9d2 	bl	800525c <UG_DrawLine>
	 	 	    for (int i=5;i<18;i++){
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	2b11      	cmp	r3, #17
 8000ec2:	dddd      	ble.n	8000e80 <Page_1+0x84>
	 	 	    }
	 	 	    UG_DrawLine(0, 218, 319, 218, C_WHITE);
 8000ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	23da      	movs	r3, #218	; 0xda
 8000ecc:	f240 123f 	movw	r2, #319	; 0x13f
 8000ed0:	21da      	movs	r1, #218	; 0xda
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f004 f9c2 	bl	800525c <UG_DrawLine>

	 	 	    //vertical lines
	 	 	    UG_DrawLine(0, 40, 0, 218, C_WHITE);
 8000ed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	23da      	movs	r3, #218	; 0xda
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2128      	movs	r1, #40	; 0x28
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f004 f9b9 	bl	800525c <UG_DrawLine>
	 	 	    for (int i=0;i<4;i++){
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	e01b      	b.n	8000f28 <Page_1+0x12c>
	 	 	  	 	    	 UG_DrawLine(0+19*i, 84, 0+19*i, 218, C_WHITE);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	00d2      	lsls	r2, r2, #3
 8000ef8:	441a      	add	r2, r3
 8000efa:	0052      	lsls	r2, r2, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	b218      	sxth	r0, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	00d2      	lsls	r2, r2, #3
 8000f0a:	441a      	add	r2, r3
 8000f0c:	0052      	lsls	r2, r2, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	23da      	movs	r3, #218	; 0xda
 8000f1c:	2154      	movs	r1, #84	; 0x54
 8000f1e:	f004 f99d 	bl	800525c <UG_DrawLine>
	 	 	    for (int i=0;i<4;i++){
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3301      	adds	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	dde0      	ble.n	8000ef0 <Page_1+0xf4>
 	    	    }
	 	 	    for (int i=4;i<17;i++){
 8000f2e:	2304      	movs	r3, #4
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	e01b      	b.n	8000f6c <Page_1+0x170>
	 	 	    	    	 UG_DrawLine(0+19*i, 40, 0+19*i, 218, C_WHITE);
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	00d2      	lsls	r2, r2, #3
 8000f3c:	441a      	add	r2, r3
 8000f3e:	0052      	lsls	r2, r2, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	b218      	sxth	r0, r3
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	00d2      	lsls	r2, r2, #3
 8000f4e:	441a      	add	r2, r3
 8000f50:	0052      	lsls	r2, r2, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	23da      	movs	r3, #218	; 0xda
 8000f60:	2128      	movs	r1, #40	; 0x28
 8000f62:	f004 f97b 	bl	800525c <UG_DrawLine>
	 	 	    for (int i=4;i<17;i++){
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b10      	cmp	r3, #16
 8000f70:	dde0      	ble.n	8000f34 <Page_1+0x138>
 	    	    }
	 	 	    UG_DrawLine(319, 40, 319, 218, C_WHITE);
 8000f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	23da      	movs	r3, #218	; 0xda
 8000f7a:	f240 123f 	movw	r2, #319	; 0x13f
 8000f7e:	2128      	movs	r1, #40	; 0x28
 8000f80:	f240 103f 	movw	r0, #319	; 0x13f
 8000f84:	f004 f96a 	bl	800525c <UG_DrawLine>
	 	 //	    UG_DrawLine(5, 100, 315, 100, C_WHITE);
	 	 //	    UG_DrawLine(5, 115, 315, 115, C_WHITE);
	 	 //	    UG_DrawLine(5, 115, 315, 115, C_WHITE);


	 	 	    for(int i=0;i<4;i++){
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	e014      	b.n	8000fb8 <Page_1+0x1bc>
	 	 	    	UG_DrawLine(5, 150+i, 315, 150+i, C_YELLOW);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	3396      	adds	r3, #150	; 0x96
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	b219      	sxth	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	3396      	adds	r3, #150	; 0x96
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000fa6:	9200      	str	r2, [sp, #0]
 8000fa8:	f240 123b 	movw	r2, #315	; 0x13b
 8000fac:	2005      	movs	r0, #5
 8000fae:	f004 f955 	bl	800525c <UG_DrawLine>
	 	 	    for(int i=0;i<4;i++){
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	dde7      	ble.n	8000f8e <Page_1+0x192>
	 	 	    }

	 	 	    for(int i=0;i<4;i++){
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	e014      	b.n	8000fee <Page_1+0x1f2>
	 	 	   	 	 UG_DrawLine(5, 180+i, 315, 180+i, C_GREEN);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	33b4      	adds	r3, #180	; 0xb4
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b219      	sxth	r1, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	33b4      	adds	r3, #180	; 0xb4
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000fdc:	9200      	str	r2, [sp, #0]
 8000fde:	f240 123b 	movw	r2, #315	; 0x13b
 8000fe2:	2005      	movs	r0, #5
 8000fe4:	f004 f93a 	bl	800525c <UG_DrawLine>
	 	 	    for(int i=0;i<4;i++){
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	dde7      	ble.n	8000fc4 <Page_1+0x1c8>





 }
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000894 	.word	0x20000894

08001004 <Page_2>:

 void Page_2(){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af02      	add	r7, sp, #8
	 	 	 	///////////////////graph window

//	 	 	 	UG_WindowHide(&window_graph);
//		 	    UG_Update();

		 	    UG_WindowShow(&window_page_1);
 800100a:	4812      	ldr	r0, [pc, #72]	; (8001054 <Page_2+0x50>)
 800100c:	f005 faa6 	bl	800655c <UG_WindowShow>
		 		UG_Update();
 8001010:	f005 f918 	bl	8006244 <UG_Update>

	 	        UG_DrawLine(215, 0, 215, 239, C_WHITE);
 8001014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	23ef      	movs	r3, #239	; 0xef
 800101c:	22d7      	movs	r2, #215	; 0xd7
 800101e:	2100      	movs	r1, #0
 8001020:	20d7      	movs	r0, #215	; 0xd7
 8001022:	f004 f91b 	bl	800525c <UG_DrawLine>
	 	   	  	UG_DrawLine(215, 73, 319, 73, C_WHITE);
 8001026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2349      	movs	r3, #73	; 0x49
 800102e:	f240 123f 	movw	r2, #319	; 0x13f
 8001032:	2149      	movs	r1, #73	; 0x49
 8001034:	20d7      	movs	r0, #215	; 0xd7
 8001036:	f004 f911 	bl	800525c <UG_DrawLine>
	 	   	  	UG_DrawLine(215, 141, 319, 141, C_WHITE);
 800103a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	238d      	movs	r3, #141	; 0x8d
 8001042:	f240 123f 	movw	r2, #319	; 0x13f
 8001046:	218d      	movs	r1, #141	; 0x8d
 8001048:	20d7      	movs	r0, #215	; 0xd7
 800104a:	f004 f907 	bl	800525c <UG_DrawLine>
 }
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000005c 	.word	0x2000005c

08001058 <Page_3>:


 void Page_3(void){
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af02      	add	r7, sp, #8

 //				UG_WindowHide(&);
 //		 	    UG_Update();


 		 	    UG_WindowShow(&window_page_2);
 800105e:	4811      	ldr	r0, [pc, #68]	; (80010a4 <Page_3+0x4c>)
 8001060:	f005 fa7c 	bl	800655c <UG_WindowShow>
 		 	    UG_Update();
 8001064:	f005 f8ee 	bl	8006244 <UG_Update>

 		 	    UG_DrawLine(104, 23, 104, 239, C_WHITE);
 8001068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	23ef      	movs	r3, #239	; 0xef
 8001070:	2268      	movs	r2, #104	; 0x68
 8001072:	2117      	movs	r1, #23
 8001074:	2068      	movs	r0, #104	; 0x68
 8001076:	f004 f8f1 	bl	800525c <UG_DrawLine>
 		 	    UG_DrawLine(0, 95, 104, 95, C_WHITE);
 800107a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	235f      	movs	r3, #95	; 0x5f
 8001082:	2268      	movs	r2, #104	; 0x68
 8001084:	215f      	movs	r1, #95	; 0x5f
 8001086:	2000      	movs	r0, #0
 8001088:	f004 f8e8 	bl	800525c <UG_DrawLine>
 		 	    UG_DrawLine(0, 167, 104, 167, C_WHITE);
 800108c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	23a7      	movs	r3, #167	; 0xa7
 8001094:	2268      	movs	r2, #104	; 0x68
 8001096:	21a7      	movs	r1, #167	; 0xa7
 8001098:	2000      	movs	r0, #0
 800109a:	f004 f8df 	bl	800525c <UG_DrawLine>


 }
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000194 	.word	0x20000194

080010a8 <Page_logo>:



void Page_logo(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af02      	add	r7, sp, #8

//				UG_WindowHide(&);
//		 	    UG_Update();

		 	    UG_WindowShow(&LOGO);
 80010ae:	4808      	ldr	r0, [pc, #32]	; (80010d0 <Page_logo+0x28>)
 80010b0:	f005 fa54 	bl	800655c <UG_WindowShow>
		 	    UG_Update();
 80010b4:	f005 f8c6 	bl	8006244 <UG_Update>
		 	    UG_DrawLine(105, 79, 221, 79, C_AQUA);
 80010b8:	f240 531d 	movw	r3, #1309	; 0x51d
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	234f      	movs	r3, #79	; 0x4f
 80010c0:	22dd      	movs	r2, #221	; 0xdd
 80010c2:	214f      	movs	r1, #79	; 0x4f
 80010c4:	2069      	movs	r0, #105	; 0x69
 80010c6:	f004 f8c9 	bl	800525c <UG_DrawLine>
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000b84 	.word	0x20000b84

080010d4 <begin>:



void begin(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af04      	add	r7, sp, #16
	//Page 1
				UG_WindowCreate(&window_graph, obj_buff_window_graph, MAX_OBJECTS_WIN_GRAPH, window_graph_callback);
 80010da:	4bc1      	ldr	r3, [pc, #772]	; (80013e0 <begin+0x30c>)
 80010dc:	2214      	movs	r2, #20
 80010de:	49c1      	ldr	r1, [pc, #772]	; (80013e4 <begin+0x310>)
 80010e0:	48c1      	ldr	r0, [pc, #772]	; (80013e8 <begin+0x314>)
 80010e2:	f005 f9ab 	bl	800643c <UG_WindowCreate>
		 	    UG_WindowSetStyle(&window_graph, WND_STYLE_2D | WND_STYLE_HIDE_TITLE);
 80010e6:	2100      	movs	r1, #0
 80010e8:	48bf      	ldr	r0, [pc, #764]	; (80013e8 <begin+0x314>)
 80010ea:	f005 fb40 	bl	800676e <UG_WindowSetStyle>
		 	    UG_WindowSetBackColor(&window_graph, C_BLACK);
 80010ee:	2100      	movs	r1, #0
 80010f0:	48bd      	ldr	r0, [pc, #756]	; (80013e8 <begin+0x314>)
 80010f2:	f005 fa57 	bl	80065a4 <UG_WindowSetBackColor>

		 	    /////////////ok //
		 	    UG_TextboxCreate(&window_graph, &OK_graphic, TXB_ID_0, 0, 5, 70, 35);
 80010f6:	2323      	movs	r3, #35	; 0x23
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	2346      	movs	r3, #70	; 0x46
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	2305      	movs	r3, #5
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	2200      	movs	r2, #0
 8001106:	49b9      	ldr	r1, [pc, #740]	; (80013ec <begin+0x318>)
 8001108:	48b7      	ldr	r0, [pc, #732]	; (80013e8 <begin+0x314>)
 800110a:	f005 fd49 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_graph, TXB_ID_0, &FONT_12X20);
 800110e:	4ab8      	ldr	r2, [pc, #736]	; (80013f0 <begin+0x31c>)
 8001110:	2100      	movs	r1, #0
 8001112:	48b5      	ldr	r0, [pc, #724]	; (80013e8 <begin+0x314>)
 8001114:	f005 fe6c 	bl	8006df0 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_graph, TXB_ID_0, ALIGN_CENTER);
 8001118:	2212      	movs	r2, #18
 800111a:	2100      	movs	r1, #0
 800111c:	48b2      	ldr	r0, [pc, #712]	; (80013e8 <begin+0x314>)
 800111e:	f005 fe91 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_graph, TXB_ID_0, C_GREEN);
 8001122:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001126:	2100      	movs	r1, #0
 8001128:	48af      	ldr	r0, [pc, #700]	; (80013e8 <begin+0x314>)
 800112a:	f005 fe0c 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_graph, TXB_ID_0, C_BLACK);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	48ad      	ldr	r0, [pc, #692]	; (80013e8 <begin+0x314>)
 8001134:	f005 fddc 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_graph, TXB_ID_0, "OK");
 8001138:	4aae      	ldr	r2, [pc, #696]	; (80013f4 <begin+0x320>)
 800113a:	2100      	movs	r1, #0
 800113c:	48aa      	ldr	r0, [pc, #680]	; (80013e8 <begin+0x314>)
 800113e:	f005 fe2d 	bl	8006d9c <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_graph, TXB_ID_0);
 8001142:	2100      	movs	r1, #0
 8001144:	48a8      	ldr	r0, [pc, #672]	; (80013e8 <begin+0x314>)
 8001146:	f005 fdab 	bl	8006ca0 <UG_TextboxShow>

		 	    ////////////CV//
		 	    UG_TextboxCreate(&window_graph, &CV_graphic, TXB_ID_1, 75, 5, 105, 35);
 800114a:	2323      	movs	r3, #35	; 0x23
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	2369      	movs	r3, #105	; 0x69
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	2305      	movs	r3, #5
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	234b      	movs	r3, #75	; 0x4b
 8001158:	2201      	movs	r2, #1
 800115a:	49a7      	ldr	r1, [pc, #668]	; (80013f8 <begin+0x324>)
 800115c:	48a2      	ldr	r0, [pc, #648]	; (80013e8 <begin+0x314>)
 800115e:	f005 fd1f 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_graph, TXB_ID_1, &FONT_12X20);
 8001162:	4aa3      	ldr	r2, [pc, #652]	; (80013f0 <begin+0x31c>)
 8001164:	2101      	movs	r1, #1
 8001166:	48a0      	ldr	r0, [pc, #640]	; (80013e8 <begin+0x314>)
 8001168:	f005 fe42 	bl	8006df0 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_graph, TXB_ID_1, ALIGN_CENTER);
 800116c:	2212      	movs	r2, #18
 800116e:	2101      	movs	r1, #1
 8001170:	489d      	ldr	r0, [pc, #628]	; (80013e8 <begin+0x314>)
 8001172:	f005 fe67 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_graph, TXB_ID_1, C_YELLOW);
 8001176:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800117a:	2101      	movs	r1, #1
 800117c:	489a      	ldr	r0, [pc, #616]	; (80013e8 <begin+0x314>)
 800117e:	f005 fde2 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_graph, TXB_ID_1, C_BLACK);
 8001182:	2200      	movs	r2, #0
 8001184:	2101      	movs	r1, #1
 8001186:	4898      	ldr	r0, [pc, #608]	; (80013e8 <begin+0x314>)
 8001188:	f005 fdb2 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_graph, TXB_ID_1, "CV");
 800118c:	4a9b      	ldr	r2, [pc, #620]	; (80013fc <begin+0x328>)
 800118e:	2101      	movs	r1, #1
 8001190:	4895      	ldr	r0, [pc, #596]	; (80013e8 <begin+0x314>)
 8001192:	f005 fe03 	bl	8006d9c <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_graph, TXB_ID_1);
 8001196:	2101      	movs	r1, #1
 8001198:	4893      	ldr	r0, [pc, #588]	; (80013e8 <begin+0x314>)
 800119a:	f005 fd81 	bl	8006ca0 <UG_TextboxShow>
		 	    ////////////CC//
		 	    UG_TextboxCreate(&window_graph, &CC_graphic, TXB_ID_2, 110, 5, 140, 35);
 800119e:	2323      	movs	r3, #35	; 0x23
 80011a0:	9302      	str	r3, [sp, #8]
 80011a2:	238c      	movs	r3, #140	; 0x8c
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	2305      	movs	r3, #5
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	236e      	movs	r3, #110	; 0x6e
 80011ac:	2202      	movs	r2, #2
 80011ae:	4994      	ldr	r1, [pc, #592]	; (8001400 <begin+0x32c>)
 80011b0:	488d      	ldr	r0, [pc, #564]	; (80013e8 <begin+0x314>)
 80011b2:	f005 fcf5 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_graph, TXB_ID_2, &FONT_12X20);
 80011b6:	4a8e      	ldr	r2, [pc, #568]	; (80013f0 <begin+0x31c>)
 80011b8:	2102      	movs	r1, #2
 80011ba:	488b      	ldr	r0, [pc, #556]	; (80013e8 <begin+0x314>)
 80011bc:	f005 fe18 	bl	8006df0 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_graph, TXB_ID_2, ALIGN_CENTER);
 80011c0:	2212      	movs	r2, #18
 80011c2:	2102      	movs	r1, #2
 80011c4:	4888      	ldr	r0, [pc, #544]	; (80013e8 <begin+0x314>)
 80011c6:	f005 fe3d 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_graph, TXB_ID_2, 	C_DIM_GRAY);
 80011ca:	f246 322c 	movw	r2, #25388	; 0x632c
 80011ce:	2102      	movs	r1, #2
 80011d0:	4885      	ldr	r0, [pc, #532]	; (80013e8 <begin+0x314>)
 80011d2:	f005 fdb8 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_graph, TXB_ID_2, C_BLACK);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2102      	movs	r1, #2
 80011da:	4883      	ldr	r0, [pc, #524]	; (80013e8 <begin+0x314>)
 80011dc:	f005 fd88 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_graph, TXB_ID_2, "CC");
 80011e0:	4a88      	ldr	r2, [pc, #544]	; (8001404 <begin+0x330>)
 80011e2:	2102      	movs	r1, #2
 80011e4:	4880      	ldr	r0, [pc, #512]	; (80013e8 <begin+0x314>)
 80011e6:	f005 fdd9 	bl	8006d9c <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_graph, TXB_ID_2);
 80011ea:	2102      	movs	r1, #2
 80011ec:	487e      	ldr	r0, [pc, #504]	; (80013e8 <begin+0x314>)
 80011ee:	f005 fd57 	bl	8006ca0 <UG_TextboxShow>



		 	    UG_ImageCreate(&window_graph, &image_1, IMG_ID_1,145, 8, 160,32);
 80011f2:	2320      	movs	r3, #32
 80011f4:	9302      	str	r3, [sp, #8]
 80011f6:	23a0      	movs	r3, #160	; 0xa0
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	2308      	movs	r3, #8
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2391      	movs	r3, #145	; 0x91
 8001200:	2201      	movs	r2, #1
 8001202:	4981      	ldr	r1, [pc, #516]	; (8001408 <begin+0x334>)
 8001204:	4878      	ldr	r0, [pc, #480]	; (80013e8 <begin+0x314>)
 8001206:	f005 ff1b 	bl	8007040 <UG_ImageCreate>
		 	   	UG_ImageSetBMP(&window_graph, IMG_ID_1, &logo_FNIRSI);
 800120a:	4a80      	ldr	r2, [pc, #512]	; (800140c <begin+0x338>)
 800120c:	2101      	movs	r1, #1
 800120e:	4876      	ldr	r0, [pc, #472]	; (80013e8 <begin+0x314>)
 8001210:	f005 ff74 	bl	80070fc <UG_ImageSetBMP>

		 	    UG_TextboxCreate(&window_graph, &current_V_graphic_page_1, TXB_ID_3, 1, 40, 73,60);
 8001214:	233c      	movs	r3, #60	; 0x3c
 8001216:	9302      	str	r3, [sp, #8]
 8001218:	2349      	movs	r3, #73	; 0x49
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	2328      	movs	r3, #40	; 0x28
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	497a      	ldr	r1, [pc, #488]	; (8001410 <begin+0x33c>)
 8001226:	4870      	ldr	r0, [pc, #448]	; (80013e8 <begin+0x314>)
 8001228:	f005 fcba 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_graph, TXB_ID_3, &FONT_12X20);
 800122c:	4a70      	ldr	r2, [pc, #448]	; (80013f0 <begin+0x31c>)
 800122e:	2103      	movs	r1, #3
 8001230:	486d      	ldr	r0, [pc, #436]	; (80013e8 <begin+0x314>)
 8001232:	f005 fddd 	bl	8006df0 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_graph, TXB_ID_3, ALIGN_CENTER);
 8001236:	2212      	movs	r2, #18
 8001238:	2103      	movs	r1, #3
 800123a:	486b      	ldr	r0, [pc, #428]	; (80013e8 <begin+0x314>)
 800123c:	f005 fe02 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_graph, TXB_ID_3, 	C_YELLOW);
 8001240:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001244:	2103      	movs	r1, #3
 8001246:	4868      	ldr	r0, [pc, #416]	; (80013e8 <begin+0x314>)
 8001248:	f005 fd7d 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_graph, TXB_ID_3, C_BLACK);
 800124c:	2200      	movs	r2, #0
 800124e:	2103      	movs	r1, #3
 8001250:	4865      	ldr	r0, [pc, #404]	; (80013e8 <begin+0x314>)
 8001252:	f005 fd4d 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_graph, TXB_ID_3, "12.10V");
 8001256:	4a6f      	ldr	r2, [pc, #444]	; (8001414 <begin+0x340>)
 8001258:	2103      	movs	r1, #3
 800125a:	4863      	ldr	r0, [pc, #396]	; (80013e8 <begin+0x314>)
 800125c:	f005 fd9e 	bl	8006d9c <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_graph, TXB_ID_3);
 8001260:	2103      	movs	r1, #3
 8001262:	4861      	ldr	r0, [pc, #388]	; (80013e8 <begin+0x314>)
 8001264:	f005 fd1c 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_graph, &current_I_graphic_page_1, TXB_ID_10, 1, 63, 73,83);
 8001268:	2353      	movs	r3, #83	; 0x53
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	2349      	movs	r3, #73	; 0x49
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	233f      	movs	r3, #63	; 0x3f
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	220a      	movs	r2, #10
 8001278:	4967      	ldr	r1, [pc, #412]	; (8001418 <begin+0x344>)
 800127a:	485b      	ldr	r0, [pc, #364]	; (80013e8 <begin+0x314>)
 800127c:	f005 fc90 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_graph, TXB_ID_4, &FONT_12X20);
 8001280:	4a5b      	ldr	r2, [pc, #364]	; (80013f0 <begin+0x31c>)
 8001282:	2104      	movs	r1, #4
 8001284:	4858      	ldr	r0, [pc, #352]	; (80013e8 <begin+0x314>)
 8001286:	f005 fdb3 	bl	8006df0 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_graph, TXB_ID_4, ALIGN_CENTER);
 800128a:	2212      	movs	r2, #18
 800128c:	2104      	movs	r1, #4
 800128e:	4856      	ldr	r0, [pc, #344]	; (80013e8 <begin+0x314>)
 8001290:	f005 fdd8 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_graph, TXB_ID_4, 	C_GREEN);
 8001294:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001298:	2104      	movs	r1, #4
 800129a:	4853      	ldr	r0, [pc, #332]	; (80013e8 <begin+0x314>)
 800129c:	f005 fd53 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_graph, TXB_ID_4, C_BLACK);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2104      	movs	r1, #4
 80012a4:	4850      	ldr	r0, [pc, #320]	; (80013e8 <begin+0x314>)
 80012a6:	f005 fd23 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_graph, TXB_ID_4, "0.000A");
 80012aa:	4a5c      	ldr	r2, [pc, #368]	; (800141c <begin+0x348>)
 80012ac:	2104      	movs	r1, #4
 80012ae:	484e      	ldr	r0, [pc, #312]	; (80013e8 <begin+0x314>)
 80012b0:	f005 fd74 	bl	8006d9c <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_graph, TXB_ID_4);
 80012b4:	2104      	movs	r1, #4
 80012b6:	484c      	ldr	r0, [pc, #304]	; (80013e8 <begin+0x314>)
 80012b8:	f005 fcf2 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_graph, &set_V_graphic_page_1, TXB_ID_5, 0, 218, 76, 238);
 80012bc:	23ee      	movs	r3, #238	; 0xee
 80012be:	9302      	str	r3, [sp, #8]
 80012c0:	234c      	movs	r3, #76	; 0x4c
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	23da      	movs	r3, #218	; 0xda
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2300      	movs	r3, #0
 80012ca:	2205      	movs	r2, #5
 80012cc:	4954      	ldr	r1, [pc, #336]	; (8001420 <begin+0x34c>)
 80012ce:	4846      	ldr	r0, [pc, #280]	; (80013e8 <begin+0x314>)
 80012d0:	f005 fc66 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_graph, TXB_ID_5, &FONT_12X20);
 80012d4:	4a46      	ldr	r2, [pc, #280]	; (80013f0 <begin+0x31c>)
 80012d6:	2105      	movs	r1, #5
 80012d8:	4843      	ldr	r0, [pc, #268]	; (80013e8 <begin+0x314>)
 80012da:	f005 fd89 	bl	8006df0 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_graph, TXB_ID_5, ALIGN_CENTER);
 80012de:	2212      	movs	r2, #18
 80012e0:	2105      	movs	r1, #5
 80012e2:	4841      	ldr	r0, [pc, #260]	; (80013e8 <begin+0x314>)
 80012e4:	f005 fdae 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_graph, TXB_ID_5, 	C_BLACK);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2105      	movs	r1, #5
 80012ec:	483e      	ldr	r0, [pc, #248]	; (80013e8 <begin+0x314>)
 80012ee:	f005 fd2a 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_graph, TXB_ID_5, C_WHITE);
 80012f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f6:	2105      	movs	r1, #5
 80012f8:	483b      	ldr	r0, [pc, #236]	; (80013e8 <begin+0x314>)
 80012fa:	f005 fcf9 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_graph, TXB_ID_5, "SET V:");
 80012fe:	4a49      	ldr	r2, [pc, #292]	; (8001424 <begin+0x350>)
 8001300:	2105      	movs	r1, #5
 8001302:	4839      	ldr	r0, [pc, #228]	; (80013e8 <begin+0x314>)
 8001304:	f005 fd4a 	bl	8006d9c <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_graph, TXB_ID_5);
 8001308:	2105      	movs	r1, #5
 800130a:	4837      	ldr	r0, [pc, #220]	; (80013e8 <begin+0x314>)
 800130c:	f005 fcc8 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_graph, &set_V_graphic_value_page_1, TXB_ID_6, 80, 218, 156, 238);
 8001310:	23ee      	movs	r3, #238	; 0xee
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	239c      	movs	r3, #156	; 0x9c
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	23da      	movs	r3, #218	; 0xda
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2350      	movs	r3, #80	; 0x50
 800131e:	2206      	movs	r2, #6
 8001320:	4941      	ldr	r1, [pc, #260]	; (8001428 <begin+0x354>)
 8001322:	4831      	ldr	r0, [pc, #196]	; (80013e8 <begin+0x314>)
 8001324:	f005 fc3c 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_graph, TXB_ID_6, &FONT_12X20);
 8001328:	4a31      	ldr	r2, [pc, #196]	; (80013f0 <begin+0x31c>)
 800132a:	2106      	movs	r1, #6
 800132c:	482e      	ldr	r0, [pc, #184]	; (80013e8 <begin+0x314>)
 800132e:	f005 fd5f 	bl	8006df0 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_graph, TXB_ID_6, ALIGN_CENTER);
 8001332:	2212      	movs	r2, #18
 8001334:	2106      	movs	r1, #6
 8001336:	482c      	ldr	r0, [pc, #176]	; (80013e8 <begin+0x314>)
 8001338:	f005 fd84 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_graph, TXB_ID_6, 	C_YELLOW);
 800133c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001340:	2106      	movs	r1, #6
 8001342:	4829      	ldr	r0, [pc, #164]	; (80013e8 <begin+0x314>)
 8001344:	f005 fcff 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_graph, TXB_ID_6, C_BLACK);
 8001348:	2200      	movs	r2, #0
 800134a:	2106      	movs	r1, #6
 800134c:	4826      	ldr	r0, [pc, #152]	; (80013e8 <begin+0x314>)
 800134e:	f005 fccf 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_graph, TXB_ID_6, "00.00V");
 8001352:	4a36      	ldr	r2, [pc, #216]	; (800142c <begin+0x358>)
 8001354:	2106      	movs	r1, #6
 8001356:	4824      	ldr	r0, [pc, #144]	; (80013e8 <begin+0x314>)
 8001358:	f005 fd20 	bl	8006d9c <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_graph, TXB_ID_6);
 800135c:	2106      	movs	r1, #6
 800135e:	4822      	ldr	r0, [pc, #136]	; (80013e8 <begin+0x314>)
 8001360:	f005 fc9e 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_graph, &set_I_graphic_page_1, TXB_ID_7, 162, 218, 238, 238);
 8001364:	23ee      	movs	r3, #238	; 0xee
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	23ee      	movs	r3, #238	; 0xee
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	23da      	movs	r3, #218	; 0xda
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	23a2      	movs	r3, #162	; 0xa2
 8001372:	2207      	movs	r2, #7
 8001374:	492e      	ldr	r1, [pc, #184]	; (8001430 <begin+0x35c>)
 8001376:	481c      	ldr	r0, [pc, #112]	; (80013e8 <begin+0x314>)
 8001378:	f005 fc12 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_graph, TXB_ID_7, &FONT_12X20);
 800137c:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <begin+0x31c>)
 800137e:	2107      	movs	r1, #7
 8001380:	4819      	ldr	r0, [pc, #100]	; (80013e8 <begin+0x314>)
 8001382:	f005 fd35 	bl	8006df0 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_graph, TXB_ID_7, ALIGN_CENTER);
 8001386:	2212      	movs	r2, #18
 8001388:	2107      	movs	r1, #7
 800138a:	4817      	ldr	r0, [pc, #92]	; (80013e8 <begin+0x314>)
 800138c:	f005 fd5a 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_graph, TXB_ID_7, 	C_BLACK);
 8001390:	2200      	movs	r2, #0
 8001392:	2107      	movs	r1, #7
 8001394:	4814      	ldr	r0, [pc, #80]	; (80013e8 <begin+0x314>)
 8001396:	f005 fcd6 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_graph, TXB_ID_7, C_WHITE);
 800139a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800139e:	2107      	movs	r1, #7
 80013a0:	4811      	ldr	r0, [pc, #68]	; (80013e8 <begin+0x314>)
 80013a2:	f005 fca5 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_graph, TXB_ID_7, "SET I:");
 80013a6:	4a23      	ldr	r2, [pc, #140]	; (8001434 <begin+0x360>)
 80013a8:	2107      	movs	r1, #7
 80013aa:	480f      	ldr	r0, [pc, #60]	; (80013e8 <begin+0x314>)
 80013ac:	f005 fcf6 	bl	8006d9c <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_graph, TXB_ID_7);
 80013b0:	2107      	movs	r1, #7
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <begin+0x314>)
 80013b4:	f005 fc74 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_graph, &set_I_graphic_value_page_1, TXB_ID_8, 242, 218, 318, 238);
 80013b8:	23ee      	movs	r3, #238	; 0xee
 80013ba:	9302      	str	r3, [sp, #8]
 80013bc:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	23da      	movs	r3, #218	; 0xda
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	23f2      	movs	r3, #242	; 0xf2
 80013c8:	2208      	movs	r2, #8
 80013ca:	491b      	ldr	r1, [pc, #108]	; (8001438 <begin+0x364>)
 80013cc:	4806      	ldr	r0, [pc, #24]	; (80013e8 <begin+0x314>)
 80013ce:	f005 fbe7 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_graph, TXB_ID_8, &FONT_12X20);
 80013d2:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <begin+0x31c>)
 80013d4:	2108      	movs	r1, #8
 80013d6:	4804      	ldr	r0, [pc, #16]	; (80013e8 <begin+0x314>)
 80013d8:	f005 fd0a 	bl	8006df0 <UG_TextboxSetFont>
 80013dc:	e02e      	b.n	800143c <begin+0x368>
 80013de:	bf00      	nop
 80013e0:	0800208b 	.word	0x0800208b
 80013e4:	20000904 	.word	0x20000904
 80013e8:	20000894 	.word	0x20000894
 80013ec:	200008c8 	.word	0x200008c8
 80013f0:	0800e458 	.word	0x0800e458
 80013f4:	080079e8 	.word	0x080079e8
 80013f8:	200008dc 	.word	0x200008dc
 80013fc:	080079ec 	.word	0x080079ec
 8001400:	200008f0 	.word	0x200008f0
 8001404:	080079f0 	.word	0x080079f0
 8001408:	20000e38 	.word	0x20000e38
 800140c:	08007b08 	.word	0x08007b08
 8001410:	20000090 	.word	0x20000090
 8001414:	080079f4 	.word	0x080079f4
 8001418:	200000e0 	.word	0x200000e0
 800141c:	080079fc 	.word	0x080079fc
 8001420:	20000574 	.word	0x20000574
 8001424:	08007a04 	.word	0x08007a04
 8001428:	200005c4 	.word	0x200005c4
 800142c:	08007a0c 	.word	0x08007a0c
 8001430:	2000059c 	.word	0x2000059c
 8001434:	08007a14 	.word	0x08007a14
 8001438:	200005ec 	.word	0x200005ec
		 	    UG_TextboxSetAlignment(&window_graph, TXB_ID_8, ALIGN_CENTER);
 800143c:	2212      	movs	r2, #18
 800143e:	2108      	movs	r1, #8
 8001440:	48c2      	ldr	r0, [pc, #776]	; (800174c <begin+0x678>)
 8001442:	f005 fcff 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_graph, TXB_ID_8, 	C_YELLOW);
 8001446:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800144a:	2108      	movs	r1, #8
 800144c:	48bf      	ldr	r0, [pc, #764]	; (800174c <begin+0x678>)
 800144e:	f005 fc7a 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_graph, TXB_ID_8, C_BLACK);
 8001452:	2200      	movs	r2, #0
 8001454:	2108      	movs	r1, #8
 8001456:	48bd      	ldr	r0, [pc, #756]	; (800174c <begin+0x678>)
 8001458:	f005 fc4a 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_graph, TXB_ID_8, "0.000A");
 800145c:	4abc      	ldr	r2, [pc, #752]	; (8001750 <begin+0x67c>)
 800145e:	2108      	movs	r1, #8
 8001460:	48ba      	ldr	r0, [pc, #744]	; (800174c <begin+0x678>)
 8001462:	f005 fc9b 	bl	8006d9c <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_graph, TXB_ID_8);
 8001466:	2108      	movs	r1, #8
 8001468:	48b8      	ldr	r0, [pc, #736]	; (800174c <begin+0x678>)
 800146a:	f005 fc19 	bl	8006ca0 <UG_TextboxShow>
		 	   //
		 	   //	 	   	    UG_SetBackcolor(C_GREEN);
		 	   //	 	   	    UG_SetForecolor(C_BLACK);
		 	   //	 	   	    UG_PutString(242 , 219 , "00.00A");
	//Page 2
	 	 	 	UG_WindowCreate(&window_page_1, obj_buff_window_page_1, MAX_OBJECTS_WIN_GRAPH, window_page_1_callback);
 800146e:	4bb9      	ldr	r3, [pc, #740]	; (8001754 <begin+0x680>)
 8001470:	2214      	movs	r2, #20
 8001472:	49b9      	ldr	r1, [pc, #740]	; (8001758 <begin+0x684>)
 8001474:	48b9      	ldr	r0, [pc, #740]	; (800175c <begin+0x688>)
 8001476:	f004 ffe1 	bl	800643c <UG_WindowCreate>
		 	    UG_WindowSetStyle(&window_page_1, WND_STYLE_2D | WND_STYLE_HIDE_TITLE);
 800147a:	2100      	movs	r1, #0
 800147c:	48b7      	ldr	r0, [pc, #732]	; (800175c <begin+0x688>)
 800147e:	f005 f976 	bl	800676e <UG_WindowSetStyle>
		 	    UG_WindowSetBackColor(&window_page_1, C_BLACK);
 8001482:	2100      	movs	r1, #0
 8001484:	48b5      	ldr	r0, [pc, #724]	; (800175c <begin+0x688>)
 8001486:	f005 f88d 	bl	80065a4 <UG_WindowSetBackColor>

		 	    /////////////Current Voltage //
		   	    UG_TextboxCreate(&window_page_1, &current_CV_graphic, TXB_ID_3, 0, 10, 210, 26);
 800148a:	231a      	movs	r3, #26
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	23d2      	movs	r3, #210	; 0xd2
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	230a      	movs	r3, #10
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2300      	movs	r3, #0
 8001498:	2203      	movs	r2, #3
 800149a:	49b1      	ldr	r1, [pc, #708]	; (8001760 <begin+0x68c>)
 800149c:	48af      	ldr	r0, [pc, #700]	; (800175c <begin+0x688>)
 800149e:	f005 fb7f 	bl	8006ba0 <UG_TextboxCreate>
		  	    UG_TextboxSetFont(&window_page_1, TXB_ID_3, &FONT_10X16);
 80014a2:	4ab0      	ldr	r2, [pc, #704]	; (8001764 <begin+0x690>)
 80014a4:	2103      	movs	r1, #3
 80014a6:	48ad      	ldr	r0, [pc, #692]	; (800175c <begin+0x688>)
 80014a8:	f005 fca2 	bl	8006df0 <UG_TextboxSetFont>
		 	   	UG_TextboxSetAlignment(&window_page_1, TXB_ID_3, ALIGN_CENTER_LEFT);
 80014ac:	2211      	movs	r2, #17
 80014ae:	2103      	movs	r1, #3
 80014b0:	48aa      	ldr	r0, [pc, #680]	; (800175c <begin+0x688>)
 80014b2:	f005 fcc7 	bl	8006e44 <UG_TextboxSetAlignment>
		 	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_3, C_YELLOW);
 80014b6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80014ba:	2103      	movs	r1, #3
 80014bc:	48a7      	ldr	r0, [pc, #668]	; (800175c <begin+0x688>)
 80014be:	f005 fc42 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_3, C_BLACK);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2103      	movs	r1, #3
 80014c6:	48a5      	ldr	r0, [pc, #660]	; (800175c <begin+0x688>)
 80014c8:	f005 fc12 	bl	8006cf0 <UG_TextboxSetForeColor>
		  	    UG_TextboxSetText(&window_page_1, TXB_ID_3, "VOLTS");
 80014cc:	4aa6      	ldr	r2, [pc, #664]	; (8001768 <begin+0x694>)
 80014ce:	2103      	movs	r1, #3
 80014d0:	48a2      	ldr	r0, [pc, #648]	; (800175c <begin+0x688>)
 80014d2:	f005 fc63 	bl	8006d9c <UG_TextboxSetText>
		 	   	UG_TextboxShow(&window_page_1, TXB_ID_3);
 80014d6:	2103      	movs	r1, #3
 80014d8:	48a0      	ldr	r0, [pc, #640]	; (800175c <begin+0x688>)
 80014da:	f005 fbe1 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &current_V_graphic_page_2, TXB_ID_4, 0, 31, 181, 71);
 80014de:	2347      	movs	r3, #71	; 0x47
 80014e0:	9302      	str	r3, [sp, #8]
 80014e2:	23b5      	movs	r3, #181	; 0xb5
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	231f      	movs	r3, #31
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2300      	movs	r3, #0
 80014ec:	2204      	movs	r2, #4
 80014ee:	499f      	ldr	r1, [pc, #636]	; (800176c <begin+0x698>)
 80014f0:	489a      	ldr	r0, [pc, #616]	; (800175c <begin+0x688>)
 80014f2:	f005 fb55 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_4, &FONT_24X40);
 80014f6:	4a9e      	ldr	r2, [pc, #632]	; (8001770 <begin+0x69c>)
 80014f8:	2104      	movs	r1, #4
 80014fa:	4898      	ldr	r0, [pc, #608]	; (800175c <begin+0x688>)
 80014fc:	f005 fc78 	bl	8006df0 <UG_TextboxSetFont>
	  	 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_4, ALIGN_CENTER);
 8001500:	2212      	movs	r2, #18
 8001502:	2104      	movs	r1, #4
 8001504:	4895      	ldr	r0, [pc, #596]	; (800175c <begin+0x688>)
 8001506:	f005 fc9d 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_4, C_DIM_GRAY);
 800150a:	f246 322c 	movw	r2, #25388	; 0x632c
 800150e:	2104      	movs	r1, #4
 8001510:	4892      	ldr	r0, [pc, #584]	; (800175c <begin+0x688>)
 8001512:	f005 fc18 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_4, C_WHITE);
 8001516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800151a:	2104      	movs	r1, #4
 800151c:	488f      	ldr	r0, [pc, #572]	; (800175c <begin+0x688>)
 800151e:	f005 fbe7 	bl	8006cf0 <UG_TextboxSetForeColor>
		  	    UG_TextboxSetText(&window_page_1, TXB_ID_4, "00.00");
 8001522:	4a94      	ldr	r2, [pc, #592]	; (8001774 <begin+0x6a0>)
 8001524:	2104      	movs	r1, #4
 8001526:	488d      	ldr	r0, [pc, #564]	; (800175c <begin+0x688>)
 8001528:	f005 fc38 	bl	8006d9c <UG_TextboxSetText>
		  	    UG_TextboxShow(&window_page_1, TXB_ID_4);
 800152c:	2104      	movs	r1, #4
 800152e:	488b      	ldr	r0, [pc, #556]	; (800175c <begin+0x688>)
 8001530:	f005 fbb6 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &current_V2_graphic, TXB_ID_5, 186, 27, 210, 71);
 8001534:	2347      	movs	r3, #71	; 0x47
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	23d2      	movs	r3, #210	; 0xd2
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	231b      	movs	r3, #27
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	23ba      	movs	r3, #186	; 0xba
 8001542:	2205      	movs	r2, #5
 8001544:	498c      	ldr	r1, [pc, #560]	; (8001778 <begin+0x6a4>)
 8001546:	4885      	ldr	r0, [pc, #532]	; (800175c <begin+0x688>)
 8001548:	f005 fb2a 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_5, &FONT_24X40);
 800154c:	4a88      	ldr	r2, [pc, #544]	; (8001770 <begin+0x69c>)
 800154e:	2105      	movs	r1, #5
 8001550:	4882      	ldr	r0, [pc, #520]	; (800175c <begin+0x688>)
 8001552:	f005 fc4d 	bl	8006df0 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_5, ALIGN_CENTER);
 8001556:	2212      	movs	r2, #18
 8001558:	2105      	movs	r1, #5
 800155a:	4880      	ldr	r0, [pc, #512]	; (800175c <begin+0x688>)
 800155c:	f005 fc72 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_5, C_YELLOW);
 8001560:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001564:	2105      	movs	r1, #5
 8001566:	487d      	ldr	r0, [pc, #500]	; (800175c <begin+0x688>)
 8001568:	f005 fbed 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_5, C_BLACK);
 800156c:	2200      	movs	r2, #0
 800156e:	2105      	movs	r1, #5
 8001570:	487a      	ldr	r0, [pc, #488]	; (800175c <begin+0x688>)
 8001572:	f005 fbbd 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_5, "V");
 8001576:	4a81      	ldr	r2, [pc, #516]	; (800177c <begin+0x6a8>)
 8001578:	2105      	movs	r1, #5
 800157a:	4878      	ldr	r0, [pc, #480]	; (800175c <begin+0x688>)
 800157c:	f005 fc0e 	bl	8006d9c <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_5);
 8001580:	2105      	movs	r1, #5
 8001582:	4876      	ldr	r0, [pc, #472]	; (800175c <begin+0x688>)
 8001584:	f005 fb8c 	bl	8006ca0 <UG_TextboxShow>

		 	    ////////////Current Current//
		   	    UG_TextboxCreate(&window_page_1, &current_CC_graphic, TXB_ID_6, 0, 76, 210, 92);
 8001588:	235c      	movs	r3, #92	; 0x5c
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	23d2      	movs	r3, #210	; 0xd2
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	234c      	movs	r3, #76	; 0x4c
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2300      	movs	r3, #0
 8001596:	2206      	movs	r2, #6
 8001598:	4979      	ldr	r1, [pc, #484]	; (8001780 <begin+0x6ac>)
 800159a:	4870      	ldr	r0, [pc, #448]	; (800175c <begin+0x688>)
 800159c:	f005 fb00 	bl	8006ba0 <UG_TextboxCreate>
		  	    UG_TextboxSetFont(&window_page_1, TXB_ID_6, &FONT_10X16);
 80015a0:	4a70      	ldr	r2, [pc, #448]	; (8001764 <begin+0x690>)
 80015a2:	2106      	movs	r1, #6
 80015a4:	486d      	ldr	r0, [pc, #436]	; (800175c <begin+0x688>)
 80015a6:	f005 fc23 	bl	8006df0 <UG_TextboxSetFont>
		 	   	UG_TextboxSetAlignment(&window_page_1, TXB_ID_6, ALIGN_CENTER_LEFT);
 80015aa:	2211      	movs	r2, #17
 80015ac:	2106      	movs	r1, #6
 80015ae:	486b      	ldr	r0, [pc, #428]	; (800175c <begin+0x688>)
 80015b0:	f005 fc48 	bl	8006e44 <UG_TextboxSetAlignment>
		 	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_6, C_GREEN);
 80015b4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80015b8:	2106      	movs	r1, #6
 80015ba:	4868      	ldr	r0, [pc, #416]	; (800175c <begin+0x688>)
 80015bc:	f005 fbc3 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_6, C_BLACK);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2106      	movs	r1, #6
 80015c4:	4865      	ldr	r0, [pc, #404]	; (800175c <begin+0x688>)
 80015c6:	f005 fb93 	bl	8006cf0 <UG_TextboxSetForeColor>
		  	    UG_TextboxSetText(&window_page_1, TXB_ID_6, "AMPS");
 80015ca:	4a6e      	ldr	r2, [pc, #440]	; (8001784 <begin+0x6b0>)
 80015cc:	2106      	movs	r1, #6
 80015ce:	4863      	ldr	r0, [pc, #396]	; (800175c <begin+0x688>)
 80015d0:	f005 fbe4 	bl	8006d9c <UG_TextboxSetText>
		 	   	UG_TextboxShow(&window_page_1, TXB_ID_6);
 80015d4:	2106      	movs	r1, #6
 80015d6:	4861      	ldr	r0, [pc, #388]	; (800175c <begin+0x688>)
 80015d8:	f005 fb62 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &current_I_graphic_page_2, TXB_ID_7, 0, 97, 181, 137);
 80015dc:	2389      	movs	r3, #137	; 0x89
 80015de:	9302      	str	r3, [sp, #8]
 80015e0:	23b5      	movs	r3, #181	; 0xb5
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	2361      	movs	r3, #97	; 0x61
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2300      	movs	r3, #0
 80015ea:	2207      	movs	r2, #7
 80015ec:	4966      	ldr	r1, [pc, #408]	; (8001788 <begin+0x6b4>)
 80015ee:	485b      	ldr	r0, [pc, #364]	; (800175c <begin+0x688>)
 80015f0:	f005 fad6 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_7, &FONT_24X40);
 80015f4:	4a5e      	ldr	r2, [pc, #376]	; (8001770 <begin+0x69c>)
 80015f6:	2107      	movs	r1, #7
 80015f8:	4858      	ldr	r0, [pc, #352]	; (800175c <begin+0x688>)
 80015fa:	f005 fbf9 	bl	8006df0 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_7, ALIGN_CENTER);
 80015fe:	2212      	movs	r2, #18
 8001600:	2107      	movs	r1, #7
 8001602:	4856      	ldr	r0, [pc, #344]	; (800175c <begin+0x688>)
 8001604:	f005 fc1e 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_7, C_DIM_GRAY);
 8001608:	f246 322c 	movw	r2, #25388	; 0x632c
 800160c:	2107      	movs	r1, #7
 800160e:	4853      	ldr	r0, [pc, #332]	; (800175c <begin+0x688>)
 8001610:	f005 fb99 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_7, C_WHITE);
 8001614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001618:	2107      	movs	r1, #7
 800161a:	4850      	ldr	r0, [pc, #320]	; (800175c <begin+0x688>)
 800161c:	f005 fb68 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_7, "0.000");
 8001620:	4a5a      	ldr	r2, [pc, #360]	; (800178c <begin+0x6b8>)
 8001622:	2107      	movs	r1, #7
 8001624:	484d      	ldr	r0, [pc, #308]	; (800175c <begin+0x688>)
 8001626:	f005 fbb9 	bl	8006d9c <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_7);
 800162a:	2107      	movs	r1, #7
 800162c:	484b      	ldr	r0, [pc, #300]	; (800175c <begin+0x688>)
 800162e:	f005 fb37 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &current_I2_graphic, TXB_ID_8, 186, 93, 210, 137);
 8001632:	2389      	movs	r3, #137	; 0x89
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	23d2      	movs	r3, #210	; 0xd2
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	235d      	movs	r3, #93	; 0x5d
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	23ba      	movs	r3, #186	; 0xba
 8001640:	2208      	movs	r2, #8
 8001642:	4953      	ldr	r1, [pc, #332]	; (8001790 <begin+0x6bc>)
 8001644:	4845      	ldr	r0, [pc, #276]	; (800175c <begin+0x688>)
 8001646:	f005 faab 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_8, &FONT_24X40);
 800164a:	4a49      	ldr	r2, [pc, #292]	; (8001770 <begin+0x69c>)
 800164c:	2108      	movs	r1, #8
 800164e:	4843      	ldr	r0, [pc, #268]	; (800175c <begin+0x688>)
 8001650:	f005 fbce 	bl	8006df0 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_8, ALIGN_CENTER);
 8001654:	2212      	movs	r2, #18
 8001656:	2108      	movs	r1, #8
 8001658:	4840      	ldr	r0, [pc, #256]	; (800175c <begin+0x688>)
 800165a:	f005 fbf3 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_8, C_GREEN);
 800165e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001662:	2108      	movs	r1, #8
 8001664:	483d      	ldr	r0, [pc, #244]	; (800175c <begin+0x688>)
 8001666:	f005 fb6e 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_8, C_BLACK);
 800166a:	2200      	movs	r2, #0
 800166c:	2108      	movs	r1, #8
 800166e:	483b      	ldr	r0, [pc, #236]	; (800175c <begin+0x688>)
 8001670:	f005 fb3e 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_8, "I");
 8001674:	4a47      	ldr	r2, [pc, #284]	; (8001794 <begin+0x6c0>)
 8001676:	2108      	movs	r1, #8
 8001678:	4838      	ldr	r0, [pc, #224]	; (800175c <begin+0x688>)
 800167a:	f005 fb8f 	bl	8006d9c <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_8);
 800167e:	2108      	movs	r1, #8
 8001680:	4836      	ldr	r0, [pc, #216]	; (800175c <begin+0x688>)
 8001682:	f005 fb0d 	bl	8006ca0 <UG_TextboxShow>

		 	    ////////////power//
		   	    UG_TextboxCreate(&window_page_1, &current_CW_graphic, TXB_ID_9, 0, 142, 210, 158);
 8001686:	239e      	movs	r3, #158	; 0x9e
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	23d2      	movs	r3, #210	; 0xd2
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	238e      	movs	r3, #142	; 0x8e
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2300      	movs	r3, #0
 8001694:	2209      	movs	r2, #9
 8001696:	4940      	ldr	r1, [pc, #256]	; (8001798 <begin+0x6c4>)
 8001698:	4830      	ldr	r0, [pc, #192]	; (800175c <begin+0x688>)
 800169a:	f005 fa81 	bl	8006ba0 <UG_TextboxCreate>
		  	    UG_TextboxSetFont(&window_page_1, TXB_ID_9, &FONT_10X16);
 800169e:	4a31      	ldr	r2, [pc, #196]	; (8001764 <begin+0x690>)
 80016a0:	2109      	movs	r1, #9
 80016a2:	482e      	ldr	r0, [pc, #184]	; (800175c <begin+0x688>)
 80016a4:	f005 fba4 	bl	8006df0 <UG_TextboxSetFont>
		 	   	UG_TextboxSetAlignment(&window_page_1, TXB_ID_9, ALIGN_CENTER_LEFT);
 80016a8:	2211      	movs	r2, #17
 80016aa:	2109      	movs	r1, #9
 80016ac:	482b      	ldr	r0, [pc, #172]	; (800175c <begin+0x688>)
 80016ae:	f005 fbc9 	bl	8006e44 <UG_TextboxSetAlignment>
		 	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_9, C_VIOLET);
 80016b2:	f24e 421c 	movw	r2, #58396	; 0xe41c
 80016b6:	2109      	movs	r1, #9
 80016b8:	4828      	ldr	r0, [pc, #160]	; (800175c <begin+0x688>)
 80016ba:	f005 fb44 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_9, C_BLACK);
 80016be:	2200      	movs	r2, #0
 80016c0:	2109      	movs	r1, #9
 80016c2:	4826      	ldr	r0, [pc, #152]	; (800175c <begin+0x688>)
 80016c4:	f005 fb14 	bl	8006cf0 <UG_TextboxSetForeColor>
		  	    UG_TextboxSetText(&window_page_1, TXB_ID_9, "WATTS");
 80016c8:	4a34      	ldr	r2, [pc, #208]	; (800179c <begin+0x6c8>)
 80016ca:	2109      	movs	r1, #9
 80016cc:	4823      	ldr	r0, [pc, #140]	; (800175c <begin+0x688>)
 80016ce:	f005 fb65 	bl	8006d9c <UG_TextboxSetText>
		 	   	UG_TextboxShow(&window_page_1, TXB_ID_9);
 80016d2:	2109      	movs	r1, #9
 80016d4:	4821      	ldr	r0, [pc, #132]	; (800175c <begin+0x688>)
 80016d6:	f005 fae3 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &current_W_graphic, TXB_ID_10, 0, 163, 181, 203);
 80016da:	23cb      	movs	r3, #203	; 0xcb
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	23b5      	movs	r3, #181	; 0xb5
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	23a3      	movs	r3, #163	; 0xa3
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2300      	movs	r3, #0
 80016e8:	220a      	movs	r2, #10
 80016ea:	492d      	ldr	r1, [pc, #180]	; (80017a0 <begin+0x6cc>)
 80016ec:	481b      	ldr	r0, [pc, #108]	; (800175c <begin+0x688>)
 80016ee:	f005 fa57 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_10, &FONT_24X40);
 80016f2:	4a1f      	ldr	r2, [pc, #124]	; (8001770 <begin+0x69c>)
 80016f4:	210a      	movs	r1, #10
 80016f6:	4819      	ldr	r0, [pc, #100]	; (800175c <begin+0x688>)
 80016f8:	f005 fb7a 	bl	8006df0 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_10, ALIGN_CENTER);
 80016fc:	2212      	movs	r2, #18
 80016fe:	210a      	movs	r1, #10
 8001700:	4816      	ldr	r0, [pc, #88]	; (800175c <begin+0x688>)
 8001702:	f005 fb9f 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_10, C_DIM_GRAY);
 8001706:	f246 322c 	movw	r2, #25388	; 0x632c
 800170a:	210a      	movs	r1, #10
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <begin+0x688>)
 800170e:	f005 fb1a 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_10, C_WHITE);
 8001712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001716:	210a      	movs	r1, #10
 8001718:	4810      	ldr	r0, [pc, #64]	; (800175c <begin+0x688>)
 800171a:	f005 fae9 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_10, "200.0");
 800171e:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <begin+0x6d0>)
 8001720:	210a      	movs	r1, #10
 8001722:	480e      	ldr	r0, [pc, #56]	; (800175c <begin+0x688>)
 8001724:	f005 fb3a 	bl	8006d9c <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_10);
 8001728:	210a      	movs	r1, #10
 800172a:	480c      	ldr	r0, [pc, #48]	; (800175c <begin+0x688>)
 800172c:	f005 fab8 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &current_W2_graphic, TXB_ID_11, 186, 159, 210, 203);
 8001730:	23cb      	movs	r3, #203	; 0xcb
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	23d2      	movs	r3, #210	; 0xd2
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	239f      	movs	r3, #159	; 0x9f
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	23ba      	movs	r3, #186	; 0xba
 800173e:	220b      	movs	r2, #11
 8001740:	4919      	ldr	r1, [pc, #100]	; (80017a8 <begin+0x6d4>)
 8001742:	4806      	ldr	r0, [pc, #24]	; (800175c <begin+0x688>)
 8001744:	f005 fa2c 	bl	8006ba0 <UG_TextboxCreate>
 8001748:	e030      	b.n	80017ac <begin+0x6d8>
 800174a:	bf00      	nop
 800174c:	20000894 	.word	0x20000894
 8001750:	080079fc 	.word	0x080079fc
 8001754:	08002079 	.word	0x08002079
 8001758:	20000614 	.word	0x20000614
 800175c:	2000005c 	.word	0x2000005c
 8001760:	200000cc 	.word	0x200000cc
 8001764:	0800e444 	.word	0x0800e444
 8001768:	08007a1c 	.word	0x08007a1c
 800176c:	200000a4 	.word	0x200000a4
 8001770:	0800e46c 	.word	0x0800e46c
 8001774:	08007a24 	.word	0x08007a24
 8001778:	200000b8 	.word	0x200000b8
 800177c:	08007a2c 	.word	0x08007a2c
 8001780:	2000011c 	.word	0x2000011c
 8001784:	08007a30 	.word	0x08007a30
 8001788:	200000f4 	.word	0x200000f4
 800178c:	08007a38 	.word	0x08007a38
 8001790:	20000108 	.word	0x20000108
 8001794:	08007a40 	.word	0x08007a40
 8001798:	20000158 	.word	0x20000158
 800179c:	08007a44 	.word	0x08007a44
 80017a0:	20000130 	.word	0x20000130
 80017a4:	08007a4c 	.word	0x08007a4c
 80017a8:	20000144 	.word	0x20000144
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_11, &FONT_24X40);
 80017ac:	4ac2      	ldr	r2, [pc, #776]	; (8001ab8 <begin+0x9e4>)
 80017ae:	210b      	movs	r1, #11
 80017b0:	48c2      	ldr	r0, [pc, #776]	; (8001abc <begin+0x9e8>)
 80017b2:	f005 fb1d 	bl	8006df0 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_11, ALIGN_CENTER);
 80017b6:	2212      	movs	r2, #18
 80017b8:	210b      	movs	r1, #11
 80017ba:	48c0      	ldr	r0, [pc, #768]	; (8001abc <begin+0x9e8>)
 80017bc:	f005 fb42 	bl	8006e44 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_11, C_VIOLET);
 80017c0:	f24e 421c 	movw	r2, #58396	; 0xe41c
 80017c4:	210b      	movs	r1, #11
 80017c6:	48bd      	ldr	r0, [pc, #756]	; (8001abc <begin+0x9e8>)
 80017c8:	f005 fabd 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_11, C_BLACK);
 80017cc:	2200      	movs	r2, #0
 80017ce:	210b      	movs	r1, #11
 80017d0:	48ba      	ldr	r0, [pc, #744]	; (8001abc <begin+0x9e8>)
 80017d2:	f005 fa8d 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_11, "W");
 80017d6:	4aba      	ldr	r2, [pc, #744]	; (8001ac0 <begin+0x9ec>)
 80017d8:	210b      	movs	r1, #11
 80017da:	48b8      	ldr	r0, [pc, #736]	; (8001abc <begin+0x9e8>)
 80017dc:	f005 fade 	bl	8006d9c <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_11);
 80017e0:	210b      	movs	r1, #11
 80017e2:	48b6      	ldr	r0, [pc, #728]	; (8001abc <begin+0x9e8>)
 80017e4:	f005 fa5c 	bl	8006ca0 <UG_TextboxShow>



		 	    ////////////Temp//
		 	    UG_TextboxCreate(&window_page_1, &temp_graphic, TXB_ID_12, 220, 10, 318, 26);
 80017e8:	231a      	movs	r3, #26
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	230a      	movs	r3, #10
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	23dc      	movs	r3, #220	; 0xdc
 80017f8:	220c      	movs	r2, #12
 80017fa:	49b2      	ldr	r1, [pc, #712]	; (8001ac4 <begin+0x9f0>)
 80017fc:	48af      	ldr	r0, [pc, #700]	; (8001abc <begin+0x9e8>)
 80017fe:	f005 f9cf 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_12, &FONT_10X16);
 8001802:	4ab1      	ldr	r2, [pc, #708]	; (8001ac8 <begin+0x9f4>)
 8001804:	210c      	movs	r1, #12
 8001806:	48ad      	ldr	r0, [pc, #692]	; (8001abc <begin+0x9e8>)
 8001808:	f005 faf2 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_12, ALIGN_CENTER);
 800180c:	2212      	movs	r2, #18
 800180e:	210c      	movs	r1, #12
 8001810:	48aa      	ldr	r0, [pc, #680]	; (8001abc <begin+0x9e8>)
 8001812:	f005 fb17 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_12, 	C_ORANGE);
 8001816:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 800181a:	210c      	movs	r1, #12
 800181c:	48a7      	ldr	r0, [pc, #668]	; (8001abc <begin+0x9e8>)
 800181e:	f005 fa92 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_12, C_BLACK);
 8001822:	2200      	movs	r2, #0
 8001824:	210c      	movs	r1, #12
 8001826:	48a5      	ldr	r0, [pc, #660]	; (8001abc <begin+0x9e8>)
 8001828:	f005 fa62 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_12, "TEMP C");
 800182c:	4aa7      	ldr	r2, [pc, #668]	; (8001acc <begin+0x9f8>)
 800182e:	210c      	movs	r1, #12
 8001830:	48a2      	ldr	r0, [pc, #648]	; (8001abc <begin+0x9e8>)
 8001832:	f005 fab3 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_12);
 8001836:	210c      	movs	r1, #12
 8001838:	48a0      	ldr	r0, [pc, #640]	; (8001abc <begin+0x9e8>)
 800183a:	f005 fa31 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &current_T_graphic, TXB_ID_13, 220, 31, 318, 71);
 800183e:	2347      	movs	r3, #71	; 0x47
 8001840:	9302      	str	r3, [sp, #8]
 8001842:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	231f      	movs	r3, #31
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	23dc      	movs	r3, #220	; 0xdc
 800184e:	220d      	movs	r2, #13
 8001850:	499f      	ldr	r1, [pc, #636]	; (8001ad0 <begin+0x9fc>)
 8001852:	489a      	ldr	r0, [pc, #616]	; (8001abc <begin+0x9e8>)
 8001854:	f005 f9a4 	bl	8006ba0 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_13, &FONT_12X20);
 8001858:	4a9e      	ldr	r2, [pc, #632]	; (8001ad4 <begin+0xa00>)
 800185a:	210d      	movs	r1, #13
 800185c:	4897      	ldr	r0, [pc, #604]	; (8001abc <begin+0x9e8>)
 800185e:	f005 fac7 	bl	8006df0 <UG_TextboxSetFont>
		  	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_13, ALIGN_CENTER);
 8001862:	2212      	movs	r2, #18
 8001864:	210d      	movs	r1, #13
 8001866:	4895      	ldr	r0, [pc, #596]	; (8001abc <begin+0x9e8>)
 8001868:	f005 faec 	bl	8006e44 <UG_TextboxSetAlignment>
		  	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_13, C_DIM_GRAY);
 800186c:	f246 322c 	movw	r2, #25388	; 0x632c
 8001870:	210d      	movs	r1, #13
 8001872:	4892      	ldr	r0, [pc, #584]	; (8001abc <begin+0x9e8>)
 8001874:	f005 fa67 	bl	8006d46 <UG_TextboxSetBackColor>
		  	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_13, C_WHITE);
 8001878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187c:	210d      	movs	r1, #13
 800187e:	488f      	ldr	r0, [pc, #572]	; (8001abc <begin+0x9e8>)
 8001880:	f005 fa36 	bl	8006cf0 <UG_TextboxSetForeColor>
		   	    UG_TextboxSetText(&window_page_1, TXB_ID_13, "24.5");
 8001884:	4a94      	ldr	r2, [pc, #592]	; (8001ad8 <begin+0xa04>)
 8001886:	210d      	movs	r1, #13
 8001888:	488c      	ldr	r0, [pc, #560]	; (8001abc <begin+0x9e8>)
 800188a:	f005 fa87 	bl	8006d9c <UG_TextboxSetText>
		   	    UG_TextboxShow(&window_page_1, TXB_ID_13);
 800188e:	210d      	movs	r1, #13
 8001890:	488a      	ldr	r0, [pc, #552]	; (8001abc <begin+0x9e8>)
 8001892:	f005 fa05 	bl	8006ca0 <UG_TextboxShow>

		 	    ////////////USB//
		        UG_TextboxCreate(&window_page_1, &USBC_graphic, TXB_ID_14, 220, 76, 318, 107);
 8001896:	236b      	movs	r3, #107	; 0x6b
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	234c      	movs	r3, #76	; 0x4c
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	23dc      	movs	r3, #220	; 0xdc
 80018a6:	220e      	movs	r2, #14
 80018a8:	498c      	ldr	r1, [pc, #560]	; (8001adc <begin+0xa08>)
 80018aa:	4884      	ldr	r0, [pc, #528]	; (8001abc <begin+0x9e8>)
 80018ac:	f005 f978 	bl	8006ba0 <UG_TextboxCreate>
		   	    UG_TextboxSetFont(&window_page_1, TXB_ID_14, &FONT_12X20);
 80018b0:	4a88      	ldr	r2, [pc, #544]	; (8001ad4 <begin+0xa00>)
 80018b2:	210e      	movs	r1, #14
 80018b4:	4881      	ldr	r0, [pc, #516]	; (8001abc <begin+0x9e8>)
 80018b6:	f005 fa9b 	bl	8006df0 <UG_TextboxSetFont>
		   	   	UG_TextboxSetAlignment(&window_page_1, TXB_ID_14, ALIGN_CENTER);
 80018ba:	2212      	movs	r2, #18
 80018bc:	210e      	movs	r1, #14
 80018be:	487f      	ldr	r0, [pc, #508]	; (8001abc <begin+0x9e8>)
 80018c0:	f005 fac0 	bl	8006e44 <UG_TextboxSetAlignment>
		   	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_14, C_GREEN_YELLOW);
 80018c4:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 80018c8:	210e      	movs	r1, #14
 80018ca:	487c      	ldr	r0, [pc, #496]	; (8001abc <begin+0x9e8>)
 80018cc:	f005 fa3b 	bl	8006d46 <UG_TextboxSetBackColor>
		   	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_14, C_BLACK);
 80018d0:	2200      	movs	r2, #0
 80018d2:	210e      	movs	r1, #14
 80018d4:	4879      	ldr	r0, [pc, #484]	; (8001abc <begin+0x9e8>)
 80018d6:	f005 fa0b 	bl	8006cf0 <UG_TextboxSetForeColor>
		   	    UG_TextboxSetText(&window_page_1, TXB_ID_14, "USB C");
 80018da:	4a81      	ldr	r2, [pc, #516]	; (8001ae0 <begin+0xa0c>)
 80018dc:	210e      	movs	r1, #14
 80018de:	4877      	ldr	r0, [pc, #476]	; (8001abc <begin+0x9e8>)
 80018e0:	f005 fa5c 	bl	8006d9c <UG_TextboxSetText>
		  	   	UG_TextboxShow(&window_page_1, TXB_ID_14);
 80018e4:	210e      	movs	r1, #14
 80018e6:	4875      	ldr	r0, [pc, #468]	; (8001abc <begin+0x9e8>)
 80018e8:	f005 f9da 	bl	8006ca0 <UG_TextboxShow>

		  	    UG_TextboxCreate(&window_page_1, &USBB_graphic, TXB_ID_15, 220, 109, 318, 137);
 80018ec:	2389      	movs	r3, #137	; 0x89
 80018ee:	9302      	str	r3, [sp, #8]
 80018f0:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	236d      	movs	r3, #109	; 0x6d
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	23dc      	movs	r3, #220	; 0xdc
 80018fc:	220f      	movs	r2, #15
 80018fe:	4979      	ldr	r1, [pc, #484]	; (8001ae4 <begin+0xa10>)
 8001900:	486e      	ldr	r0, [pc, #440]	; (8001abc <begin+0x9e8>)
 8001902:	f005 f94d 	bl	8006ba0 <UG_TextboxCreate>
		  	  	UG_TextboxSetFont(&window_page_1, TXB_ID_15, &FONT_12X20);
 8001906:	4a73      	ldr	r2, [pc, #460]	; (8001ad4 <begin+0xa00>)
 8001908:	210f      	movs	r1, #15
 800190a:	486c      	ldr	r0, [pc, #432]	; (8001abc <begin+0x9e8>)
 800190c:	f005 fa70 	bl	8006df0 <UG_TextboxSetFont>
		  	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_15, ALIGN_CENTER);
 8001910:	2212      	movs	r2, #18
 8001912:	210f      	movs	r1, #15
 8001914:	4869      	ldr	r0, [pc, #420]	; (8001abc <begin+0x9e8>)
 8001916:	f005 fa95 	bl	8006e44 <UG_TextboxSetAlignment>
		   	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_15, C_DIM_GRAY);
 800191a:	f246 322c 	movw	r2, #25388	; 0x632c
 800191e:	210f      	movs	r1, #15
 8001920:	4866      	ldr	r0, [pc, #408]	; (8001abc <begin+0x9e8>)
 8001922:	f005 fa10 	bl	8006d46 <UG_TextboxSetBackColor>
		   	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_15, C_WHITE);
 8001926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192a:	210f      	movs	r1, #15
 800192c:	4863      	ldr	r0, [pc, #396]	; (8001abc <begin+0x9e8>)
 800192e:	f005 f9df 	bl	8006cf0 <UG_TextboxSetForeColor>
	    	    UG_TextboxSetText(&window_page_1, TXB_ID_15, "USB B");
 8001932:	4a6d      	ldr	r2, [pc, #436]	; (8001ae8 <begin+0xa14>)
 8001934:	210f      	movs	r1, #15
 8001936:	4861      	ldr	r0, [pc, #388]	; (8001abc <begin+0x9e8>)
 8001938:	f005 fa30 	bl	8006d9c <UG_TextboxSetText>
		   	   	UG_TextboxShow(&window_page_1, TXB_ID_15);
 800193c:	210f      	movs	r1, #15
 800193e:	485f      	ldr	r0, [pc, #380]	; (8001abc <begin+0x9e8>)
 8001940:	f005 f9ae 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &set_V_graphic_page_2, TXB_ID_16, 220, 143, 318, 159);
 8001944:	239f      	movs	r3, #159	; 0x9f
 8001946:	9302      	str	r3, [sp, #8]
 8001948:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	238f      	movs	r3, #143	; 0x8f
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	23dc      	movs	r3, #220	; 0xdc
 8001954:	2210      	movs	r2, #16
 8001956:	4965      	ldr	r1, [pc, #404]	; (8001aec <begin+0xa18>)
 8001958:	4858      	ldr	r0, [pc, #352]	; (8001abc <begin+0x9e8>)
 800195a:	f005 f921 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_16, &FONT_10X16);
 800195e:	4a5a      	ldr	r2, [pc, #360]	; (8001ac8 <begin+0x9f4>)
 8001960:	2110      	movs	r1, #16
 8001962:	4856      	ldr	r0, [pc, #344]	; (8001abc <begin+0x9e8>)
 8001964:	f005 fa44 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_16, ALIGN_CENTER);
 8001968:	2212      	movs	r2, #18
 800196a:	2110      	movs	r1, #16
 800196c:	4853      	ldr	r0, [pc, #332]	; (8001abc <begin+0x9e8>)
 800196e:	f005 fa69 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_16, 	C_VIOLET);
 8001972:	f24e 421c 	movw	r2, #58396	; 0xe41c
 8001976:	2110      	movs	r1, #16
 8001978:	4850      	ldr	r0, [pc, #320]	; (8001abc <begin+0x9e8>)
 800197a:	f005 f9e4 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_16, C_BLACK);
 800197e:	2200      	movs	r2, #0
 8001980:	2110      	movs	r1, #16
 8001982:	484e      	ldr	r0, [pc, #312]	; (8001abc <begin+0x9e8>)
 8001984:	f005 f9b4 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_16, "SET V");
 8001988:	4a59      	ldr	r2, [pc, #356]	; (8001af0 <begin+0xa1c>)
 800198a:	2110      	movs	r1, #16
 800198c:	484b      	ldr	r0, [pc, #300]	; (8001abc <begin+0x9e8>)
 800198e:	f005 fa05 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_16);
 8001992:	2110      	movs	r1, #16
 8001994:	4849      	ldr	r0, [pc, #292]	; (8001abc <begin+0x9e8>)
 8001996:	f005 f983 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &set_V_graphic_value_page_2, TXB_ID_17, 220, 163, 318, 185);
 800199a:	23b9      	movs	r3, #185	; 0xb9
 800199c:	9302      	str	r3, [sp, #8]
 800199e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	23a3      	movs	r3, #163	; 0xa3
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	23dc      	movs	r3, #220	; 0xdc
 80019aa:	2211      	movs	r2, #17
 80019ac:	4951      	ldr	r1, [pc, #324]	; (8001af4 <begin+0xa20>)
 80019ae:	4843      	ldr	r0, [pc, #268]	; (8001abc <begin+0x9e8>)
 80019b0:	f005 f8f6 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_17, &FONT_12X20);
 80019b4:	4a47      	ldr	r2, [pc, #284]	; (8001ad4 <begin+0xa00>)
 80019b6:	2111      	movs	r1, #17
 80019b8:	4840      	ldr	r0, [pc, #256]	; (8001abc <begin+0x9e8>)
 80019ba:	f005 fa19 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_17, ALIGN_CENTER);
 80019be:	2212      	movs	r2, #18
 80019c0:	2111      	movs	r1, #17
 80019c2:	483e      	ldr	r0, [pc, #248]	; (8001abc <begin+0x9e8>)
 80019c4:	f005 fa3e 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_17, 	C_DIM_GRAY);
 80019c8:	f246 322c 	movw	r2, #25388	; 0x632c
 80019cc:	2111      	movs	r1, #17
 80019ce:	483b      	ldr	r0, [pc, #236]	; (8001abc <begin+0x9e8>)
 80019d0:	f005 f9b9 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_17, C_WHITE);
 80019d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d8:	2111      	movs	r1, #17
 80019da:	4838      	ldr	r0, [pc, #224]	; (8001abc <begin+0x9e8>)
 80019dc:	f005 f988 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_17, "00.00");
 80019e0:	4a45      	ldr	r2, [pc, #276]	; (8001af8 <begin+0xa24>)
 80019e2:	2111      	movs	r1, #17
 80019e4:	4835      	ldr	r0, [pc, #212]	; (8001abc <begin+0x9e8>)
 80019e6:	f005 f9d9 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_17);
 80019ea:	2111      	movs	r1, #17
 80019ec:	4833      	ldr	r0, [pc, #204]	; (8001abc <begin+0x9e8>)
 80019ee:	f005 f957 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &set_I_graphic_page_2, TXB_ID_18, 220, 190, 318, 206);
 80019f2:	23ce      	movs	r3, #206	; 0xce
 80019f4:	9302      	str	r3, [sp, #8]
 80019f6:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	23be      	movs	r3, #190	; 0xbe
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	23dc      	movs	r3, #220	; 0xdc
 8001a02:	2212      	movs	r2, #18
 8001a04:	493d      	ldr	r1, [pc, #244]	; (8001afc <begin+0xa28>)
 8001a06:	482d      	ldr	r0, [pc, #180]	; (8001abc <begin+0x9e8>)
 8001a08:	f005 f8ca 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_18, &FONT_10X16);
 8001a0c:	4a2e      	ldr	r2, [pc, #184]	; (8001ac8 <begin+0x9f4>)
 8001a0e:	2112      	movs	r1, #18
 8001a10:	482a      	ldr	r0, [pc, #168]	; (8001abc <begin+0x9e8>)
 8001a12:	f005 f9ed 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_18, ALIGN_CENTER);
 8001a16:	2212      	movs	r2, #18
 8001a18:	2112      	movs	r1, #18
 8001a1a:	4828      	ldr	r0, [pc, #160]	; (8001abc <begin+0x9e8>)
 8001a1c:	f005 fa12 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_18, 	C_VIOLET);
 8001a20:	f24e 421c 	movw	r2, #58396	; 0xe41c
 8001a24:	2112      	movs	r1, #18
 8001a26:	4825      	ldr	r0, [pc, #148]	; (8001abc <begin+0x9e8>)
 8001a28:	f005 f98d 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_18, C_BLACK);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2112      	movs	r1, #18
 8001a30:	4822      	ldr	r0, [pc, #136]	; (8001abc <begin+0x9e8>)
 8001a32:	f005 f95d 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_18, "SET I");
 8001a36:	4a32      	ldr	r2, [pc, #200]	; (8001b00 <begin+0xa2c>)
 8001a38:	2112      	movs	r1, #18
 8001a3a:	4820      	ldr	r0, [pc, #128]	; (8001abc <begin+0x9e8>)
 8001a3c:	f005 f9ae 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_18);
 8001a40:	2112      	movs	r1, #18
 8001a42:	481e      	ldr	r0, [pc, #120]	; (8001abc <begin+0x9e8>)
 8001a44:	f005 f92c 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &set_I_graphic_value_page_2, TXB_ID_19, 220, 209, 318, 231);
 8001a48:	23e7      	movs	r3, #231	; 0xe7
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	23d1      	movs	r3, #209	; 0xd1
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	23dc      	movs	r3, #220	; 0xdc
 8001a58:	2213      	movs	r2, #19
 8001a5a:	492a      	ldr	r1, [pc, #168]	; (8001b04 <begin+0xa30>)
 8001a5c:	4817      	ldr	r0, [pc, #92]	; (8001abc <begin+0x9e8>)
 8001a5e:	f005 f89f 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_19, &FONT_12X20);
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <begin+0xa00>)
 8001a64:	2113      	movs	r1, #19
 8001a66:	4815      	ldr	r0, [pc, #84]	; (8001abc <begin+0x9e8>)
 8001a68:	f005 f9c2 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_19, ALIGN_CENTER);
 8001a6c:	2212      	movs	r2, #18
 8001a6e:	2113      	movs	r1, #19
 8001a70:	4812      	ldr	r0, [pc, #72]	; (8001abc <begin+0x9e8>)
 8001a72:	f005 f9e7 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_19, 	C_DIM_GRAY);
 8001a76:	f246 322c 	movw	r2, #25388	; 0x632c
 8001a7a:	2113      	movs	r1, #19
 8001a7c:	480f      	ldr	r0, [pc, #60]	; (8001abc <begin+0x9e8>)
 8001a7e:	f005 f962 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_19, C_WHITE);
 8001a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a86:	2113      	movs	r1, #19
 8001a88:	480c      	ldr	r0, [pc, #48]	; (8001abc <begin+0x9e8>)
 8001a8a:	f005 f931 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_19, "0.000");
 8001a8e:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <begin+0xa34>)
 8001a90:	2113      	movs	r1, #19
 8001a92:	480a      	ldr	r0, [pc, #40]	; (8001abc <begin+0x9e8>)
 8001a94:	f005 f982 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_19);
 8001a98:	2113      	movs	r1, #19
 8001a9a:	4808      	ldr	r0, [pc, #32]	; (8001abc <begin+0x9e8>)
 8001a9c:	f005 f900 	bl	8006ca0 <UG_TextboxShow>

	//Page 3
		 		UG_WindowCreate(&window_page_2, obj_buff_window_page_2, MAX_OBJECTS_WIN_GRAPH, window_page_2_callback);
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <begin+0xa38>)
 8001aa2:	2214      	movs	r2, #20
 8001aa4:	491a      	ldr	r1, [pc, #104]	; (8001b10 <begin+0xa3c>)
 8001aa6:	481b      	ldr	r0, [pc, #108]	; (8001b14 <begin+0xa40>)
 8001aa8:	f004 fcc8 	bl	800643c <UG_WindowCreate>
				UG_WindowSetStyle(&window_page_2, WND_STYLE_2D | WND_STYLE_SHOW_TITLE);
 8001aac:	2102      	movs	r1, #2
 8001aae:	4819      	ldr	r0, [pc, #100]	; (8001b14 <begin+0xa40>)
 8001ab0:	f004 fe5d 	bl	800676e <UG_WindowSetStyle>
				UG_WindowSetBackColor(&window_page_2, C_BLACK);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	e02f      	b.n	8001b18 <begin+0xa44>
 8001ab8:	0800e46c 	.word	0x0800e46c
 8001abc:	2000005c 	.word	0x2000005c
 8001ac0:	08007a54 	.word	0x08007a54
 8001ac4:	20000524 	.word	0x20000524
 8001ac8:	0800e444 	.word	0x0800e444
 8001acc:	08007a58 	.word	0x08007a58
 8001ad0:	20000538 	.word	0x20000538
 8001ad4:	0800e458 	.word	0x0800e458
 8001ad8:	08007a60 	.word	0x08007a60
 8001adc:	2000054c 	.word	0x2000054c
 8001ae0:	08007a68 	.word	0x08007a68
 8001ae4:	20000560 	.word	0x20000560
 8001ae8:	08007a70 	.word	0x08007a70
 8001aec:	20000588 	.word	0x20000588
 8001af0:	08007a78 	.word	0x08007a78
 8001af4:	200005d8 	.word	0x200005d8
 8001af8:	08007a24 	.word	0x08007a24
 8001afc:	200005b0 	.word	0x200005b0
 8001b00:	08007a80 	.word	0x08007a80
 8001b04:	20000600 	.word	0x20000600
 8001b08:	08007a38 	.word	0x08007a38
 8001b0c:	080020af 	.word	0x080020af
 8001b10:	200001c8 	.word	0x200001c8
 8001b14:	20000194 	.word	0x20000194
 8001b18:	48c2      	ldr	r0, [pc, #776]	; (8001e24 <begin+0xd50>)
 8001b1a:	f004 fd43 	bl	80065a4 <UG_WindowSetBackColor>

				UG_WindowSetTitleColor(&window_page_2, C_BLACK); //title ending line is 22 pixel in height
 8001b1e:	2100      	movs	r1, #0
 8001b20:	48c0      	ldr	r0, [pc, #768]	; (8001e24 <begin+0xd50>)
 8001b22:	f004 fd83 	bl	800662c <UG_WindowSetTitleColor>
				UG_WindowSetTitleTextColor(&window_page_2, C_ORANGE);
 8001b26:	f44f 417d 	mov.w	r1, #64768	; 0xfd00
 8001b2a:	48be      	ldr	r0, [pc, #760]	; (8001e24 <begin+0xd50>)
 8001b2c:	f004 fd5c 	bl	80065e8 <UG_WindowSetTitleTextColor>
				UG_WindowSetTitleTextAlignment(&window_page_2, ALIGN_CENTER);
 8001b30:	2112      	movs	r1, #18
 8001b32:	48bc      	ldr	r0, [pc, #752]	; (8001e24 <begin+0xd50>)
 8001b34:	f004 fdf8 	bl	8006728 <UG_WindowSetTitleTextAlignment>
				UG_WindowSetTitleText(&window_page_2,"Window");
 8001b38:	49bb      	ldr	r1, [pc, #748]	; (8001e28 <begin+0xd54>)
 8001b3a:	48ba      	ldr	r0, [pc, #744]	; (8001e24 <begin+0xd50>)
 8001b3c:	f004 fd98 	bl	8006670 <UG_WindowSetTitleText>
				UG_WindowSetTitleTextFont(&window_page_2,&FONT_12X20);
 8001b40:	49ba      	ldr	r1, [pc, #744]	; (8001e2c <begin+0xd58>)
 8001b42:	48b8      	ldr	r0, [pc, #736]	; (8001e24 <begin+0xd50>)
 8001b44:	f004 fdb5 	bl	80066b2 <UG_WindowSetTitleTextFont>

//				UG_ImageCreate(&window_page_2, &image_2, IMG_ID_0,115, 50, 146,65);
//				UG_ImageSetBMP(&window_page_2, IMG_ID_0, &sound);

		 	    UG_TextboxCreate(&window_page_2, &dummy_text_1, TXB_ID_1, 1,1,102,70);
 8001b48:	2346      	movs	r3, #70	; 0x46
 8001b4a:	9302      	str	r3, [sp, #8]
 8001b4c:	2366      	movs	r3, #102	; 0x66
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2301      	movs	r3, #1
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2301      	movs	r3, #1
 8001b56:	2201      	movs	r2, #1
 8001b58:	49b5      	ldr	r1, [pc, #724]	; (8001e30 <begin+0xd5c>)
 8001b5a:	48b2      	ldr	r0, [pc, #712]	; (8001e24 <begin+0xd50>)
 8001b5c:	f005 f820 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_1, &FONT_12X20);
 8001b60:	4ab2      	ldr	r2, [pc, #712]	; (8001e2c <begin+0xd58>)
 8001b62:	2101      	movs	r1, #1
 8001b64:	48af      	ldr	r0, [pc, #700]	; (8001e24 <begin+0xd50>)
 8001b66:	f005 f943 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_1, ALIGN_CENTER);
 8001b6a:	2212      	movs	r2, #18
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	48ad      	ldr	r0, [pc, #692]	; (8001e24 <begin+0xd50>)
 8001b70:	f005 f968 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_1, 	C_ORANGE);
 8001b74:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 8001b78:	2101      	movs	r1, #1
 8001b7a:	48aa      	ldr	r0, [pc, #680]	; (8001e24 <begin+0xd50>)
 8001b7c:	f005 f8e3 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_1, C_WHITE);
 8001b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b84:	2101      	movs	r1, #1
 8001b86:	48a7      	ldr	r0, [pc, #668]	; (8001e24 <begin+0xd50>)
 8001b88:	f005 f8b2 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_1, "Tab_1");
 8001b8c:	4aa9      	ldr	r2, [pc, #676]	; (8001e34 <begin+0xd60>)
 8001b8e:	2101      	movs	r1, #1
 8001b90:	48a4      	ldr	r0, [pc, #656]	; (8001e24 <begin+0xd50>)
 8001b92:	f005 f903 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_1);
 8001b96:	2101      	movs	r1, #1
 8001b98:	48a2      	ldr	r0, [pc, #648]	; (8001e24 <begin+0xd50>)
 8001b9a:	f005 f881 	bl	8006ca0 <UG_TextboxShow>


		 	    UG_TextboxCreate(&window_page_2, &dummy_text_2, TXB_ID_2, 1,73,102,142);
 8001b9e:	238e      	movs	r3, #142	; 0x8e
 8001ba0:	9302      	str	r3, [sp, #8]
 8001ba2:	2366      	movs	r3, #102	; 0x66
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	2349      	movs	r3, #73	; 0x49
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2301      	movs	r3, #1
 8001bac:	2202      	movs	r2, #2
 8001bae:	49a2      	ldr	r1, [pc, #648]	; (8001e38 <begin+0xd64>)
 8001bb0:	489c      	ldr	r0, [pc, #624]	; (8001e24 <begin+0xd50>)
 8001bb2:	f004 fff5 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_2, &FONT_12X20);
 8001bb6:	4a9d      	ldr	r2, [pc, #628]	; (8001e2c <begin+0xd58>)
 8001bb8:	2102      	movs	r1, #2
 8001bba:	489a      	ldr	r0, [pc, #616]	; (8001e24 <begin+0xd50>)
 8001bbc:	f005 f918 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_2, ALIGN_CENTER);
 8001bc0:	2212      	movs	r2, #18
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	4897      	ldr	r0, [pc, #604]	; (8001e24 <begin+0xd50>)
 8001bc6:	f005 f93d 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_2, 	C_BLACK);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2102      	movs	r1, #2
 8001bce:	4895      	ldr	r0, [pc, #596]	; (8001e24 <begin+0xd50>)
 8001bd0:	f005 f8b9 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_2, C_WHITE);
 8001bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd8:	2102      	movs	r1, #2
 8001bda:	4892      	ldr	r0, [pc, #584]	; (8001e24 <begin+0xd50>)
 8001bdc:	f005 f888 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_2, "Tab_2");
 8001be0:	4a96      	ldr	r2, [pc, #600]	; (8001e3c <begin+0xd68>)
 8001be2:	2102      	movs	r1, #2
 8001be4:	488f      	ldr	r0, [pc, #572]	; (8001e24 <begin+0xd50>)
 8001be6:	f005 f8d9 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_2);
 8001bea:	2102      	movs	r1, #2
 8001bec:	488d      	ldr	r0, [pc, #564]	; (8001e24 <begin+0xd50>)
 8001bee:	f005 f857 	bl	8006ca0 <UG_TextboxShow>


		 	    UG_TextboxCreate(&window_page_2, &dummy_text_3, TXB_ID_3, 1,146,102,215);
 8001bf2:	23d7      	movs	r3, #215	; 0xd7
 8001bf4:	9302      	str	r3, [sp, #8]
 8001bf6:	2366      	movs	r3, #102	; 0x66
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	2392      	movs	r3, #146	; 0x92
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2301      	movs	r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	498f      	ldr	r1, [pc, #572]	; (8001e40 <begin+0xd6c>)
 8001c04:	4887      	ldr	r0, [pc, #540]	; (8001e24 <begin+0xd50>)
 8001c06:	f004 ffcb 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_3, &FONT_12X20);
 8001c0a:	4a88      	ldr	r2, [pc, #544]	; (8001e2c <begin+0xd58>)
 8001c0c:	2103      	movs	r1, #3
 8001c0e:	4885      	ldr	r0, [pc, #532]	; (8001e24 <begin+0xd50>)
 8001c10:	f005 f8ee 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_3, ALIGN_CENTER);
 8001c14:	2212      	movs	r2, #18
 8001c16:	2103      	movs	r1, #3
 8001c18:	4882      	ldr	r0, [pc, #520]	; (8001e24 <begin+0xd50>)
 8001c1a:	f005 f913 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_3, 	C_BLACK);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2103      	movs	r1, #3
 8001c22:	4880      	ldr	r0, [pc, #512]	; (8001e24 <begin+0xd50>)
 8001c24:	f005 f88f 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_3, C_WHITE);
 8001c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c2c:	2103      	movs	r1, #3
 8001c2e:	487d      	ldr	r0, [pc, #500]	; (8001e24 <begin+0xd50>)
 8001c30:	f005 f85e 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_3, "Tab_3");
 8001c34:	4a83      	ldr	r2, [pc, #524]	; (8001e44 <begin+0xd70>)
 8001c36:	2103      	movs	r1, #3
 8001c38:	487a      	ldr	r0, [pc, #488]	; (8001e24 <begin+0xd50>)
 8001c3a:	f005 f8af 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_3);
 8001c3e:	2103      	movs	r1, #3
 8001c40:	4878      	ldr	r0, [pc, #480]	; (8001e24 <begin+0xd50>)
 8001c42:	f005 f82d 	bl	8006ca0 <UG_TextboxShow>



		 	    UG_TextboxCreate(&window_page_2, &dummy_text_4, TXB_ID_4, 120,34,210,50);
 8001c46:	2332      	movs	r3, #50	; 0x32
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	23d2      	movs	r3, #210	; 0xd2
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	2322      	movs	r3, #34	; 0x22
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2378      	movs	r3, #120	; 0x78
 8001c54:	2204      	movs	r2, #4
 8001c56:	497c      	ldr	r1, [pc, #496]	; (8001e48 <begin+0xd74>)
 8001c58:	4872      	ldr	r0, [pc, #456]	; (8001e24 <begin+0xd50>)
 8001c5a:	f004 ffa1 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_4, &FONT_10X16);
 8001c5e:	4a7b      	ldr	r2, [pc, #492]	; (8001e4c <begin+0xd78>)
 8001c60:	2104      	movs	r1, #4
 8001c62:	4870      	ldr	r0, [pc, #448]	; (8001e24 <begin+0xd50>)
 8001c64:	f005 f8c4 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_4, ALIGN_CENTER_LEFT);
 8001c68:	2211      	movs	r2, #17
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	486d      	ldr	r0, [pc, #436]	; (8001e24 <begin+0xd50>)
 8001c6e:	f005 f8e9 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_4, 	C_BLACK);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2104      	movs	r1, #4
 8001c76:	486b      	ldr	r0, [pc, #428]	; (8001e24 <begin+0xd50>)
 8001c78:	f005 f865 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_4, C_WHITE);
 8001c7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c80:	2104      	movs	r1, #4
 8001c82:	4868      	ldr	r0, [pc, #416]	; (8001e24 <begin+0xd50>)
 8001c84:	f005 f834 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_4, "Voltage");
 8001c88:	4a71      	ldr	r2, [pc, #452]	; (8001e50 <begin+0xd7c>)
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	4865      	ldr	r0, [pc, #404]	; (8001e24 <begin+0xd50>)
 8001c8e:	f005 f885 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_4);
 8001c92:	2104      	movs	r1, #4
 8001c94:	4863      	ldr	r0, [pc, #396]	; (8001e24 <begin+0xd50>)
 8001c96:	f005 f803 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_2, &dummy_text_5, TXB_ID_5, 220,34,310,50);
 8001c9a:	2332      	movs	r3, #50	; 0x32
 8001c9c:	9302      	str	r3, [sp, #8]
 8001c9e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2322      	movs	r3, #34	; 0x22
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	23dc      	movs	r3, #220	; 0xdc
 8001caa:	2205      	movs	r2, #5
 8001cac:	4969      	ldr	r1, [pc, #420]	; (8001e54 <begin+0xd80>)
 8001cae:	485d      	ldr	r0, [pc, #372]	; (8001e24 <begin+0xd50>)
 8001cb0:	f004 ff76 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_5, &FONT_10X16);
 8001cb4:	4a65      	ldr	r2, [pc, #404]	; (8001e4c <begin+0xd78>)
 8001cb6:	2105      	movs	r1, #5
 8001cb8:	485a      	ldr	r0, [pc, #360]	; (8001e24 <begin+0xd50>)
 8001cba:	f005 f899 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_5, ALIGN_CENTER_LEFT);
 8001cbe:	2211      	movs	r2, #17
 8001cc0:	2105      	movs	r1, #5
 8001cc2:	4858      	ldr	r0, [pc, #352]	; (8001e24 <begin+0xd50>)
 8001cc4:	f005 f8be 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_5, 	C_BLACK);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2105      	movs	r1, #5
 8001ccc:	4855      	ldr	r0, [pc, #340]	; (8001e24 <begin+0xd50>)
 8001cce:	f005 f83a 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_5, C_WHITE);
 8001cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd6:	2105      	movs	r1, #5
 8001cd8:	4852      	ldr	r0, [pc, #328]	; (8001e24 <begin+0xd50>)
 8001cda:	f005 f809 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_5, "Ampere");
 8001cde:	4a5e      	ldr	r2, [pc, #376]	; (8001e58 <begin+0xd84>)
 8001ce0:	2105      	movs	r1, #5
 8001ce2:	4850      	ldr	r0, [pc, #320]	; (8001e24 <begin+0xd50>)
 8001ce4:	f005 f85a 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_5);
 8001ce8:	2105      	movs	r1, #5
 8001cea:	484e      	ldr	r0, [pc, #312]	; (8001e24 <begin+0xd50>)
 8001cec:	f004 ffd8 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_2, &dummy_text_6, TXB_ID_6, 115,55,210,95);
 8001cf0:	235f      	movs	r3, #95	; 0x5f
 8001cf2:	9302      	str	r3, [sp, #8]
 8001cf4:	23d2      	movs	r3, #210	; 0xd2
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	2337      	movs	r3, #55	; 0x37
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2373      	movs	r3, #115	; 0x73
 8001cfe:	2206      	movs	r2, #6
 8001d00:	4956      	ldr	r1, [pc, #344]	; (8001e5c <begin+0xd88>)
 8001d02:	4848      	ldr	r0, [pc, #288]	; (8001e24 <begin+0xd50>)
 8001d04:	f004 ff4c 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_6, &FONT_12X20);
 8001d08:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <begin+0xd58>)
 8001d0a:	2106      	movs	r1, #6
 8001d0c:	4845      	ldr	r0, [pc, #276]	; (8001e24 <begin+0xd50>)
 8001d0e:	f005 f86f 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_6, ALIGN_CENTER);
 8001d12:	2212      	movs	r2, #18
 8001d14:	2106      	movs	r1, #6
 8001d16:	4843      	ldr	r0, [pc, #268]	; (8001e24 <begin+0xd50>)
 8001d18:	f005 f894 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_6, 	C_ORANGE);
 8001d1c:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 8001d20:	2106      	movs	r1, #6
 8001d22:	4840      	ldr	r0, [pc, #256]	; (8001e24 <begin+0xd50>)
 8001d24:	f005 f80f 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_6, C_BLACK);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2106      	movs	r1, #6
 8001d2c:	483d      	ldr	r0, [pc, #244]	; (8001e24 <begin+0xd50>)
 8001d2e:	f004 ffdf 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_6, "00.00V");
 8001d32:	4a4b      	ldr	r2, [pc, #300]	; (8001e60 <begin+0xd8c>)
 8001d34:	2106      	movs	r1, #6
 8001d36:	483b      	ldr	r0, [pc, #236]	; (8001e24 <begin+0xd50>)
 8001d38:	f005 f830 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_6);
 8001d3c:	2106      	movs	r1, #6
 8001d3e:	4839      	ldr	r0, [pc, #228]	; (8001e24 <begin+0xd50>)
 8001d40:	f004 ffae 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_2, &dummy_text_7, TXB_ID_7, 215,55,310,95);
 8001d44:	235f      	movs	r3, #95	; 0x5f
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	f44f 739b 	mov.w	r3, #310	; 0x136
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	2337      	movs	r3, #55	; 0x37
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	23d7      	movs	r3, #215	; 0xd7
 8001d54:	2207      	movs	r2, #7
 8001d56:	4943      	ldr	r1, [pc, #268]	; (8001e64 <begin+0xd90>)
 8001d58:	4832      	ldr	r0, [pc, #200]	; (8001e24 <begin+0xd50>)
 8001d5a:	f004 ff21 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_7, &FONT_12X20);
 8001d5e:	4a33      	ldr	r2, [pc, #204]	; (8001e2c <begin+0xd58>)
 8001d60:	2107      	movs	r1, #7
 8001d62:	4830      	ldr	r0, [pc, #192]	; (8001e24 <begin+0xd50>)
 8001d64:	f005 f844 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_7, ALIGN_CENTER);
 8001d68:	2212      	movs	r2, #18
 8001d6a:	2107      	movs	r1, #7
 8001d6c:	482d      	ldr	r0, [pc, #180]	; (8001e24 <begin+0xd50>)
 8001d6e:	f005 f869 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_7, 	C_ORANGE);
 8001d72:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 8001d76:	2107      	movs	r1, #7
 8001d78:	482a      	ldr	r0, [pc, #168]	; (8001e24 <begin+0xd50>)
 8001d7a:	f004 ffe4 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_7, C_BLACK);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2107      	movs	r1, #7
 8001d82:	4828      	ldr	r0, [pc, #160]	; (8001e24 <begin+0xd50>)
 8001d84:	f004 ffb4 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_7, "0.000A");
 8001d88:	4a37      	ldr	r2, [pc, #220]	; (8001e68 <begin+0xd94>)
 8001d8a:	2107      	movs	r1, #7
 8001d8c:	4825      	ldr	r0, [pc, #148]	; (8001e24 <begin+0xd50>)
 8001d8e:	f005 f805 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_7);
 8001d92:	2107      	movs	r1, #7
 8001d94:	4823      	ldr	r0, [pc, #140]	; (8001e24 <begin+0xd50>)
 8001d96:	f004 ff83 	bl	8006ca0 <UG_TextboxShow>



		 	    UG_TextboxCreate(&window_page_2, &dummy_text_8, TXB_ID_8, 120,120,210,140);
 8001d9a:	238c      	movs	r3, #140	; 0x8c
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	23d2      	movs	r3, #210	; 0xd2
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	2378      	movs	r3, #120	; 0x78
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2378      	movs	r3, #120	; 0x78
 8001da8:	2208      	movs	r2, #8
 8001daa:	4930      	ldr	r1, [pc, #192]	; (8001e6c <begin+0xd98>)
 8001dac:	481d      	ldr	r0, [pc, #116]	; (8001e24 <begin+0xd50>)
 8001dae:	f004 fef7 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_8, &FONT_10X16);
 8001db2:	4a26      	ldr	r2, [pc, #152]	; (8001e4c <begin+0xd78>)
 8001db4:	2108      	movs	r1, #8
 8001db6:	481b      	ldr	r0, [pc, #108]	; (8001e24 <begin+0xd50>)
 8001db8:	f005 f81a 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_8, ALIGN_CENTER_LEFT);
 8001dbc:	2211      	movs	r2, #17
 8001dbe:	2108      	movs	r1, #8
 8001dc0:	4818      	ldr	r0, [pc, #96]	; (8001e24 <begin+0xd50>)
 8001dc2:	f005 f83f 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_8, 	C_BLACK);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2108      	movs	r1, #8
 8001dca:	4816      	ldr	r0, [pc, #88]	; (8001e24 <begin+0xd50>)
 8001dcc:	f004 ffbb 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_8, C_WHITE);
 8001dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd4:	2108      	movs	r1, #8
 8001dd6:	4813      	ldr	r0, [pc, #76]	; (8001e24 <begin+0xd50>)
 8001dd8:	f004 ff8a 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_8, "Watts");
 8001ddc:	4a24      	ldr	r2, [pc, #144]	; (8001e70 <begin+0xd9c>)
 8001dde:	2108      	movs	r1, #8
 8001de0:	4810      	ldr	r0, [pc, #64]	; (8001e24 <begin+0xd50>)
 8001de2:	f004 ffdb 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_8);
 8001de6:	2108      	movs	r1, #8
 8001de8:	480e      	ldr	r0, [pc, #56]	; (8001e24 <begin+0xd50>)
 8001dea:	f004 ff59 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_2, &dummy_text_9, TXB_ID_9, 220,120,310,140);
 8001dee:	238c      	movs	r3, #140	; 0x8c
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	f44f 739b 	mov.w	r3, #310	; 0x136
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	2378      	movs	r3, #120	; 0x78
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	23dc      	movs	r3, #220	; 0xdc
 8001dfe:	2209      	movs	r2, #9
 8001e00:	491c      	ldr	r1, [pc, #112]	; (8001e74 <begin+0xda0>)
 8001e02:	4808      	ldr	r0, [pc, #32]	; (8001e24 <begin+0xd50>)
 8001e04:	f004 fecc 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_9, &FONT_10X16);
 8001e08:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <begin+0xd78>)
 8001e0a:	2109      	movs	r1, #9
 8001e0c:	4805      	ldr	r0, [pc, #20]	; (8001e24 <begin+0xd50>)
 8001e0e:	f004 ffef 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_9, ALIGN_CENTER_LEFT);
 8001e12:	2211      	movs	r2, #17
 8001e14:	2109      	movs	r1, #9
 8001e16:	4803      	ldr	r0, [pc, #12]	; (8001e24 <begin+0xd50>)
 8001e18:	f005 f814 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_9, 	C_BLACK);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2109      	movs	r1, #9
 8001e20:	e02a      	b.n	8001e78 <begin+0xda4>
 8001e22:	bf00      	nop
 8001e24:	20000194 	.word	0x20000194
 8001e28:	08007a88 	.word	0x08007a88
 8001e2c:	0800e458 	.word	0x0800e458
 8001e30:	20000448 	.word	0x20000448
 8001e34:	08007a90 	.word	0x08007a90
 8001e38:	2000045c 	.word	0x2000045c
 8001e3c:	08007a98 	.word	0x08007a98
 8001e40:	20000470 	.word	0x20000470
 8001e44:	08007aa0 	.word	0x08007aa0
 8001e48:	20000484 	.word	0x20000484
 8001e4c:	0800e444 	.word	0x0800e444
 8001e50:	08007aa8 	.word	0x08007aa8
 8001e54:	20000498 	.word	0x20000498
 8001e58:	08007ab0 	.word	0x08007ab0
 8001e5c:	200004ac 	.word	0x200004ac
 8001e60:	08007a0c 	.word	0x08007a0c
 8001e64:	200004c0 	.word	0x200004c0
 8001e68:	080079fc 	.word	0x080079fc
 8001e6c:	200004d4 	.word	0x200004d4
 8001e70:	08007ab8 	.word	0x08007ab8
 8001e74:	200004e8 	.word	0x200004e8
 8001e78:	486e      	ldr	r0, [pc, #440]	; (8002034 <begin+0xf60>)
 8001e7a:	f004 ff64 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_9, C_WHITE);
 8001e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e82:	2109      	movs	r1, #9
 8001e84:	486b      	ldr	r0, [pc, #428]	; (8002034 <begin+0xf60>)
 8001e86:	f004 ff33 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_9, "Temp");
 8001e8a:	4a6b      	ldr	r2, [pc, #428]	; (8002038 <begin+0xf64>)
 8001e8c:	2109      	movs	r1, #9
 8001e8e:	4869      	ldr	r0, [pc, #420]	; (8002034 <begin+0xf60>)
 8001e90:	f004 ff84 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_9);
 8001e94:	2109      	movs	r1, #9
 8001e96:	4867      	ldr	r0, [pc, #412]	; (8002034 <begin+0xf60>)
 8001e98:	f004 ff02 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_2, &dummy_text_10, TXB_ID_10, 115,145,210,185);
 8001e9c:	23b9      	movs	r3, #185	; 0xb9
 8001e9e:	9302      	str	r3, [sp, #8]
 8001ea0:	23d2      	movs	r3, #210	; 0xd2
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2391      	movs	r3, #145	; 0x91
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2373      	movs	r3, #115	; 0x73
 8001eaa:	220a      	movs	r2, #10
 8001eac:	4963      	ldr	r1, [pc, #396]	; (800203c <begin+0xf68>)
 8001eae:	4861      	ldr	r0, [pc, #388]	; (8002034 <begin+0xf60>)
 8001eb0:	f004 fe76 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_10, &FONT_12X20);
 8001eb4:	4a62      	ldr	r2, [pc, #392]	; (8002040 <begin+0xf6c>)
 8001eb6:	210a      	movs	r1, #10
 8001eb8:	485e      	ldr	r0, [pc, #376]	; (8002034 <begin+0xf60>)
 8001eba:	f004 ff99 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_10, ALIGN_CENTER);
 8001ebe:	2212      	movs	r2, #18
 8001ec0:	210a      	movs	r1, #10
 8001ec2:	485c      	ldr	r0, [pc, #368]	; (8002034 <begin+0xf60>)
 8001ec4:	f004 ffbe 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_10, 	C_ORANGE);
 8001ec8:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 8001ecc:	210a      	movs	r1, #10
 8001ece:	4859      	ldr	r0, [pc, #356]	; (8002034 <begin+0xf60>)
 8001ed0:	f004 ff39 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_10, C_BLACK);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	210a      	movs	r1, #10
 8001ed8:	4856      	ldr	r0, [pc, #344]	; (8002034 <begin+0xf60>)
 8001eda:	f004 ff09 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_10, "000W");
 8001ede:	4a59      	ldr	r2, [pc, #356]	; (8002044 <begin+0xf70>)
 8001ee0:	210a      	movs	r1, #10
 8001ee2:	4854      	ldr	r0, [pc, #336]	; (8002034 <begin+0xf60>)
 8001ee4:	f004 ff5a 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_10);
 8001ee8:	210a      	movs	r1, #10
 8001eea:	4852      	ldr	r0, [pc, #328]	; (8002034 <begin+0xf60>)
 8001eec:	f004 fed8 	bl	8006ca0 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_2, &dummy_text_11, TXB_ID_11, 215,145,310,185);
 8001ef0:	23b9      	movs	r3, #185	; 0xb9
 8001ef2:	9302      	str	r3, [sp, #8]
 8001ef4:	f44f 739b 	mov.w	r3, #310	; 0x136
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	2391      	movs	r3, #145	; 0x91
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	23d7      	movs	r3, #215	; 0xd7
 8001f00:	220b      	movs	r2, #11
 8001f02:	4951      	ldr	r1, [pc, #324]	; (8002048 <begin+0xf74>)
 8001f04:	484b      	ldr	r0, [pc, #300]	; (8002034 <begin+0xf60>)
 8001f06:	f004 fe4b 	bl	8006ba0 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_11, &FONT_12X20);
 8001f0a:	4a4d      	ldr	r2, [pc, #308]	; (8002040 <begin+0xf6c>)
 8001f0c:	210b      	movs	r1, #11
 8001f0e:	4849      	ldr	r0, [pc, #292]	; (8002034 <begin+0xf60>)
 8001f10:	f004 ff6e 	bl	8006df0 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_11, ALIGN_CENTER);
 8001f14:	2212      	movs	r2, #18
 8001f16:	210b      	movs	r1, #11
 8001f18:	4846      	ldr	r0, [pc, #280]	; (8002034 <begin+0xf60>)
 8001f1a:	f004 ff93 	bl	8006e44 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_11, 	C_ORANGE);
 8001f1e:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 8001f22:	210b      	movs	r1, #11
 8001f24:	4843      	ldr	r0, [pc, #268]	; (8002034 <begin+0xf60>)
 8001f26:	f004 ff0e 	bl	8006d46 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_11, C_BLACK);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	210b      	movs	r1, #11
 8001f2e:	4841      	ldr	r0, [pc, #260]	; (8002034 <begin+0xf60>)
 8001f30:	f004 fede 	bl	8006cf0 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_11, "50 C");
 8001f34:	4a45      	ldr	r2, [pc, #276]	; (800204c <begin+0xf78>)
 8001f36:	210b      	movs	r1, #11
 8001f38:	483e      	ldr	r0, [pc, #248]	; (8002034 <begin+0xf60>)
 8001f3a:	f004 ff2f 	bl	8006d9c <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_11);
 8001f3e:	210b      	movs	r1, #11
 8001f40:	483c      	ldr	r0, [pc, #240]	; (8002034 <begin+0xf60>)
 8001f42:	f004 fead 	bl	8006ca0 <UG_TextboxShow>




	//Logo
		 		UG_WindowCreate(&LOGO, obj_buff_window_logo, MAX_OBJECTS_WIN_GRAPH, window_logo_callback);
 8001f46:	4b42      	ldr	r3, [pc, #264]	; (8002050 <begin+0xf7c>)
 8001f48:	2214      	movs	r2, #20
 8001f4a:	4942      	ldr	r1, [pc, #264]	; (8002054 <begin+0xf80>)
 8001f4c:	4842      	ldr	r0, [pc, #264]	; (8002058 <begin+0xf84>)
 8001f4e:	f004 fa75 	bl	800643c <UG_WindowCreate>
				UG_WindowSetStyle(&LOGO, WND_STYLE_2D | WND_STYLE_HIDE_TITLE);
 8001f52:	2100      	movs	r1, #0
 8001f54:	4840      	ldr	r0, [pc, #256]	; (8002058 <begin+0xf84>)
 8001f56:	f004 fc0a 	bl	800676e <UG_WindowSetStyle>
				UG_WindowSetBackColor(&LOGO, C_BLACK);
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	483e      	ldr	r0, [pc, #248]	; (8002058 <begin+0xf84>)
 8001f5e:	f004 fb21 	bl	80065a4 <UG_WindowSetBackColor>

				UG_ImageCreate(&LOGO, &image_1, IMG_ID_1,105, 50, 245,74);
 8001f62:	234a      	movs	r3, #74	; 0x4a
 8001f64:	9302      	str	r3, [sp, #8]
 8001f66:	23f5      	movs	r3, #245	; 0xf5
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	2332      	movs	r3, #50	; 0x32
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2369      	movs	r3, #105	; 0x69
 8001f70:	2201      	movs	r2, #1
 8001f72:	493a      	ldr	r1, [pc, #232]	; (800205c <begin+0xf88>)
 8001f74:	4838      	ldr	r0, [pc, #224]	; (8002058 <begin+0xf84>)
 8001f76:	f005 f863 	bl	8007040 <UG_ImageCreate>
				UG_ImageSetBMP(&LOGO, IMG_ID_1, &logo_FNIRSI);
 8001f7a:	4a39      	ldr	r2, [pc, #228]	; (8002060 <begin+0xf8c>)
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	4836      	ldr	r0, [pc, #216]	; (8002058 <begin+0xf84>)
 8001f80:	f005 f8bc 	bl	80070fc <UG_ImageSetBMP>

				UG_TextboxCreate(&LOGO, &website_graphic, TXB_ID_0, 1, 116, 318, 154);
 8001f84:	239a      	movs	r3, #154	; 0x9a
 8001f86:	9302      	str	r3, [sp, #8]
 8001f88:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	2374      	movs	r3, #116	; 0x74
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2301      	movs	r3, #1
 8001f94:	2200      	movs	r2, #0
 8001f96:	4933      	ldr	r1, [pc, #204]	; (8002064 <begin+0xf90>)
 8001f98:	482f      	ldr	r0, [pc, #188]	; (8002058 <begin+0xf84>)
 8001f9a:	f004 fe01 	bl	8006ba0 <UG_TextboxCreate>
				UG_TextboxSetFont(&LOGO, TXB_ID_0, &FONT_10X16);
 8001f9e:	4a32      	ldr	r2, [pc, #200]	; (8002068 <begin+0xf94>)
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	482d      	ldr	r0, [pc, #180]	; (8002058 <begin+0xf84>)
 8001fa4:	f004 ff24 	bl	8006df0 <UG_TextboxSetFont>
				UG_TextboxSetAlignment(&LOGO, TXB_ID_0, ALIGN_CENTER);
 8001fa8:	2212      	movs	r2, #18
 8001faa:	2100      	movs	r1, #0
 8001fac:	482a      	ldr	r0, [pc, #168]	; (8002058 <begin+0xf84>)
 8001fae:	f004 ff49 	bl	8006e44 <UG_TextboxSetAlignment>
				UG_TextboxSetBackColor(&LOGO, TXB_ID_0, C_BLACK);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4828      	ldr	r0, [pc, #160]	; (8002058 <begin+0xf84>)
 8001fb8:	f004 fec5 	bl	8006d46 <UG_TextboxSetBackColor>
				UG_TextboxSetForeColor(&LOGO, TXB_ID_0, C_WHITE);
 8001fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4825      	ldr	r0, [pc, #148]	; (8002058 <begin+0xf84>)
 8001fc4:	f004 fe94 	bl	8006cf0 <UG_TextboxSetForeColor>
				UG_TextboxSetText(&LOGO, TXB_ID_0, "http://www.fnirsi.cn");
 8001fc8:	4a28      	ldr	r2, [pc, #160]	; (800206c <begin+0xf98>)
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4822      	ldr	r0, [pc, #136]	; (8002058 <begin+0xf84>)
 8001fce:	f004 fee5 	bl	8006d9c <UG_TextboxSetText>
				UG_TextboxShow(&LOGO, TXB_ID_0);
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4820      	ldr	r0, [pc, #128]	; (8002058 <begin+0xf84>)
 8001fd6:	f004 fe63 	bl	8006ca0 <UG_TextboxShow>

				UG_TextboxCreate(&LOGO, &WD_graphic, TXB_ID_1, 90, 85, 230, 115);
 8001fda:	2373      	movs	r3, #115	; 0x73
 8001fdc:	9302      	str	r3, [sp, #8]
 8001fde:	23e6      	movs	r3, #230	; 0xe6
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	2355      	movs	r3, #85	; 0x55
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	235a      	movs	r3, #90	; 0x5a
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4921      	ldr	r1, [pc, #132]	; (8002070 <begin+0xf9c>)
 8001fec:	481a      	ldr	r0, [pc, #104]	; (8002058 <begin+0xf84>)
 8001fee:	f004 fdd7 	bl	8006ba0 <UG_TextboxCreate>
				UG_TextboxSetFont(&LOGO, TXB_ID_1, &FONT_12X20);
 8001ff2:	4a13      	ldr	r2, [pc, #76]	; (8002040 <begin+0xf6c>)
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	4818      	ldr	r0, [pc, #96]	; (8002058 <begin+0xf84>)
 8001ff8:	f004 fefa 	bl	8006df0 <UG_TextboxSetFont>
				UG_TextboxSetAlignment(&LOGO, TXB_ID_1, ALIGN_CENTER);
 8001ffc:	2212      	movs	r2, #18
 8001ffe:	2101      	movs	r1, #1
 8002000:	4815      	ldr	r0, [pc, #84]	; (8002058 <begin+0xf84>)
 8002002:	f004 ff1f 	bl	8006e44 <UG_TextboxSetAlignment>
				UG_TextboxSetBackColor(&LOGO, TXB_ID_1, C_YELLOW);
 8002006:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800200a:	2101      	movs	r1, #1
 800200c:	4812      	ldr	r0, [pc, #72]	; (8002058 <begin+0xf84>)
 800200e:	f004 fe9a 	bl	8006d46 <UG_TextboxSetBackColor>
				UG_TextboxSetForeColor(&LOGO, TXB_ID_1, C_BLACK);
 8002012:	2200      	movs	r2, #0
 8002014:	2101      	movs	r1, #1
 8002016:	4810      	ldr	r0, [pc, #64]	; (8002058 <begin+0xf84>)
 8002018:	f004 fe6a 	bl	8006cf0 <UG_TextboxSetForeColor>
				UG_TextboxSetText(&LOGO, TXB_ID_1, "WD-02");
 800201c:	4a15      	ldr	r2, [pc, #84]	; (8002074 <begin+0xfa0>)
 800201e:	2101      	movs	r1, #1
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <begin+0xf84>)
 8002022:	f004 febb 	bl	8006d9c <UG_TextboxSetText>
				UG_TextboxShow(&LOGO, TXB_ID_1);
 8002026:	2101      	movs	r1, #1
 8002028:	480b      	ldr	r0, [pc, #44]	; (8002058 <begin+0xf84>)
 800202a:	f004 fe39 	bl	8006ca0 <UG_TextboxShow>





}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000194 	.word	0x20000194
 8002038:	08007ac0 	.word	0x08007ac0
 800203c:	200004fc 	.word	0x200004fc
 8002040:	0800e458 	.word	0x0800e458
 8002044:	08007ac8 	.word	0x08007ac8
 8002048:	20000510 	.word	0x20000510
 800204c:	08007ad0 	.word	0x08007ad0
 8002050:	0800209d 	.word	0x0800209d
 8002054:	20000bb8 	.word	0x20000bb8
 8002058:	20000b84 	.word	0x20000b84
 800205c:	20000e38 	.word	0x20000e38
 8002060:	08007b08 	.word	0x08007b08
 8002064:	20000180 	.word	0x20000180
 8002068:	0800e444 	.word	0x0800e444
 800206c:	08007ad8 	.word	0x08007ad8
 8002070:	2000016c 	.word	0x2000016c
 8002074:	08007af0 	.word	0x08007af0

08002078 <window_page_1_callback>:



void window_page_1_callback(UG_MESSAGE *msg){
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <window_graph_callback>:
void window_graph_callback(UG_MESSAGE *msg){}
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <window_logo_callback>:

void window_logo_callback(UG_MESSAGE *msg){}
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <window_page_2_callback>:

void window_page_2_callback(UG_MESSAGE *msg){}
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c4:	f000 faaa 	bl	800261c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c8:	f000 f81a 	bl	8002100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020cc:	f000 f8da 	bl	8002284 <MX_GPIO_Init>
  MX_TIM2_Init();
 80020d0:	f000 f88a 	bl	80021e8 <MX_TIM2_Init>
  MX_I2C1_Init();
 80020d4:	f000 f85a 	bl	800218c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SW3516_init();
 80020d8:	f7fe fd64 	bl	8000ba4 <SW3516_init>
  Display_Init();
 80020dc:	f005 f970 	bl	80073c0 <Display_Init>
  begin();
 80020e0:	f7fe fff8 	bl	80010d4 <begin>

  Page_logo();
 80020e4:	f7fe ffe0 	bl	80010a8 <Page_logo>
  Page_1();
 80020e8:	f7fe fe88 	bl	8000dfc <Page_1>
  Page_2();
 80020ec:	f7fe ff8a 	bl	8001004 <Page_2>
  Page_3();
 80020f0:	f7fe ffb2 	bl	8001058 <Page_3>

  HAL_TIM_Base_Start_IT(&htim2);
 80020f4:	4801      	ldr	r0, [pc, #4]	; (80020fc <main+0x3c>)
 80020f6:	f002 fa49 	bl	800458c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <main+0x3a>
 80020fc:	20000e94 	.word	0x20000e94

08002100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b090      	sub	sp, #64	; 0x40
 8002104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002106:	f107 0318 	add.w	r3, r7, #24
 800210a:	2228      	movs	r2, #40	; 0x28
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f005 fc56 	bl	80079c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002122:	2301      	movs	r3, #1
 8002124:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800212a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002130:	2301      	movs	r3, #1
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002134:	2302      	movs	r3, #2
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002138:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800213c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800213e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002142:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002144:	f107 0318 	add.w	r3, r7, #24
 8002148:	4618      	mov	r0, r3
 800214a:	f001 fdc9 	bl	8003ce0 <HAL_RCC_OscConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002154:	f000 f972 	bl	800243c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002158:	230f      	movs	r3, #15
 800215a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215c:	2302      	movs	r3, #2
 800215e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2102      	movs	r1, #2
 8002172:	4618      	mov	r0, r3
 8002174:	f002 f836 	bl	80041e4 <HAL_RCC_ClockConfig>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800217e:	f000 f95d 	bl	800243c <Error_Handler>
  }
}
 8002182:	bf00      	nop
 8002184:	3740      	adds	r7, #64	; 0x40
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <MX_I2C1_Init+0x50>)
 8002192:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <MX_I2C1_Init+0x54>)
 8002194:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <MX_I2C1_Init+0x50>)
 8002198:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <MX_I2C1_Init+0x58>)
 800219a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <MX_I2C1_Init+0x50>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <MX_I2C1_Init+0x50>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <MX_I2C1_Init+0x50>)
 80021aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <MX_I2C1_Init+0x50>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <MX_I2C1_Init+0x50>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021bc:	4b07      	ldr	r3, [pc, #28]	; (80021dc <MX_I2C1_Init+0x50>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <MX_I2C1_Init+0x50>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021c8:	4804      	ldr	r0, [pc, #16]	; (80021dc <MX_I2C1_Init+0x50>)
 80021ca:	f000 fd89 	bl	8002ce0 <HAL_I2C_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021d4:	f000 f932 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000e40 	.word	0x20000e40
 80021e0:	40005400 	.word	0x40005400
 80021e4:	000186a0 	.word	0x000186a0

080021e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fc:	463b      	mov	r3, r7
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <MX_TIM2_Init+0x98>)
 8002206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800220a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 800220c:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <MX_TIM2_Init+0x98>)
 800220e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002212:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <MX_TIM2_Init+0x98>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200;
 800221a:	4b19      	ldr	r3, [pc, #100]	; (8002280 <MX_TIM2_Init+0x98>)
 800221c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002220:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <MX_TIM2_Init+0x98>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <MX_TIM2_Init+0x98>)
 800222a:	2280      	movs	r2, #128	; 0x80
 800222c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800222e:	4814      	ldr	r0, [pc, #80]	; (8002280 <MX_TIM2_Init+0x98>)
 8002230:	f002 f95c 	bl	80044ec <HAL_TIM_Base_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800223a:	f000 f8ff 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002242:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002244:	f107 0308 	add.w	r3, r7, #8
 8002248:	4619      	mov	r1, r3
 800224a:	480d      	ldr	r0, [pc, #52]	; (8002280 <MX_TIM2_Init+0x98>)
 800224c:	f002 faf8 	bl	8004840 <HAL_TIM_ConfigClockSource>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002256:	f000 f8f1 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002262:	463b      	mov	r3, r7
 8002264:	4619      	mov	r1, r3
 8002266:	4806      	ldr	r0, [pc, #24]	; (8002280 <MX_TIM2_Init+0x98>)
 8002268:	f002 fcca 	bl	8004c00 <HAL_TIMEx_MasterConfigSynchronization>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002272:	f000 f8e3 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000e94 	.word	0x20000e94

08002284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002298:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <MX_GPIO_Init+0x134>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a46      	ldr	r2, [pc, #280]	; (80023b8 <MX_GPIO_Init+0x134>)
 800229e:	f043 0310 	orr.w	r3, r3, #16
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	4b44      	ldr	r3, [pc, #272]	; (80023b8 <MX_GPIO_Init+0x134>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b0:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <MX_GPIO_Init+0x134>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4a40      	ldr	r2, [pc, #256]	; (80023b8 <MX_GPIO_Init+0x134>)
 80022b6:	f043 0320 	orr.w	r3, r3, #32
 80022ba:	6193      	str	r3, [r2, #24]
 80022bc:	4b3e      	ldr	r3, [pc, #248]	; (80023b8 <MX_GPIO_Init+0x134>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c8:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <MX_GPIO_Init+0x134>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	4a3a      	ldr	r2, [pc, #232]	; (80023b8 <MX_GPIO_Init+0x134>)
 80022ce:	f043 0304 	orr.w	r3, r3, #4
 80022d2:	6193      	str	r3, [r2, #24]
 80022d4:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <MX_GPIO_Init+0x134>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e0:	4b35      	ldr	r3, [pc, #212]	; (80023b8 <MX_GPIO_Init+0x134>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	4a34      	ldr	r2, [pc, #208]	; (80023b8 <MX_GPIO_Init+0x134>)
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	6193      	str	r3, [r2, #24]
 80022ec:	4b32      	ldr	r3, [pc, #200]	; (80023b8 <MX_GPIO_Init+0x134>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|LCD_WR_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80022f8:	2200      	movs	r2, #0
 80022fa:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 80022fe:	482f      	ldr	r0, [pc, #188]	; (80023bc <MX_GPIO_Init+0x138>)
 8002300:	f000 fca4 	bl	8002c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LCD_RD_Pin|LCD_D2_Pin|LCD_D3_Pin
 8002304:	2200      	movs	r2, #0
 8002306:	f64f 7103 	movw	r1, #65283	; 0xff03
 800230a:	482d      	ldr	r0, [pc, #180]	; (80023c0 <MX_GPIO_Init+0x13c>)
 800230c:	f000 fc9e 	bl	8002c4c <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
                          |LCD_D0_Pin|LCD_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ENC_push_button_Pin */
  GPIO_InitStruct.Pin = ENC_push_button_Pin;
 8002310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002316:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <MX_GPIO_Init+0x140>)
 8002318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800231a:	2301      	movs	r3, #1
 800231c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_push_button_GPIO_Port, &GPIO_InitStruct);
 800231e:	f107 0310 	add.w	r3, r7, #16
 8002322:	4619      	mov	r1, r3
 8002324:	4828      	ldr	r0, [pc, #160]	; (80023c8 <MX_GPIO_Init+0x144>)
 8002326:	f000 fb0d 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800232a:	2320      	movs	r3, #32
 800232c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232e:	2301      	movs	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2302      	movs	r3, #2
 8002338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233a:	f107 0310 	add.w	r3, r7, #16
 800233e:	4619      	mov	r1, r3
 8002340:	481e      	ldr	r0, [pc, #120]	; (80023bc <MX_GPIO_Init+0x138>)
 8002342:	f000 faff 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LCD_RD_Pin LCD_D2_Pin LCD_D3_Pin
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D0_Pin
                           LCD_D1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RD_Pin|LCD_D2_Pin|LCD_D3_Pin
 8002346:	f647 7303 	movw	r3, #32515	; 0x7f03
 800234a:	613b      	str	r3, [r7, #16]
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D0_Pin
                          |LCD_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234c:	2301      	movs	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	4619      	mov	r1, r3
 800235e:	4818      	ldr	r0, [pc, #96]	; (80023c0 <MX_GPIO_Init+0x13c>)
 8002360:	f000 faf0 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 8002364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236a:	2301      	movs	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2302      	movs	r3, #2
 8002374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	4619      	mov	r1, r3
 800237c:	4810      	ldr	r0, [pc, #64]	; (80023c0 <MX_GPIO_Init+0x13c>)
 800237e:	f000 fae1 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_WR_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_WR_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8002382:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002388:	2301      	movs	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002390:	2303      	movs	r3, #3
 8002392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	f107 0310 	add.w	r3, r7, #16
 8002398:	4619      	mov	r1, r3
 800239a:	4808      	ldr	r0, [pc, #32]	; (80023bc <MX_GPIO_Init+0x138>)
 800239c:	f000 fad2 	bl	8002944 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2100      	movs	r1, #0
 80023a4:	2028      	movs	r0, #40	; 0x28
 80023a6:	f000 fa96 	bl	80028d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023aa:	2028      	movs	r0, #40	; 0x28
 80023ac:	f000 faaf 	bl	800290e <HAL_NVIC_EnableIRQ>

}
 80023b0:	bf00      	nop
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40010800 	.word	0x40010800
 80023c0:	40010c00 	.word	0x40010c00
 80023c4:	10210000 	.word	0x10210000
 80023c8:	40011000 	.word	0x40011000

080023cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == ENC_push_button_Pin){
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023dc:	d109      	bne.n	80023f2 <HAL_GPIO_EXTI_Callback+0x26>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80023de:	2120      	movs	r1, #32
 80023e0:	4806      	ldr	r0, [pc, #24]	; (80023fc <HAL_GPIO_EXTI_Callback+0x30>)
 80023e2:	f000 fc4b 	bl	8002c7c <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Start_IT(&htim2);
 80023e6:	4806      	ldr	r0, [pc, #24]	; (8002400 <HAL_GPIO_EXTI_Callback+0x34>)
 80023e8:	f002 f8d0 	bl	800458c <HAL_TIM_Base_Start_IT>
		state = 0;
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_GPIO_EXTI_Callback+0x38>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]

	}
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40010800 	.word	0x40010800
 8002400:	20000e94 	.word	0x20000e94
 8002404:	20000006 	.word	0x20000006

08002408 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af02      	add	r7, sp, #8
 800240e:	6078      	str	r0, [r7, #4]
//						}
//
//					}
//	HAL_TIM_Base_Stop_IT(&htim2);

	 convert_ADC(&current.currentA, &current.currentC, &current.voltagein, &current.voltageout, &current.temperature);
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002416:	4a06      	ldr	r2, [pc, #24]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002418:	4906      	ldr	r1, [pc, #24]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800241a:	4807      	ldr	r0, [pc, #28]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800241c:	f7fe fc22 	bl	8000c64 <convert_ADC>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000050 	.word	0x20000050
 800242c:	2000004c 	.word	0x2000004c
 8002430:	20000048 	.word	0x20000048
 8002434:	20000044 	.word	0x20000044
 8002438:	20000040 	.word	0x20000040

0800243c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002440:	b672      	cpsid	i
}
 8002442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002444:	e7fe      	b.n	8002444 <Error_Handler+0x8>
	...

08002448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_MspInit+0x40>)
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <HAL_MspInit+0x40>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6193      	str	r3, [r2, #24]
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_MspInit+0x40>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_MspInit+0x40>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_MspInit+0x40>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	61d3      	str	r3, [r2, #28]
 8002472:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_MspInit+0x40>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	40021000 	.word	0x40021000

0800248c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a15      	ldr	r2, [pc, #84]	; (80024fc <HAL_I2C_MspInit+0x70>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d123      	bne.n	80024f4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_I2C_MspInit+0x74>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a13      	ldr	r2, [pc, #76]	; (8002500 <HAL_I2C_MspInit+0x74>)
 80024b2:	f043 0308 	orr.w	r3, r3, #8
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_I2C_MspInit+0x74>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024c4:	23c0      	movs	r3, #192	; 0xc0
 80024c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c8:	2312      	movs	r3, #18
 80024ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024cc:	2303      	movs	r3, #3
 80024ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	4619      	mov	r1, r3
 80024d6:	480b      	ldr	r0, [pc, #44]	; (8002504 <HAL_I2C_MspInit+0x78>)
 80024d8:	f000 fa34 	bl	8002944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_I2C_MspInit+0x74>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	4a07      	ldr	r2, [pc, #28]	; (8002500 <HAL_I2C_MspInit+0x74>)
 80024e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024e6:	61d3      	str	r3, [r2, #28]
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_I2C_MspInit+0x74>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024f4:	bf00      	nop
 80024f6:	3720      	adds	r7, #32
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40005400 	.word	0x40005400
 8002500:	40021000 	.word	0x40021000
 8002504:	40010c00 	.word	0x40010c00

08002508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002518:	d113      	bne.n	8002542 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_TIM_Base_MspInit+0x44>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4a0b      	ldr	r2, [pc, #44]	; (800254c <HAL_TIM_Base_MspInit+0x44>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	61d3      	str	r3, [r2, #28]
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_TIM_Base_MspInit+0x44>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	2100      	movs	r1, #0
 8002536:	201c      	movs	r0, #28
 8002538:	f000 f9cd 	bl	80028d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800253c:	201c      	movs	r0, #28
 800253e:	f000 f9e6 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000

08002550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <NMI_Handler+0x4>

08002556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <HardFault_Handler+0x4>

0800255c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <MemManage_Handler+0x4>

08002562 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002566:	e7fe      	b.n	8002566 <BusFault_Handler+0x4>

08002568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800256c:	e7fe      	b.n	800256c <UsageFault_Handler+0x4>

0800256e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002596:	f000 f887 	bl	80026a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <TIM2_IRQHandler+0x10>)
 80025a6:	f002 f843 	bl	8004630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000e94 	.word	0x20000e94

080025b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_push_button_Pin);
 80025b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025bc:	f000 fb78 	bl	8002cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d0:	480c      	ldr	r0, [pc, #48]	; (8002604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025d2:	490d      	ldr	r1, [pc, #52]	; (8002608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025d4:	4a0d      	ldr	r2, [pc, #52]	; (800260c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d8:	e002      	b.n	80025e0 <LoopCopyDataInit>

080025da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025de:	3304      	adds	r3, #4

080025e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e4:	d3f9      	bcc.n	80025da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025e8:	4c0a      	ldr	r4, [pc, #40]	; (8002614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ec:	e001      	b.n	80025f2 <LoopFillZerobss>

080025ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f0:	3204      	adds	r2, #4

080025f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f4:	d3fb      	bcc.n	80025ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025f6:	f7ff ffe5 	bl	80025c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025fa:	f005 f9bd 	bl	8007978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025fe:	f7ff fd5f 	bl	80020c0 <main>
  bx lr
 8002602:	4770      	bx	lr
  ldr r0, =_sdata
 8002604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002608:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800260c:	0800e4a0 	.word	0x0800e4a0
  ldr r2, =_sbss
 8002610:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002614:	20000f58 	.word	0x20000f58

08002618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002618:	e7fe      	b.n	8002618 <ADC1_2_IRQHandler>
	...

0800261c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_Init+0x28>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a07      	ldr	r2, [pc, #28]	; (8002644 <HAL_Init+0x28>)
 8002626:	f043 0310 	orr.w	r3, r3, #16
 800262a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800262c:	2003      	movs	r0, #3
 800262e:	f000 f947 	bl	80028c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002632:	200f      	movs	r0, #15
 8002634:	f000 f808 	bl	8002648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002638:	f7ff ff06 	bl	8002448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40022000 	.word	0x40022000

08002648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_InitTick+0x54>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_InitTick+0x58>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002662:	fbb2 f3f3 	udiv	r3, r2, r3
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f95f 	bl	800292a <HAL_SYSTICK_Config>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e00e      	b.n	8002694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b0f      	cmp	r3, #15
 800267a:	d80a      	bhi.n	8002692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800267c:	2200      	movs	r2, #0
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	f000 f927 	bl	80028d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002688:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <HAL_InitTick+0x5c>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e000      	b.n	8002694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000008 	.word	0x20000008
 80026a0:	20000010 	.word	0x20000010
 80026a4:	2000000c 	.word	0x2000000c

080026a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_IncTick+0x1c>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_IncTick+0x20>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <HAL_IncTick+0x20>)
 80026ba:	6013      	str	r3, [r2, #0]
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	20000010 	.word	0x20000010
 80026c8:	20000edc 	.word	0x20000edc

080026cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTick;
 80026d0:	4b02      	ldr	r3, [pc, #8]	; (80026dc <HAL_GetTick+0x10>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	20000edc 	.word	0x20000edc

080026e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7ff fff0 	bl	80026cc <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d005      	beq.n	8002706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_Delay+0x44>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002706:	bf00      	nop
 8002708:	f7ff ffe0 	bl	80026cc <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	429a      	cmp	r2, r3
 8002716:	d8f7      	bhi.n	8002708 <HAL_Delay+0x28>
  {
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000010 	.word	0x20000010

08002728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002744:	4013      	ands	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275a:	4a04      	ldr	r2, [pc, #16]	; (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	60d3      	str	r3, [r2, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <__NVIC_GetPriorityGrouping+0x18>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	f003 0307 	and.w	r3, r3, #7
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	2b00      	cmp	r3, #0
 800279c:	db0b      	blt.n	80027b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	4906      	ldr	r1, [pc, #24]	; (80027c0 <__NVIC_EnableIRQ+0x34>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	2001      	movs	r0, #1
 80027ae:	fa00 f202 	lsl.w	r2, r0, r2
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db0a      	blt.n	80027ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	490c      	ldr	r1, [pc, #48]	; (8002810 <__NVIC_SetPriority+0x4c>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	440b      	add	r3, r1
 80027e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ec:	e00a      	b.n	8002804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4908      	ldr	r1, [pc, #32]	; (8002814 <__NVIC_SetPriority+0x50>)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	3b04      	subs	r3, #4
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	440b      	add	r3, r1
 8002802:	761a      	strb	r2, [r3, #24]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000e100 	.word	0xe000e100
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f1c3 0307 	rsb	r3, r3, #7
 8002832:	2b04      	cmp	r3, #4
 8002834:	bf28      	it	cs
 8002836:	2304      	movcs	r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3304      	adds	r3, #4
 800283e:	2b06      	cmp	r3, #6
 8002840:	d902      	bls.n	8002848 <NVIC_EncodePriority+0x30>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b03      	subs	r3, #3
 8002846:	e000      	b.n	800284a <NVIC_EncodePriority+0x32>
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	401a      	ands	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002860:	f04f 31ff 	mov.w	r1, #4294967295
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43d9      	mvns	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	4313      	orrs	r3, r2
         );
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800288c:	d301      	bcc.n	8002892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288e:	2301      	movs	r3, #1
 8002890:	e00f      	b.n	80028b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002892:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <SysTick_Config+0x40>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3b01      	subs	r3, #1
 8002898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289a:	210f      	movs	r1, #15
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	f7ff ff90 	bl	80027c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <SysTick_Config+0x40>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028aa:	4b04      	ldr	r3, [pc, #16]	; (80028bc <SysTick_Config+0x40>)
 80028ac:	2207      	movs	r2, #7
 80028ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	e000e010 	.word	0xe000e010

080028c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff2d 	bl	8002728 <__NVIC_SetPriorityGrouping>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e8:	f7ff ff42 	bl	8002770 <__NVIC_GetPriorityGrouping>
 80028ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	6978      	ldr	r0, [r7, #20]
 80028f4:	f7ff ff90 	bl	8002818 <NVIC_EncodePriority>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff5f 	bl	80027c4 <__NVIC_SetPriority>
}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff35 	bl	800278c <__NVIC_EnableIRQ>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ffa2 	bl	800287c <SysTick_Config>
 8002938:	4603      	mov	r3, r0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b08b      	sub	sp, #44	; 0x2c
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002952:	2300      	movs	r3, #0
 8002954:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002956:	e169      	b.n	8002c2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002958:	2201      	movs	r2, #1
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	429a      	cmp	r2, r3
 8002972:	f040 8158 	bne.w	8002c26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4a9a      	ldr	r2, [pc, #616]	; (8002be4 <HAL_GPIO_Init+0x2a0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d05e      	beq.n	8002a3e <HAL_GPIO_Init+0xfa>
 8002980:	4a98      	ldr	r2, [pc, #608]	; (8002be4 <HAL_GPIO_Init+0x2a0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d875      	bhi.n	8002a72 <HAL_GPIO_Init+0x12e>
 8002986:	4a98      	ldr	r2, [pc, #608]	; (8002be8 <HAL_GPIO_Init+0x2a4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d058      	beq.n	8002a3e <HAL_GPIO_Init+0xfa>
 800298c:	4a96      	ldr	r2, [pc, #600]	; (8002be8 <HAL_GPIO_Init+0x2a4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d86f      	bhi.n	8002a72 <HAL_GPIO_Init+0x12e>
 8002992:	4a96      	ldr	r2, [pc, #600]	; (8002bec <HAL_GPIO_Init+0x2a8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d052      	beq.n	8002a3e <HAL_GPIO_Init+0xfa>
 8002998:	4a94      	ldr	r2, [pc, #592]	; (8002bec <HAL_GPIO_Init+0x2a8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d869      	bhi.n	8002a72 <HAL_GPIO_Init+0x12e>
 800299e:	4a94      	ldr	r2, [pc, #592]	; (8002bf0 <HAL_GPIO_Init+0x2ac>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d04c      	beq.n	8002a3e <HAL_GPIO_Init+0xfa>
 80029a4:	4a92      	ldr	r2, [pc, #584]	; (8002bf0 <HAL_GPIO_Init+0x2ac>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d863      	bhi.n	8002a72 <HAL_GPIO_Init+0x12e>
 80029aa:	4a92      	ldr	r2, [pc, #584]	; (8002bf4 <HAL_GPIO_Init+0x2b0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d046      	beq.n	8002a3e <HAL_GPIO_Init+0xfa>
 80029b0:	4a90      	ldr	r2, [pc, #576]	; (8002bf4 <HAL_GPIO_Init+0x2b0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d85d      	bhi.n	8002a72 <HAL_GPIO_Init+0x12e>
 80029b6:	2b12      	cmp	r3, #18
 80029b8:	d82a      	bhi.n	8002a10 <HAL_GPIO_Init+0xcc>
 80029ba:	2b12      	cmp	r3, #18
 80029bc:	d859      	bhi.n	8002a72 <HAL_GPIO_Init+0x12e>
 80029be:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <HAL_GPIO_Init+0x80>)
 80029c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c4:	08002a3f 	.word	0x08002a3f
 80029c8:	08002a19 	.word	0x08002a19
 80029cc:	08002a2b 	.word	0x08002a2b
 80029d0:	08002a6d 	.word	0x08002a6d
 80029d4:	08002a73 	.word	0x08002a73
 80029d8:	08002a73 	.word	0x08002a73
 80029dc:	08002a73 	.word	0x08002a73
 80029e0:	08002a73 	.word	0x08002a73
 80029e4:	08002a73 	.word	0x08002a73
 80029e8:	08002a73 	.word	0x08002a73
 80029ec:	08002a73 	.word	0x08002a73
 80029f0:	08002a73 	.word	0x08002a73
 80029f4:	08002a73 	.word	0x08002a73
 80029f8:	08002a73 	.word	0x08002a73
 80029fc:	08002a73 	.word	0x08002a73
 8002a00:	08002a73 	.word	0x08002a73
 8002a04:	08002a73 	.word	0x08002a73
 8002a08:	08002a21 	.word	0x08002a21
 8002a0c:	08002a35 	.word	0x08002a35
 8002a10:	4a79      	ldr	r2, [pc, #484]	; (8002bf8 <HAL_GPIO_Init+0x2b4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a16:	e02c      	b.n	8002a72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	623b      	str	r3, [r7, #32]
          break;
 8002a1e:	e029      	b.n	8002a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	3304      	adds	r3, #4
 8002a26:	623b      	str	r3, [r7, #32]
          break;
 8002a28:	e024      	b.n	8002a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	3308      	adds	r3, #8
 8002a30:	623b      	str	r3, [r7, #32]
          break;
 8002a32:	e01f      	b.n	8002a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	623b      	str	r3, [r7, #32]
          break;
 8002a3c:	e01a      	b.n	8002a74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a46:	2304      	movs	r3, #4
 8002a48:	623b      	str	r3, [r7, #32]
          break;
 8002a4a:	e013      	b.n	8002a74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a54:	2308      	movs	r3, #8
 8002a56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	611a      	str	r2, [r3, #16]
          break;
 8002a5e:	e009      	b.n	8002a74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a60:	2308      	movs	r3, #8
 8002a62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	615a      	str	r2, [r3, #20]
          break;
 8002a6a:	e003      	b.n	8002a74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	623b      	str	r3, [r7, #32]
          break;
 8002a70:	e000      	b.n	8002a74 <HAL_GPIO_Init+0x130>
          break;
 8002a72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2bff      	cmp	r3, #255	; 0xff
 8002a78:	d801      	bhi.n	8002a7e <HAL_GPIO_Init+0x13a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	e001      	b.n	8002a82 <HAL_GPIO_Init+0x13e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3304      	adds	r3, #4
 8002a82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2bff      	cmp	r3, #255	; 0xff
 8002a88:	d802      	bhi.n	8002a90 <HAL_GPIO_Init+0x14c>
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	e002      	b.n	8002a96 <HAL_GPIO_Init+0x152>
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	3b08      	subs	r3, #8
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	210f      	movs	r1, #15
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	6a39      	ldr	r1, [r7, #32]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80b1 	beq.w	8002c26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ac4:	4b4d      	ldr	r3, [pc, #308]	; (8002bfc <HAL_GPIO_Init+0x2b8>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	4a4c      	ldr	r2, [pc, #304]	; (8002bfc <HAL_GPIO_Init+0x2b8>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6193      	str	r3, [r2, #24]
 8002ad0:	4b4a      	ldr	r3, [pc, #296]	; (8002bfc <HAL_GPIO_Init+0x2b8>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002adc:	4a48      	ldr	r2, [pc, #288]	; (8002c00 <HAL_GPIO_Init+0x2bc>)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	220f      	movs	r2, #15
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a40      	ldr	r2, [pc, #256]	; (8002c04 <HAL_GPIO_Init+0x2c0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d013      	beq.n	8002b30 <HAL_GPIO_Init+0x1ec>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a3f      	ldr	r2, [pc, #252]	; (8002c08 <HAL_GPIO_Init+0x2c4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00d      	beq.n	8002b2c <HAL_GPIO_Init+0x1e8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a3e      	ldr	r2, [pc, #248]	; (8002c0c <HAL_GPIO_Init+0x2c8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d007      	beq.n	8002b28 <HAL_GPIO_Init+0x1e4>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a3d      	ldr	r2, [pc, #244]	; (8002c10 <HAL_GPIO_Init+0x2cc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_GPIO_Init+0x1e0>
 8002b20:	2303      	movs	r3, #3
 8002b22:	e006      	b.n	8002b32 <HAL_GPIO_Init+0x1ee>
 8002b24:	2304      	movs	r3, #4
 8002b26:	e004      	b.n	8002b32 <HAL_GPIO_Init+0x1ee>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e002      	b.n	8002b32 <HAL_GPIO_Init+0x1ee>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <HAL_GPIO_Init+0x1ee>
 8002b30:	2300      	movs	r3, #0
 8002b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b34:	f002 0203 	and.w	r2, r2, #3
 8002b38:	0092      	lsls	r2, r2, #2
 8002b3a:	4093      	lsls	r3, r2
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b42:	492f      	ldr	r1, [pc, #188]	; (8002c00 <HAL_GPIO_Init+0x2bc>)
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d006      	beq.n	8002b6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b5c:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_GPIO_Init+0x2d0>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	492c      	ldr	r1, [pc, #176]	; (8002c14 <HAL_GPIO_Init+0x2d0>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
 8002b68:	e006      	b.n	8002b78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <HAL_GPIO_Init+0x2d0>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	4928      	ldr	r1, [pc, #160]	; (8002c14 <HAL_GPIO_Init+0x2d0>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d006      	beq.n	8002b92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b84:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <HAL_GPIO_Init+0x2d0>)
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	4922      	ldr	r1, [pc, #136]	; (8002c14 <HAL_GPIO_Init+0x2d0>)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
 8002b90:	e006      	b.n	8002ba0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b92:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <HAL_GPIO_Init+0x2d0>)
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	491e      	ldr	r1, [pc, #120]	; (8002c14 <HAL_GPIO_Init+0x2d0>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d006      	beq.n	8002bba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_GPIO_Init+0x2d0>)
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	4918      	ldr	r1, [pc, #96]	; (8002c14 <HAL_GPIO_Init+0x2d0>)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]
 8002bb8:	e006      	b.n	8002bc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bba:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <HAL_GPIO_Init+0x2d0>)
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	4914      	ldr	r1, [pc, #80]	; (8002c14 <HAL_GPIO_Init+0x2d0>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d021      	beq.n	8002c18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_GPIO_Init+0x2d0>)
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	490e      	ldr	r1, [pc, #56]	; (8002c14 <HAL_GPIO_Init+0x2d0>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60cb      	str	r3, [r1, #12]
 8002be0:	e021      	b.n	8002c26 <HAL_GPIO_Init+0x2e2>
 8002be2:	bf00      	nop
 8002be4:	10320000 	.word	0x10320000
 8002be8:	10310000 	.word	0x10310000
 8002bec:	10220000 	.word	0x10220000
 8002bf0:	10210000 	.word	0x10210000
 8002bf4:	10120000 	.word	0x10120000
 8002bf8:	10110000 	.word	0x10110000
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40010000 	.word	0x40010000
 8002c04:	40010800 	.word	0x40010800
 8002c08:	40010c00 	.word	0x40010c00
 8002c0c:	40011000 	.word	0x40011000
 8002c10:	40011400 	.word	0x40011400
 8002c14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_GPIO_Init+0x304>)
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	4909      	ldr	r1, [pc, #36]	; (8002c48 <HAL_GPIO_Init+0x304>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	3301      	adds	r3, #1
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	fa22 f303 	lsr.w	r3, r2, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f47f ae8e 	bne.w	8002958 <HAL_GPIO_Init+0x14>
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	372c      	adds	r7, #44	; 0x2c
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	40010400 	.word	0x40010400

08002c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	807b      	strh	r3, [r7, #2]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c5c:	787b      	ldrb	r3, [r7, #1]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c62:	887a      	ldrh	r2, [r7, #2]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c68:	e003      	b.n	8002c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c6a:	887b      	ldrh	r3, [r7, #2]
 8002c6c:	041a      	lsls	r2, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	611a      	str	r2, [r3, #16]
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4013      	ands	r3, r2
 8002c94:	041a      	lsls	r2, r3, #16
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	43d9      	mvns	r1, r3
 8002c9a:	887b      	ldrh	r3, [r7, #2]
 8002c9c:	400b      	ands	r3, r1
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	611a      	str	r2, [r3, #16]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cba:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d006      	beq.n	8002cd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cc6:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fb7c 	bl	80023cc <HAL_GPIO_EXTI_Callback>
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40010400 	.word	0x40010400

08002ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e12b      	b.n	8002f4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff fbc0 	bl	800248c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2224      	movs	r2, #36	; 0x24
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d44:	f001 fba0 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8002d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4a81      	ldr	r2, [pc, #516]	; (8002f54 <HAL_I2C_Init+0x274>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d807      	bhi.n	8002d64 <HAL_I2C_Init+0x84>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4a80      	ldr	r2, [pc, #512]	; (8002f58 <HAL_I2C_Init+0x278>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	bf94      	ite	ls
 8002d5c:	2301      	movls	r3, #1
 8002d5e:	2300      	movhi	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e006      	b.n	8002d72 <HAL_I2C_Init+0x92>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a7d      	ldr	r2, [pc, #500]	; (8002f5c <HAL_I2C_Init+0x27c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	bf94      	ite	ls
 8002d6c:	2301      	movls	r3, #1
 8002d6e:	2300      	movhi	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e0e7      	b.n	8002f4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4a78      	ldr	r2, [pc, #480]	; (8002f60 <HAL_I2C_Init+0x280>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	0c9b      	lsrs	r3, r3, #18
 8002d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4a6a      	ldr	r2, [pc, #424]	; (8002f54 <HAL_I2C_Init+0x274>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d802      	bhi.n	8002db4 <HAL_I2C_Init+0xd4>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	3301      	adds	r3, #1
 8002db2:	e009      	b.n	8002dc8 <HAL_I2C_Init+0xe8>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	4a69      	ldr	r2, [pc, #420]	; (8002f64 <HAL_I2C_Init+0x284>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	495c      	ldr	r1, [pc, #368]	; (8002f54 <HAL_I2C_Init+0x274>)
 8002de4:	428b      	cmp	r3, r1
 8002de6:	d819      	bhi.n	8002e1c <HAL_I2C_Init+0x13c>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1e59      	subs	r1, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df6:	1c59      	adds	r1, r3, #1
 8002df8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dfc:	400b      	ands	r3, r1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_I2C_Init+0x138>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1e59      	subs	r1, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e10:	3301      	adds	r3, #1
 8002e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e16:	e051      	b.n	8002ebc <HAL_I2C_Init+0x1dc>
 8002e18:	2304      	movs	r3, #4
 8002e1a:	e04f      	b.n	8002ebc <HAL_I2C_Init+0x1dc>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d111      	bne.n	8002e48 <HAL_I2C_Init+0x168>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1e58      	subs	r0, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6859      	ldr	r1, [r3, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	440b      	add	r3, r1
 8002e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e36:	3301      	adds	r3, #1
 8002e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	e012      	b.n	8002e6e <HAL_I2C_Init+0x18e>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1e58      	subs	r0, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	0099      	lsls	r1, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Init+0x196>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e022      	b.n	8002ebc <HAL_I2C_Init+0x1dc>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10e      	bne.n	8002e9c <HAL_I2C_Init+0x1bc>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1e58      	subs	r0, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6859      	ldr	r1, [r3, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	440b      	add	r3, r1
 8002e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e90:	3301      	adds	r3, #1
 8002e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e9a:	e00f      	b.n	8002ebc <HAL_I2C_Init+0x1dc>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e58      	subs	r0, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	0099      	lsls	r1, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	6809      	ldr	r1, [r1, #0]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6911      	ldr	r1, [r2, #16]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68d2      	ldr	r2, [r2, #12]
 8002ef6:	4311      	orrs	r1, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	000186a0 	.word	0x000186a0
 8002f58:	001e847f 	.word	0x001e847f
 8002f5c:	003d08ff 	.word	0x003d08ff
 8002f60:	431bde83 	.word	0x431bde83
 8002f64:	10624dd3 	.word	0x10624dd3

08002f68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	4608      	mov	r0, r1
 8002f72:	4611      	mov	r1, r2
 8002f74:	461a      	mov	r2, r3
 8002f76:	4603      	mov	r3, r0
 8002f78:	817b      	strh	r3, [r7, #10]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	813b      	strh	r3, [r7, #8]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f82:	f7ff fba3 	bl	80026cc <HAL_GetTick>
 8002f86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	f040 80d9 	bne.w	8003148 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2319      	movs	r3, #25
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	496d      	ldr	r1, [pc, #436]	; (8003154 <HAL_I2C_Mem_Write+0x1ec>)
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fcc1 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fac:	2302      	movs	r3, #2
 8002fae:	e0cc      	b.n	800314a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_I2C_Mem_Write+0x56>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e0c5      	b.n	800314a <HAL_I2C_Mem_Write+0x1e2>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d007      	beq.n	8002fe4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2221      	movs	r2, #33	; 0x21
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2240      	movs	r2, #64	; 0x40
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a3a      	ldr	r2, [r7, #32]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003014:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a4d      	ldr	r2, [pc, #308]	; (8003158 <HAL_I2C_Mem_Write+0x1f0>)
 8003024:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003026:	88f8      	ldrh	r0, [r7, #6]
 8003028:	893a      	ldrh	r2, [r7, #8]
 800302a:	8979      	ldrh	r1, [r7, #10]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	9301      	str	r3, [sp, #4]
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	4603      	mov	r3, r0
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 faf8 	bl	800362c <I2C_RequestMemoryWrite>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d052      	beq.n	80030e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e081      	b.n	800314a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fd42 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00d      	beq.n	8003072 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	2b04      	cmp	r3, #4
 800305c:	d107      	bne.n	800306e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e06b      	b.n	800314a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	781a      	ldrb	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d11b      	bne.n	80030e8 <HAL_I2C_Mem_Write+0x180>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d017      	beq.n	80030e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1aa      	bne.n	8003046 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 fd2e 	bl	8003b56 <I2C_WaitOnBTFFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00d      	beq.n	800311c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	2b04      	cmp	r3, #4
 8003106:	d107      	bne.n	8003118 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003116:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e016      	b.n	800314a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	e000      	b.n	800314a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003148:	2302      	movs	r3, #2
  }
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	00100002 	.word	0x00100002
 8003158:	ffff0000 	.word	0xffff0000

0800315c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	4608      	mov	r0, r1
 8003166:	4611      	mov	r1, r2
 8003168:	461a      	mov	r2, r3
 800316a:	4603      	mov	r3, r0
 800316c:	817b      	strh	r3, [r7, #10]
 800316e:	460b      	mov	r3, r1
 8003170:	813b      	strh	r3, [r7, #8]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800317a:	f7ff faa7 	bl	80026cc <HAL_GetTick>
 800317e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b20      	cmp	r3, #32
 800318a:	f040 8244 	bne.w	8003616 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2319      	movs	r3, #25
 8003194:	2201      	movs	r2, #1
 8003196:	4982      	ldr	r1, [pc, #520]	; (80033a0 <HAL_I2C_Mem_Read+0x244>)
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fbc5 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
 80031a6:	e237      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_I2C_Mem_Read+0x5a>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e230      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d007      	beq.n	80031dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2222      	movs	r2, #34	; 0x22
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2240      	movs	r2, #64	; 0x40
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003206:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800320c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a62      	ldr	r2, [pc, #392]	; (80033a4 <HAL_I2C_Mem_Read+0x248>)
 800321c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800321e:	88f8      	ldrh	r0, [r7, #6]
 8003220:	893a      	ldrh	r2, [r7, #8]
 8003222:	8979      	ldrh	r1, [r7, #10]
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	4603      	mov	r3, r0
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fa92 	bl	8003758 <I2C_RequestMemoryRead>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e1ec      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003242:	2b00      	cmp	r3, #0
 8003244:	d113      	bne.n	800326e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e1c0      	b.n	80035f0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	2b01      	cmp	r3, #1
 8003274:	d11e      	bne.n	80032b4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003284:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003286:	b672      	cpsid	i
}
 8003288:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328a:	2300      	movs	r3, #0
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032b0:	b662      	cpsie	i
}
 80032b2:	e035      	b.n	8003320 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d11e      	bne.n	80032fa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032cc:	b672      	cpsid	i
}
 80032ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032f6:	b662      	cpsie	i
}
 80032f8:	e012      	b.n	8003320 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003308:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003320:	e166      	b.n	80035f0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	2b03      	cmp	r3, #3
 8003328:	f200 811f 	bhi.w	800356a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	2b01      	cmp	r3, #1
 8003332:	d123      	bne.n	800337c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003336:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fc4d 	bl	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e167      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	855a      	strh	r2, [r3, #42]	; 0x2a
 800337a:	e139      	b.n	80035f0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003380:	2b02      	cmp	r3, #2
 8003382:	d152      	bne.n	800342a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	2200      	movs	r2, #0
 800338c:	4906      	ldr	r1, [pc, #24]	; (80033a8 <HAL_I2C_Mem_Read+0x24c>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 faca 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e13c      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
 800339e:	bf00      	nop
 80033a0:	00100002 	.word	0x00100002
 80033a4:	ffff0000 	.word	0xffff0000
 80033a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80033ac:	b672      	cpsid	i
}
 80033ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033f2:	b662      	cpsie	i
}
 80033f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003428:	e0e2      	b.n	80035f0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	2200      	movs	r2, #0
 8003432:	497b      	ldr	r1, [pc, #492]	; (8003620 <HAL_I2C_Mem_Read+0x4c4>)
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fa77 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0e9      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003452:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003454:	b672      	cpsid	i
}
 8003456:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800348a:	4b66      	ldr	r3, [pc, #408]	; (8003624 <HAL_I2C_Mem_Read+0x4c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	08db      	lsrs	r3, r3, #3
 8003490:	4a65      	ldr	r2, [pc, #404]	; (8003628 <HAL_I2C_Mem_Read+0x4cc>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	0a1a      	lsrs	r2, r3, #8
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00da      	lsls	r2, r3, #3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d118      	bne.n	80034e2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f043 0220 	orr.w	r2, r3, #32
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80034d2:	b662      	cpsie	i
}
 80034d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e09a      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d1d9      	bne.n	80034a4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003532:	b662      	cpsie	i
}
 8003534:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003568:	e042      	b.n	80035f0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fb32 	bl	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e04c      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d118      	bne.n	80035f0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f47f ae94 	bne.w	8003322 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e000      	b.n	8003618 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003616:	2302      	movs	r3, #2
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3728      	adds	r7, #40	; 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	00010004 	.word	0x00010004
 8003624:	20000008 	.word	0x20000008
 8003628:	14f8b589 	.word	0x14f8b589

0800362c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	461a      	mov	r2, r3
 800363a:	4603      	mov	r3, r0
 800363c:	817b      	strh	r3, [r7, #10]
 800363e:	460b      	mov	r3, r1
 8003640:	813b      	strh	r3, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003654:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	2200      	movs	r2, #0
 800365e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f960 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367c:	d103      	bne.n	8003686 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e05f      	b.n	800374a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003698:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	6a3a      	ldr	r2, [r7, #32]
 800369e:	492d      	ldr	r1, [pc, #180]	; (8003754 <I2C_RequestMemoryWrite+0x128>)
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f998 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e04c      	b.n	800374a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c8:	6a39      	ldr	r1, [r7, #32]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fa02 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00d      	beq.n	80036f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d107      	bne.n	80036ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e02b      	b.n	800374a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d105      	bne.n	8003704 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036f8:	893b      	ldrh	r3, [r7, #8]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	611a      	str	r2, [r3, #16]
 8003702:	e021      	b.n	8003748 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003704:	893b      	ldrh	r3, [r7, #8]
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	b29b      	uxth	r3, r3
 800370a:	b2da      	uxtb	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003714:	6a39      	ldr	r1, [r7, #32]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f9dc 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00d      	beq.n	800373e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b04      	cmp	r3, #4
 8003728:	d107      	bne.n	800373a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003738:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e005      	b.n	800374a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800373e:	893b      	ldrh	r3, [r7, #8]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	00010002 	.word	0x00010002

08003758 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	4608      	mov	r0, r1
 8003762:	4611      	mov	r1, r2
 8003764:	461a      	mov	r2, r3
 8003766:	4603      	mov	r3, r0
 8003768:	817b      	strh	r3, [r7, #10]
 800376a:	460b      	mov	r3, r1
 800376c:	813b      	strh	r3, [r7, #8]
 800376e:	4613      	mov	r3, r2
 8003770:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003780:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	2200      	movs	r2, #0
 800379a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f8c2 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b8:	d103      	bne.n	80037c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e0aa      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037c6:	897b      	ldrh	r3, [r7, #10]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	6a3a      	ldr	r2, [r7, #32]
 80037da:	4952      	ldr	r1, [pc, #328]	; (8003924 <I2C_RequestMemoryRead+0x1cc>)
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f8fa 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e097      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003804:	6a39      	ldr	r1, [r7, #32]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f964 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	2b04      	cmp	r3, #4
 8003818:	d107      	bne.n	800382a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003828:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e076      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d105      	bne.n	8003840 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003834:	893b      	ldrh	r3, [r7, #8]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	611a      	str	r2, [r3, #16]
 800383e:	e021      	b.n	8003884 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003840:	893b      	ldrh	r3, [r7, #8]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	b29b      	uxth	r3, r3
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003850:	6a39      	ldr	r1, [r7, #32]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f93e 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00d      	beq.n	800387a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	2b04      	cmp	r3, #4
 8003864:	d107      	bne.n	8003876 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003874:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e050      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800387a:	893b      	ldrh	r3, [r7, #8]
 800387c:	b2da      	uxtb	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003886:	6a39      	ldr	r1, [r7, #32]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f923 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00d      	beq.n	80038b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	2b04      	cmp	r3, #4
 800389a:	d107      	bne.n	80038ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e035      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f82b 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00d      	beq.n	80038f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e6:	d103      	bne.n	80038f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e013      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038f4:	897b      	ldrh	r3, [r7, #10]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	6a3a      	ldr	r2, [r7, #32]
 8003908:	4906      	ldr	r1, [pc, #24]	; (8003924 <I2C_RequestMemoryRead+0x1cc>)
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f863 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	00010002 	.word	0x00010002

08003928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003938:	e025      	b.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d021      	beq.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003942:	f7fe fec3 	bl	80026cc <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d302      	bcc.n	8003958 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d116      	bne.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0220 	orr.w	r2, r3, #32
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e023      	b.n	80039ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10d      	bne.n	80039ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	43da      	mvns	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4013      	ands	r3, r2
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf0c      	ite	eq
 80039a2:	2301      	moveq	r3, #1
 80039a4:	2300      	movne	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	e00c      	b.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	43da      	mvns	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4013      	ands	r3, r2
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bf0c      	ite	eq
 80039be:	2301      	moveq	r3, #1
 80039c0:	2300      	movne	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d0b6      	beq.n	800393a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039e4:	e051      	b.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f4:	d123      	bne.n	8003a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f043 0204 	orr.w	r2, r3, #4
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e046      	b.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d021      	beq.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a46:	f7fe fe41 	bl	80026cc <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d302      	bcc.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d116      	bne.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f043 0220 	orr.w	r2, r3, #32
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e020      	b.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d10c      	bne.n	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	bf14      	ite	ne
 8003aa6:	2301      	movne	r3, #1
 8003aa8:	2300      	moveq	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	e00b      	b.n	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d18d      	bne.n	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae0:	e02d      	b.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f8ce 	bl	8003c84 <I2C_IsAcknowledgeFailed>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e02d      	b.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d021      	beq.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afa:	f7fe fde7 	bl	80026cc <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d302      	bcc.n	8003b10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d116      	bne.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f043 0220 	orr.w	r2, r3, #32
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e007      	b.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d1ca      	bne.n	8003ae2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b62:	e02d      	b.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f88d 	bl	8003c84 <I2C_IsAcknowledgeFailed>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e02d      	b.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d021      	beq.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7c:	f7fe fda6 	bl	80026cc <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d302      	bcc.n	8003b92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d116      	bne.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e007      	b.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d1ca      	bne.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003be4:	e042      	b.n	8003c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d119      	bne.n	8003c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0210 	mvn.w	r2, #16
 8003bfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e029      	b.n	8003c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c28:	f7fe fd50 	bl	80026cc <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d116      	bne.n	8003c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e007      	b.n	8003c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	d1b5      	bne.n	8003be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9a:	d11b      	bne.n	8003cd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ca4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	f043 0204 	orr.w	r2, r3, #4
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e272      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 8087 	beq.w	8003e0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d00:	4b92      	ldr	r3, [pc, #584]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 030c 	and.w	r3, r3, #12
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d00c      	beq.n	8003d26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d0c:	4b8f      	ldr	r3, [pc, #572]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d112      	bne.n	8003d3e <HAL_RCC_OscConfig+0x5e>
 8003d18:	4b8c      	ldr	r3, [pc, #560]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d24:	d10b      	bne.n	8003d3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d26:	4b89      	ldr	r3, [pc, #548]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d06c      	beq.n	8003e0c <HAL_RCC_OscConfig+0x12c>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d168      	bne.n	8003e0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e24c      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d46:	d106      	bne.n	8003d56 <HAL_RCC_OscConfig+0x76>
 8003d48:	4b80      	ldr	r3, [pc, #512]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a7f      	ldr	r2, [pc, #508]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	e02e      	b.n	8003db4 <HAL_RCC_OscConfig+0xd4>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x98>
 8003d5e:	4b7b      	ldr	r3, [pc, #492]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a7a      	ldr	r2, [pc, #488]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4b78      	ldr	r3, [pc, #480]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a77      	ldr	r2, [pc, #476]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e01d      	b.n	8003db4 <HAL_RCC_OscConfig+0xd4>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0xbc>
 8003d82:	4b72      	ldr	r3, [pc, #456]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a71      	ldr	r2, [pc, #452]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	4b6f      	ldr	r3, [pc, #444]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a6e      	ldr	r2, [pc, #440]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	e00b      	b.n	8003db4 <HAL_RCC_OscConfig+0xd4>
 8003d9c:	4b6b      	ldr	r3, [pc, #428]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a6a      	ldr	r2, [pc, #424]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	4b68      	ldr	r3, [pc, #416]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a67      	ldr	r2, [pc, #412]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d013      	beq.n	8003de4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fc86 	bl	80026cc <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fe fc82 	bl	80026cc <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e200      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	4b5d      	ldr	r3, [pc, #372]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0xe4>
 8003de2:	e014      	b.n	8003e0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7fe fc72 	bl	80026cc <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fe fc6e 	bl	80026cc <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e1ec      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	4b53      	ldr	r3, [pc, #332]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x10c>
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d063      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e1a:	4b4c      	ldr	r3, [pc, #304]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e26:	4b49      	ldr	r3, [pc, #292]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d11c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x18c>
 8003e32:	4b46      	ldr	r3, [pc, #280]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d116      	bne.n	8003e6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3e:	4b43      	ldr	r3, [pc, #268]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_RCC_OscConfig+0x176>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d001      	beq.n	8003e56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e1c0      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e56:	4b3d      	ldr	r3, [pc, #244]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4939      	ldr	r1, [pc, #228]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6a:	e03a      	b.n	8003ee2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d020      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e74:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <HAL_RCC_OscConfig+0x270>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7a:	f7fe fc27 	bl	80026cc <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e82:	f7fe fc23 	bl	80026cc <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e1a1      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e94:	4b2d      	ldr	r3, [pc, #180]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea0:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4927      	ldr	r1, [pc, #156]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	600b      	str	r3, [r1, #0]
 8003eb4:	e015      	b.n	8003ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eb6:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <HAL_RCC_OscConfig+0x270>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7fe fc06 	bl	80026cc <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec4:	f7fe fc02 	bl	80026cc <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e180      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d03a      	beq.n	8003f64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d019      	beq.n	8003f2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ef6:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <HAL_RCC_OscConfig+0x274>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efc:	f7fe fbe6 	bl	80026cc <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f04:	f7fe fbe2 	bl	80026cc <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e160      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f16:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <HAL_RCC_OscConfig+0x26c>)
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f22:	2001      	movs	r0, #1
 8003f24:	f000 fac4 	bl	80044b0 <RCC_Delay>
 8003f28:	e01c      	b.n	8003f64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <HAL_RCC_OscConfig+0x274>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f30:	f7fe fbcc 	bl	80026cc <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f36:	e00f      	b.n	8003f58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f38:	f7fe fbc8 	bl	80026cc <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d908      	bls.n	8003f58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e146      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	42420000 	.word	0x42420000
 8003f54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	4b92      	ldr	r3, [pc, #584]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e9      	bne.n	8003f38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80a6 	beq.w	80040be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f72:	2300      	movs	r3, #0
 8003f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f76:	4b8b      	ldr	r3, [pc, #556]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10d      	bne.n	8003f9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f82:	4b88      	ldr	r3, [pc, #544]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	4a87      	ldr	r2, [pc, #540]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	61d3      	str	r3, [r2, #28]
 8003f8e:	4b85      	ldr	r3, [pc, #532]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9e:	4b82      	ldr	r3, [pc, #520]	; (80041a8 <HAL_RCC_OscConfig+0x4c8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d118      	bne.n	8003fdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003faa:	4b7f      	ldr	r3, [pc, #508]	; (80041a8 <HAL_RCC_OscConfig+0x4c8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a7e      	ldr	r2, [pc, #504]	; (80041a8 <HAL_RCC_OscConfig+0x4c8>)
 8003fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb6:	f7fe fb89 	bl	80026cc <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbe:	f7fe fb85 	bl	80026cc <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b64      	cmp	r3, #100	; 0x64
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e103      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	4b75      	ldr	r3, [pc, #468]	; (80041a8 <HAL_RCC_OscConfig+0x4c8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x312>
 8003fe4:	4b6f      	ldr	r3, [pc, #444]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	4a6e      	ldr	r2, [pc, #440]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6213      	str	r3, [r2, #32]
 8003ff0:	e02d      	b.n	800404e <HAL_RCC_OscConfig+0x36e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCC_OscConfig+0x334>
 8003ffa:	4b6a      	ldr	r3, [pc, #424]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	4a69      	ldr	r2, [pc, #420]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	6213      	str	r3, [r2, #32]
 8004006:	4b67      	ldr	r3, [pc, #412]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	4a66      	ldr	r2, [pc, #408]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	f023 0304 	bic.w	r3, r3, #4
 8004010:	6213      	str	r3, [r2, #32]
 8004012:	e01c      	b.n	800404e <HAL_RCC_OscConfig+0x36e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b05      	cmp	r3, #5
 800401a:	d10c      	bne.n	8004036 <HAL_RCC_OscConfig+0x356>
 800401c:	4b61      	ldr	r3, [pc, #388]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	4a60      	ldr	r2, [pc, #384]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8004022:	f043 0304 	orr.w	r3, r3, #4
 8004026:	6213      	str	r3, [r2, #32]
 8004028:	4b5e      	ldr	r3, [pc, #376]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	4a5d      	ldr	r2, [pc, #372]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	6213      	str	r3, [r2, #32]
 8004034:	e00b      	b.n	800404e <HAL_RCC_OscConfig+0x36e>
 8004036:	4b5b      	ldr	r3, [pc, #364]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	4a5a      	ldr	r2, [pc, #360]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 800403c:	f023 0301 	bic.w	r3, r3, #1
 8004040:	6213      	str	r3, [r2, #32]
 8004042:	4b58      	ldr	r3, [pc, #352]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	4a57      	ldr	r2, [pc, #348]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	f023 0304 	bic.w	r3, r3, #4
 800404c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d015      	beq.n	8004082 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004056:	f7fe fb39 	bl	80026cc <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405c:	e00a      	b.n	8004074 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f7fe fb35 	bl	80026cc <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	; 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e0b1      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004074:	4b4b      	ldr	r3, [pc, #300]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0ee      	beq.n	800405e <HAL_RCC_OscConfig+0x37e>
 8004080:	e014      	b.n	80040ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004082:	f7fe fb23 	bl	80026cc <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004088:	e00a      	b.n	80040a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408a:	f7fe fb1f 	bl	80026cc <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f241 3288 	movw	r2, #5000	; 0x1388
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e09b      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a0:	4b40      	ldr	r3, [pc, #256]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1ee      	bne.n	800408a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d105      	bne.n	80040be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b2:	4b3c      	ldr	r3, [pc, #240]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	4a3b      	ldr	r2, [pc, #236]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 80040b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 8087 	beq.w	80041d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040c8:	4b36      	ldr	r3, [pc, #216]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 030c 	and.w	r3, r3, #12
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d061      	beq.n	8004198 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d146      	bne.n	800416a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040dc:	4b33      	ldr	r3, [pc, #204]	; (80041ac <HAL_RCC_OscConfig+0x4cc>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e2:	f7fe faf3 	bl	80026cc <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ea:	f7fe faef 	bl	80026cc <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e06d      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fc:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f0      	bne.n	80040ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004110:	d108      	bne.n	8004124 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004112:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	4921      	ldr	r1, [pc, #132]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004124:	4b1f      	ldr	r3, [pc, #124]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a19      	ldr	r1, [r3, #32]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	430b      	orrs	r3, r1
 8004136:	491b      	ldr	r1, [pc, #108]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 8004138:	4313      	orrs	r3, r2
 800413a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800413c:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <HAL_RCC_OscConfig+0x4cc>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004142:	f7fe fac3 	bl	80026cc <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414a:	f7fe fabf 	bl	80026cc <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e03d      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800415c:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x46a>
 8004168:	e035      	b.n	80041d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416a:	4b10      	ldr	r3, [pc, #64]	; (80041ac <HAL_RCC_OscConfig+0x4cc>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fe faac 	bl	80026cc <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004178:	f7fe faa8 	bl	80026cc <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e026      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418a:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <HAL_RCC_OscConfig+0x4c4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x498>
 8004196:	e01e      	b.n	80041d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d107      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e019      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40007000 	.word	0x40007000
 80041ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_RCC_OscConfig+0x500>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d106      	bne.n	80041d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d001      	beq.n	80041d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40021000 	.word	0x40021000

080041e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0d0      	b.n	800439a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041f8:	4b6a      	ldr	r3, [pc, #424]	; (80043a4 <HAL_RCC_ClockConfig+0x1c0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d910      	bls.n	8004228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004206:	4b67      	ldr	r3, [pc, #412]	; (80043a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 0207 	bic.w	r2, r3, #7
 800420e:	4965      	ldr	r1, [pc, #404]	; (80043a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004216:	4b63      	ldr	r3, [pc, #396]	; (80043a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0b8      	b.n	800439a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d020      	beq.n	8004276 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004240:	4b59      	ldr	r3, [pc, #356]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4a58      	ldr	r2, [pc, #352]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800424a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004258:	4b53      	ldr	r3, [pc, #332]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a52      	ldr	r2, [pc, #328]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 800425e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004262:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004264:	4b50      	ldr	r3, [pc, #320]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	494d      	ldr	r1, [pc, #308]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004272:	4313      	orrs	r3, r2
 8004274:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d040      	beq.n	8004304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	4b47      	ldr	r3, [pc, #284]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d115      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e07f      	b.n	800439a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d107      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a2:	4b41      	ldr	r3, [pc, #260]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e073      	b.n	800439a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b2:	4b3d      	ldr	r3, [pc, #244]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e06b      	b.n	800439a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042c2:	4b39      	ldr	r3, [pc, #228]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f023 0203 	bic.w	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4936      	ldr	r1, [pc, #216]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042d4:	f7fe f9fa 	bl	80026cc <HAL_GetTick>
 80042d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042dc:	f7fe f9f6 	bl	80026cc <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e053      	b.n	800439a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f2:	4b2d      	ldr	r3, [pc, #180]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 020c 	and.w	r2, r3, #12
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	429a      	cmp	r2, r3
 8004302:	d1eb      	bne.n	80042dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004304:	4b27      	ldr	r3, [pc, #156]	; (80043a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d210      	bcs.n	8004334 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b24      	ldr	r3, [pc, #144]	; (80043a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 0207 	bic.w	r2, r3, #7
 800431a:	4922      	ldr	r1, [pc, #136]	; (80043a4 <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	4313      	orrs	r3, r2
 8004320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e032      	b.n	800439a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4916      	ldr	r1, [pc, #88]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800435e:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	490e      	ldr	r1, [pc, #56]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	4313      	orrs	r3, r2
 8004370:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004372:	f000 f821 	bl	80043b8 <HAL_RCC_GetSysClockFreq>
 8004376:	4602      	mov	r2, r0
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	490a      	ldr	r1, [pc, #40]	; (80043ac <HAL_RCC_ClockConfig+0x1c8>)
 8004384:	5ccb      	ldrb	r3, [r1, r3]
 8004386:	fa22 f303 	lsr.w	r3, r2, r3
 800438a:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <HAL_RCC_ClockConfig+0x1cc>)
 800438c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800438e:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f7fe f958 	bl	8002648 <HAL_InitTick>

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40022000 	.word	0x40022000
 80043a8:	40021000 	.word	0x40021000
 80043ac:	08009554 	.word	0x08009554
 80043b0:	20000008 	.word	0x20000008
 80043b4:	2000000c 	.word	0x2000000c

080043b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b8:	b490      	push	{r4, r7}
 80043ba:	b08a      	sub	sp, #40	; 0x28
 80043bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043be:	4b29      	ldr	r3, [pc, #164]	; (8004464 <HAL_RCC_GetSysClockFreq+0xac>)
 80043c0:	1d3c      	adds	r4, r7, #4
 80043c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043c8:	f240 2301 	movw	r3, #513	; 0x201
 80043cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61fb      	str	r3, [r7, #28]
 80043d2:	2300      	movs	r3, #0
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	2300      	movs	r3, #0
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043e2:	4b21      	ldr	r3, [pc, #132]	; (8004468 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d002      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x40>
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0x46>
 80043f6:	e02b      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043f8:	4b1c      	ldr	r3, [pc, #112]	; (800446c <HAL_RCC_GetSysClockFreq+0xb4>)
 80043fa:	623b      	str	r3, [r7, #32]
      break;
 80043fc:	e02b      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	0c9b      	lsrs	r3, r3, #18
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	3328      	adds	r3, #40	; 0x28
 8004408:	443b      	add	r3, r7
 800440a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800440e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d012      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800441a:	4b13      	ldr	r3, [pc, #76]	; (8004468 <HAL_RCC_GetSysClockFreq+0xb0>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	0c5b      	lsrs	r3, r3, #17
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	3328      	adds	r3, #40	; 0x28
 8004426:	443b      	add	r3, r7
 8004428:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800442c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	4a0e      	ldr	r2, [pc, #56]	; (800446c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004432:	fb03 f202 	mul.w	r2, r3, r2
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
 800443e:	e004      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	4a0b      	ldr	r2, [pc, #44]	; (8004470 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004444:	fb02 f303 	mul.w	r3, r2, r3
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	623b      	str	r3, [r7, #32]
      break;
 800444e:	e002      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004452:	623b      	str	r3, [r7, #32]
      break;
 8004454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004456:	6a3b      	ldr	r3, [r7, #32]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3728      	adds	r7, #40	; 0x28
 800445c:	46bd      	mov	sp, r7
 800445e:	bc90      	pop	{r4, r7}
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	08007af8 	.word	0x08007af8
 8004468:	40021000 	.word	0x40021000
 800446c:	007a1200 	.word	0x007a1200
 8004470:	003d0900 	.word	0x003d0900

08004474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004478:	4b02      	ldr	r3, [pc, #8]	; (8004484 <HAL_RCC_GetHCLKFreq+0x10>)
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	20000008 	.word	0x20000008

08004488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800448c:	f7ff fff2 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4903      	ldr	r1, [pc, #12]	; (80044ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000
 80044ac:	08009564 	.word	0x08009564

080044b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <RCC_Delay+0x34>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <RCC_Delay+0x38>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	0a5b      	lsrs	r3, r3, #9
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
 80044ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044cc:	bf00      	nop
  }
  while (Delay --);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1e5a      	subs	r2, r3, #1
 80044d2:	60fa      	str	r2, [r7, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f9      	bne.n	80044cc <RCC_Delay+0x1c>
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	20000008 	.word	0x20000008
 80044e8:	10624dd3 	.word	0x10624dd3

080044ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e041      	b.n	8004582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd fff8 	bl	8002508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3304      	adds	r3, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f000 fa70 	bl	8004a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d001      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e03a      	b.n	800461a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a18      	ldr	r2, [pc, #96]	; (8004624 <HAL_TIM_Base_Start_IT+0x98>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00e      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x58>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ce:	d009      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x58>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a14      	ldr	r2, [pc, #80]	; (8004628 <HAL_TIM_Base_Start_IT+0x9c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x58>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a13      	ldr	r2, [pc, #76]	; (800462c <HAL_TIM_Base_Start_IT+0xa0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d111      	bne.n	8004608 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	d010      	beq.n	8004618 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004606:	e007      	b.n	8004618 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	40012c00 	.word	0x40012c00
 8004628:	40000400 	.word	0x40000400
 800462c:	40000800 	.word	0x40000800

08004630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	d122      	bne.n	800468c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b02      	cmp	r3, #2
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0202 	mvn.w	r2, #2
 800465c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f9b1 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f9a4 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f9b3 	bl	80049ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b04      	cmp	r3, #4
 8004698:	d122      	bne.n	80046e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d11b      	bne.n	80046e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0204 	mvn.w	r2, #4
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f987 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f97a 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f989 	bl	80049ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d122      	bne.n	8004734 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d11b      	bne.n	8004734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0208 	mvn.w	r2, #8
 8004704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2204      	movs	r2, #4
 800470a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f95d 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 8004720:	e005      	b.n	800472e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f950 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f95f 	bl	80049ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b10      	cmp	r3, #16
 8004740:	d122      	bne.n	8004788 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b10      	cmp	r3, #16
 800474e:	d11b      	bne.n	8004788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0210 	mvn.w	r2, #16
 8004758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2208      	movs	r2, #8
 800475e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f933 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 8004774:	e005      	b.n	8004782 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f926 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f935 	bl	80049ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b01      	cmp	r3, #1
 8004794:	d10e      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d107      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0201 	mvn.w	r2, #1
 80047ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fd fe2a 	bl	8002408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	2b80      	cmp	r3, #128	; 0x80
 80047c0:	d10e      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047cc:	2b80      	cmp	r3, #128	; 0x80
 80047ce:	d107      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fa77 	bl	8004cce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ea:	2b40      	cmp	r3, #64	; 0x40
 80047ec:	d10e      	bne.n	800480c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d107      	bne.n	800480c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f8f9 	bl	80049fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b20      	cmp	r3, #32
 8004818:	d10e      	bne.n	8004838 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b20      	cmp	r3, #32
 8004826:	d107      	bne.n	8004838 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0220 	mvn.w	r2, #32
 8004830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fa42 	bl	8004cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_TIM_ConfigClockSource+0x18>
 8004854:	2302      	movs	r3, #2
 8004856:	e0b3      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x180>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004876:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800487e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004890:	d03e      	beq.n	8004910 <HAL_TIM_ConfigClockSource+0xd0>
 8004892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004896:	f200 8087 	bhi.w	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 800489a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489e:	f000 8085 	beq.w	80049ac <HAL_TIM_ConfigClockSource+0x16c>
 80048a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a6:	d87f      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048a8:	2b70      	cmp	r3, #112	; 0x70
 80048aa:	d01a      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0xa2>
 80048ac:	2b70      	cmp	r3, #112	; 0x70
 80048ae:	d87b      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048b0:	2b60      	cmp	r3, #96	; 0x60
 80048b2:	d050      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x116>
 80048b4:	2b60      	cmp	r3, #96	; 0x60
 80048b6:	d877      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048b8:	2b50      	cmp	r3, #80	; 0x50
 80048ba:	d03c      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0xf6>
 80048bc:	2b50      	cmp	r3, #80	; 0x50
 80048be:	d873      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d058      	beq.n	8004976 <HAL_TIM_ConfigClockSource+0x136>
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d86f      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048c8:	2b30      	cmp	r3, #48	; 0x30
 80048ca:	d064      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x156>
 80048cc:	2b30      	cmp	r3, #48	; 0x30
 80048ce:	d86b      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d060      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x156>
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d867      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d05c      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x156>
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d05a      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80048e0:	e062      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6899      	ldr	r1, [r3, #8]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f000 f966 	bl	8004bc2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004904:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	609a      	str	r2, [r3, #8]
      break;
 800490e:	e04e      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6899      	ldr	r1, [r3, #8]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f000 f94f 	bl	8004bc2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004932:	609a      	str	r2, [r3, #8]
      break;
 8004934:	e03b      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6859      	ldr	r1, [r3, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	461a      	mov	r2, r3
 8004944:	f000 f8c6 	bl	8004ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2150      	movs	r1, #80	; 0x50
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f91d 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 8004954:	e02b      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6859      	ldr	r1, [r3, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	461a      	mov	r2, r3
 8004964:	f000 f8e4 	bl	8004b30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2160      	movs	r1, #96	; 0x60
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f90d 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 8004974:	e01b      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	461a      	mov	r2, r3
 8004984:	f000 f8a6 	bl	8004ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2140      	movs	r1, #64	; 0x40
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f8fd 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 8004994:	e00b      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4619      	mov	r1, r3
 80049a0:	4610      	mov	r0, r2
 80049a2:	f000 f8f4 	bl	8004b8e <TIM_ITRx_SetConfig>
        break;
 80049a6:	e002      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049a8:	bf00      	nop
 80049aa:	e000      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr

080049ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr

080049fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a29      	ldr	r2, [pc, #164]	; (8004ac8 <TIM_Base_SetConfig+0xb8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00b      	beq.n	8004a40 <TIM_Base_SetConfig+0x30>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2e:	d007      	beq.n	8004a40 <TIM_Base_SetConfig+0x30>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a26      	ldr	r2, [pc, #152]	; (8004acc <TIM_Base_SetConfig+0xbc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_Base_SetConfig+0x30>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a25      	ldr	r2, [pc, #148]	; (8004ad0 <TIM_Base_SetConfig+0xc0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d108      	bne.n	8004a52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a1c      	ldr	r2, [pc, #112]	; (8004ac8 <TIM_Base_SetConfig+0xb8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00b      	beq.n	8004a72 <TIM_Base_SetConfig+0x62>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a60:	d007      	beq.n	8004a72 <TIM_Base_SetConfig+0x62>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a19      	ldr	r2, [pc, #100]	; (8004acc <TIM_Base_SetConfig+0xbc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <TIM_Base_SetConfig+0x62>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a18      	ldr	r2, [pc, #96]	; (8004ad0 <TIM_Base_SetConfig+0xc0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d108      	bne.n	8004a84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a07      	ldr	r2, [pc, #28]	; (8004ac8 <TIM_Base_SetConfig+0xb8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d103      	bne.n	8004ab8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	615a      	str	r2, [r3, #20]
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr
 8004ac8:	40012c00 	.word	0x40012c00
 8004acc:	40000400 	.word	0x40000400
 8004ad0:	40000800 	.word	0x40000800

08004ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f023 0201 	bic.w	r2, r3, #1
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f023 030a 	bic.w	r3, r3, #10
 8004b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr

08004b30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f023 0210 	bic.w	r2, r3, #16
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	031b      	lsls	r3, r3, #12
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	621a      	str	r2, [r3, #32]
}
 8004b84:	bf00      	nop
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bc80      	pop	{r7}
 8004b8c:	4770      	bx	lr

08004b8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b085      	sub	sp, #20
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f043 0307 	orr.w	r3, r3, #7
 8004bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	609a      	str	r2, [r3, #8]
}
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr

08004bc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b087      	sub	sp, #28
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	021a      	lsls	r2, r3, #8
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	609a      	str	r2, [r3, #8]
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e046      	b.n	8004ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a16      	ldr	r2, [pc, #88]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00e      	beq.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c64:	d009      	beq.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a12      	ldr	r2, [pc, #72]	; (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d004      	beq.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a10      	ldr	r2, [pc, #64]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d10c      	bne.n	8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr
 8004cb0:	40012c00 	.word	0x40012c00
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800

08004cbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	4611      	mov	r1, r2
 8004cec:	461a      	mov	r2, r3
 8004cee:	460b      	mov	r3, r1
 8004cf0:	80fb      	strh	r3, [r7, #6]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	88fa      	ldrh	r2, [r7, #6]
 8004d00:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	88ba      	ldrh	r2, [r7, #4]
 8004d06:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2204      	movs	r2, #4
 8004d12:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	b21a      	sxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	b21a      	sxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	83da      	strh	r2, [r3, #30]
   g->char_h_space = 1;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   g->char_v_space = 1;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   g->font.p = NULL;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	62da      	str	r2, [r3, #44]	; 0x2c
   g->font.char_height = 0;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	869a      	strh	r2, [r3, #52]	; 0x34
   g->font.char_width = 0;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	865a      	strh	r2, [r3, #50]	; 0x32
   g->font.start_char = 0;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	86da      	strh	r2, [r3, #54]	; 0x36
   g->font.end_char = 0;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	871a      	strh	r2, [r3, #56]	; 0x38
   g->font.widths = NULL;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	63da      	str	r2, [r3, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8004d9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004da8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   g->back_color = C_BLACK;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   g->next_window = NULL;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	75fb      	strb	r3, [r7, #23]
 8004dca:	e010      	b.n	8004dee <UG_Init+0x10e>
   {
      g->driver[i].driver = NULL;
 8004dcc:	7dfb      	ldrb	r3, [r7, #23]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	3309      	adds	r3, #9
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	3309      	adds	r3, #9
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	4413      	add	r3, r2
 8004de4:	2200      	movs	r2, #0
 8004de6:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	3301      	adds	r3, #1
 8004dec:	75fb      	strb	r3, [r7, #23]
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d9eb      	bls.n	8004dcc <UG_Init+0xec>
   }

   gui = g;
 8004df4:	4a04      	ldr	r2, [pc, #16]	; (8004e08 <UG_Init+0x128>)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6013      	str	r3, [r2, #0]
   return 1;
 8004dfa:	2301      	movs	r3, #1
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000ee0 	.word	0x20000ee0

08004e0c <UG_FillFrame>:
{
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
}

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8004e0c:	b5b0      	push	{r4, r5, r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	4604      	mov	r4, r0
 8004e14:	4608      	mov	r0, r1
 8004e16:	4611      	mov	r1, r2
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4623      	mov	r3, r4
 8004e1c:	80fb      	strh	r3, [r7, #6]
 8004e1e:	4603      	mov	r3, r0
 8004e20:	80bb      	strh	r3, [r7, #4]
 8004e22:	460b      	mov	r3, r1
 8004e24:	807b      	strh	r3, [r7, #2]
 8004e26:	4613      	mov	r3, r2
 8004e28:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8004e2a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	da05      	bge.n	8004e42 <UG_FillFrame+0x36>
   {
      n = x2;
 8004e36:	887b      	ldrh	r3, [r7, #2]
 8004e38:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	807b      	strh	r3, [r7, #2]
      x1 = n;
 8004e3e:	89fb      	ldrh	r3, [r7, #14]
 8004e40:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 8004e42:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004e46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	da05      	bge.n	8004e5a <UG_FillFrame+0x4e>
   {
      n = y2;
 8004e4e:	883b      	ldrh	r3, [r7, #0]
 8004e50:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 8004e52:	88bb      	ldrh	r3, [r7, #4]
 8004e54:	803b      	strh	r3, [r7, #0]
      y1 = n;
 8004e56:	89fb      	ldrh	r3, [r7, #14]
 8004e58:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8004e5a:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <UG_FillFrame+0xdc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d012      	beq.n	8004e90 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8004e6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ee8 <UG_FillFrame+0xdc>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	461d      	mov	r5, r3
 8004e72:	f9b7 4000 	ldrsh.w	r4, [r7]
 8004e76:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004e7a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004e7e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004e82:	8c3b      	ldrh	r3, [r7, #32]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	4623      	mov	r3, r4
 8004e88:	47a8      	blx	r5
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d027      	beq.n	8004ee0 <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 8004e90:	88bb      	ldrh	r3, [r7, #4]
 8004e92:	81bb      	strh	r3, [r7, #12]
 8004e94:	e01d      	b.n	8004ed2 <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 8004e96:	88fb      	ldrh	r3, [r7, #6]
 8004e98:	81fb      	strh	r3, [r7, #14]
 8004e9a:	e00e      	b.n	8004eba <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 8004e9c:	4b12      	ldr	r3, [pc, #72]	; (8004ee8 <UG_FillFrame+0xdc>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	8c3a      	ldrh	r2, [r7, #32]
 8004ea4:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004ea8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8004eac:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8004eae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	81fb      	strh	r3, [r7, #14]
 8004eba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004ebe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	ddea      	ble.n	8004e9c <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8004ec6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3301      	adds	r3, #1
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	81bb      	strh	r3, [r7, #12]
 8004ed2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004ed6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	dddb      	ble.n	8004e96 <UG_FillFrame+0x8a>
 8004ede:	e000      	b.n	8004ee2 <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8004ee0:	bf00      	nop
      }
   }
}
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ee8:	20000ee0 	.word	0x20000ee0

08004eec <UG_DrawCircle>:
{
   gui->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4623      	mov	r3, r4
 8004efc:	80fb      	strh	r3, [r7, #6]
 8004efe:	4603      	mov	r3, r0
 8004f00:	80bb      	strh	r3, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	807b      	strh	r3, [r7, #2]
 8004f06:	4613      	mov	r3, r2
 8004f08:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 8004f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f2c0 80c0 	blt.w	8005094 <UG_DrawCircle+0x1a8>
   if ( y0<0 ) return;
 8004f14:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f2c0 80bd 	blt.w	8005098 <UG_DrawCircle+0x1ac>
   if ( r<=0 ) return;
 8004f1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f340 80ba 	ble.w	800509c <UG_DrawCircle+0x1b0>

   xd = 1 - (r << 1);
 8004f28:	887b      	ldrh	r3, [r7, #2]
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f1c3 0301 	rsb	r3, r3, #1
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	827b      	strh	r3, [r7, #18]
   yd = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	823b      	strh	r3, [r7, #16]
   e = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	81fb      	strh	r3, [r7, #14]
   x = r;
 8004f3e:	887b      	ldrh	r3, [r7, #2]
 8004f40:	82fb      	strh	r3, [r7, #22]
   y = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 8004f46:	e09d      	b.n	8005084 <UG_DrawCircle+0x198>
   {
      gui->pset(x0 - x, y0 + y, c);
 8004f48:	4b56      	ldr	r3, [pc, #344]	; (80050a4 <UG_DrawCircle+0x1b8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	88f9      	ldrh	r1, [r7, #6]
 8004f50:	8afa      	ldrh	r2, [r7, #22]
 8004f52:	1a8a      	subs	r2, r1, r2
 8004f54:	b292      	uxth	r2, r2
 8004f56:	b210      	sxth	r0, r2
 8004f58:	88b9      	ldrh	r1, [r7, #4]
 8004f5a:	8aba      	ldrh	r2, [r7, #20]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	b292      	uxth	r2, r2
 8004f60:	b211      	sxth	r1, r2
 8004f62:	883a      	ldrh	r2, [r7, #0]
 8004f64:	4798      	blx	r3
      gui->pset(x0 - x, y0 - y, c);
 8004f66:	4b4f      	ldr	r3, [pc, #316]	; (80050a4 <UG_DrawCircle+0x1b8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	88f9      	ldrh	r1, [r7, #6]
 8004f6e:	8afa      	ldrh	r2, [r7, #22]
 8004f70:	1a8a      	subs	r2, r1, r2
 8004f72:	b292      	uxth	r2, r2
 8004f74:	b210      	sxth	r0, r2
 8004f76:	88b9      	ldrh	r1, [r7, #4]
 8004f78:	8aba      	ldrh	r2, [r7, #20]
 8004f7a:	1a8a      	subs	r2, r1, r2
 8004f7c:	b292      	uxth	r2, r2
 8004f7e:	b211      	sxth	r1, r2
 8004f80:	883a      	ldrh	r2, [r7, #0]
 8004f82:	4798      	blx	r3
      gui->pset(x0 + x, y0 + y, c);
 8004f84:	4b47      	ldr	r3, [pc, #284]	; (80050a4 <UG_DrawCircle+0x1b8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	88f9      	ldrh	r1, [r7, #6]
 8004f8c:	8afa      	ldrh	r2, [r7, #22]
 8004f8e:	440a      	add	r2, r1
 8004f90:	b292      	uxth	r2, r2
 8004f92:	b210      	sxth	r0, r2
 8004f94:	88b9      	ldrh	r1, [r7, #4]
 8004f96:	8aba      	ldrh	r2, [r7, #20]
 8004f98:	440a      	add	r2, r1
 8004f9a:	b292      	uxth	r2, r2
 8004f9c:	b211      	sxth	r1, r2
 8004f9e:	883a      	ldrh	r2, [r7, #0]
 8004fa0:	4798      	blx	r3
      gui->pset(x0 + x, y0 - y, c);
 8004fa2:	4b40      	ldr	r3, [pc, #256]	; (80050a4 <UG_DrawCircle+0x1b8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	88f9      	ldrh	r1, [r7, #6]
 8004faa:	8afa      	ldrh	r2, [r7, #22]
 8004fac:	440a      	add	r2, r1
 8004fae:	b292      	uxth	r2, r2
 8004fb0:	b210      	sxth	r0, r2
 8004fb2:	88b9      	ldrh	r1, [r7, #4]
 8004fb4:	8aba      	ldrh	r2, [r7, #20]
 8004fb6:	1a8a      	subs	r2, r1, r2
 8004fb8:	b292      	uxth	r2, r2
 8004fba:	b211      	sxth	r1, r2
 8004fbc:	883a      	ldrh	r2, [r7, #0]
 8004fbe:	4798      	blx	r3
      gui->pset(x0 - y, y0 + x, c);
 8004fc0:	4b38      	ldr	r3, [pc, #224]	; (80050a4 <UG_DrawCircle+0x1b8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	88f9      	ldrh	r1, [r7, #6]
 8004fc8:	8aba      	ldrh	r2, [r7, #20]
 8004fca:	1a8a      	subs	r2, r1, r2
 8004fcc:	b292      	uxth	r2, r2
 8004fce:	b210      	sxth	r0, r2
 8004fd0:	88b9      	ldrh	r1, [r7, #4]
 8004fd2:	8afa      	ldrh	r2, [r7, #22]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	b292      	uxth	r2, r2
 8004fd8:	b211      	sxth	r1, r2
 8004fda:	883a      	ldrh	r2, [r7, #0]
 8004fdc:	4798      	blx	r3
      gui->pset(x0 - y, y0 - x, c);
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <UG_DrawCircle+0x1b8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	88f9      	ldrh	r1, [r7, #6]
 8004fe6:	8aba      	ldrh	r2, [r7, #20]
 8004fe8:	1a8a      	subs	r2, r1, r2
 8004fea:	b292      	uxth	r2, r2
 8004fec:	b210      	sxth	r0, r2
 8004fee:	88b9      	ldrh	r1, [r7, #4]
 8004ff0:	8afa      	ldrh	r2, [r7, #22]
 8004ff2:	1a8a      	subs	r2, r1, r2
 8004ff4:	b292      	uxth	r2, r2
 8004ff6:	b211      	sxth	r1, r2
 8004ff8:	883a      	ldrh	r2, [r7, #0]
 8004ffa:	4798      	blx	r3
      gui->pset(x0 + y, y0 + x, c);
 8004ffc:	4b29      	ldr	r3, [pc, #164]	; (80050a4 <UG_DrawCircle+0x1b8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	88f9      	ldrh	r1, [r7, #6]
 8005004:	8aba      	ldrh	r2, [r7, #20]
 8005006:	440a      	add	r2, r1
 8005008:	b292      	uxth	r2, r2
 800500a:	b210      	sxth	r0, r2
 800500c:	88b9      	ldrh	r1, [r7, #4]
 800500e:	8afa      	ldrh	r2, [r7, #22]
 8005010:	440a      	add	r2, r1
 8005012:	b292      	uxth	r2, r2
 8005014:	b211      	sxth	r1, r2
 8005016:	883a      	ldrh	r2, [r7, #0]
 8005018:	4798      	blx	r3
      gui->pset(x0 + y, y0 - x, c);
 800501a:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <UG_DrawCircle+0x1b8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	88f9      	ldrh	r1, [r7, #6]
 8005022:	8aba      	ldrh	r2, [r7, #20]
 8005024:	440a      	add	r2, r1
 8005026:	b292      	uxth	r2, r2
 8005028:	b210      	sxth	r0, r2
 800502a:	88b9      	ldrh	r1, [r7, #4]
 800502c:	8afa      	ldrh	r2, [r7, #22]
 800502e:	1a8a      	subs	r2, r1, r2
 8005030:	b292      	uxth	r2, r2
 8005032:	b211      	sxth	r1, r2
 8005034:	883a      	ldrh	r2, [r7, #0]
 8005036:	4798      	blx	r3

      y++;
 8005038:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800503c:	b29b      	uxth	r3, r3
 800503e:	3301      	adds	r3, #1
 8005040:	b29b      	uxth	r3, r3
 8005042:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8005044:	89fa      	ldrh	r2, [r7, #14]
 8005046:	8a3b      	ldrh	r3, [r7, #16]
 8005048:	4413      	add	r3, r2
 800504a:	b29b      	uxth	r3, r3
 800504c:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 800504e:	8a3b      	ldrh	r3, [r7, #16]
 8005050:	3302      	adds	r3, #2
 8005052:	b29b      	uxth	r3, r3
 8005054:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8005056:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800505a:	005a      	lsls	r2, r3, #1
 800505c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005060:	4413      	add	r3, r2
 8005062:	2b00      	cmp	r3, #0
 8005064:	dd0e      	ble.n	8005084 <UG_DrawCircle+0x198>
      {
         x--;
 8005066:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29b      	uxth	r3, r3
 8005070:	82fb      	strh	r3, [r7, #22]
         e += xd;
 8005072:	89fa      	ldrh	r2, [r7, #14]
 8005074:	8a7b      	ldrh	r3, [r7, #18]
 8005076:	4413      	add	r3, r2
 8005078:	b29b      	uxth	r3, r3
 800507a:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 800507c:	8a7b      	ldrh	r3, [r7, #18]
 800507e:	3302      	adds	r3, #2
 8005080:	b29b      	uxth	r3, r3
 8005082:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8005084:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005088:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800508c:	429a      	cmp	r2, r3
 800508e:	f6bf af5b 	bge.w	8004f48 <UG_DrawCircle+0x5c>
 8005092:	e004      	b.n	800509e <UG_DrawCircle+0x1b2>
   if ( x0<0 ) return;
 8005094:	bf00      	nop
 8005096:	e002      	b.n	800509e <UG_DrawCircle+0x1b2>
   if ( y0<0 ) return;
 8005098:	bf00      	nop
 800509a:	e000      	b.n	800509e <UG_DrawCircle+0x1b2>
   if ( r<=0 ) return;
 800509c:	bf00      	nop
      }
   }
}
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd90      	pop	{r4, r7, pc}
 80050a4:	20000ee0 	.word	0x20000ee0

080050a8 <UG_FillCircle>:

void UG_FillCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 80050a8:	b590      	push	{r4, r7, lr}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	4604      	mov	r4, r0
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	4623      	mov	r3, r4
 80050b8:	80fb      	strh	r3, [r7, #6]
 80050ba:	4603      	mov	r3, r0
 80050bc:	80bb      	strh	r3, [r7, #4]
 80050be:	460b      	mov	r3, r1
 80050c0:	807b      	strh	r3, [r7, #2]
 80050c2:	4613      	mov	r3, r2
 80050c4:	803b      	strh	r3, [r7, #0]
   UG_S16  x,y,xd;

   if ( x0<0 ) return;
 80050c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f2c0 80bd 	blt.w	800524a <UG_FillCircle+0x1a2>
   if ( y0<0 ) return;
 80050d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f2c0 80ba 	blt.w	800524e <UG_FillCircle+0x1a6>
   if ( r<=0 ) return;
 80050da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f340 80b7 	ble.w	8005252 <UG_FillCircle+0x1aa>

   xd = 3 - (r << 1);
 80050e4:	887b      	ldrh	r3, [r7, #2]
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f1c3 0303 	rsb	r3, r3, #3
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	817b      	strh	r3, [r7, #10]
   x = 0;
 80050f2:	2300      	movs	r3, #0
 80050f4:	81fb      	strh	r3, [r7, #14]
   y = r;
 80050f6:	887b      	ldrh	r3, [r7, #2]
 80050f8:	81bb      	strh	r3, [r7, #12]

   while ( x <= y )
 80050fa:	e095      	b.n	8005228 <UG_FillCircle+0x180>
   {
     if( y > 0 )
 80050fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	dd33      	ble.n	800516c <UG_FillCircle+0xc4>
     {
        UG_DrawLine(x0 - x, y0 - y,x0 - x, y0 + y, c);
 8005104:	88fa      	ldrh	r2, [r7, #6]
 8005106:	89fb      	ldrh	r3, [r7, #14]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	b29b      	uxth	r3, r3
 800510c:	b218      	sxth	r0, r3
 800510e:	88ba      	ldrh	r2, [r7, #4]
 8005110:	89bb      	ldrh	r3, [r7, #12]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	b29b      	uxth	r3, r3
 8005116:	b219      	sxth	r1, r3
 8005118:	88fa      	ldrh	r2, [r7, #6]
 800511a:	89fb      	ldrh	r3, [r7, #14]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	b29b      	uxth	r3, r3
 8005120:	b21c      	sxth	r4, r3
 8005122:	88ba      	ldrh	r2, [r7, #4]
 8005124:	89bb      	ldrh	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	b29b      	uxth	r3, r3
 800512a:	b21a      	sxth	r2, r3
 800512c:	883b      	ldrh	r3, [r7, #0]
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	4613      	mov	r3, r2
 8005132:	4622      	mov	r2, r4
 8005134:	f000 f892 	bl	800525c <UG_DrawLine>
        UG_DrawLine(x0 + x, y0 - y,x0 + x, y0 + y, c);
 8005138:	88fa      	ldrh	r2, [r7, #6]
 800513a:	89fb      	ldrh	r3, [r7, #14]
 800513c:	4413      	add	r3, r2
 800513e:	b29b      	uxth	r3, r3
 8005140:	b218      	sxth	r0, r3
 8005142:	88ba      	ldrh	r2, [r7, #4]
 8005144:	89bb      	ldrh	r3, [r7, #12]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	b29b      	uxth	r3, r3
 800514a:	b219      	sxth	r1, r3
 800514c:	88fa      	ldrh	r2, [r7, #6]
 800514e:	89fb      	ldrh	r3, [r7, #14]
 8005150:	4413      	add	r3, r2
 8005152:	b29b      	uxth	r3, r3
 8005154:	b21c      	sxth	r4, r3
 8005156:	88ba      	ldrh	r2, [r7, #4]
 8005158:	89bb      	ldrh	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	b29b      	uxth	r3, r3
 800515e:	b21a      	sxth	r2, r3
 8005160:	883b      	ldrh	r3, [r7, #0]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	4622      	mov	r2, r4
 8005168:	f000 f878 	bl	800525c <UG_DrawLine>
     }
     if( x > 0 )
 800516c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005170:	2b00      	cmp	r3, #0
 8005172:	dd33      	ble.n	80051dc <UG_FillCircle+0x134>
     {
        UG_DrawLine(x0 - y, y0 - x,x0 - y, y0 + x, c);
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	89bb      	ldrh	r3, [r7, #12]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	b29b      	uxth	r3, r3
 800517c:	b218      	sxth	r0, r3
 800517e:	88ba      	ldrh	r2, [r7, #4]
 8005180:	89fb      	ldrh	r3, [r7, #14]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	b29b      	uxth	r3, r3
 8005186:	b219      	sxth	r1, r3
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	89bb      	ldrh	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	b29b      	uxth	r3, r3
 8005190:	b21c      	sxth	r4, r3
 8005192:	88ba      	ldrh	r2, [r7, #4]
 8005194:	89fb      	ldrh	r3, [r7, #14]
 8005196:	4413      	add	r3, r2
 8005198:	b29b      	uxth	r3, r3
 800519a:	b21a      	sxth	r2, r3
 800519c:	883b      	ldrh	r3, [r7, #0]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	4622      	mov	r2, r4
 80051a4:	f000 f85a 	bl	800525c <UG_DrawLine>
        UG_DrawLine(x0 + y, y0 - x,x0 + y, y0 + x, c);
 80051a8:	88fa      	ldrh	r2, [r7, #6]
 80051aa:	89bb      	ldrh	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	b218      	sxth	r0, r3
 80051b2:	88ba      	ldrh	r2, [r7, #4]
 80051b4:	89fb      	ldrh	r3, [r7, #14]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	b219      	sxth	r1, r3
 80051bc:	88fa      	ldrh	r2, [r7, #6]
 80051be:	89bb      	ldrh	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	b21c      	sxth	r4, r3
 80051c6:	88ba      	ldrh	r2, [r7, #4]
 80051c8:	89fb      	ldrh	r3, [r7, #14]
 80051ca:	4413      	add	r3, r2
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	b21a      	sxth	r2, r3
 80051d0:	883b      	ldrh	r3, [r7, #0]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	4622      	mov	r2, r4
 80051d8:	f000 f840 	bl	800525c <UG_DrawLine>
     }
     if ( xd < 0 )
 80051dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	da09      	bge.n	80051f8 <UG_FillCircle+0x150>
     {
        xd += (x << 2) + 6;
 80051e4:	89fb      	ldrh	r3, [r7, #14]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	897b      	ldrh	r3, [r7, #10]
 80051ec:	4413      	add	r3, r2
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3306      	adds	r3, #6
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	817b      	strh	r3, [r7, #10]
 80051f6:	e011      	b.n	800521c <UG_FillCircle+0x174>
     }
     else
     {
        xd += ((x - y) << 2) + 10;
 80051f8:	89fa      	ldrh	r2, [r7, #14]
 80051fa:	89bb      	ldrh	r3, [r7, #12]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	b29b      	uxth	r3, r3
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	b29a      	uxth	r2, r3
 8005204:	897b      	ldrh	r3, [r7, #10]
 8005206:	4413      	add	r3, r2
 8005208:	b29b      	uxth	r3, r3
 800520a:	330a      	adds	r3, #10
 800520c:	b29b      	uxth	r3, r3
 800520e:	817b      	strh	r3, [r7, #10]
        y--;
 8005210:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29b      	uxth	r3, r3
 800521a:	81bb      	strh	r3, [r7, #12]
     }
     x++;
 800521c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005220:	b29b      	uxth	r3, r3
 8005222:	3301      	adds	r3, #1
 8005224:	b29b      	uxth	r3, r3
 8005226:	81fb      	strh	r3, [r7, #14]
   while ( x <= y )
 8005228:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800522c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005230:	429a      	cmp	r2, r3
 8005232:	f77f af63 	ble.w	80050fc <UG_FillCircle+0x54>
   }
   UG_DrawCircle(x0, y0, r,c);
 8005236:	883b      	ldrh	r3, [r7, #0]
 8005238:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800523c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005240:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005244:	f7ff fe52 	bl	8004eec <UG_DrawCircle>
 8005248:	e004      	b.n	8005254 <UG_FillCircle+0x1ac>
   if ( x0<0 ) return;
 800524a:	bf00      	nop
 800524c:	e002      	b.n	8005254 <UG_FillCircle+0x1ac>
   if ( y0<0 ) return;
 800524e:	bf00      	nop
 8005250:	e000      	b.n	8005254 <UG_FillCircle+0x1ac>
   if ( r<=0 ) return;
 8005252:	bf00      	nop
}
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	bd90      	pop	{r4, r7, pc}
	...

0800525c <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800525c:	b5b0      	push	{r4, r5, r7, lr}
 800525e:	b08a      	sub	sp, #40	; 0x28
 8005260:	af02      	add	r7, sp, #8
 8005262:	4604      	mov	r4, r0
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	461a      	mov	r2, r3
 800526a:	4623      	mov	r3, r4
 800526c:	80fb      	strh	r3, [r7, #6]
 800526e:	4603      	mov	r3, r0
 8005270:	80bb      	strh	r3, [r7, #4]
 8005272:	460b      	mov	r3, r1
 8005274:	807b      	strh	r3, [r7, #2]
 8005276:	4613      	mov	r3, r2
 8005278:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800527a:	4b65      	ldr	r3, [pc, #404]	; (8005410 <UG_DrawLine+0x1b4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d013      	beq.n	80052b2 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800528a:	4b61      	ldr	r3, [pc, #388]	; (8005410 <UG_DrawLine+0x1b4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005290:	461d      	mov	r5, r3
 8005292:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005296:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800529a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800529e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80052a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	4623      	mov	r3, r4
 80052a8:	47a8      	blx	r5
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 80ab 	beq.w	8005408 <UG_DrawLine+0x1ac>
   }

   dx = x2 - x1;
 80052b2:	887a      	ldrh	r2, [r7, #2]
 80052b4:	88fb      	ldrh	r3, [r7, #6]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 80052bc:	883a      	ldrh	r2, [r7, #0]
 80052be:	88bb      	ldrh	r3, [r7, #4]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 80052c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	bfb8      	it	lt
 80052ce:	425b      	neglt	r3, r3
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 80052d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bfb8      	it	lt
 80052dc:	425b      	neglt	r3, r3
 80052de:	b29b      	uxth	r3, r3
 80052e0:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 80052e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	dd01      	ble.n	80052ee <UG_DrawLine+0x92>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e001      	b.n	80052f2 <UG_DrawLine+0x96>
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295
 80052f2:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 80052f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	dd01      	ble.n	8005300 <UG_DrawLine+0xa4>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e001      	b.n	8005304 <UG_DrawLine+0xa8>
 8005300:	f04f 33ff 	mov.w	r3, #4294967295
 8005304:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8005306:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800530a:	105b      	asrs	r3, r3, #1
 800530c:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 800530e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005312:	105b      	asrs	r3, r3, #1
 8005314:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 800531a:	88bb      	ldrh	r3, [r7, #4]
 800531c:	82fb      	strh	r3, [r7, #22]

   gui->pset(drawx, drawy,c);
 800531e:	4b3c      	ldr	r3, [pc, #240]	; (8005410 <UG_DrawLine+0x1b4>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005326:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800532a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800532e:	4798      	blx	r3

   if( dxabs >= dyabs )
 8005330:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005334:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005338:	429a      	cmp	r2, r3
 800533a:	db32      	blt.n	80053a2 <UG_DrawLine+0x146>
   {
      for( n=0; n<dxabs; n++ )
 800533c:	2300      	movs	r3, #0
 800533e:	83fb      	strh	r3, [r7, #30]
 8005340:	e028      	b.n	8005394 <UG_DrawLine+0x138>
      {
         y += dyabs;
 8005342:	8b7a      	ldrh	r2, [r7, #26]
 8005344:	89fb      	ldrh	r3, [r7, #14]
 8005346:	4413      	add	r3, r2
 8005348:	b29b      	uxth	r3, r3
 800534a:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 800534c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005350:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005354:	429a      	cmp	r2, r3
 8005356:	db09      	blt.n	800536c <UG_DrawLine+0x110>
         {
            y -= dxabs;
 8005358:	8b7a      	ldrh	r2, [r7, #26]
 800535a:	8a3b      	ldrh	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	b29b      	uxth	r3, r3
 8005360:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8005362:	8afa      	ldrh	r2, [r7, #22]
 8005364:	897b      	ldrh	r3, [r7, #10]
 8005366:	4413      	add	r3, r2
 8005368:	b29b      	uxth	r3, r3
 800536a:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 800536c:	8b3a      	ldrh	r2, [r7, #24]
 800536e:	89bb      	ldrh	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	b29b      	uxth	r3, r3
 8005374:	833b      	strh	r3, [r7, #24]
         gui->pset(drawx, drawy,c);
 8005376:	4b26      	ldr	r3, [pc, #152]	; (8005410 <UG_DrawLine+0x1b4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800537e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005382:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005386:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8005388:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800538c:	b29b      	uxth	r3, r3
 800538e:	3301      	adds	r3, #1
 8005390:	b29b      	uxth	r3, r3
 8005392:	83fb      	strh	r3, [r7, #30]
 8005394:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005398:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800539c:	429a      	cmp	r2, r3
 800539e:	dbd0      	blt.n	8005342 <UG_DrawLine+0xe6>
 80053a0:	e033      	b.n	800540a <UG_DrawLine+0x1ae>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 80053a2:	2300      	movs	r3, #0
 80053a4:	83fb      	strh	r3, [r7, #30]
 80053a6:	e028      	b.n	80053fa <UG_DrawLine+0x19e>
      {
         x += dxabs;
 80053a8:	8bba      	ldrh	r2, [r7, #28]
 80053aa:	8a3b      	ldrh	r3, [r7, #16]
 80053ac:	4413      	add	r3, r2
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 80053b2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80053b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	db09      	blt.n	80053d2 <UG_DrawLine+0x176>
         {
            x -= dyabs;
 80053be:	8bba      	ldrh	r2, [r7, #28]
 80053c0:	89fb      	ldrh	r3, [r7, #14]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 80053c8:	8b3a      	ldrh	r2, [r7, #24]
 80053ca:	89bb      	ldrh	r3, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 80053d2:	8afa      	ldrh	r2, [r7, #22]
 80053d4:	897b      	ldrh	r3, [r7, #10]
 80053d6:	4413      	add	r3, r2
 80053d8:	b29b      	uxth	r3, r3
 80053da:	82fb      	strh	r3, [r7, #22]
         gui->pset(drawx, drawy,c);
 80053dc:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <UG_DrawLine+0x1b4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80053e4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80053e8:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80053ec:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 80053ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3301      	adds	r3, #1
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	83fb      	strh	r3, [r7, #30]
 80053fa:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80053fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005402:	429a      	cmp	r2, r3
 8005404:	dbd0      	blt.n	80053a8 <UG_DrawLine+0x14c>
 8005406:	e000      	b.n	800540a <UG_DrawLine+0x1ae>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005408:	bf00      	nop
      }
   }  
}
 800540a:	3720      	adds	r7, #32
 800540c:	46bd      	mov	sp, r7
 800540e:	bdb0      	pop	{r4, r5, r7, pc}
 8005410:	20000ee0 	.word	0x20000ee0

08005414 <UG_GetXDim>:
{
   gui->back_color = c;
}

UG_S16 UG_GetXDim( void )
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
   return gui->x_dim;
 8005418:	4b03      	ldr	r3, [pc, #12]	; (8005428 <UG_GetXDim+0x14>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8005420:	4618      	mov	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr
 8005428:	20000ee0 	.word	0x20000ee0

0800542c <UG_GetYDim>:

UG_S16 UG_GetYDim( void )
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
   return gui->y_dim;
 8005430:	4b03      	ldr	r3, [pc, #12]	; (8005440 <UG_GetYDim+0x14>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
}
 8005438:	4618      	mov	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr
 8005440:	20000ee0 	.word	0x20000ee0

08005444 <_UG_PutChar>:

/* -------------------------------------------------------------------------------- */
/* -- INTERNAL FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */
void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 8005444:	b5b0      	push	{r4, r5, r7, lr}
 8005446:	b08a      	sub	sp, #40	; 0x28
 8005448:	af00      	add	r7, sp, #0
 800544a:	4604      	mov	r4, r0
 800544c:	4608      	mov	r0, r1
 800544e:	4611      	mov	r1, r2
 8005450:	461a      	mov	r2, r3
 8005452:	4623      	mov	r3, r4
 8005454:	71fb      	strb	r3, [r7, #7]
 8005456:	4603      	mov	r3, r0
 8005458:	80bb      	strh	r3, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	807b      	strh	r3, [r7, #2]
 800545e:	4613      	mov	r3, r2
 8005460:	803b      	strh	r3, [r7, #0]
   UG_U8 b,bt;
   UG_U32 index;
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 8005466:	7e3b      	ldrb	r3, [r7, #24]
 8005468:	2bfc      	cmp	r3, #252	; 0xfc
 800546a:	dc77      	bgt.n	800555c <_UG_PutChar+0x118>
 800546c:	2bd6      	cmp	r3, #214	; 0xd6
 800546e:	da08      	bge.n	8005482 <_UG_PutChar+0x3e>
 8005470:	2bc4      	cmp	r3, #196	; 0xc4
 8005472:	d06a      	beq.n	800554a <_UG_PutChar+0x106>
 8005474:	2bc4      	cmp	r3, #196	; 0xc4
 8005476:	dc71      	bgt.n	800555c <_UG_PutChar+0x118>
 8005478:	2bb0      	cmp	r3, #176	; 0xb0
 800547a:	d06c      	beq.n	8005556 <_UG_PutChar+0x112>
 800547c:	2bb5      	cmp	r3, #181	; 0xb5
 800547e:	d067      	beq.n	8005550 <_UG_PutChar+0x10c>
 8005480:	e06c      	b.n	800555c <_UG_PutChar+0x118>
 8005482:	3bd6      	subs	r3, #214	; 0xd6
 8005484:	2b26      	cmp	r3, #38	; 0x26
 8005486:	d869      	bhi.n	800555c <_UG_PutChar+0x118>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <_UG_PutChar+0x4c>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	08005533 	.word	0x08005533
 8005494:	0800555d 	.word	0x0800555d
 8005498:	0800555d 	.word	0x0800555d
 800549c:	0800555d 	.word	0x0800555d
 80054a0:	0800555d 	.word	0x0800555d
 80054a4:	0800555d 	.word	0x0800555d
 80054a8:	0800553f 	.word	0x0800553f
 80054ac:	0800555d 	.word	0x0800555d
 80054b0:	0800555d 	.word	0x0800555d
 80054b4:	0800555d 	.word	0x0800555d
 80054b8:	0800555d 	.word	0x0800555d
 80054bc:	0800555d 	.word	0x0800555d
 80054c0:	0800555d 	.word	0x0800555d
 80054c4:	0800555d 	.word	0x0800555d
 80054c8:	08005545 	.word	0x08005545
 80054cc:	0800555d 	.word	0x0800555d
 80054d0:	0800555d 	.word	0x0800555d
 80054d4:	0800555d 	.word	0x0800555d
 80054d8:	0800555d 	.word	0x0800555d
 80054dc:	0800555d 	.word	0x0800555d
 80054e0:	0800555d 	.word	0x0800555d
 80054e4:	0800555d 	.word	0x0800555d
 80054e8:	0800555d 	.word	0x0800555d
 80054ec:	0800555d 	.word	0x0800555d
 80054f0:	0800555d 	.word	0x0800555d
 80054f4:	0800555d 	.word	0x0800555d
 80054f8:	0800555d 	.word	0x0800555d
 80054fc:	0800555d 	.word	0x0800555d
 8005500:	0800555d 	.word	0x0800555d
 8005504:	0800555d 	.word	0x0800555d
 8005508:	0800555d 	.word	0x0800555d
 800550c:	0800555d 	.word	0x0800555d
 8005510:	0800552d 	.word	0x0800552d
 8005514:	0800555d 	.word	0x0800555d
 8005518:	0800555d 	.word	0x0800555d
 800551c:	0800555d 	.word	0x0800555d
 8005520:	0800555d 	.word	0x0800555d
 8005524:	0800555d 	.word	0x0800555d
 8005528:	08005539 	.word	0x08005539
   {
      case 0xF6: bt = 0x94; break; // �
 800552c:	2394      	movs	r3, #148	; 0x94
 800552e:	763b      	strb	r3, [r7, #24]
 8005530:	e014      	b.n	800555c <_UG_PutChar+0x118>
      case 0xD6: bt = 0x99; break; // �
 8005532:	2399      	movs	r3, #153	; 0x99
 8005534:	763b      	strb	r3, [r7, #24]
 8005536:	e011      	b.n	800555c <_UG_PutChar+0x118>
      case 0xFC: bt = 0x81; break; // �
 8005538:	2381      	movs	r3, #129	; 0x81
 800553a:	763b      	strb	r3, [r7, #24]
 800553c:	e00e      	b.n	800555c <_UG_PutChar+0x118>
      case 0xDC: bt = 0x9A; break; // �
 800553e:	239a      	movs	r3, #154	; 0x9a
 8005540:	763b      	strb	r3, [r7, #24]
 8005542:	e00b      	b.n	800555c <_UG_PutChar+0x118>
      case 0xE4: bt = 0x84; break; // �
 8005544:	2384      	movs	r3, #132	; 0x84
 8005546:	763b      	strb	r3, [r7, #24]
 8005548:	e008      	b.n	800555c <_UG_PutChar+0x118>
      case 0xC4: bt = 0x8E; break; // �
 800554a:	238e      	movs	r3, #142	; 0x8e
 800554c:	763b      	strb	r3, [r7, #24]
 800554e:	e005      	b.n	800555c <_UG_PutChar+0x118>
      case 0xB5: bt = 0xE6; break; // �
 8005550:	23e6      	movs	r3, #230	; 0xe6
 8005552:	763b      	strb	r3, [r7, #24]
 8005554:	e002      	b.n	800555c <_UG_PutChar+0x118>
      case 0xB0: bt = 0xF8; break; // �
 8005556:	23f8      	movs	r3, #248	; 0xf8
 8005558:	763b      	strb	r3, [r7, #24]
 800555a:	bf00      	nop
   }

   if (bt < font->start_char || bt > font->end_char) return;
 800555c:	7e3b      	ldrb	r3, [r7, #24]
 800555e:	b29a      	uxth	r2, r3
 8005560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005562:	895b      	ldrh	r3, [r3, #10]
 8005564:	429a      	cmp	r2, r3
 8005566:	f0c0 81ef 	bcc.w	8005948 <_UG_PutChar+0x504>
 800556a:	7e3b      	ldrb	r3, [r7, #24]
 800556c:	b29a      	uxth	r2, r3
 800556e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005570:	899b      	ldrh	r3, [r3, #12]
 8005572:	429a      	cmp	r2, r3
 8005574:	f200 81e8 	bhi.w	8005948 <_UG_PutChar+0x504>
   
   yo = y;
 8005578:	887b      	ldrh	r3, [r7, #2]
 800557a:	83fb      	strh	r3, [r7, #30]
   bn = font->char_width;
 800557c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005582:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 8005584:	8b7b      	ldrh	r3, [r7, #26]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 81e0 	beq.w	800594c <_UG_PutChar+0x508>
   bn >>= 3;
 800558c:	8b7b      	ldrh	r3, [r7, #26]
 800558e:	08db      	lsrs	r3, r3, #3
 8005590:	837b      	strh	r3, [r7, #26]
   if ( font->char_width % 8 ) bn++;
 8005592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005594:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	b29b      	uxth	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <_UG_PutChar+0x166>
 80055a4:	8b7b      	ldrh	r3, [r7, #26]
 80055a6:	3301      	adds	r3, #1
 80055a8:	837b      	strh	r3, [r7, #26]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 80055aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d009      	beq.n	80055c6 <_UG_PutChar+0x182>
 80055b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	7e3a      	ldrb	r2, [r7, #24]
 80055b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ba:	8949      	ldrh	r1, [r1, #10]
 80055bc:	1a52      	subs	r2, r2, r1
 80055be:	4413      	add	r3, r2
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	e003      	b.n	80055ce <_UG_PutChar+0x18a>
 80055c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	827b      	strh	r3, [r7, #18]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 80055d0:	4b8a      	ldr	r3, [pc, #552]	; (80057fc <_UG_PutChar+0x3b8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80d8 	beq.w	8005792 <_UG_PutChar+0x34e>
   {
	   //(void(*)(UG_COLOR))
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 80055e2:	4b86      	ldr	r3, [pc, #536]	; (80057fc <_UG_PutChar+0x3b8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e8:	461d      	mov	r5, r3
 80055ea:	88ba      	ldrh	r2, [r7, #4]
 80055ec:	8a7b      	ldrh	r3, [r7, #18]
 80055ee:	4413      	add	r3, r2
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	b21c      	sxth	r4, r3
 80055f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80055fe:	b29a      	uxth	r2, r3
 8005600:	887b      	ldrh	r3, [r7, #2]
 8005602:	4413      	add	r3, r2
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29b      	uxth	r3, r3
 800560a:	b21b      	sxth	r3, r3
 800560c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005610:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8005614:	4622      	mov	r2, r4
 8005616:	47a8      	blx	r5
 8005618:	4603      	mov	r3, r0
 800561a:	60fb      	str	r3, [r7, #12]
	   
      if (font->font_type == FONT_TYPE_1BPP)
 800561c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561e:	791b      	ldrb	r3, [r3, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d14d      	bne.n	80056c0 <_UG_PutChar+0x27c>
	  {
	      index = (bt - font->start_char)* font->char_height * bn;
 8005624:	7e3b      	ldrb	r3, [r7, #24]
 8005626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005628:	8952      	ldrh	r2, [r2, #10]
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800562e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8005632:	fb02 f303 	mul.w	r3, r2, r3
 8005636:	8b7a      	ldrh	r2, [r7, #26]
 8005638:	fb02 f303 	mul.w	r3, r2, r3
 800563c:	617b      	str	r3, [r7, #20]
		  for( j=0;j<font->char_height;j++ )
 800563e:	2300      	movs	r3, #0
 8005640:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005642:	e036      	b.n	80056b2 <_UG_PutChar+0x26e>
		  {
			 c=actual_char_width;
 8005644:	8a7b      	ldrh	r3, [r7, #18]
 8005646:	83bb      	strh	r3, [r7, #28]
			 for( i=0;i<bn;i++ )
 8005648:	2300      	movs	r3, #0
 800564a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800564c:	e02a      	b.n	80056a4 <_UG_PutChar+0x260>
			 {
				b = font->p[index++];
 800564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	1c59      	adds	r1, r3, #1
 8005656:	6179      	str	r1, [r7, #20]
 8005658:	4413      	add	r3, r2
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	767b      	strb	r3, [r7, #25]
				for( k=0;(k<8) && c;k++ )
 800565e:	2300      	movs	r3, #0
 8005660:	847b      	strh	r3, [r7, #34]	; 0x22
 8005662:	e016      	b.n	8005692 <_UG_PutChar+0x24e>
				{
				   if( b & 0x01 )
 8005664:	7e7b      	ldrb	r3, [r7, #25]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d004      	beq.n	8005678 <_UG_PutChar+0x234>
				   {
					  push_pixel(fc);
 800566e:	883a      	ldrh	r2, [r7, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4610      	mov	r0, r2
 8005674:	4798      	blx	r3
 8005676:	e003      	b.n	8005680 <_UG_PutChar+0x23c>
				   }
				   else
				   {
					  push_pixel(bc);
 8005678:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4610      	mov	r0, r2
 800567e:	4798      	blx	r3
				   }
				   b >>= 1;
 8005680:	7e7b      	ldrb	r3, [r7, #25]
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	767b      	strb	r3, [r7, #25]
				   c--;
 8005686:	8bbb      	ldrh	r3, [r7, #28]
 8005688:	3b01      	subs	r3, #1
 800568a:	83bb      	strh	r3, [r7, #28]
				for( k=0;(k<8) && c;k++ )
 800568c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800568e:	3301      	adds	r3, #1
 8005690:	847b      	strh	r3, [r7, #34]	; 0x22
 8005692:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005694:	2b07      	cmp	r3, #7
 8005696:	d802      	bhi.n	800569e <_UG_PutChar+0x25a>
 8005698:	8bbb      	ldrh	r3, [r7, #28]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e2      	bne.n	8005664 <_UG_PutChar+0x220>
			 for( i=0;i<bn;i++ )
 800569e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056a0:	3301      	adds	r3, #1
 80056a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80056a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056a6:	8b7b      	ldrh	r3, [r7, #26]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d3d0      	bcc.n	800564e <_UG_PutChar+0x20a>
		  for( j=0;j<font->char_height;j++ )
 80056ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056ae:	3301      	adds	r3, #1
 80056b0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80056b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056b6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80056ba:	4293      	cmp	r3, r2
 80056bc:	dbc2      	blt.n	8005644 <_UG_PutChar+0x200>
 80056be:	e146      	b.n	800594e <_UG_PutChar+0x50a>
				}
			 }
	 	 }
	  }
	  else if (font->font_type == FONT_TYPE_8BPP)
 80056c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c2:	791b      	ldrb	r3, [r3, #4]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	f040 8142 	bne.w	800594e <_UG_PutChar+0x50a>
	  {
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 80056ca:	7e3b      	ldrb	r3, [r7, #24]
 80056cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056ce:	8952      	ldrh	r2, [r2, #10]
 80056d0:	1a9b      	subs	r3, r3, r2
 80056d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056d4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80056d8:	fb02 f303 	mul.w	r3, r2, r3
 80056dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056de:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80056e2:	fb02 f303 	mul.w	r3, r2, r3
 80056e6:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 80056e8:	2300      	movs	r3, #0
 80056ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80056ec:	e04a      	b.n	8005784 <_UG_PutChar+0x340>
		   {
			  for( i=0;i<actual_char_width;i++ )
 80056ee:	2300      	movs	r3, #0
 80056f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80056f2:	e036      	b.n	8005762 <_UG_PutChar+0x31e>
			  {
				 b = font->p[index++];
 80056f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	1c59      	adds	r1, r3, #1
 80056fc:	6179      	str	r1, [r7, #20]
 80056fe:	4413      	add	r3, r2
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	767b      	strb	r3, [r7, #25]
                                //Blue component                                                           //Green component                                            //Red component
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);  
 8005704:	883b      	ldrh	r3, [r7, #0]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	7e7a      	ldrb	r2, [r7, #25]
 800570a:	fb03 f202 	mul.w	r2, r3, r2
 800570e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005710:	b2db      	uxtb	r3, r3
 8005712:	7e79      	ldrb	r1, [r7, #25]
 8005714:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	4413      	add	r3, r2
 800571e:	121b      	asrs	r3, r3, #8
 8005720:	b21b      	sxth	r3, r3
 8005722:	b2db      	uxtb	r3, r3
 8005724:	b21a      	sxth	r2, r3
 8005726:	883b      	ldrh	r3, [r7, #0]
 8005728:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800572c:	7e79      	ldrb	r1, [r7, #25]
 800572e:	fb03 f101 	mul.w	r1, r3, r1
 8005732:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005734:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005738:	7e78      	ldrb	r0, [r7, #25]
 800573a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800573e:	fb00 f303 	mul.w	r3, r0, r3
 8005742:	440b      	add	r3, r1
 8005744:	121b      	asrs	r3, r3, #8
 8005746:	b21b      	sxth	r3, r3
 8005748:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800574c:	b21b      	sxth	r3, r3
 800574e:	4313      	orrs	r3, r2
 8005750:	b21b      	sxth	r3, r3
 8005752:	823b      	strh	r3, [r7, #16]
				         
				 push_pixel(color);
 8005754:	8a3a      	ldrh	r2, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4610      	mov	r0, r2
 800575a:	4798      	blx	r3
			  for( i=0;i<actual_char_width;i++ )
 800575c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800575e:	3301      	adds	r3, #1
 8005760:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005762:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005764:	8a7b      	ldrh	r3, [r7, #18]
 8005766:	429a      	cmp	r2, r3
 8005768:	d3c4      	bcc.n	80056f4 <_UG_PutChar+0x2b0>
			  }
			  index += font->char_width - actual_char_width;
 800576a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005770:	461a      	mov	r2, r3
 8005772:	8a7b      	ldrh	r3, [r7, #18]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	461a      	mov	r2, r3
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4413      	add	r3, r2
 800577c:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 800577e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005780:	3301      	adds	r3, #1
 8005782:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005784:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005788:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800578c:	4293      	cmp	r3, r2
 800578e:	dbae      	blt.n	80056ee <_UG_PutChar+0x2aa>
 8005790:	e0dd      	b.n	800594e <_UG_PutChar+0x50a>
	  }
   }
   else
   {
	   /*Not accelerated output*/
	   if (font->font_type == FONT_TYPE_1BPP)
 8005792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005794:	791b      	ldrb	r3, [r3, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d161      	bne.n	800585e <_UG_PutChar+0x41a>
	   {
         index = (bt - font->start_char)* font->char_height * bn;
 800579a:	7e3b      	ldrb	r3, [r7, #24]
 800579c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800579e:	8952      	ldrh	r2, [r2, #10]
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057a4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80057a8:	fb02 f303 	mul.w	r3, r2, r3
 80057ac:	8b7a      	ldrh	r2, [r7, #26]
 80057ae:	fb02 f303 	mul.w	r3, r2, r3
 80057b2:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 80057b4:	2300      	movs	r3, #0
 80057b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80057b8:	e04a      	b.n	8005850 <_UG_PutChar+0x40c>
         {
           xo = x;
 80057ba:	88bb      	ldrh	r3, [r7, #4]
 80057bc:	843b      	strh	r3, [r7, #32]
           c=actual_char_width;
 80057be:	8a7b      	ldrh	r3, [r7, #18]
 80057c0:	83bb      	strh	r3, [r7, #28]
           for( i=0;i<bn;i++ )
 80057c2:	2300      	movs	r3, #0
 80057c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80057c6:	e039      	b.n	800583c <_UG_PutChar+0x3f8>
           {
             b = font->p[index++];
 80057c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	1c59      	adds	r1, r3, #1
 80057d0:	6179      	str	r1, [r7, #20]
 80057d2:	4413      	add	r3, r2
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	767b      	strb	r3, [r7, #25]
             for( k=0;(k<8) && c;k++ )
 80057d8:	2300      	movs	r3, #0
 80057da:	847b      	strh	r3, [r7, #34]	; 0x22
 80057dc:	e025      	b.n	800582a <_UG_PutChar+0x3e6>
             {
               if( b & 0x01 )
 80057de:	7e7b      	ldrb	r3, [r7, #25]
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00b      	beq.n	8005800 <_UG_PutChar+0x3bc>
               {
                  gui->pset(xo,yo,fc);
 80057e8:	4b04      	ldr	r3, [pc, #16]	; (80057fc <_UG_PutChar+0x3b8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80057f2:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80057f6:	883a      	ldrh	r2, [r7, #0]
 80057f8:	4798      	blx	r3
 80057fa:	e00a      	b.n	8005812 <_UG_PutChar+0x3ce>
 80057fc:	20000ee0 	.word	0x20000ee0
               }
               else
               {
                  gui->pset(xo,yo,bc);
 8005800:	4b54      	ldr	r3, [pc, #336]	; (8005954 <_UG_PutChar+0x510>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800580a:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800580e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8005810:	4798      	blx	r3
               }
               b >>= 1;
 8005812:	7e7b      	ldrb	r3, [r7, #25]
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	767b      	strb	r3, [r7, #25]
               xo++;
 8005818:	8c3b      	ldrh	r3, [r7, #32]
 800581a:	3301      	adds	r3, #1
 800581c:	843b      	strh	r3, [r7, #32]
               c--;
 800581e:	8bbb      	ldrh	r3, [r7, #28]
 8005820:	3b01      	subs	r3, #1
 8005822:	83bb      	strh	r3, [r7, #28]
             for( k=0;(k<8) && c;k++ )
 8005824:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005826:	3301      	adds	r3, #1
 8005828:	847b      	strh	r3, [r7, #34]	; 0x22
 800582a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800582c:	2b07      	cmp	r3, #7
 800582e:	d802      	bhi.n	8005836 <_UG_PutChar+0x3f2>
 8005830:	8bbb      	ldrh	r3, [r7, #28]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1d3      	bne.n	80057de <_UG_PutChar+0x39a>
           for( i=0;i<bn;i++ )
 8005836:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005838:	3301      	adds	r3, #1
 800583a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800583c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800583e:	8b7b      	ldrh	r3, [r7, #26]
 8005840:	429a      	cmp	r2, r3
 8005842:	d3c1      	bcc.n	80057c8 <_UG_PutChar+0x384>
             }
           }
           yo++;
 8005844:	8bfb      	ldrh	r3, [r7, #30]
 8005846:	3301      	adds	r3, #1
 8005848:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 800584a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800584c:	3301      	adds	r3, #1
 800584e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005850:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005852:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005854:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8005858:	4293      	cmp	r3, r2
 800585a:	dbae      	blt.n	80057ba <_UG_PutChar+0x376>
 800585c:	e077      	b.n	800594e <_UG_PutChar+0x50a>
         }
      }
      else if (font->font_type == FONT_TYPE_8BPP)
 800585e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005860:	791b      	ldrb	r3, [r3, #4]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d173      	bne.n	800594e <_UG_PutChar+0x50a>
      {
         index = (bt - font->start_char)* font->char_height * font->char_width;
 8005866:	7e3b      	ldrb	r3, [r7, #24]
 8005868:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800586a:	8952      	ldrh	r2, [r2, #10]
 800586c:	1a9b      	subs	r3, r3, r2
 800586e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005870:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8005874:	fb02 f303 	mul.w	r3, r2, r3
 8005878:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800587a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800587e:	fb02 f303 	mul.w	r3, r2, r3
 8005882:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 8005884:	2300      	movs	r3, #0
 8005886:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005888:	e057      	b.n	800593a <_UG_PutChar+0x4f6>
         {
            xo = x;
 800588a:	88bb      	ldrh	r3, [r7, #4]
 800588c:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 800588e:	2300      	movs	r3, #0
 8005890:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005892:	e03e      	b.n	8005912 <_UG_PutChar+0x4ce>
            {
               b = font->p[index++];
 8005894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	1c59      	adds	r1, r3, #1
 800589c:	6179      	str	r1, [r7, #20]
 800589e:	4413      	add	r3, r2
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	767b      	strb	r3, [r7, #25]
            
                           //Blue component                                                           //Green component                                            //Red component
			   color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);  
 80058a4:	883b      	ldrh	r3, [r7, #0]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	7e7a      	ldrb	r2, [r7, #25]
 80058aa:	fb03 f202 	mul.w	r2, r3, r2
 80058ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	7e79      	ldrb	r1, [r7, #25]
 80058b4:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80058b8:	fb01 f303 	mul.w	r3, r1, r3
 80058bc:	4413      	add	r3, r2
 80058be:	121b      	asrs	r3, r3, #8
 80058c0:	b21b      	sxth	r3, r3
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	b21a      	sxth	r2, r3
 80058c6:	883b      	ldrh	r3, [r7, #0]
 80058c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80058cc:	7e79      	ldrb	r1, [r7, #25]
 80058ce:	fb03 f101 	mul.w	r1, r3, r1
 80058d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80058d8:	7e78      	ldrb	r0, [r7, #25]
 80058da:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80058de:	fb00 f303 	mul.w	r3, r0, r3
 80058e2:	440b      	add	r3, r1
 80058e4:	121b      	asrs	r3, r3, #8
 80058e6:	b21b      	sxth	r3, r3
 80058e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058ec:	b21b      	sxth	r3, r3
 80058ee:	4313      	orrs	r3, r2
 80058f0:	b21b      	sxth	r3, r3
 80058f2:	823b      	strh	r3, [r7, #16]
               
               gui->pset(xo,yo,color);
 80058f4:	4b17      	ldr	r3, [pc, #92]	; (8005954 <_UG_PutChar+0x510>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80058fe:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8005902:	8a3a      	ldrh	r2, [r7, #16]
 8005904:	4798      	blx	r3
               xo++;
 8005906:	8c3b      	ldrh	r3, [r7, #32]
 8005908:	3301      	adds	r3, #1
 800590a:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 800590c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800590e:	3301      	adds	r3, #1
 8005910:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005912:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005914:	8a7b      	ldrh	r3, [r7, #18]
 8005916:	429a      	cmp	r2, r3
 8005918:	d3bc      	bcc.n	8005894 <_UG_PutChar+0x450>
            }
            index += font->char_width - actual_char_width;
 800591a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005920:	461a      	mov	r2, r3
 8005922:	8a7b      	ldrh	r3, [r7, #18]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	461a      	mov	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	4413      	add	r3, r2
 800592c:	617b      	str	r3, [r7, #20]
            yo++;
 800592e:	8bfb      	ldrh	r3, [r7, #30]
 8005930:	3301      	adds	r3, #1
 8005932:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 8005934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005936:	3301      	adds	r3, #1
 8005938:	84bb      	strh	r3, [r7, #36]	; 0x24
 800593a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800593c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800593e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8005942:	4293      	cmp	r3, r2
 8005944:	dba1      	blt.n	800588a <_UG_PutChar+0x446>
 8005946:	e002      	b.n	800594e <_UG_PutChar+0x50a>
   if (bt < font->start_char || bt > font->end_char) return;
 8005948:	bf00      	nop
 800594a:	e000      	b.n	800594e <_UG_PutChar+0x50a>
   if ( !bn ) return;
 800594c:	bf00      	nop
         }
      }
   }
}
 800594e:	3728      	adds	r7, #40	; 0x28
 8005950:	46bd      	mov	sp, r7
 8005952:	bdb0      	pop	{r4, r5, r7, pc}
 8005954:	20000ee0 	.word	0x20000ee0

08005958 <_UG_PutText>:

void _UG_PutText(UG_TEXT* txt)
{
 8005958:	b5b0      	push	{r4, r5, r7, lr}
 800595a:	b08e      	sub	sp, #56	; 0x38
 800595c:	af02      	add	r7, sp, #8
 800595e:	6078      	str	r0, [r7, #4]
   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	891b      	ldrh	r3, [r3, #8]
 8005964:	837b      	strh	r3, [r7, #26]
   UG_S16 ys=txt->a.ys;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	895b      	ldrh	r3, [r3, #10]
 800596a:	833b      	strh	r3, [r7, #24]
   UG_S16 xe=txt->a.xe;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	899b      	ldrh	r3, [r3, #12]
 8005970:	82fb      	strh	r3, [r7, #22]
   UG_S16 ye=txt->a.ye;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	89db      	ldrh	r3, [r3, #14]
 8005976:	82bb      	strh	r3, [r7, #20]
   UG_U8  align=txt->align;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	7d1b      	ldrb	r3, [r3, #20]
 800597c:	74fb      	strb	r3, [r7, #19]
   UG_S16 char_width=txt->font->char_width;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	88db      	ldrh	r3, [r3, #6]
 8005984:	823b      	strh	r3, [r7, #16]
   UG_S16 char_height=txt->font->char_height;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	891b      	ldrh	r3, [r3, #8]
 800598c:	81fb      	strh	r3, [r7, #14]
   UG_S16 char_h_space=txt->h_space;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	8adb      	ldrh	r3, [r3, #22]
 8005992:	81bb      	strh	r3, [r7, #12]
   UG_S16 char_v_space=txt->v_space;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8b1b      	ldrh	r3, [r3, #24]
 8005998:	817b      	strh	r3, [r7, #10]

   char chr;

   char* str = txt->str;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	623b      	str	r3, [r7, #32]
   char* c = str;
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	61fb      	str	r3, [r7, #28]

   if ( txt->font->p == NULL ) return;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 8108 	beq.w	8005bc0 <_UG_PutText+0x268>
   if ( str == NULL ) return;
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 8106 	beq.w	8005bc4 <_UG_PutText+0x26c>
   if ( (ye - ys) < txt->font->char_height ) return;
 80059b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80059bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6852      	ldr	r2, [r2, #4]
 80059c6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80059ca:	4293      	cmp	r3, r2
 80059cc:	f2c0 80fc 	blt.w	8005bc8 <_UG_PutText+0x270>

   rc=1;
 80059d0:	2301      	movs	r3, #1
 80059d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	61fb      	str	r3, [r7, #28]
   while ( *c != 0 )
 80059d8:	e009      	b.n	80059ee <_UG_PutText+0x96>
   {
      if ( *c == '\n' ) rc++;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b0a      	cmp	r3, #10
 80059e0:	d102      	bne.n	80059e8 <_UG_PutText+0x90>
 80059e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80059e4:	3301      	adds	r3, #1
 80059e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
      c++;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	3301      	adds	r3, #1
 80059ec:	61fb      	str	r3, [r7, #28]
   while ( *c != 0 )
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f1      	bne.n	80059da <_UG_PutText+0x82>
   }

   yp = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 80059fa:	7cfb      	ldrb	r3, [r7, #19]
 80059fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01f      	beq.n	8005a44 <_UG_PutText+0xec>
   {
      yp = ye - ys + 1;
 8005a04:	8aba      	ldrh	r2, [r7, #20]
 8005a06:	8b3b      	ldrh	r3, [r7, #24]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8005a12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a14:	89fb      	ldrh	r3, [r7, #14]
 8005a16:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8005a18:	fb01 f303 	mul.w	r3, r1, r3
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8005a24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	8979      	ldrh	r1, [r7, #10]
 8005a2e:	fb01 f303 	mul.w	r3, r1, r3
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ) return;
 8005a3a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f2c0 80c4 	blt.w	8005bcc <_UG_PutText+0x274>
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8005a44:	7cfb      	ldrb	r3, [r7, #19]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <_UG_PutText+0xfe>
 8005a4e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005a52:	105b      	asrs	r3, r3, #1
 8005a54:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8005a56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a58:	8b3b      	ldrh	r3, [r7, #24]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	61fb      	str	r3, [r7, #28]
      wl = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	857b      	strh	r3, [r7, #42]	; 0x2a
      while( (*c != 0) && (*c != '\n') )
 8005a6c:	e033      	b.n	8005ad6 <_UG_PutText+0x17e>
      {
         if (*c < txt->font->start_char || *c > txt->font->end_char) {c++; continue;}
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	895b      	ldrh	r3, [r3, #10]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d307      	bcc.n	8005a8e <_UG_PutText+0x136>
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	899b      	ldrh	r3, [r3, #12]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d903      	bls.n	8005a96 <_UG_PutText+0x13e>
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	3301      	adds	r3, #1
 8005a92:	61fb      	str	r3, [r7, #28]
 8005a94:	e01f      	b.n	8005ad6 <_UG_PutText+0x17e>
         sl++;
 8005a96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a98:	3301      	adds	r3, #1
 8005a9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += (txt->font->widths ? txt->font->widths[*c - txt->font->start_char] : char_width) + char_h_space;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00d      	beq.n	8005ac2 <_UG_PutText+0x16a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	7812      	ldrb	r2, [r2, #0]
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6852      	ldr	r2, [r2, #4]
 8005ab6:	8952      	ldrh	r2, [r2, #10]
 8005ab8:	1a8a      	subs	r2, r1, r2
 8005aba:	4413      	add	r3, r2
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	e000      	b.n	8005ac4 <_UG_PutText+0x16c>
 8005ac2:	8a3b      	ldrh	r3, [r7, #16]
 8005ac4:	89ba      	ldrh	r2, [r7, #12]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005acc:	4413      	add	r3, r2
 8005ace:	857b      	strh	r3, [r7, #42]	; 0x2a
         c++;
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	61fb      	str	r3, [r7, #28]
      while( (*c != 0) && (*c != '\n') )
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <_UG_PutText+0x18e>
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b0a      	cmp	r3, #10
 8005ae4:	d1c3      	bne.n	8005a6e <_UG_PutText+0x116>
      }
      wl -= char_h_space;
 8005ae6:	89bb      	ldrh	r3, [r7, #12]
 8005ae8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8005aee:	8afa      	ldrh	r2, [r7, #22]
 8005af0:	8b7b      	ldrh	r3, [r7, #26]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3301      	adds	r3, #1
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8005afc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005afe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) return;
 8005b06:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	db60      	blt.n	8005bd0 <_UG_PutText+0x278>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8005b0e:	7cfb      	ldrb	r3, [r7, #19]
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <_UG_PutText+0x1c6>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	853b      	strh	r3, [r7, #40]	; 0x28
 8005b1c:	e008      	b.n	8005b30 <_UG_PutText+0x1d8>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8005b1e:	7cfb      	ldrb	r3, [r7, #19]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <_UG_PutText+0x1d8>
 8005b28:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005b2c:	105b      	asrs	r3, r3, #1
 8005b2e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8005b30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005b32:	8b7b      	ldrh	r3, [r7, #26]
 8005b34:	4413      	add	r3, r2
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	853b      	strh	r3, [r7, #40]	; 0x28

      while( (*str != '\n') )
 8005b3a:	e031      	b.n	8005ba0 <_UG_PutText+0x248>
      {
         chr = *str++;
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	623a      	str	r2, [r7, #32]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	727b      	strb	r3, [r7, #9]
         if ( chr == 0 ) return;
 8005b46:	7a7b      	ldrb	r3, [r7, #9]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d043      	beq.n	8005bd4 <_UG_PutText+0x27c>
         _UG_PutChar(chr,xp,yp,txt->fc,txt->bc,txt->font);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8a1d      	ldrh	r5, [r3, #16]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8a5b      	ldrh	r3, [r3, #18]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6852      	ldr	r2, [r2, #4]
 8005b58:	f9b7 4026 	ldrsh.w	r4, [r7, #38]	; 0x26
 8005b5c:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8005b60:	7a78      	ldrb	r0, [r7, #9]
 8005b62:	9201      	str	r2, [sp, #4]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	462b      	mov	r3, r5
 8005b68:	4622      	mov	r2, r4
 8005b6a:	f7ff fc6b 	bl	8005444 <_UG_PutChar>
         xp += (txt->font->widths ? txt->font->widths[chr - txt->font->start_char] : char_width) + char_h_space;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00b      	beq.n	8005b90 <_UG_PutText+0x238>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	7a7a      	ldrb	r2, [r7, #9]
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	6849      	ldr	r1, [r1, #4]
 8005b84:	8949      	ldrh	r1, [r1, #10]
 8005b86:	1a52      	subs	r2, r2, r1
 8005b88:	4413      	add	r3, r2
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	e000      	b.n	8005b92 <_UG_PutText+0x23a>
 8005b90:	8a3b      	ldrh	r3, [r7, #16]
 8005b92:	89ba      	ldrh	r2, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b9a:	4413      	add	r3, r2
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	853b      	strh	r3, [r7, #40]	; 0x28
      while( (*str != '\n') )
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b0a      	cmp	r3, #10
 8005ba6:	d1c9      	bne.n	8005b3c <_UG_PutText+0x1e4>
      }
      str++;
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	3301      	adds	r3, #1
 8005bac:	623b      	str	r3, [r7, #32]
      yp += char_height + char_v_space;
 8005bae:	89fa      	ldrh	r2, [r7, #14]
 8005bb0:	897b      	ldrh	r3, [r7, #10]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bb8:	4413      	add	r3, r2
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8005bbe:	e74f      	b.n	8005a60 <_UG_PutText+0x108>
   if ( txt->font->p == NULL ) return;
 8005bc0:	bf00      	nop
 8005bc2:	e008      	b.n	8005bd6 <_UG_PutText+0x27e>
   if ( str == NULL ) return;
 8005bc4:	bf00      	nop
 8005bc6:	e006      	b.n	8005bd6 <_UG_PutText+0x27e>
   if ( (ye - ys) < txt->font->char_height ) return;
 8005bc8:	bf00      	nop
 8005bca:	e004      	b.n	8005bd6 <_UG_PutText+0x27e>
      if ( yp < 0 ) return;
 8005bcc:	bf00      	nop
 8005bce:	e002      	b.n	8005bd6 <_UG_PutText+0x27e>
      if ( xp < 0 ) return;
 8005bd0:	bf00      	nop
 8005bd2:	e000      	b.n	8005bd6 <_UG_PutText+0x27e>
         if ( chr == 0 ) return;
 8005bd4:	bf00      	nop
   }
}
 8005bd6:	3730      	adds	r7, #48	; 0x30
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bdb0      	pop	{r4, r5, r7, pc}

08005bdc <_UG_GetFreeObject>:

UG_OBJECT* _UG_GetFreeObject( UG_WINDOW* wnd )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]
 8005bee:	e016      	b.n	8005c1e <_UG_GetFreeObject+0x42>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	015b      	lsls	r3, r3, #5
 8005bf8:	4413      	add	r3, r2
 8005bfa:	60bb      	str	r3, [r7, #8]
      if ( (obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <_UG_GetFreeObject+0x3c>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <_UG_GetFreeObject+0x3c>
      {
         /* Free object found! */
         return obj;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	e008      	b.n	8005c2a <_UG_GetFreeObject+0x4e>
   for(i=0;i<wnd->objcnt;i++)
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	73fb      	strb	r3, [r7, #15]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	7bfa      	ldrb	r2, [r7, #15]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d3e3      	bcc.n	8005bf0 <_UG_GetFreeObject+0x14>
      }
   }
   return NULL;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr

08005c34 <_UG_SearchObject>:

UG_OBJECT* _UG_SearchObject( UG_WINDOW* wnd, UG_U8 type, UG_U8 id )
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	70fb      	strb	r3, [r7, #3]
 8005c40:	4613      	mov	r3, r2
 8005c42:	70bb      	strb	r3, [r7, #2]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	73fb      	strb	r3, [r7, #15]
 8005c4e:	e020      	b.n	8005c92 <_UG_SearchObject+0x5e>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	015b      	lsls	r3, r3, #5
 8005c58:	4413      	add	r3, r2
 8005c5a:	60bb      	str	r3, [r7, #8]
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d111      	bne.n	8005c8c <_UG_SearchObject+0x58>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <_UG_SearchObject+0x58>
      {
         if ( (obj->type == type) && (obj->id == id) )
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	7e1b      	ldrb	r3, [r3, #24]
 8005c78:	78fa      	ldrb	r2, [r7, #3]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d106      	bne.n	8005c8c <_UG_SearchObject+0x58>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	7e5b      	ldrb	r3, [r3, #25]
 8005c82:	78ba      	ldrb	r2, [r7, #2]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d101      	bne.n	8005c8c <_UG_SearchObject+0x58>
         {
            /* Requested object found! */
            return obj;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	e008      	b.n	8005c9e <_UG_SearchObject+0x6a>
   for(i=0;i<wnd->objcnt;i++)
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	73fb      	strb	r3, [r7, #15]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	7bfa      	ldrb	r2, [r7, #15]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d3d9      	bcc.n	8005c50 <_UG_SearchObject+0x1c>
         }
      }
   }
   return NULL;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <_UG_ProcessTouchData>:
   }
   return UG_RESULT_FAIL;
}

void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b089      	sub	sp, #36	; 0x24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8005cb0:	4b5b      	ldr	r3, [pc, #364]	; (8005e20 <_UG_ProcessTouchData+0x178>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	895b      	ldrh	r3, [r3, #10]
 8005cb6:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8005cb8:	4b59      	ldr	r3, [pc, #356]	; (8005e20 <_UG_ProcessTouchData+0x178>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	899b      	ldrh	r3, [r3, #12]
 8005cbe:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8005cc0:	4b57      	ldr	r3, [pc, #348]	; (8005e20 <_UG_ProcessTouchData+0x178>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	7a1b      	ldrb	r3, [r3, #8]
 8005cc6:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005cce:	2300      	movs	r3, #0
 8005cd0:	83fb      	strh	r3, [r7, #30]
 8005cd2:	e09a      	b.n	8005e0a <_UG_ProcessTouchData+0x162>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	8bfb      	ldrh	r3, [r7, #30]
 8005cda:	015b      	lsls	r3, r3, #5
 8005cdc:	4413      	add	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	785b      	ldrb	r3, [r3, #1]
 8005cea:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f040 8083 	bne.w	8005dfe <_UG_ProcessTouchData+0x156>
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d07d      	beq.n	8005dfe <_UG_ProcessTouchData+0x156>
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d078      	beq.n	8005dfe <_UG_ProcessTouchData+0x156>
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d173      	bne.n	8005dfe <_UG_ProcessTouchData+0x156>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d047      	beq.n	8005dac <_UG_ProcessTouchData+0x104>
 8005d1c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d042      	beq.n	8005dac <_UG_ProcessTouchData+0x104>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8005d26:	7f7b      	ldrb	r3, [r7, #29]
 8005d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d107      	bne.n	8005d40 <_UG_ProcessTouchData+0x98>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8005d30:	7f7b      	ldrb	r3, [r7, #29]
 8005d32:	f043 0305 	orr.w	r3, r3, #5
 8005d36:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CLICK_ON_OBJECT);
 8005d38:	7f7b      	ldrb	r3, [r7, #29]
 8005d3a:	f003 0367 	and.w	r3, r3, #103	; 0x67
 8005d3e:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8005d40:	7f7b      	ldrb	r3, [r7, #29]
 8005d42:	f023 0320 	bic.w	r3, r3, #32
 8005d46:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005d4e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	db25      	blt.n	8005da2 <_UG_ProcessTouchData+0xfa>
            {
               if ( xp <= obj->a_abs.xe )
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005d5c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	dc1e      	bgt.n	8005da2 <_UG_ProcessTouchData+0xfa>
               {
                  if ( yp >= obj->a_abs.ys )
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005d6a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	db17      	blt.n	8005da2 <_UG_ProcessTouchData+0xfa>
                  {
                     if ( yp <= obj->a_abs.ye )
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005d78:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	dc10      	bgt.n	8005da2 <_UG_ProcessTouchData+0xfa>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8005d80:	7f7b      	ldrb	r3, [r7, #29]
 8005d82:	f043 0320 	orr.w	r3, r3, #32
 8005d86:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8005d88:	7f7b      	ldrb	r3, [r7, #29]
 8005d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d107      	bne.n	8005da2 <_UG_ProcessTouchData+0xfa>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8005d92:	7f7b      	ldrb	r3, [r7, #29]
 8005d94:	f023 0304 	bic.w	r3, r3, #4
 8005d98:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8005d9a:	7f7b      	ldrb	r3, [r7, #29]
 8005d9c:	f043 0302 	orr.w	r3, r3, #2
 8005da0:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8005da2:	7f7b      	ldrb	r3, [r7, #29]
 8005da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da8:	777b      	strb	r3, [r7, #29]
 8005daa:	e028      	b.n	8005dfe <_UG_ProcessTouchData+0x156>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8005dac:	7f7b      	ldrb	r3, [r7, #29]
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d023      	beq.n	8005dfe <_UG_ProcessTouchData+0x156>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8005db6:	7f7b      	ldrb	r3, [r7, #29]
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00d      	beq.n	8005ddc <_UG_ProcessTouchData+0x134>
            {
               if ( objtouch & OBJ_TOUCH_STATE_PRESSED_ON_OBJECT ) objtouch |= OBJ_TOUCH_STATE_CLICK_ON_OBJECT;
 8005dc0:	7f7b      	ldrb	r3, [r7, #29]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <_UG_ProcessTouchData+0x12a>
 8005dca:	7f7b      	ldrb	r3, [r7, #29]
 8005dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005dd0:	777b      	strb	r3, [r7, #29]
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8005dd2:	7f7b      	ldrb	r3, [r7, #29]
 8005dd4:	f043 0308 	orr.w	r3, r3, #8
 8005dd8:	777b      	strb	r3, [r7, #29]
 8005dda:	e003      	b.n	8005de4 <_UG_ProcessTouchData+0x13c>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8005ddc:	7f7b      	ldrb	r3, [r7, #29]
 8005dde:	f043 0310 	orr.w	r3, r3, #16
 8005de2:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8005de4:	7f7b      	ldrb	r3, [r7, #29]
 8005de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <_UG_ProcessTouchData+0x14e>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8005dee:	7f7b      	ldrb	r3, [r7, #29]
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8005df6:	7f7b      	ldrb	r3, [r7, #29]
 8005df8:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8005dfc:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	7f7a      	ldrb	r2, [r7, #29]
 8005e02:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8005e04:	8bfb      	ldrh	r3, [r7, #30]
 8005e06:	3301      	adds	r3, #1
 8005e08:	83fb      	strh	r3, [r7, #30]
 8005e0a:	8bfa      	ldrh	r2, [r7, #30]
 8005e0c:	8abb      	ldrh	r3, [r7, #20]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	f4ff af60 	bcc.w	8005cd4 <_UG_ProcessTouchData+0x2c>
   }
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop
 8005e18:	3724      	adds	r7, #36	; 0x24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr
 8005e20:	20000ee0 	.word	0x20000ee0

08005e24 <_UG_UpdateObjects>:

void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005e32:	2300      	movs	r3, #0
 8005e34:	82fb      	strh	r3, [r7, #22]
 8005e36:	e035      	b.n	8005ea4 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	8afb      	ldrh	r3, [r7, #22]
 8005e3e:	015b      	lsls	r3, r3, #5
 8005e40:	4413      	add	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	73bb      	strb	r3, [r7, #14]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d121      	bne.n	8005e9e <_UG_UpdateObjects+0x7a>
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d01c      	beq.n	8005e9e <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d004      	beq.n	8005e78 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	6939      	ldr	r1, [r7, #16]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	4798      	blx	r3
         }
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <_UG_UpdateObjects+0x7a>
 8005e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	da09      	bge.n	8005e9e <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8005e8a:	7bbb      	ldrb	r3, [r7, #14]
 8005e8c:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	6939      	ldr	r1, [r7, #16]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8005e9e:	8afb      	ldrh	r3, [r7, #22]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	82fb      	strh	r3, [r7, #22]
 8005ea4:	8afa      	ldrh	r2, [r7, #22]
 8005ea6:	8abb      	ldrh	r3, [r7, #20]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d3c5      	bcc.n	8005e38 <_UG_UpdateObjects+0x14>
            }
         }
      }
   }
}
 8005eac:	bf00      	nop
 8005eae:	bf00      	nop
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
	...

08005eb8 <_UG_HandleEvents>:

void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8005ec0:	4b22      	ldr	r3, [pc, #136]	; (8005f4c <_UG_HandleEvents+0x94>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	605a      	str	r2, [r3, #4]
   /* Handle window-related events */
   //ToDo


   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8005ec6:	4b21      	ldr	r3, [pc, #132]	; (8005f4c <_UG_HandleEvents+0x94>)
 8005ec8:	2202      	movs	r2, #2
 8005eca:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	82fb      	strh	r3, [r7, #22]
 8005ed6:	e030      	b.n	8005f3a <_UG_HandleEvents+0x82>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	8afb      	ldrh	r3, [r7, #22]
 8005ede:	015b      	lsls	r3, r3, #5
 8005ee0:	4413      	add	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
      objstate = obj->state;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	74fb      	strb	r3, [r7, #19]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005eea:	7cfb      	ldrb	r3, [r7, #19]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d11f      	bne.n	8005f34 <_UG_HandleEvents+0x7c>
 8005ef4:	7cfb      	ldrb	r3, [r7, #19]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01a      	beq.n	8005f34 <_UG_HandleEvents+0x7c>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	7e9b      	ldrb	r3, [r3, #26]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d016      	beq.n	8005f34 <_UG_HandleEvents+0x7c>
         {
            msg.src = &obj;
 8005f06:	4a11      	ldr	r2, [pc, #68]	; (8005f4c <_UG_HandleEvents+0x94>)
 8005f08:	f107 030c 	add.w	r3, r7, #12
 8005f0c:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	7e1a      	ldrb	r2, [r3, #24]
 8005f12:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <_UG_HandleEvents+0x94>)
 8005f14:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	7e5a      	ldrb	r2, [r3, #25]
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <_UG_HandleEvents+0x94>)
 8005f1c:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	7e9a      	ldrb	r2, [r3, #26]
 8005f22:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <_UG_HandleEvents+0x94>)
 8005f24:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	4808      	ldr	r0, [pc, #32]	; (8005f4c <_UG_HandleEvents+0x94>)
 8005f2c:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8005f34:	8afb      	ldrh	r3, [r7, #22]
 8005f36:	3301      	adds	r3, #1
 8005f38:	82fb      	strh	r3, [r7, #22]
 8005f3a:	8afa      	ldrh	r2, [r7, #22]
 8005f3c:	8abb      	ldrh	r3, [r7, #20]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d3ca      	bcc.n	8005ed8 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8005f42:	bf00      	nop
 8005f44:	bf00      	nop
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20000ee4 	.word	0x20000ee4

08005f50 <_UG_DrawObjectFrame>:

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8005f50:	b5b0      	push	{r4, r5, r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	4604      	mov	r4, r0
 8005f58:	4608      	mov	r0, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4623      	mov	r3, r4
 8005f60:	80fb      	strh	r3, [r7, #6]
 8005f62:	4603      	mov	r3, r0
 8005f64:	80bb      	strh	r3, [r7, #4]
 8005f66:	460b      	mov	r3, r1
 8005f68:	807b      	strh	r3, [r7, #2]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8005f6e:	887b      	ldrh	r3, [r7, #2]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	b21c      	sxth	r4, r3
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	1c9a      	adds	r2, r3, #2
 8005f7a:	61ba      	str	r2, [r7, #24]
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005f82:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005f86:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	4622      	mov	r2, r4
 8005f90:	f7ff f964 	bl	800525c <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8005f94:	88bb      	ldrh	r3, [r7, #4]
 8005f96:	3301      	adds	r3, #1
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	b219      	sxth	r1, r3
 8005f9c:	883b      	ldrh	r3, [r7, #0]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	b21c      	sxth	r4, r3
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	1c9a      	adds	r2, r3, #2
 8005fa8:	61ba      	str	r2, [r7, #24]
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005fb0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	4623      	mov	r3, r4
 8005fb8:	f7ff f950 	bl	800525c <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	1c9a      	adds	r2, r3, #2
 8005fc0:	61ba      	str	r2, [r7, #24]
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005fc8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005fcc:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005fd0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	4623      	mov	r3, r4
 8005fd8:	f7ff f940 	bl	800525c <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8005fdc:	883b      	ldrh	r3, [r7, #0]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	b21c      	sxth	r4, r3
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	1c9a      	adds	r2, r3, #2
 8005fe8:	61ba      	str	r2, [r7, #24]
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005ff0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005ff4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	4623      	mov	r3, r4
 8005ffc:	f7ff f92e 	bl	800525c <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8006000:	88fb      	ldrh	r3, [r7, #6]
 8006002:	3301      	adds	r3, #1
 8006004:	b29b      	uxth	r3, r3
 8006006:	b218      	sxth	r0, r3
 8006008:	88bb      	ldrh	r3, [r7, #4]
 800600a:	3301      	adds	r3, #1
 800600c:	b29b      	uxth	r3, r3
 800600e:	b219      	sxth	r1, r3
 8006010:	887b      	ldrh	r3, [r7, #2]
 8006012:	3b02      	subs	r3, #2
 8006014:	b29b      	uxth	r3, r3
 8006016:	b21c      	sxth	r4, r3
 8006018:	88bb      	ldrh	r3, [r7, #4]
 800601a:	3301      	adds	r3, #1
 800601c:	b29b      	uxth	r3, r3
 800601e:	b21d      	sxth	r5, r3
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	1c9a      	adds	r2, r3, #2
 8006024:	61ba      	str	r2, [r7, #24]
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	462b      	mov	r3, r5
 800602c:	4622      	mov	r2, r4
 800602e:	f7ff f915 	bl	800525c <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8006032:	88fb      	ldrh	r3, [r7, #6]
 8006034:	3301      	adds	r3, #1
 8006036:	b29b      	uxth	r3, r3
 8006038:	b218      	sxth	r0, r3
 800603a:	88bb      	ldrh	r3, [r7, #4]
 800603c:	3302      	adds	r3, #2
 800603e:	b29b      	uxth	r3, r3
 8006040:	b219      	sxth	r1, r3
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	3301      	adds	r3, #1
 8006046:	b29b      	uxth	r3, r3
 8006048:	b21c      	sxth	r4, r3
 800604a:	883b      	ldrh	r3, [r7, #0]
 800604c:	3b02      	subs	r3, #2
 800604e:	b29b      	uxth	r3, r3
 8006050:	b21d      	sxth	r5, r3
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	1c9a      	adds	r2, r3, #2
 8006056:	61ba      	str	r2, [r7, #24]
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	462b      	mov	r3, r5
 800605e:	4622      	mov	r2, r4
 8006060:	f7ff f8fc 	bl	800525c <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8006064:	88fb      	ldrh	r3, [r7, #6]
 8006066:	3301      	adds	r3, #1
 8006068:	b29b      	uxth	r3, r3
 800606a:	b218      	sxth	r0, r3
 800606c:	883b      	ldrh	r3, [r7, #0]
 800606e:	3b01      	subs	r3, #1
 8006070:	b29b      	uxth	r3, r3
 8006072:	b219      	sxth	r1, r3
 8006074:	887b      	ldrh	r3, [r7, #2]
 8006076:	3b01      	subs	r3, #1
 8006078:	b29b      	uxth	r3, r3
 800607a:	b21c      	sxth	r4, r3
 800607c:	883b      	ldrh	r3, [r7, #0]
 800607e:	3b01      	subs	r3, #1
 8006080:	b29b      	uxth	r3, r3
 8006082:	b21d      	sxth	r5, r3
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	1c9a      	adds	r2, r3, #2
 8006088:	61ba      	str	r2, [r7, #24]
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	462b      	mov	r3, r5
 8006090:	4622      	mov	r2, r4
 8006092:	f7ff f8e3 	bl	800525c <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8006096:	887b      	ldrh	r3, [r7, #2]
 8006098:	3b01      	subs	r3, #1
 800609a:	b29b      	uxth	r3, r3
 800609c:	b218      	sxth	r0, r3
 800609e:	88bb      	ldrh	r3, [r7, #4]
 80060a0:	3301      	adds	r3, #1
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	b219      	sxth	r1, r3
 80060a6:	887b      	ldrh	r3, [r7, #2]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	b21c      	sxth	r4, r3
 80060ae:	883b      	ldrh	r3, [r7, #0]
 80060b0:	3b02      	subs	r3, #2
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	b21d      	sxth	r5, r3
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	1c9a      	adds	r2, r3, #2
 80060ba:	61ba      	str	r2, [r7, #24]
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	462b      	mov	r3, r5
 80060c2:	4622      	mov	r2, r4
 80060c4:	f7ff f8ca 	bl	800525c <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	3302      	adds	r3, #2
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	b218      	sxth	r0, r3
 80060d0:	88bb      	ldrh	r3, [r7, #4]
 80060d2:	3302      	adds	r3, #2
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	b219      	sxth	r1, r3
 80060d8:	887b      	ldrh	r3, [r7, #2]
 80060da:	3b03      	subs	r3, #3
 80060dc:	b29b      	uxth	r3, r3
 80060de:	b21c      	sxth	r4, r3
 80060e0:	88bb      	ldrh	r3, [r7, #4]
 80060e2:	3302      	adds	r3, #2
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	b21d      	sxth	r5, r3
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	1c9a      	adds	r2, r3, #2
 80060ec:	61ba      	str	r2, [r7, #24]
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	462b      	mov	r3, r5
 80060f4:	4622      	mov	r2, r4
 80060f6:	f7ff f8b1 	bl	800525c <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	3302      	adds	r3, #2
 80060fe:	b29b      	uxth	r3, r3
 8006100:	b218      	sxth	r0, r3
 8006102:	88bb      	ldrh	r3, [r7, #4]
 8006104:	3303      	adds	r3, #3
 8006106:	b29b      	uxth	r3, r3
 8006108:	b219      	sxth	r1, r3
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	3302      	adds	r3, #2
 800610e:	b29b      	uxth	r3, r3
 8006110:	b21c      	sxth	r4, r3
 8006112:	883b      	ldrh	r3, [r7, #0]
 8006114:	3b03      	subs	r3, #3
 8006116:	b29b      	uxth	r3, r3
 8006118:	b21d      	sxth	r5, r3
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	1c9a      	adds	r2, r3, #2
 800611e:	61ba      	str	r2, [r7, #24]
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	462b      	mov	r3, r5
 8006126:	4622      	mov	r2, r4
 8006128:	f7ff f898 	bl	800525c <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 800612c:	88fb      	ldrh	r3, [r7, #6]
 800612e:	3302      	adds	r3, #2
 8006130:	b29b      	uxth	r3, r3
 8006132:	b218      	sxth	r0, r3
 8006134:	883b      	ldrh	r3, [r7, #0]
 8006136:	3b02      	subs	r3, #2
 8006138:	b29b      	uxth	r3, r3
 800613a:	b219      	sxth	r1, r3
 800613c:	887b      	ldrh	r3, [r7, #2]
 800613e:	3b02      	subs	r3, #2
 8006140:	b29b      	uxth	r3, r3
 8006142:	b21c      	sxth	r4, r3
 8006144:	883b      	ldrh	r3, [r7, #0]
 8006146:	3b02      	subs	r3, #2
 8006148:	b29b      	uxth	r3, r3
 800614a:	b21d      	sxth	r5, r3
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	1c9a      	adds	r2, r3, #2
 8006150:	61ba      	str	r2, [r7, #24]
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	462b      	mov	r3, r5
 8006158:	4622      	mov	r2, r4
 800615a:	f7ff f87f 	bl	800525c <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 800615e:	887b      	ldrh	r3, [r7, #2]
 8006160:	3b02      	subs	r3, #2
 8006162:	b29b      	uxth	r3, r3
 8006164:	b218      	sxth	r0, r3
 8006166:	88bb      	ldrh	r3, [r7, #4]
 8006168:	3302      	adds	r3, #2
 800616a:	b29b      	uxth	r3, r3
 800616c:	b219      	sxth	r1, r3
 800616e:	887b      	ldrh	r3, [r7, #2]
 8006170:	3b02      	subs	r3, #2
 8006172:	b29b      	uxth	r3, r3
 8006174:	b21a      	sxth	r2, r3
 8006176:	883b      	ldrh	r3, [r7, #0]
 8006178:	3b03      	subs	r3, #3
 800617a:	b29b      	uxth	r3, r3
 800617c:	b21c      	sxth	r4, r3
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	4623      	mov	r3, r4
 8006186:	f7ff f869 	bl	800525c <UG_DrawLine>
}
 800618a:	bf00      	nop
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bdb0      	pop	{r4, r5, r7, pc}

08006192 <_UG_SendObjectPrerenderEvent>:

#ifdef USE_PRERENDER_EVENT
void _UG_SendObjectPrerenderEvent(UG_WINDOW *wnd,UG_OBJECT *obj)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
	UG_MESSAGE msg;
	msg.event = OBJ_EVENT_PRERENDER;
 800619c:	2302      	movs	r3, #2
 800619e:	72fb      	strb	r3, [r7, #11]
	msg.type = MSG_TYPE_OBJECT;
 80061a0:	2302      	movs	r3, #2
 80061a2:	723b      	strb	r3, [r7, #8]
	msg.id = obj->type;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	7e1b      	ldrb	r3, [r3, #24]
 80061a8:	727b      	strb	r3, [r7, #9]
	msg.sub_id = obj->id;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	7e5b      	ldrb	r3, [r3, #25]
 80061ae:	72bb      	strb	r3, [r7, #10]
	msg.src = obj;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	60fb      	str	r3, [r7, #12]

	wnd->cb(&msg);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b8:	f107 0208 	add.w	r2, r7, #8
 80061bc:	4610      	mov	r0, r2
 80061be:	4798      	blx	r3
}
 80061c0:	bf00      	nop
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <_UG_SendObjectPostrenderEvent>:
#endif

#ifdef USE_POSTRENDER_EVENT
void _UG_SendObjectPostrenderEvent(UG_WINDOW *wnd,UG_OBJECT *obj)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
	UG_MESSAGE msg;
	msg.event = OBJ_EVENT_POSTRENDER;
 80061d2:	2303      	movs	r3, #3
 80061d4:	72fb      	strb	r3, [r7, #11]
	msg.type = MSG_TYPE_OBJECT;
 80061d6:	2302      	movs	r3, #2
 80061d8:	723b      	strb	r3, [r7, #8]
	msg.id = obj->type;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	7e1b      	ldrb	r3, [r3, #24]
 80061de:	727b      	strb	r3, [r7, #9]
	msg.sub_id = obj->id;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	7e5b      	ldrb	r3, [r3, #25]
 80061e4:	72bb      	strb	r3, [r7, #10]
	msg.src = obj;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	60fb      	str	r3, [r7, #12]

	wnd->cb(&msg);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	f107 0208 	add.w	r2, r7, #8
 80061f2:	4610      	mov	r0, r2
 80061f4:	4798      	blx	r3
}
 80061f6:	bf00      	nop
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	6039      	str	r1, [r7, #0]
 800620a:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	2b03      	cmp	r3, #3
 8006210:	d810      	bhi.n	8006234 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8006212:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <UG_DriverRegister+0x40>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	3309      	adds	r3, #9
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4413      	add	r3, r2
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8006222:	4b07      	ldr	r3, [pc, #28]	; (8006240 <UG_DriverRegister+0x40>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	3309      	adds	r3, #9
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	4413      	add	r3, r2
 800622e:	2203      	movs	r2, #3
 8006230:	721a      	strb	r2, [r3, #8]
 8006232:	e000      	b.n	8006236 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8006234:	bf00      	nop
}
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20000ee0 	.word	0x20000ee0

08006244 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_SATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_SATUS_WAIT_FOR_UPDATE;
 800624a:	4b59      	ldr	r3, [pc, #356]	; (80063b0 <UG_Update+0x16c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UG_Update+0x2c>
 800625a:	4b55      	ldr	r3, [pc, #340]	; (80063b0 <UG_Update+0x16c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006262:	4b53      	ldr	r3, [pc, #332]	; (80063b0 <UG_Update+0x16c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0201 	bic.w	r2, r2, #1
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8006270:	4b4f      	ldr	r3, [pc, #316]	; (80063b0 <UG_Update+0x16c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	4b4e      	ldr	r3, [pc, #312]	; (80063b0 <UG_Update+0x16c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	429a      	cmp	r2, r3
 800627e:	d071      	beq.n	8006364 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8006280:	4b4b      	ldr	r3, [pc, #300]	; (80063b0 <UG_Update+0x16c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d06c      	beq.n	8006364 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 800628a:	4b49      	ldr	r3, [pc, #292]	; (80063b0 <UG_Update+0x16c>)
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b48      	ldr	r3, [pc, #288]	; (80063b0 <UG_Update+0x16c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6952      	ldr	r2, [r2, #20]
 8006294:	619a      	str	r2, [r3, #24]
         gui->active_window = gui->next_window;
 8006296:	4b46      	ldr	r3, [pc, #280]	; (80063b0 <UG_Update+0x16c>)
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4b45      	ldr	r3, [pc, #276]	; (80063b0 <UG_Update+0x16c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6912      	ldr	r2, [r2, #16]
 80062a0:	615a      	str	r2, [r3, #20]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80062a2:	4b43      	ldr	r3, [pc, #268]	; (80063b0 <UG_Update+0x16c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d045      	beq.n	8006338 <UG_Update+0xf4>
 80062ac:	4b40      	ldr	r3, [pc, #256]	; (80063b0 <UG_Update+0x16c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	7d9b      	ldrb	r3, [r3, #22]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d03d      	beq.n	8006338 <UG_Update+0xf4>
 80062bc:	4b3c      	ldr	r3, [pc, #240]	; (80063b0 <UG_Update+0x16c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	7a1b      	ldrb	r3, [r3, #8]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d035      	beq.n	8006338 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80062cc:	4b38      	ldr	r3, [pc, #224]	; (80063b0 <UG_Update+0x16c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80062d6:	4b36      	ldr	r3, [pc, #216]	; (80063b0 <UG_Update+0x16c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d123      	bne.n	800632c <UG_Update+0xe8>
 80062e4:	4b32      	ldr	r3, [pc, #200]	; (80063b0 <UG_Update+0x16c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80062ee:	4b30      	ldr	r3, [pc, #192]	; (80063b0 <UG_Update+0x16c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d117      	bne.n	800632c <UG_Update+0xe8>
 80062fc:	4b2c      	ldr	r3, [pc, #176]	; (80063b0 <UG_Update+0x16c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8006306:	4b2a      	ldr	r3, [pc, #168]	; (80063b0 <UG_Update+0x16c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006310:	429a      	cmp	r2, r3
 8006312:	d10b      	bne.n	800632c <UG_Update+0xe8>
 8006314:	4b26      	ldr	r3, [pc, #152]	; (80063b0 <UG_Update+0x16c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800631e:	4b24      	ldr	r3, [pc, #144]	; (80063b0 <UG_Update+0x16c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006328:	429a      	cmp	r2, r3
 800632a:	d005      	beq.n	8006338 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 800632c:	4b20      	ldr	r3, [pc, #128]	; (80063b0 <UG_Update+0x16c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	4618      	mov	r0, r3
 8006334:	f000 facc 	bl	80068d0 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8006338:	4b1d      	ldr	r3, [pc, #116]	; (80063b0 <UG_Update+0x16c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	7a1a      	ldrb	r2, [r3, #8]
 8006340:	4b1b      	ldr	r3, [pc, #108]	; (80063b0 <UG_Update+0x16c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 800634e:	4b18      	ldr	r3, [pc, #96]	; (80063b0 <UG_Update+0x16c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	7a1a      	ldrb	r2, [r3, #8]
 8006356:	4b16      	ldr	r3, [pc, #88]	; (80063b0 <UG_Update+0x16c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8006364:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <UG_Update+0x16c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01b      	beq.n	80063a6 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 800636e:	4b10      	ldr	r3, [pc, #64]	; (80063b0 <UG_Update+0x16c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	7a1b      	ldrb	r3, [r3, #8]
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fb4e 	bl	8006a24 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	7a1b      	ldrb	r3, [r3, #8]
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <UG_Update+0x162>
      {
         _UG_ProcessTouchData( wnd );
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff fc87 	bl	8005ca8 <_UG_ProcessTouchData>
         _UG_UpdateObjects( wnd );
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff fd42 	bl	8005e24 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fd89 	bl	8005eb8 <_UG_HandleEvents>
      }
   }
}
 80063a6:	bf00      	nop
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000ee0 	.word	0x20000ee0

080063b4 <UG_DrawBMP>:
   while ( (UG_U8)gui->state & UG_SATUS_WAIT_FOR_UPDATE ){};
   #endif    
}

void UG_DrawBMP( UG_S16 xp, UG_S16 yp, UG_BMP* bmp )
{
 80063b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	4603      	mov	r3, r0
 80063bc:	603a      	str	r2, [r7, #0]
 80063be:	80fb      	strh	r3, [r7, #6]
 80063c0:	460b      	mov	r3, r1
 80063c2:	80bb      	strh	r3, [r7, #4]


   if ( bmp->p == NULL ) return;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d030      	beq.n	800642e <UG_DrawBMP+0x7a>
   }
#endif

#ifdef USE_COLOR_RGB565 // 16-bit colour 5*Red-6*Green-5*Blue

   if ( gui->driver[DRIVER_DRAW_IMAGE].state & DRIVER_ENABLED )
 80063cc:	4b1a      	ldr	r3, [pc, #104]	; (8006438 <UG_DrawBMP+0x84>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d029      	beq.n	8006430 <UG_DrawBMP+0x7c>
   {

    if( bmp->colors == BMP_RGB565 )       // This Hardware accelerator only works for 16BPP RGB565 BMP images
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	7a5b      	ldrb	r3, [r3, #9]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d125      	bne.n	8006430 <UG_DrawBMP+0x7c>
       {
           if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint16_t *image, uint16_t pSize))gui->driver[DRIVER_DRAW_IMAGE].driver)(xp, yp, xp + bmp->width, yp + bmp->height, bmp->p, bmp->width * bmp->height) == UG_RESULT_OK ) return;
 80063e4:	4b14      	ldr	r3, [pc, #80]	; (8006438 <UG_DrawBMP+0x84>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ea:	461e      	mov	r6, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	889a      	ldrh	r2, [r3, #4]
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	4413      	add	r3, r2
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	b21c      	sxth	r4, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	88da      	ldrh	r2, [r3, #6]
 80063fc:	88bb      	ldrh	r3, [r7, #4]
 80063fe:	4413      	add	r3, r2
 8006400:	b29b      	uxth	r3, r3
 8006402:	b21d      	sxth	r5, r3
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	8892      	ldrh	r2, [r2, #4]
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	88c9      	ldrh	r1, [r1, #6]
 8006410:	fb01 f202 	mul.w	r2, r1, r2
 8006414:	b292      	uxth	r2, r2
 8006416:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800641a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800641e:	9201      	str	r2, [sp, #4]
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	462b      	mov	r3, r5
 8006424:	4622      	mov	r2, r4
 8006426:	47b0      	blx	r6
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	e000      	b.n	8006430 <UG_DrawBMP+0x7c>
   if ( bmp->p == NULL ) return;
 800642e:	bf00      	nop
         c = ((UG_COLOR)r<<16) | ((UG_COLOR)g<<8) | (UG_COLOR)b;
         UG_DrawPixel( xp++ , yp , c );
      }
      yp++;
   }*/
}
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006436:	bf00      	nop
 8006438:	20000ee0 	.word	0x20000ee0

0800643c <UG_WindowCreate>:

/* -------------------------------------------------------------------------------- */
/* -- WINDOW FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
UG_RESULT UG_WindowCreate( UG_WINDOW* wnd, UG_OBJECT* objlst, UG_U8 objcnt, void (*cb)( UG_MESSAGE* ) )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	4613      	mov	r3, r2
 800644a:	71fb      	strb	r3, [r7, #7]
   UG_U8 i;
   UG_OBJECT* obj=NULL;
 800644c:	2300      	movs	r3, #0
 800644e:	613b      	str	r3, [r7, #16]

   if ( (wnd == NULL) || (objlst == NULL) || (objcnt == 0) ) return UG_RESULT_FAIL;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <UG_WindowCreate+0x26>
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <UG_WindowCreate+0x26>
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d102      	bne.n	8006468 <UG_WindowCreate+0x2c>
 8006462:	f04f 33ff 	mov.w	r3, #4294967295
 8006466:	e073      	b.n	8006550 <UG_WindowCreate+0x114>

   /* Initialize all objects of the window */
   for(i=0; i<objcnt; i++)
 8006468:	2300      	movs	r3, #0
 800646a:	75fb      	strb	r3, [r7, #23]
 800646c:	e00d      	b.n	800648a <UG_WindowCreate+0x4e>
   {
      obj = (UG_OBJECT*)&objlst[i];
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	015b      	lsls	r3, r3, #5
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	4413      	add	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
      obj->state = OBJ_STATE_INIT;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	2203      	movs	r2, #3
 800647c:	701a      	strb	r2, [r3, #0]
      obj->data = NULL;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2200      	movs	r2, #0
 8006482:	61da      	str	r2, [r3, #28]
   for(i=0; i<objcnt; i++)
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	3301      	adds	r3, #1
 8006488:	75fb      	strb	r3, [r7, #23]
 800648a:	7dfa      	ldrb	r2, [r7, #23]
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	429a      	cmp	r2, r3
 8006490:	d3ed      	bcc.n	800646e <UG_WindowCreate+0x32>
   }

   /* Initialize window */
   wnd->objcnt = objcnt;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	79fa      	ldrb	r2, [r7, #7]
 8006496:	701a      	strb	r2, [r3, #0]
   wnd->objlst = objlst;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	605a      	str	r2, [r3, #4]
   wnd->state = WND_STATE_VALID;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2202      	movs	r2, #2
 80064a2:	721a      	strb	r2, [r3, #8]
   #ifdef USE_COLOR_RGB888
   wnd->fc = 0x000000;
   wnd->bc = 0xF0F0F0;
   #endif
   #ifdef USE_COLOR_RGB565
   wnd->fc = 0x0000;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	815a      	strh	r2, [r3, #10]
   wnd->bc = 0xEF7D;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f64e 727d 	movw	r2, #61309	; 0xef7d
 80064b0:	819a      	strh	r2, [r3, #12]
   #endif
   wnd->xs = 0;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	81da      	strh	r2, [r3, #14]
   wnd->ys = 0;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	821a      	strh	r2, [r3, #16]
   wnd->xe = UG_GetXDim()-1;
 80064be:	f7fe ffa9 	bl	8005414 <UG_GetXDim>
 80064c2:	4603      	mov	r3, r0
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	b21a      	sxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	825a      	strh	r2, [r3, #18]
   wnd->ye = UG_GetYDim()-1;
 80064d0:	f7fe ffac 	bl	800542c <UG_GetYDim>
 80064d4:	4603      	mov	r3, r0
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29b      	uxth	r3, r3
 80064dc:	b21a      	sxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	829a      	strh	r2, [r3, #20]
   wnd->cb = cb;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30
   wnd->style = WND_STYLE_3D | WND_STYLE_SHOW_TITLE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2203      	movs	r2, #3
 80064ec:	759a      	strb	r2, [r3, #22]

   /* Initialize window title-bar */
   wnd->title.str = NULL;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	619a      	str	r2, [r3, #24]
   if (gui != NULL) wnd->title.font = &gui->font;
 80064f4:	4b18      	ldr	r3, [pc, #96]	; (8006558 <UG_WindowCreate+0x11c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d006      	beq.n	800650a <UG_WindowCreate+0xce>
 80064fc:	4b16      	ldr	r3, [pc, #88]	; (8006558 <UG_WindowCreate+0x11c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	61da      	str	r2, [r3, #28]
 8006508:	e002      	b.n	8006510 <UG_WindowCreate+0xd4>
   else wnd->title.font = NULL;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	61da      	str	r2, [r3, #28]
   wnd->title.h_space = 2;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2202      	movs	r2, #2
 8006514:	f883 2020 	strb.w	r2, [r3, #32]
   wnd->title.v_space = 2;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   wnd->title.align = ALIGN_CENTER_LEFT;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2211      	movs	r2, #17
 8006524:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   wnd->title.fc = C_WHITE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800652e:	849a      	strh	r2, [r3, #36]	; 0x24
   wnd->title.bc = C_BLUE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	221f      	movs	r2, #31
 8006534:	84da      	strh	r2, [r3, #38]	; 0x26
   wnd->title.ifc = C_WHITE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800653c:	851a      	strh	r2, [r3, #40]	; 0x28
   wnd->title.ibc = C_GRAY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8006544:	855a      	strh	r2, [r3, #42]	; 0x2a
   wnd->title.height = 15;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	220f      	movs	r2, #15
 800654a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

   return UG_RESULT_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20000ee0 	.word	0x20000ee0

0800655c <UG_WindowShow>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowShow( UG_WINDOW* wnd )
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d013      	beq.n	8006592 <UG_WindowShow+0x36>
   {
      /* Force an update, even if this is the active window! */
      wnd->state |= WND_STATE_VISIBLE | WND_STATE_UPDATE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	7a1b      	ldrb	r3, [r3, #8]
 800656e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006572:	b2da      	uxtb	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	721a      	strb	r2, [r3, #8]
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	7a1b      	ldrb	r3, [r3, #8]
 800657c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006580:	b2da      	uxtb	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	721a      	strb	r2, [r3, #8]
      gui->next_window = wnd;
 8006586:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <UG_WindowShow+0x44>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	611a      	str	r2, [r3, #16]
      return UG_RESULT_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	e001      	b.n	8006596 <UG_WindowShow+0x3a>
   }
   return UG_RESULT_FAIL;
 8006592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr
 80065a0:	20000ee0 	.word	0x20000ee0

080065a4 <UG_WindowSetBackColor>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetBackColor( UG_WINDOW* wnd, UG_COLOR bc )
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d011      	beq.n	80065da <UG_WindowSetBackColor+0x36>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	7a1b      	ldrb	r3, [r3, #8]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00b      	beq.n	80065da <UG_WindowSetBackColor+0x36>
   {
      wnd->bc = bc;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	887a      	ldrh	r2, [r7, #2]
 80065c6:	819a      	strh	r2, [r3, #12]
      wnd->state |= WND_STATE_UPDATE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	7a1b      	ldrb	r3, [r3, #8]
 80065cc:	f043 0320 	orr.w	r3, r3, #32
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e001      	b.n	80065de <UG_WindowSetBackColor+0x3a>
   }
   return UG_RESULT_FAIL;
 80065da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bc80      	pop	{r7}
 80065e6:	4770      	bx	lr

080065e8 <UG_WindowSetTitleTextColor>:

UG_RESULT UG_WindowSetTitleTextColor( UG_WINDOW* wnd, UG_COLOR c )
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d011      	beq.n	800661e <UG_WindowSetTitleTextColor+0x36>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	7a1b      	ldrb	r3, [r3, #8]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00b      	beq.n	800661e <UG_WindowSetTitleTextColor+0x36>
   {
      wnd->title.fc = c;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	887a      	ldrh	r2, [r7, #2]
 800660a:	849a      	strh	r2, [r3, #36]	; 0x24
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	7a1b      	ldrb	r3, [r3, #8]
 8006610:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006614:	b2da      	uxtb	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e001      	b.n	8006622 <UG_WindowSetTitleTextColor+0x3a>
   }
   return UG_RESULT_FAIL;
 800661e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <UG_WindowSetTitleColor>:

UG_RESULT UG_WindowSetTitleColor( UG_WINDOW* wnd, UG_COLOR c )
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d011      	beq.n	8006662 <UG_WindowSetTitleColor+0x36>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	7a1b      	ldrb	r3, [r3, #8]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00b      	beq.n	8006662 <UG_WindowSetTitleColor+0x36>
   {
      wnd->title.bc = c;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	887a      	ldrh	r2, [r7, #2]
 800664e:	84da      	strh	r2, [r3, #38]	; 0x26
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	7a1b      	ldrb	r3, [r3, #8]
 8006654:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006658:	b2da      	uxtb	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	e001      	b.n	8006666 <UG_WindowSetTitleColor+0x3a>
   }
   return UG_RESULT_FAIL;
 8006662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr

08006670 <UG_WindowSetTitleText>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleText( UG_WINDOW* wnd, char* str )
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d011      	beq.n	80066a4 <UG_WindowSetTitleText+0x34>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	7a1b      	ldrb	r3, [r3, #8]
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <UG_WindowSetTitleText+0x34>
   {
      wnd->title.str = str;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	619a      	str	r2, [r3, #24]
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	7a1b      	ldrb	r3, [r3, #8]
 8006696:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800669a:	b2da      	uxtb	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	e001      	b.n	80066a8 <UG_WindowSetTitleText+0x38>
   }
   return UG_RESULT_FAIL;
 80066a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bc80      	pop	{r7}
 80066b0:	4770      	bx	lr

080066b2 <UG_WindowSetTitleTextFont>:

UG_RESULT UG_WindowSetTitleTextFont( UG_WINDOW* wnd, const UG_FONT* font )
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d02b      	beq.n	800671a <UG_WindowSetTitleTextFont+0x68>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	7a1b      	ldrb	r3, [r3, #8]
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d025      	beq.n	800671a <UG_WindowSetTitleTextFont+0x68>
   {
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	7a1b      	ldrb	r3, [r3, #8]
 80066d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	721a      	strb	r2, [r3, #8]
      wnd->title.font = font;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	61da      	str	r2, [r3, #28]
      if ( wnd->title.height <= (font->char_height + 1) )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066e8:	461a      	mov	r2, r3
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80066f0:	3301      	adds	r3, #1
 80066f2:	429a      	cmp	r2, r3
 80066f4:	dc0f      	bgt.n	8006716 <UG_WindowSetTitleTextFont+0x64>
      {
         wnd->title.height = font->char_height + 2;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	3302      	adds	r3, #2
 8006700:	b2da      	uxtb	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7a1b      	ldrb	r3, [r3, #8]
 800670c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006710:	b2da      	uxtb	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	721a      	strb	r2, [r3, #8]
      }
      return UG_RESULT_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	e001      	b.n	800671e <UG_WindowSetTitleTextFont+0x6c>
   }
   return UG_RESULT_FAIL;
 800671a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <UG_WindowSetTitleTextAlignment>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleTextAlignment( UG_WINDOW* wnd, UG_U8 align )
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	460b      	mov	r3, r1
 8006732:	70fb      	strb	r3, [r7, #3]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d012      	beq.n	8006760 <UG_WindowSetTitleTextAlignment+0x38>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	7a1b      	ldrb	r3, [r3, #8]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00c      	beq.n	8006760 <UG_WindowSetTitleTextAlignment+0x38>
   {
      wnd->title.align = align;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	78fa      	ldrb	r2, [r7, #3]
 800674a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	7a1b      	ldrb	r3, [r3, #8]
 8006752:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006756:	b2da      	uxtb	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	e001      	b.n	8006764 <UG_WindowSetTitleTextAlignment+0x3c>
   }
   return UG_RESULT_FAIL;
 8006760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr

0800676e <UG_WindowSetStyle>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetStyle( UG_WINDOW* wnd, UG_U8 style )
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	460b      	mov	r3, r1
 8006778:	70fb      	strb	r3, [r7, #3]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d036      	beq.n	80067ee <UG_WindowSetStyle+0x80>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	7a1b      	ldrb	r3, [r3, #8]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d030      	beq.n	80067ee <UG_WindowSetStyle+0x80>
   {
      /* 3D or 2D? */
      if ( style & WND_STYLE_3D )
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d007      	beq.n	80067a6 <UG_WindowSetStyle+0x38>
      {
         wnd->style |= WND_STYLE_3D;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	7d9b      	ldrb	r3, [r3, #22]
 800679a:	f043 0301 	orr.w	r3, r3, #1
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	759a      	strb	r2, [r3, #22]
 80067a4:	e006      	b.n	80067b4 <UG_WindowSetStyle+0x46>
      }
      else
      {
         wnd->style &= ~WND_STYLE_3D;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	7d9b      	ldrb	r3, [r3, #22]
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	759a      	strb	r2, [r3, #22]
      }
      /* Show title-bar? */
      if ( style & WND_STYLE_SHOW_TITLE )
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <UG_WindowSetStyle+0x60>
      {
         wnd->style |= WND_STYLE_SHOW_TITLE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	7d9b      	ldrb	r3, [r3, #22]
 80067c2:	f043 0302 	orr.w	r3, r3, #2
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	759a      	strb	r2, [r3, #22]
 80067cc:	e006      	b.n	80067dc <UG_WindowSetStyle+0x6e>
      }
      else
      {
         wnd->style &= ~WND_STYLE_SHOW_TITLE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	7d9b      	ldrb	r3, [r3, #22]
 80067d2:	f023 0302 	bic.w	r3, r3, #2
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	759a      	strb	r2, [r3, #22]
      }
      wnd->state |= WND_STATE_UPDATE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	7a1b      	ldrb	r3, [r3, #8]
 80067e0:	f043 0320 	orr.w	r3, r3, #32
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e001      	b.n	80067f2 <UG_WindowSetStyle+0x84>
   }
   return UG_RESULT_FAIL;
 80067ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bc80      	pop	{r7}
 80067fa:	4770      	bx	lr

080067fc <UG_WindowGetArea>:
   }
   return style;
}

UG_RESULT UG_WindowGetArea( UG_WINDOW* wnd, UG_AREA* a )
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d05a      	beq.n	80068c2 <UG_WindowGetArea+0xc6>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	7a1b      	ldrb	r3, [r3, #8]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d054      	beq.n	80068c2 <UG_WindowGetArea+0xc6>
   {
      a->xs = wnd->xs;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	801a      	strh	r2, [r3, #0]
      a->ys = wnd->ys;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	805a      	strh	r2, [r3, #2]
      a->xe = wnd->xe;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	809a      	strh	r2, [r3, #4]
      a->ye = wnd->ye;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	80da      	strh	r2, [r3, #6]
      if ( wnd->style & WND_STYLE_3D )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	7d9b      	ldrb	r3, [r3, #22]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	d023      	beq.n	8006894 <UG_WindowGetArea+0x98>
      {
         a->xs+=3;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006852:	b29b      	uxth	r3, r3
 8006854:	3303      	adds	r3, #3
 8006856:	b29b      	uxth	r3, r3
 8006858:	b21a      	sxth	r2, r3
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	801a      	strh	r2, [r3, #0]
         a->ys+=3;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006864:	b29b      	uxth	r3, r3
 8006866:	3303      	adds	r3, #3
 8006868:	b29b      	uxth	r3, r3
 800686a:	b21a      	sxth	r2, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	805a      	strh	r2, [r3, #2]
         a->xe-=3;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b03      	subs	r3, #3
 800687a:	b29b      	uxth	r3, r3
 800687c:	b21a      	sxth	r2, r3
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	809a      	strh	r2, [r3, #4]
         a->ye-=3;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b03      	subs	r3, #3
 800688c:	b29b      	uxth	r3, r3
 800688e:	b21a      	sxth	r2, r3
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	80da      	strh	r2, [r3, #6]
      }
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	7d9b      	ldrb	r3, [r3, #22]
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00e      	beq.n	80068be <UG_WindowGetArea+0xc2>
      {
         a->ys+= wnd->title.height+1;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	4413      	add	r3, r2
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3301      	adds	r3, #1
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	b21a      	sxth	r2, r3
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	805a      	strh	r2, [r3, #2]
      }
      return UG_RESULT_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e001      	b.n	80068c6 <UG_WindowGetArea+0xca>
   }
   return UG_RESULT_FAIL;
 80068c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr

080068d0 <_UG_WindowDrawTitle>:
   }
   return h;
}

UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 80068d0:	b590      	push	{r4, r7, lr}
 80068d2:	b08f      	sub	sp, #60	; 0x3c
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 809a 	beq.w	8006a14 <_UG_WindowDrawTitle+0x144>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	7a1b      	ldrb	r3, [r3, #8]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 8093 	beq.w	8006a14 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	89db      	ldrh	r3, [r3, #14]
 80068f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8a1b      	ldrh	r3, [r3, #16]
 80068f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	8a5b      	ldrh	r3, [r3, #18]
 80068fe:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	8a9b      	ldrh	r3, [r3, #20]
 8006904:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	7d9b      	ldrb	r3, [r3, #22]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00f      	beq.n	8006932 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8006912:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006914:	3303      	adds	r3, #3
 8006916:	b29b      	uxth	r3, r3
 8006918:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 800691a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800691c:	3303      	adds	r3, #3
 800691e:	b29b      	uxth	r3, r3
 8006920:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8006922:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006924:	3b03      	subs	r3, #3
 8006926:	b29b      	uxth	r3, r3
 8006928:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 800692a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800692c:	3b03      	subs	r3, #3
 800692e:	b29b      	uxth	r3, r3
 8006930:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8006932:	4b3b      	ldr	r3, [pc, #236]	; (8006a20 <_UG_WindowDrawTitle+0x150>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	429a      	cmp	r2, r3
 800693c:	d106      	bne.n	800694c <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006942:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006948:	83bb      	strh	r3, [r7, #28]
 800694a:	e005      	b.n	8006958 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006950:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006956:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800695e:	b29a      	uxth	r2, r3
 8006960:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006962:	4413      	add	r3, r2
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	b29b      	uxth	r3, r3
 800696a:	b21c      	sxth	r4, r3
 800696c:	8bfb      	ldrh	r3, [r7, #30]
 800696e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006972:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006976:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	4623      	mov	r3, r4
 800697e:	f7fe fa45 	bl	8004e0c <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 800698e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006990:	3303      	adds	r3, #3
 8006992:	b29b      	uxth	r3, r3
 8006994:	b21b      	sxth	r3, r3
 8006996:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8006998:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800699a:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 800699c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800699e:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80069aa:	4413      	add	r3, r2
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	b21b      	sxth	r3, r3
 80069b4:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80069bc:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80069c6:	b21b      	sxth	r3, r3
 80069c8:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 80069d0:	b21b      	sxth	r3, r3
 80069d2:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 80069d4:	f107 030c 	add.w	r3, r7, #12
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe ffbd 	bl	8005958 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80069e8:	4413      	add	r3, r2
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	b219      	sxth	r1, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80069f8:	4413      	add	r3, r2
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	b21b      	sxth	r3, r3
 80069fe:	f649 5413 	movw	r4, #40211	; 0x9d13
 8006a02:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006a06:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006a0a:	9400      	str	r4, [sp, #0]
 8006a0c:	f7fe fc26 	bl	800525c <UG_DrawLine>
      return UG_RESULT_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	e001      	b.n	8006a18 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8006a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3734      	adds	r7, #52	; 0x34
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd90      	pop	{r4, r7, pc}
 8006a20:	20000ee0 	.word	0x20000ee0

08006a24 <_UG_WindowUpdate>:

void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8006a24:	b590      	push	{r4, r7, lr}
 8006a26:	b089      	sub	sp, #36	; 0x24
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	89db      	ldrh	r3, [r3, #14]
 8006a30:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	8a1b      	ldrh	r3, [r3, #16]
 8006a36:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	8a5b      	ldrh	r3, [r3, #18]
 8006a3c:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	8a9b      	ldrh	r3, [r3, #20]
 8006a42:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	7a1b      	ldrb	r3, [r3, #8]
 8006a48:	f023 0320 	bic.w	r3, r3, #32
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	7a1b      	ldrb	r3, [r3, #8]
 8006a56:	f003 0308 	and.w	r3, r3, #8
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 8084 	beq.w	8006b68 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	7d9b      	ldrb	r3, [r3, #22]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d021      	beq.n	8006ab0 <_UG_WindowUpdate+0x8c>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7a1b      	ldrb	r3, [r3, #8]
 8006a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d11b      	bne.n	8006ab0 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8006a78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a7c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006a80:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8006a84:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8006a88:	4c43      	ldr	r4, [pc, #268]	; (8006b98 <_UG_WindowUpdate+0x174>)
 8006a8a:	9400      	str	r4, [sp, #0]
 8006a8c:	f7ff fa60 	bl	8005f50 <_UG_DrawObjectFrame>
         xs+=3;
 8006a90:	8abb      	ldrh	r3, [r7, #20]
 8006a92:	3303      	adds	r3, #3
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8006a98:	8a7b      	ldrh	r3, [r7, #18]
 8006a9a:	3303      	adds	r3, #3
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8006aa0:	8a3b      	ldrh	r3, [r7, #16]
 8006aa2:	3b03      	subs	r3, #3
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8006aa8:	89fb      	ldrh	r3, [r7, #14]
 8006aaa:	3b03      	subs	r3, #3
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	7d9b      	ldrb	r3, [r3, #22]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d01a      	beq.n	8006af2 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff ff07 	bl	80068d0 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	8a7b      	ldrh	r3, [r7, #18]
 8006acc:	4413      	add	r3, r2
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	7a1b      	ldrb	r3, [r3, #8]
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d007      	beq.n	8006af2 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	7a1b      	ldrb	r3, [r3, #8]
 8006ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	721a      	strb	r2, [r3, #8]
            return;
 8006af0:	e04e      	b.n	8006b90 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	899b      	ldrh	r3, [r3, #12]
 8006af6:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8006afa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006afe:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8006b02:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	4623      	mov	r3, r4
 8006b0a:	f7fe f97f 	bl	8004e0c <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8006b14:	2300      	movs	r3, #0
 8006b16:	82fb      	strh	r3, [r7, #22]
 8006b18:	e021      	b.n	8006b5e <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	8afb      	ldrh	r3, [r7, #22]
 8006b20:	015b      	lsls	r3, r3, #5
 8006b22:	4413      	add	r3, r2
 8006b24:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d112      	bne.n	8006b58 <_UG_WindowUpdate+0x134>
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00c      	beq.n	8006b58 <_UG_WindowUpdate+0x134>
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	f003 0308 	and.w	r3, r3, #8
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d006      	beq.n	8006b58 <_UG_WindowUpdate+0x134>
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8006b58:	8afb      	ldrh	r3, [r7, #22]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	82fb      	strh	r3, [r7, #22]
 8006b5e:	8afa      	ldrh	r2, [r7, #22]
 8006b60:	89bb      	ldrh	r3, [r7, #12]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d3d9      	bcc.n	8006b1a <_UG_WindowUpdate+0xf6>
 8006b66:	e013      	b.n	8006b90 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8006b80:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <_UG_WindowUpdate+0x178>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	4623      	mov	r3, r4
 8006b8c:	f7fe f93e 	bl	8004e0c <UG_FillFrame>
   }
}
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd90      	pop	{r4, r7, pc}
 8006b96:	bf00      	nop
 8006b98:	0800e480 	.word	0x0800e480
 8006b9c:	20000ee0 	.word	0x20000ee0

08006ba0 <UG_TextboxCreate>:

/* -------------------------------------------------------------------------------- */
/* -- TEXTBOX FUNCTIONS                                                          -- */
/* -------------------------------------------------------------------------------- */
UG_RESULT UG_TextboxCreate( UG_WINDOW* wnd, UG_TEXTBOX* txb, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	4611      	mov	r1, r2
 8006bac:	461a      	mov	r2, r3
 8006bae:	460b      	mov	r3, r1
 8006bb0:	71fb      	strb	r3, [r7, #7]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f7ff f810 	bl	8005bdc <_UG_GetFreeObject>
 8006bbc:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <UG_TextboxCreate+0x2a>
 8006bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc8:	e061      	b.n	8006c8e <UG_TextboxCreate+0xee>

   /* Initialize object-specific parameters */
   txb->str = NULL;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]
   if (gui != NULL) txb->font = &gui->font;
 8006bd0:	4b31      	ldr	r3, [pc, #196]	; (8006c98 <UG_TextboxCreate+0xf8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <UG_TextboxCreate+0x46>
 8006bd8:	4b2f      	ldr	r3, [pc, #188]	; (8006c98 <UG_TextboxCreate+0xf8>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	605a      	str	r2, [r3, #4]
 8006be4:	e002      	b.n	8006bec <UG_TextboxCreate+0x4c>
   else txb->font = NULL;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2200      	movs	r2, #0
 8006bea:	605a      	str	r2, [r3, #4]
   txb->style = 0; /* reserved */
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	721a      	strb	r2, [r3, #8]
   txb->fc = wnd->fc;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	895a      	ldrh	r2, [r3, #10]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	815a      	strh	r2, [r3, #10]
   txb->bc = wnd->bc;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	899a      	ldrh	r2, [r3, #12]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	819a      	strh	r2, [r3, #12]
   txb->align = ALIGN_CENTER;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2212      	movs	r2, #18
 8006c06:	739a      	strb	r2, [r3, #14]
   txb->h_space = 0;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	73da      	strb	r2, [r3, #15]
   txb->v_space = 0;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2200      	movs	r2, #0
 8006c12:	741a      	strb	r2, [r3, #16]

   /* Initialize standard object parameters */
   obj->update = _UG_TextboxUpdate;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	4a21      	ldr	r2, [pc, #132]	; (8006c9c <UG_TextboxCreate+0xfc>)
 8006c18:	605a      	str	r2, [r3, #4]
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	705a      	strb	r2, [r3, #1]
   obj->type = OBJ_TYPE_TEXTBOX;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	2202      	movs	r2, #2
 8006c24:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	88ba      	ldrh	r2, [r7, #4]
 8006c30:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	8c3a      	ldrh	r2, [r7, #32]
 8006c36:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c3c:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c42:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c4a:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c52:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c5a:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c62:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	79fa      	ldrb	r2, [r7, #7]
 8006c68:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)txb;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000ee0 	.word	0x20000ee0
 8006c9c:	08006e9b 	.word	0x08006e9b

08006ca0 <UG_TextboxShow>:
{
   return _UG_DeleteObject( wnd, OBJ_TYPE_TEXTBOX, id );
}

UG_RESULT UG_TextboxShow( UG_WINDOW* wnd, UG_U8 id )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
   UG_OBJECT* obj=NULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	2102      	movs	r1, #2
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7fe ffbc 	bl	8005c34 <_UG_SearchObject>
 8006cbc:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d102      	bne.n	8006cca <UG_TextboxShow+0x2a>
 8006cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc8:	e00e      	b.n	8006ce8 <UG_TextboxShow+0x48>

   obj->state |= OBJ_STATE_VISIBLE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	f043 0308 	orr.w	r3, r3, #8
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	701a      	strb	r2, [r3, #0]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <UG_TextboxSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	70fb      	strb	r3, [r7, #3]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	2102      	movs	r1, #2
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fe ff90 	bl	8005c34 <_UG_SearchObject>
 8006d14:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <UG_TextboxSetForeColor+0x32>
 8006d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d20:	e00d      	b.n	8006d3e <UG_TextboxSetForeColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	60bb      	str	r3, [r7, #8]
   txb->fc = fc;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	883a      	ldrh	r2, [r7, #0]
 8006d2c:	815a      	strh	r2, [r3, #10]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <UG_TextboxSetBackColor>:

UG_RESULT UG_TextboxSetBackColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR bc )
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	70fb      	strb	r3, [r7, #3]
 8006d52:	4613      	mov	r3, r2
 8006d54:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8006d5e:	78fb      	ldrb	r3, [r7, #3]
 8006d60:	461a      	mov	r2, r3
 8006d62:	2102      	movs	r1, #2
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7fe ff65 	bl	8005c34 <_UG_SearchObject>
 8006d6a:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d102      	bne.n	8006d78 <UG_TextboxSetBackColor+0x32>
 8006d72:	f04f 33ff 	mov.w	r3, #4294967295
 8006d76:	e00d      	b.n	8006d94 <UG_TextboxSetBackColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	60bb      	str	r3, [r7, #8]
   txb->bc = bc;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	883a      	ldrh	r2, [r7, #0]
 8006d82:	819a      	strh	r2, [r3, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <UG_TextboxSetText>:

UG_RESULT UG_TextboxSetText( UG_WINDOW* wnd, UG_U8 id, char* str )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	460b      	mov	r3, r1
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8006db2:	7afb      	ldrb	r3, [r7, #11]
 8006db4:	461a      	mov	r2, r3
 8006db6:	2102      	movs	r1, #2
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f7fe ff3b 	bl	8005c34 <_UG_SearchObject>
 8006dbe:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d102      	bne.n	8006dcc <UG_TextboxSetText+0x30>
 8006dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dca:	e00d      	b.n	8006de8 <UG_TextboxSetText+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	613b      	str	r3, [r7, #16]
   txb->str = str;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	601a      	str	r2, [r3, #0]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <UG_TextboxSetFont>:

UG_RESULT UG_TextboxSetFont( UG_WINDOW* wnd, UG_U8 id, const UG_FONT* font )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8006e06:	7afb      	ldrb	r3, [r7, #11]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	2102      	movs	r1, #2
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7fe ff11 	bl	8005c34 <_UG_SearchObject>
 8006e12:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <UG_TextboxSetFont+0x30>
 8006e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1e:	e00d      	b.n	8006e3c <UG_TextboxSetFont+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	613b      	str	r3, [r7, #16]
   txb->font = font;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	605a      	str	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <UG_TextboxSetAlignment>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetAlignment( UG_WINDOW* wnd, UG_U8 id, UG_U8 align )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
 8006e50:	4613      	mov	r3, r2
 8006e52:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	2102      	movs	r1, #2
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7fe fee6 	bl	8005c34 <_UG_SearchObject>
 8006e68:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d102      	bne.n	8006e76 <UG_TextboxSetAlignment+0x32>
 8006e70:	f04f 33ff 	mov.w	r3, #4294967295
 8006e74:	e00d      	b.n	8006e92 <UG_TextboxSetAlignment+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	60bb      	str	r3, [r7, #8]
   txb->align = align;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	78ba      	ldrb	r2, [r7, #2]
 8006e80:	739a      	strb	r2, [r3, #14]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <_UG_TextboxUpdate>:
   }
   return align;
}

void _UG_TextboxUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 8006e9a:	b590      	push	{r4, r7, lr}
 8006e9c:	b08f      	sub	sp, #60	; 0x3c
 8006e9e:	af02      	add	r7, sp, #8
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
   UG_TEXTBOX* txb;
   UG_AREA a;
   UG_TEXT txt;

   /* Get object-specific data */
   txb = (UG_TEXTBOX*)(obj->data);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   /* Textbox doesn't support touch */

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 80c0 	beq.w	8007038 <_UG_TextboxUpdate+0x19e>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 809c 	beq.w	8006ffe <_UG_TextboxUpdate+0x164>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 80a7 	beq.w	8007022 <_UG_TextboxUpdate+0x188>
         {
            UG_WindowGetArea(wnd,&a);
 8006ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff fc8e 	bl	80067fc <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	4413      	add	r3, r2
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	b21a      	sxth	r2, r3
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	4413      	add	r3, r2
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	b21a      	sxth	r2, r3
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	4413      	add	r3, r2
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	b21a      	sxth	r2, r3
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	4413      	add	r3, r2
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	b21a      	sxth	r2, r3
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye >= wnd->ye ) return;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	da70      	bge.n	8007032 <_UG_TextboxUpdate+0x198>
            if ( obj->a_abs.xe >= wnd->xe ) return;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	da6a      	bge.n	8007036 <_UG_TextboxUpdate+0x19c>
#ifdef USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff f915 	bl	8006192 <_UG_SendObjectPrerenderEvent>
#endif

            txt.bc = txb->bc;
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6a:	899b      	ldrh	r3, [r3, #12]
 8006f6c:	837b      	strh	r3, [r7, #26]
            txt.fc = txb->fc;
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	895b      	ldrh	r3, [r3, #10]
 8006f72:	833b      	strh	r3, [r7, #24]

            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, txt.bc);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8006f8c:	8b7b      	ldrh	r3, [r7, #26]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	4623      	mov	r3, r4
 8006f92:	f7fd ff3b 	bl	8004e0c <UG_FillFrame>

            /* Draw Textbox text */
            txt.a.xs = obj->a_abs.xs;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f9c:	823b      	strh	r3, [r7, #16]
            txt.a.ys = obj->a_abs.ys;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006fa4:	827b      	strh	r3, [r7, #18]
            txt.a.xe = obj->a_abs.xe;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006fac:	82bb      	strh	r3, [r7, #20]
            txt.a.ye = obj->a_abs.ye;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006fb4:	82fb      	strh	r3, [r7, #22]
            txt.align = txb->align;
 8006fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb8:	7b9b      	ldrb	r3, [r3, #14]
 8006fba:	773b      	strb	r3, [r7, #28]
            txt.font = txb->font;
 8006fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	60fb      	str	r3, [r7, #12]
            txt.h_space = txb->h_space;
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	f993 300f 	ldrsb.w	r3, [r3, #15]
 8006fc8:	b21b      	sxth	r3, r3
 8006fca:	83fb      	strh	r3, [r7, #30]
            txt.v_space = txb->v_space;
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8006fd2:	b21b      	sxth	r3, r3
 8006fd4:	843b      	strh	r3, [r7, #32]
            txt.str = txb->str;
 8006fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60bb      	str	r3, [r7, #8]
            _UG_PutText( &txt );
 8006fdc:	f107 0308 	add.w	r3, r7, #8
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fe fcb9 	bl	8005958 <_UG_PutText>
            obj->state &= ~OBJ_STATE_REDRAW;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	701a      	strb	r2, [r3, #0]
#ifdef USE_POSTRENDER_EVENT
            _UG_SendObjectPostrenderEvent(wnd, obj);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff f8e6 	bl	80061c8 <_UG_SendObjectPostrenderEvent>
 8006ffc:	e011      	b.n	8007022 <_UG_TextboxUpdate+0x188>
#endif
         }
      }
      else
      {
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	899b      	ldrh	r3, [r3, #12]
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	4623      	mov	r3, r4
 800701e:	f7fd fef5 	bl	8004e0c <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	f023 0320 	bic.w	r3, r3, #32
 800702a:	b2da      	uxtb	r2, r3
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	e002      	b.n	8007038 <_UG_TextboxUpdate+0x19e>
            if ( obj->a_abs.ye >= wnd->ye ) return;
 8007032:	bf00      	nop
 8007034:	e000      	b.n	8007038 <_UG_TextboxUpdate+0x19e>
            if ( obj->a_abs.xe >= wnd->xe ) return;
 8007036:	bf00      	nop
   }
}
 8007038:	3734      	adds	r7, #52	; 0x34
 800703a:	46bd      	mov	sp, r7
 800703c:	bd90      	pop	{r4, r7, pc}
	...

08007040 <UG_ImageCreate>:

/* -------------------------------------------------------------------------------- */
/* -- IMAGE FUNCTIONS                                                            -- */
/* -------------------------------------------------------------------------------- */
UG_RESULT UG_ImageCreate( UG_WINDOW* wnd, UG_IMAGE* img, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	4611      	mov	r1, r2
 800704c:	461a      	mov	r2, r3
 800704e:	460b      	mov	r3, r1
 8007050:	71fb      	strb	r3, [r7, #7]
 8007052:	4613      	mov	r3, r2
 8007054:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f7fe fdc0 	bl	8005bdc <_UG_GetFreeObject>
 800705c:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d102      	bne.n	800706a <UG_ImageCreate+0x2a>
 8007064:	f04f 33ff 	mov.w	r3, #4294967295
 8007068:	e042      	b.n	80070f0 <UG_ImageCreate+0xb0>

   /* Initialize object-specific parameters */
   img->img = NULL;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]
   img->type = IMG_TYPE_BMP;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2201      	movs	r2, #1
 8007074:	711a      	strb	r2, [r3, #4]

   /* Initialize standard object parameters */
   obj->update = _UG_ImageUpdate;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	4a1f      	ldr	r2, [pc, #124]	; (80070f8 <UG_ImageCreate+0xb8>)
 800707a:	605a      	str	r2, [r3, #4]
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2200      	movs	r2, #0
 8007080:	705a      	strb	r2, [r3, #1]
   obj->type = OBJ_TYPE_IMAGE;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2203      	movs	r2, #3
 8007086:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2200      	movs	r2, #0
 800708c:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	88ba      	ldrh	r2, [r7, #4]
 8007092:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	8c3a      	ldrh	r2, [r7, #32]
 8007098:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800709e:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80070a4:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070ac:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070b4:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070bc:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070c4:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	79fa      	ldrb	r2, [r7, #7]
 80070ca:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)img;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	08007157 	.word	0x08007157

080070fc <UG_ImageSetBMP>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ImageSetBMP( UG_WINDOW* wnd, UG_U8 id, const UG_BMP* bmp )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	460b      	mov	r3, r1
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]
   UG_IMAGE* img=NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_IMAGE, id );
 8007112:	7afb      	ldrb	r3, [r7, #11]
 8007114:	461a      	mov	r2, r3
 8007116:	2103      	movs	r1, #3
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7fe fd8b 	bl	8005c34 <_UG_SearchObject>
 800711e:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d102      	bne.n	800712c <UG_ImageSetBMP+0x30>
 8007126:	f04f 33ff 	mov.w	r3, #4294967295
 800712a:	e010      	b.n	800714e <UG_ImageSetBMP+0x52>

   img = (UG_IMAGE*)(obj->data);
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	613b      	str	r3, [r7, #16]
   img->img = (void*)bmp;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	601a      	str	r2, [r3, #0]
   img->type = IMG_TYPE_BMP;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2201      	movs	r2, #1
 800713c:	711a      	strb	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007146:	b2da      	uxtb	r2, r3
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <_UG_ImageUpdate>:

void _UG_ImageUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 8007156:	b590      	push	{r4, r7, lr}
 8007158:	b089      	sub	sp, #36	; 0x24
 800715a:	af02      	add	r7, sp, #8
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
   UG_IMAGE* img;
   UG_AREA a;

   /* Get object-specific data */
   img = (UG_IMAGE*)(obj->data);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	617b      	str	r3, [r7, #20]
   /* Image doesn't support touch */

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 8096 	beq.w	80072a0 <_UG_ImageUpdate+0x14a>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	f003 0308 	and.w	r3, r3, #8
 800717c:	2b00      	cmp	r3, #0
 800717e:	d072      	beq.n	8007266 <_UG_ImageUpdate+0x110>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d07e      	beq.n	800728a <_UG_ImageUpdate+0x134>
         {
            UG_WindowGetArea(wnd,&a);
 800718c:	f107 030c 	add.w	r3, r7, #12
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff fb32 	bl	80067fc <UG_WindowGetArea>
            /* ToDo: more/better image features */
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800719e:	b29a      	uxth	r2, r3
 80071a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	4413      	add	r3, r2
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	b21a      	sxth	r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80071bc:	b29b      	uxth	r3, r3
 80071be:	4413      	add	r3, r2
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	b21a      	sxth	r2, r3
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xs + ((UG_BMP*)img->img)->width + a.xs;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	889b      	ldrh	r3, [r3, #4]
 80071d6:	4413      	add	r3, r2
 80071d8:	b29a      	uxth	r2, r3
 80071da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	4413      	add	r3, r2
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	b21a      	sxth	r2, r3
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ys + ((UG_BMP*)img->img)->height + a.ys;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	88db      	ldrh	r3, [r3, #6]
 80071f8:	4413      	add	r3, r2
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007200:	b29b      	uxth	r3, r3
 8007202:	4413      	add	r3, r2
 8007204:	b29b      	uxth	r3, r3
 8007206:	b21a      	sxth	r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye >= wnd->ye ) return;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007218:	429a      	cmp	r2, r3
 800721a:	da3e      	bge.n	800729a <_UG_ImageUpdate+0x144>
            if ( obj->a_abs.xe >= wnd->xe ) return;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007228:	429a      	cmp	r2, r3
 800722a:	da38      	bge.n	800729e <_UG_ImageUpdate+0x148>

            /* Draw Image */
            if ( (img->img != NULL) && (img->type & IMG_TYPE_BMP) )
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d010      	beq.n	8007256 <_UG_ImageUpdate+0x100>
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	791b      	ldrb	r3, [r3, #4]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00a      	beq.n	8007256 <_UG_ImageUpdate+0x100>
            {
               UG_DrawBMP(obj->a_abs.xs,obj->a_abs.ys,(UG_BMP*)img->img);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	f7ff f8af 	bl	80063b4 <UG_DrawBMP>
            }

            obj->state &= ~OBJ_STATE_REDRAW;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800725e:	b2da      	uxtb	r2, r3
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	e011      	b.n	800728a <_UG_ImageUpdate+0x134>
         }
      }
      else
      {
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	899b      	ldrh	r3, [r3, #12]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	4623      	mov	r3, r4
 8007286:	f7fd fdc1 	bl	8004e0c <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	f023 0320 	bic.w	r3, r3, #32
 8007292:	b2da      	uxtb	r2, r3
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	e002      	b.n	80072a0 <_UG_ImageUpdate+0x14a>
            if ( obj->a_abs.ye >= wnd->ye ) return;
 800729a:	bf00      	nop
 800729c:	e000      	b.n	80072a0 <_UG_ImageUpdate+0x14a>
            if ( obj->a_abs.xe >= wnd->xe ) return;
 800729e:	bf00      	nop
   }
}
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd90      	pop	{r4, r7, pc}
	...

080072a8 <parallelWriteDC0>:
#include "ugui.h"

#define HDP (DISPLAY_WIDTH - 1)
#define VDP (DISPLAY_HEIGHT - 1)
 UG_GUI guiST7735;
void parallelWriteDC0(uint8_t eightbit){
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	71fb      	strb	r3, [r7, #7]
//	printf("GPIO_pin: com  ");
//	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
//HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET); // idle = high
//HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET); // idle = high
HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // low = command
 80072b2:	2200      	movs	r2, #0
 80072b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80072b8:	480e      	ldr	r0, [pc, #56]	; (80072f4 <parallelWriteDC0+0x4c>)
 80072ba:	f7fb fcc7 	bl	8002c4c <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (eightbit & 16) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
//HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (eightbit & 32) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
//HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (eightbit & 64) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
//HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (eightbit & 128) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);

uint8_t ivert_eightbit = ~(eightbit);
 80072be:	79fb      	ldrb	r3, [r7, #7]
 80072c0:	43db      	mvns	r3, r3
 80072c2:	73fb      	strb	r3, [r7, #15]

GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	4a0c      	ldr	r2, [pc, #48]	; (80072f8 <parallelWriteDC0+0x50>)
 80072c8:	061b      	lsls	r3, r3, #24
 80072ca:	6113      	str	r3, [r2, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	4a0a      	ldr	r2, [pc, #40]	; (80072f8 <parallelWriteDC0+0x50>)
 80072d0:	021b      	lsls	r3, r3, #8
 80072d2:	6113      	str	r3, [r2, #16]
//    printf ("eightbit: %X\n",eightbit);
HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80072d4:	2200      	movs	r2, #0
 80072d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072da:	4806      	ldr	r0, [pc, #24]	; (80072f4 <parallelWriteDC0+0x4c>)
 80072dc:	f7fb fcb6 	bl	8002c4c <HAL_GPIO_WritePin>
//HAL_Delay(1);
//opt_delay(1);
HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET); // raising edge
 80072e0:	2201      	movs	r2, #1
 80072e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072e6:	4803      	ldr	r0, [pc, #12]	; (80072f4 <parallelWriteDC0+0x4c>)
 80072e8:	f7fb fcb0 	bl	8002c4c <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}
 80072ec:	bf00      	nop
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	40010800 	.word	0x40010800
 80072f8:	40010c00 	.word	0x40010c00

080072fc <parallelWriteDC1>:
void opt_delay(uint16_t i)
{
	while(i--);
}
void parallelWriteDC1(uint8_t eightbit){
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	4603      	mov	r3, r0
 8007304:	71fb      	strb	r3, [r7, #7]
//	printf("GPIO_pin: data  ");
//	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
//HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET); // idle = high
//HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET); // idle = high
HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET); // high = data
 8007306:	2201      	movs	r2, #1
 8007308:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800730c:	480e      	ldr	r0, [pc, #56]	; (8007348 <parallelWriteDC1+0x4c>)
 800730e:	f7fb fc9d 	bl	8002c4c <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (eightbit & 32) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
//HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (eightbit & 64) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
//HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (eightbit & 128) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
//     printf ("eightbit: %X\n",eightbit);

uint8_t ivert_eightbit = ~(eightbit);
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	43db      	mvns	r3, r3
 8007316:	73fb      	strb	r3, [r7, #15]

GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	4a0c      	ldr	r2, [pc, #48]	; (800734c <parallelWriteDC1+0x50>)
 800731c:	061b      	lsls	r3, r3, #24
 800731e:	6113      	str	r3, [r2, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	4a0a      	ldr	r2, [pc, #40]	; (800734c <parallelWriteDC1+0x50>)
 8007324:	021b      	lsls	r3, r3, #8
 8007326:	6113      	str	r3, [r2, #16]
HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8007328:	2200      	movs	r2, #0
 800732a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800732e:	4806      	ldr	r0, [pc, #24]	; (8007348 <parallelWriteDC1+0x4c>)
 8007330:	f7fb fc8c 	bl	8002c4c <HAL_GPIO_WritePin>
//HAL_Delay(1);
//opt_delay(1);
HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET); // raising edge
 8007334:	2201      	movs	r2, #1
 8007336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800733a:	4803      	ldr	r0, [pc, #12]	; (8007348 <parallelWriteDC1+0x4c>)
 800733c:	f7fb fc86 	bl	8002c4c <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}
 8007340:	bf00      	nop
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40010800 	.word	0x40010800
 800734c:	40010c00 	.word	0x40010c00

08007350 <parallelMultiWriteDC1>:

void parallelMultiWriteDC1(uint8_t *p_eightbit, int numItems) {
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]

	for (int i = 0; i < numItems; i++)
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	e009      	b.n	8007374 <parallelMultiWriteDC1+0x24>
	parallelWriteDC1(p_eightbit[i]);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	4413      	add	r3, r2
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff ffc7 	bl	80072fc <parallelWriteDC1>
	for (int i = 0; i < numItems; i++)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3301      	adds	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	dbf1      	blt.n	8007360 <parallelMultiWriteDC1+0x10>

}
 800737c:	bf00      	nop
 800737e:	bf00      	nop
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <Display_WriteCommand>:

 void Display_WriteCommand(uint8_t command)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	4603      	mov	r3, r0
 800738e:	71fb      	strb	r3, [r7, #7]
    parallelWriteDC0(command);
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff ff88 	bl	80072a8 <parallelWriteDC0>
}
 8007398:	bf00      	nop
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <Display_WriteMultiData>:
{
    parallelWriteDC1(data);
}

 void Display_WriteMultiData(uint8_t *data, uint16_t size)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	807b      	strh	r3, [r7, #2]
//	printf ("data: %X, %X, %X, %X\n",data[0],data[1],data[2],data[3]);
    parallelMultiWriteDC1(data, size);
 80073ac:	887b      	ldrh	r3, [r7, #2]
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff ffcd 	bl	8007350 <parallelMultiWriteDC1>
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <Display_Init>:
    parallelWriteDC0(0x01);         //Software reset
    HAL_Delay(10);
}

void Display_Init()
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
//	HAL_Delay(5);
//	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
//	HAL_Delay(15);
//	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
	HAL_Delay(15);
 80073c4:	200f      	movs	r0, #15
 80073c6:	f7fb f98b 	bl	80026e0 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80073ca:	2200      	movs	r2, #0
 80073cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80073d0:	4873      	ldr	r0, [pc, #460]	; (80075a0 <Display_Init+0x1e0>)
 80073d2:	f7fb fc3b 	bl	8002c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 80073d6:	2201      	movs	r2, #1
 80073d8:	2102      	movs	r1, #2
 80073da:	4872      	ldr	r0, [pc, #456]	; (80075a4 <Display_Init+0x1e4>)
 80073dc:	f7fb fc36 	bl	8002c4c <HAL_GPIO_WritePin>


    parallelWriteDC0(0x01);   //Software Reset
 80073e0:	2001      	movs	r0, #1
 80073e2:	f7ff ff61 	bl	80072a8 <parallelWriteDC0>
    HAL_Delay(500);
 80073e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80073ea:	f7fb f979 	bl	80026e0 <HAL_Delay>
//    parallelWriteDC0(0x2c);   // Memory Write
//
//    HAL_Delay(50);

    //--------------display and color format setting ----------//
    parallelWriteDC0(0x11);
 80073ee:	2011      	movs	r0, #17
 80073f0:	f7ff ff5a 	bl	80072a8 <parallelWriteDC0>
    HAL_Delay(150);
 80073f4:	2096      	movs	r0, #150	; 0x96
 80073f6:	f7fb f973 	bl	80026e0 <HAL_Delay>
    parallelWriteDC0(0x36);
 80073fa:	2036      	movs	r0, #54	; 0x36
 80073fc:	f7ff ff54 	bl	80072a8 <parallelWriteDC0>
    parallelWriteDC1(0x60);  // rotate 90
 8007400:	2060      	movs	r0, #96	; 0x60
 8007402:	f7ff ff7b 	bl	80072fc <parallelWriteDC1>
    parallelWriteDC0(0x3a);
 8007406:	203a      	movs	r0, #58	; 0x3a
 8007408:	f7ff ff4e 	bl	80072a8 <parallelWriteDC0>
    parallelWriteDC1(0x05);
 800740c:	2005      	movs	r0, #5
 800740e:	f7ff ff75 	bl	80072fc <parallelWriteDC1>
    //---------------------st7789 frame rate
    parallelWriteDC0(0xb2);
 8007412:	20b2      	movs	r0, #178	; 0xb2
 8007414:	f7ff ff48 	bl	80072a8 <parallelWriteDC0>
    parallelWriteDC1(0x0c);
 8007418:	200c      	movs	r0, #12
 800741a:	f7ff ff6f 	bl	80072fc <parallelWriteDC1>
    parallelWriteDC1(0x0c);
 800741e:	200c      	movs	r0, #12
 8007420:	f7ff ff6c 	bl	80072fc <parallelWriteDC1>
    parallelWriteDC1(0x00);
 8007424:	2000      	movs	r0, #0
 8007426:	f7ff ff69 	bl	80072fc <parallelWriteDC1>
    parallelWriteDC1(0x33);
 800742a:	2033      	movs	r0, #51	; 0x33
 800742c:	f7ff ff66 	bl	80072fc <parallelWriteDC1>
    parallelWriteDC1(0x33);
 8007430:	2033      	movs	r0, #51	; 0x33
 8007432:	f7ff ff63 	bl	80072fc <parallelWriteDC1>
    parallelWriteDC0(0xb7);
 8007436:	20b7      	movs	r0, #183	; 0xb7
 8007438:	f7ff ff36 	bl	80072a8 <parallelWriteDC0>
    parallelWriteDC1(0x35);
 800743c:	2035      	movs	r0, #53	; 0x35
 800743e:	f7ff ff5d 	bl	80072fc <parallelWriteDC1>
    //---------------------st7789 power setting
    parallelWriteDC0(0xbb);
 8007442:	20bb      	movs	r0, #187	; 0xbb
 8007444:	f7ff ff30 	bl	80072a8 <parallelWriteDC0>
    parallelWriteDC1(0x28);
 8007448:	2028      	movs	r0, #40	; 0x28
 800744a:	f7ff ff57 	bl	80072fc <parallelWriteDC1>
    parallelWriteDC0(0xc0);
 800744e:	20c0      	movs	r0, #192	; 0xc0
 8007450:	f7ff ff2a 	bl	80072a8 <parallelWriteDC0>
    parallelWriteDC1(0x2c);
 8007454:	202c      	movs	r0, #44	; 0x2c
 8007456:	f7ff ff51 	bl	80072fc <parallelWriteDC1>
    parallelWriteDC0(0xc2);
 800745a:	20c2      	movs	r0, #194	; 0xc2
 800745c:	f7ff ff24 	bl	80072a8 <parallelWriteDC0>
    parallelWriteDC1(0x01);
 8007460:	2001      	movs	r0, #1
 8007462:	f7ff ff4b 	bl	80072fc <parallelWriteDC1>
    parallelWriteDC1(0xFF);
 8007466:	20ff      	movs	r0, #255	; 0xff
 8007468:	f7ff ff48 	bl	80072fc <parallelWriteDC1>
    parallelWriteDC0(0xc3);
 800746c:	20c3      	movs	r0, #195	; 0xc3
 800746e:	f7ff ff1b 	bl	80072a8 <parallelWriteDC0>
    parallelWriteDC1(0x0b);
 8007472:	200b      	movs	r0, #11
 8007474:	f7ff ff42 	bl	80072fc <parallelWriteDC1>
    parallelWriteDC0(0xc4);
 8007478:	20c4      	movs	r0, #196	; 0xc4
 800747a:	f7ff ff15 	bl	80072a8 <parallelWriteDC0>
    parallelWriteDC1(0x20);
 800747e:	2020      	movs	r0, #32
 8007480:	f7ff ff3c 	bl	80072fc <parallelWriteDC1>
    parallelWriteDC0(0xc6);
 8007484:	20c6      	movs	r0, #198	; 0xc6
 8007486:	f7ff ff0f 	bl	80072a8 <parallelWriteDC0>
    parallelWriteDC1(0x0f);
 800748a:	200f      	movs	r0, #15
 800748c:	f7ff ff36 	bl	80072fc <parallelWriteDC1>
    parallelWriteDC0(0xd0);
 8007490:	20d0      	movs	r0, #208	; 0xd0
 8007492:	f7ff ff09 	bl	80072a8 <parallelWriteDC0>
    parallelWriteDC1(0xa4);
 8007496:	20a4      	movs	r0, #164	; 0xa4
 8007498:	f7ff ff30 	bl	80072fc <parallelWriteDC1>
    parallelWriteDC1(0xa1);
 800749c:	20a1      	movs	r0, #161	; 0xa1
 800749e:	f7ff ff2d 	bl	80072fc <parallelWriteDC1>
    //-------------st7789 gamma setting
    parallelWriteDC0(0xe0);
 80074a2:	20e0      	movs	r0, #224	; 0xe0
 80074a4:	f7ff ff00 	bl	80072a8 <parallelWriteDC0>
    	parallelWriteDC1(0xd0);
 80074a8:	20d0      	movs	r0, #208	; 0xd0
 80074aa:	f7ff ff27 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x01);
 80074ae:	2001      	movs	r0, #1
 80074b0:	f7ff ff24 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x08);
 80074b4:	2008      	movs	r0, #8
 80074b6:	f7ff ff21 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x0f);
 80074ba:	200f      	movs	r0, #15
 80074bc:	f7ff ff1e 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x11);
 80074c0:	2011      	movs	r0, #17
 80074c2:	f7ff ff1b 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x2a);
 80074c6:	202a      	movs	r0, #42	; 0x2a
 80074c8:	f7ff ff18 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x36);
 80074cc:	2036      	movs	r0, #54	; 0x36
 80074ce:	f7ff ff15 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x55);
 80074d2:	2055      	movs	r0, #85	; 0x55
 80074d4:	f7ff ff12 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x44);
 80074d8:	2044      	movs	r0, #68	; 0x44
 80074da:	f7ff ff0f 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x3a);
 80074de:	203a      	movs	r0, #58	; 0x3a
 80074e0:	f7ff ff0c 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x0b);
 80074e4:	200b      	movs	r0, #11
 80074e6:	f7ff ff09 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x06);
 80074ea:	2006      	movs	r0, #6
 80074ec:	f7ff ff06 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x11);
 80074f0:	2011      	movs	r0, #17
 80074f2:	f7ff ff03 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x20);
 80074f6:	2020      	movs	r0, #32
 80074f8:	f7ff ff00 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC0(0xe1);
 80074fc:	20e1      	movs	r0, #225	; 0xe1
 80074fe:	f7ff fed3 	bl	80072a8 <parallelWriteDC0>
    	parallelWriteDC1(0xd0);
 8007502:	20d0      	movs	r0, #208	; 0xd0
 8007504:	f7ff fefa 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x02);
 8007508:	2002      	movs	r0, #2
 800750a:	f7ff fef7 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x07);
 800750e:	2007      	movs	r0, #7
 8007510:	f7ff fef4 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x0a);
 8007514:	200a      	movs	r0, #10
 8007516:	f7ff fef1 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x0b);
 800751a:	200b      	movs	r0, #11
 800751c:	f7ff feee 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x18);
 8007520:	2018      	movs	r0, #24
 8007522:	f7ff feeb 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x34);
 8007526:	2034      	movs	r0, #52	; 0x34
 8007528:	f7ff fee8 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x43);
 800752c:	2043      	movs	r0, #67	; 0x43
 800752e:	f7ff fee5 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x4a);
 8007532:	204a      	movs	r0, #74	; 0x4a
 8007534:	f7ff fee2 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x2b);
 8007538:	202b      	movs	r0, #43	; 0x2b
 800753a:	f7ff fedf 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x1b);
 800753e:	201b      	movs	r0, #27
 8007540:	f7ff fedc 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x1c);
 8007544:	201c      	movs	r0, #28
 8007546:	f7ff fed9 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x22);
 800754a:	2022      	movs	r0, #34	; 0x22
 800754c:	f7ff fed6 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC1(0x1f);
 8007550:	201f      	movs	r0, #31
 8007552:	f7ff fed3 	bl	80072fc <parallelWriteDC1>
    	parallelWriteDC0(0x29);
 8007556:	2029      	movs	r0, #41	; 0x29
 8007558:	f7ff fea6 	bl	80072a8 <parallelWriteDC0>
    	parallelWriteDC0(0x2c);
 800755c:	202c      	movs	r0, #44	; 0x2c
 800755e:	f7ff fea3 	bl	80072a8 <parallelWriteDC0>

    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8007562:	2201      	movs	r2, #1
 8007564:	2101      	movs	r1, #1
 8007566:	480f      	ldr	r0, [pc, #60]	; (80075a4 <Display_Init+0x1e4>)
 8007568:	f7fb fb70 	bl	8002c4c <HAL_GPIO_WritePin>

    // Initialize global structure and set PSET to this.PSET.
    UG_Init(&guiST7735, Display_PSet, DISPLAY_WIDTH, DISPLAY_HEIGHT);
 800756c:	23f0      	movs	r3, #240	; 0xf0
 800756e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007572:	490d      	ldr	r1, [pc, #52]	; (80075a8 <Display_Init+0x1e8>)
 8007574:	480d      	ldr	r0, [pc, #52]	; (80075ac <Display_Init+0x1ec>)
 8007576:	f7fd fbb3 	bl	8004ce0 <UG_Init>
    //
    guiST7735.desktop_color= C_BLACK;
 800757a:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <Display_Init+0x1ec>)
 800757c:	2200      	movs	r2, #0
 800757e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    // Register accelerators.
    UG_DriverRegister(DRIVER_FILL_FRAME, (void*)HW_FillFrame);
 8007582:	490b      	ldr	r1, [pc, #44]	; (80075b0 <Display_Init+0x1f0>)
 8007584:	2001      	movs	r0, #1
 8007586:	f7fe fe3b 	bl	8006200 <UG_DriverRegister>
    UG_DriverRegister(DRIVER_DRAW_LINE, (void*)HW_DrawLine);
 800758a:	490a      	ldr	r1, [pc, #40]	; (80075b4 <Display_Init+0x1f4>)
 800758c:	2000      	movs	r0, #0
 800758e:	f7fe fe37 	bl	8006200 <UG_DriverRegister>
    UG_DriverRegister(DRIVER_DRAW_IMAGE, (void*)HW_DrawImage);
 8007592:	4909      	ldr	r1, [pc, #36]	; (80075b8 <Display_Init+0x1f8>)
 8007594:	2003      	movs	r0, #3
 8007596:	f7fe fe33 	bl	8006200 <UG_DriverRegister>
}
 800759a:	bf00      	nop
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	40010800 	.word	0x40010800
 80075a4:	40010c00 	.word	0x40010c00
 80075a8:	0800762f 	.word	0x0800762f
 80075ac:	20000eec 	.word	0x20000eec
 80075b0:	080076a9 	.word	0x080076a9
 80075b4:	08007783 	.word	0x08007783
 80075b8:	08007833 	.word	0x08007833

080075bc <Display_WindowSet>:

void Display_WindowSet(unsigned int s_x,unsigned int e_x,unsigned int s_y,unsigned int e_y)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
    uint8_t data[4];

    data[0] = ((s_x)>>8);                   //SET start column address
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	0a1b      	lsrs	r3, r3, #8
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	753b      	strb	r3, [r7, #20]
    data[1] = (s_x);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	757b      	strb	r3, [r7, #21]
    data[2] = ((e_x)>>8);			        //SET end column address
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	0a1b      	lsrs	r3, r3, #8
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	75bb      	strb	r3, [r7, #22]
    data[3] = (e_x);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	75fb      	strb	r3, [r7, #23]
	Display_WriteCommand(0x2a);		        //SET column address
 80075e6:	202a      	movs	r0, #42	; 0x2a
 80075e8:	f7ff fecd 	bl	8007386 <Display_WriteCommand>
//	printf ("data: %X, %X, %X, %X\n",data[0],data[1],data[2],data[3]);
    Display_WriteMultiData(data, 4);
 80075ec:	f107 0314 	add.w	r3, r7, #20
 80075f0:	2104      	movs	r1, #4
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff fed4 	bl	80073a0 <Display_WriteMultiData>


    data[0] = ((s_y)>>8);                   //SET start row address
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	0a1b      	lsrs	r3, r3, #8
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	753b      	strb	r3, [r7, #20]
    data[1] = (s_y);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	757b      	strb	r3, [r7, #21]
    data[2] = ((e_y)>>8);			        //SET end row address
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	0a1b      	lsrs	r3, r3, #8
 800760a:	b2db      	uxtb	r3, r3
 800760c:	75bb      	strb	r3, [r7, #22]
    data[3] = (e_y);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	b2db      	uxtb	r3, r3
 8007612:	75fb      	strb	r3, [r7, #23]
	Display_WriteCommand(0x2b);		        //SET row address
 8007614:	202b      	movs	r0, #43	; 0x2b
 8007616:	f7ff feb6 	bl	8007386 <Display_WriteCommand>
    Display_WriteMultiData(data, 4);
 800761a:	f107 0314 	add.w	r3, r7, #20
 800761e:	2104      	movs	r1, #4
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff febd 	bl	80073a0 <Display_WriteMultiData>
}
 8007626:	bf00      	nop
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <Display_PSet>:

void Display_PSet(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	4603      	mov	r3, r0
 8007636:	80fb      	strh	r3, [r7, #6]
 8007638:	460b      	mov	r3, r1
 800763a:	80bb      	strh	r3, [r7, #4]
 800763c:	4613      	mov	r3, r2
 800763e:	807b      	strh	r3, [r7, #2]
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 8007640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007644:	2b00      	cmp	r3, #0
 8007646:	db2b      	blt.n	80076a0 <Display_PSet+0x72>
 8007648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800764c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007650:	da26      	bge.n	80076a0 <Display_PSet+0x72>
 8007652:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	db22      	blt.n	80076a0 <Display_PSet+0x72>
 800765a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800765e:	2bef      	cmp	r3, #239	; 0xef
 8007660:	dc1e      	bgt.n	80076a0 <Display_PSet+0x72>

    Display_WindowSet(x, x + 1, y, y + 1);
 8007662:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800766a:	3301      	adds	r3, #1
 800766c:	4619      	mov	r1, r3
 800766e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007672:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007676:	3301      	adds	r3, #1
 8007678:	f7ff ffa0 	bl	80075bc <Display_WindowSet>
    Display_WriteCommand(0x2c);
 800767c:	202c      	movs	r0, #44	; 0x2c
 800767e:	f7ff fe82 	bl	8007386 <Display_WriteCommand>
#endif
#ifdef USE_COLOR_RGB565 // 16-bit colour 5*Red-6*Green-5*Blue

        	uint8_t data[2];

            data[0] = (c >> 8);
 8007682:	887b      	ldrh	r3, [r7, #2]
 8007684:	0a1b      	lsrs	r3, r3, #8
 8007686:	b29b      	uxth	r3, r3
 8007688:	b2db      	uxtb	r3, r3
 800768a:	733b      	strb	r3, [r7, #12]
            data[1] = (c);
 800768c:	887b      	ldrh	r3, [r7, #2]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	737b      	strb	r3, [r7, #13]

            Display_WriteMultiData(data, 2);
 8007692:	f107 030c 	add.w	r3, r7, #12
 8007696:	2102      	movs	r1, #2
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff fe81 	bl	80073a0 <Display_WriteMultiData>
 800769e:	e000      	b.n	80076a2 <Display_PSet+0x74>
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 80076a0:	bf00      	nop

#endif


}
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <HW_FillFrame>:

UG_RESULT HW_FillFrame(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 80076a8:	b590      	push	{r4, r7, lr}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4604      	mov	r4, r0
 80076b0:	4608      	mov	r0, r1
 80076b2:	4611      	mov	r1, r2
 80076b4:	461a      	mov	r2, r3
 80076b6:	4623      	mov	r3, r4
 80076b8:	80fb      	strh	r3, [r7, #6]
 80076ba:	4603      	mov	r3, r0
 80076bc:	80bb      	strh	r3, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	807b      	strh	r3, [r7, #2]
 80076c2:	4613      	mov	r3, r2
 80076c4:	803b      	strh	r3, [r7, #0]
    uint16_t loopx, loopy;

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80076c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	db0c      	blt.n	80076e8 <HW_FillFrame+0x40>
 80076ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076d2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80076d6:	da07      	bge.n	80076e8 <HW_FillFrame+0x40>
 80076d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	db03      	blt.n	80076e8 <HW_FillFrame+0x40>
 80076e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80076e4:	2bef      	cmp	r3, #239	; 0xef
 80076e6:	dd02      	ble.n	80076ee <HW_FillFrame+0x46>
 80076e8:	f04f 33ff 	mov.w	r3, #4294967295
 80076ec:	e045      	b.n	800777a <HW_FillFrame+0xd2>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80076ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	db0c      	blt.n	8007710 <HW_FillFrame+0x68>
 80076f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80076fe:	da07      	bge.n	8007710 <HW_FillFrame+0x68>
 8007700:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007704:	2b00      	cmp	r3, #0
 8007706:	db03      	blt.n	8007710 <HW_FillFrame+0x68>
 8007708:	f9b7 3000 	ldrsh.w	r3, [r7]
 800770c:	2bef      	cmp	r3, #239	; 0xef
 800770e:	dd02      	ble.n	8007716 <HW_FillFrame+0x6e>
 8007710:	f04f 33ff 	mov.w	r3, #4294967295
 8007714:	e031      	b.n	800777a <HW_FillFrame+0xd2>

    Display_WindowSet(x1,x2,y1,y2);
 8007716:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800771a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800771e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007722:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007726:	f7ff ff49 	bl	80075bc <Display_WindowSet>

    Display_WriteCommand(0x2c);
 800772a:	202c      	movs	r0, #44	; 0x2c
 800772c:	f7ff fe2b 	bl	8007386 <Display_WriteCommand>
    uint8_t data[2];

                              data[0] = (c >> 8);
 8007730:	8c3b      	ldrh	r3, [r7, #32]
 8007732:	0a1b      	lsrs	r3, r3, #8
 8007734:	b29b      	uxth	r3, r3
 8007736:	b2db      	uxtb	r3, r3
 8007738:	723b      	strb	r3, [r7, #8]
                              data[1] = (c);
 800773a:	8c3b      	ldrh	r3, [r7, #32]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	727b      	strb	r3, [r7, #9]

    for (loopx = x1; loopx < x2 + 1; loopx++)
 8007740:	88fb      	ldrh	r3, [r7, #6]
 8007742:	81fb      	strh	r3, [r7, #14]
 8007744:	e013      	b.n	800776e <HW_FillFrame+0xc6>
    {
        for (loopy = y1; loopy < y2 + 1; loopy++)
 8007746:	88bb      	ldrh	r3, [r7, #4]
 8007748:	81bb      	strh	r3, [r7, #12]
 800774a:	e008      	b.n	800775e <HW_FillFrame+0xb6>
            Display_WriteMultiData(data, 3);
#endif
#ifdef USE_COLOR_RGB565 // 16-bit colour 5*Red-6*Green-5*Blue


            Display_WriteMultiData(data, 2);
 800774c:	f107 0308 	add.w	r3, r7, #8
 8007750:	2102      	movs	r1, #2
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff fe24 	bl	80073a0 <Display_WriteMultiData>
        for (loopy = y1; loopy < y2 + 1; loopy++)
 8007758:	89bb      	ldrh	r3, [r7, #12]
 800775a:	3301      	adds	r3, #1
 800775c:	81bb      	strh	r3, [r7, #12]
 800775e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007762:	89bb      	ldrh	r3, [r7, #12]
 8007764:	429a      	cmp	r2, r3
 8007766:	daf1      	bge.n	800774c <HW_FillFrame+0xa4>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 8007768:	89fb      	ldrh	r3, [r7, #14]
 800776a:	3301      	adds	r3, #1
 800776c:	81fb      	strh	r3, [r7, #14]
 800776e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007772:	89fb      	ldrh	r3, [r7, #14]
 8007774:	429a      	cmp	r2, r3
 8007776:	dae6      	bge.n	8007746 <HW_FillFrame+0x9e>
#endif
        }
    }

    return UG_RESULT_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	bd90      	pop	{r4, r7, pc}

08007782 <HW_DrawLine>:

UG_RESULT HW_DrawLine( UG_S16 x1 , UG_S16 y1 , UG_S16 x2 , UG_S16 y2 , UG_COLOR c )
{
 8007782:	b590      	push	{r4, r7, lr}
 8007784:	b085      	sub	sp, #20
 8007786:	af02      	add	r7, sp, #8
 8007788:	4604      	mov	r4, r0
 800778a:	4608      	mov	r0, r1
 800778c:	4611      	mov	r1, r2
 800778e:	461a      	mov	r2, r3
 8007790:	4623      	mov	r3, r4
 8007792:	80fb      	strh	r3, [r7, #6]
 8007794:	4603      	mov	r3, r0
 8007796:	80bb      	strh	r3, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	807b      	strh	r3, [r7, #2]
 800779c:	4613      	mov	r3, r2
 800779e:	803b      	strh	r3, [r7, #0]
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80077a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	db0c      	blt.n	80077c2 <HW_DrawLine+0x40>
 80077a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80077b0:	da07      	bge.n	80077c2 <HW_DrawLine+0x40>
 80077b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	db03      	blt.n	80077c2 <HW_DrawLine+0x40>
 80077ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80077be:	2bef      	cmp	r3, #239	; 0xef
 80077c0:	dd02      	ble.n	80077c8 <HW_DrawLine+0x46>
 80077c2:	f04f 33ff 	mov.w	r3, #4294967295
 80077c6:	e030      	b.n	800782a <HW_DrawLine+0xa8>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80077c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	db0c      	blt.n	80077ea <HW_DrawLine+0x68>
 80077d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80077d8:	da07      	bge.n	80077ea <HW_DrawLine+0x68>
 80077da:	f9b7 3000 	ldrsh.w	r3, [r7]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	db03      	blt.n	80077ea <HW_DrawLine+0x68>
 80077e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80077e6:	2bef      	cmp	r3, #239	; 0xef
 80077e8:	dd02      	ble.n	80077f0 <HW_DrawLine+0x6e>
 80077ea:	f04f 33ff 	mov.w	r3, #4294967295
 80077ee:	e01c      	b.n	800782a <HW_DrawLine+0xa8>

    // If it is a vertical or a horizontal line, draw it.
    // If not, then use original drawline routine.
    if ((x1 == x2) || (y1 == y2))
 80077f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80077f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d005      	beq.n	8007808 <HW_DrawLine+0x86>
 80077fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007800:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007804:	429a      	cmp	r2, r3
 8007806:	d10e      	bne.n	8007826 <HW_DrawLine+0xa4>
    {
        HW_FillFrame(x1, y1, x2, y2, c);
 8007808:	f9b7 4000 	ldrsh.w	r4, [r7]
 800780c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007810:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007814:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007818:	8b3b      	ldrh	r3, [r7, #24]
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	4623      	mov	r3, r4
 800781e:	f7ff ff43 	bl	80076a8 <HW_FillFrame>
        return UG_RESULT_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	e001      	b.n	800782a <HW_DrawLine+0xa8>
    }

    return UG_RESULT_FAIL;
 8007826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800782a:	4618      	mov	r0, r3
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	bd90      	pop	{r4, r7, pc}

08007832 <HW_DrawImage>:

UG_RESULT HW_DrawImage(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint16_t *image, uint16_t pSize)
{
 8007832:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007836:	b089      	sub	sp, #36	; 0x24
 8007838:	af00      	add	r7, sp, #0
 800783a:	4606      	mov	r6, r0
 800783c:	4608      	mov	r0, r1
 800783e:	4611      	mov	r1, r2
 8007840:	461a      	mov	r2, r3
 8007842:	4633      	mov	r3, r6
 8007844:	80fb      	strh	r3, [r7, #6]
 8007846:	4603      	mov	r3, r0
 8007848:	80bb      	strh	r3, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	807b      	strh	r3, [r7, #2]
 800784e:	4613      	mov	r3, r2
 8007850:	803b      	strh	r3, [r7, #0]
 8007852:	466b      	mov	r3, sp
 8007854:	461e      	mov	r6, r3

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8007856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800785a:	2b00      	cmp	r3, #0
 800785c:	db0c      	blt.n	8007878 <HW_DrawImage+0x46>
 800785e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007862:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007866:	da07      	bge.n	8007878 <HW_DrawImage+0x46>
 8007868:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	db03      	blt.n	8007878 <HW_DrawImage+0x46>
 8007870:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007874:	2bef      	cmp	r3, #239	; 0xef
 8007876:	dd02      	ble.n	800787e <HW_DrawImage+0x4c>
 8007878:	f04f 33ff 	mov.w	r3, #4294967295
 800787c:	e075      	b.n	800796a <HW_DrawImage+0x138>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 800787e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007882:	2b00      	cmp	r3, #0
 8007884:	db0c      	blt.n	80078a0 <HW_DrawImage+0x6e>
 8007886:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800788a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800788e:	da07      	bge.n	80078a0 <HW_DrawImage+0x6e>
 8007890:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007894:	2b00      	cmp	r3, #0
 8007896:	db03      	blt.n	80078a0 <HW_DrawImage+0x6e>
 8007898:	f9b7 3000 	ldrsh.w	r3, [r7]
 800789c:	2bef      	cmp	r3, #239	; 0xef
 800789e:	dd02      	ble.n	80078a6 <HW_DrawImage+0x74>
 80078a0:	f04f 33ff 	mov.w	r3, #4294967295
 80078a4:	e061      	b.n	800796a <HW_DrawImage+0x138>

    Display_WindowSet(x1,x2,y1,y2);
 80078a6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80078aa:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80078ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80078b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80078b6:	f7ff fe81 	bl	80075bc <Display_WindowSet>
    Display_WriteMultiData(image, pSize*3);

#endif
#ifdef USE_COLOR_RGB565 // 16-bit colour 5*Red-6*Green-5*Blue

    Display_WriteCommand(0x2c);
 80078ba:	202c      	movs	r0, #44	; 0x2c
 80078bc:	f7ff fd63 	bl	8007386 <Display_WriteCommand>

    uint16_t i;
    uint16_t buffer[(pSize-1)];
 80078c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80078c4:	1e59      	subs	r1, r3, #1
 80078c6:	1e4b      	subs	r3, r1, #1
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	460a      	mov	r2, r1
 80078cc:	2300      	movs	r3, #0
 80078ce:	4690      	mov	r8, r2
 80078d0:	4699      	mov	r9, r3
 80078d2:	f04f 0200 	mov.w	r2, #0
 80078d6:	f04f 0300 	mov.w	r3, #0
 80078da:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80078de:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80078e2:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80078e6:	460a      	mov	r2, r1
 80078e8:	2300      	movs	r3, #0
 80078ea:	4614      	mov	r4, r2
 80078ec:	461d      	mov	r5, r3
 80078ee:	f04f 0200 	mov.w	r2, #0
 80078f2:	f04f 0300 	mov.w	r3, #0
 80078f6:	012b      	lsls	r3, r5, #4
 80078f8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80078fc:	0122      	lsls	r2, r4, #4
 80078fe:	460b      	mov	r3, r1
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	3307      	adds	r3, #7
 8007904:	08db      	lsrs	r3, r3, #3
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	ebad 0d03 	sub.w	sp, sp, r3
 800790c:	466b      	mov	r3, sp
 800790e:	3301      	adds	r3, #1
 8007910:	085b      	lsrs	r3, r3, #1
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	613b      	str	r3, [r7, #16]
    uint16_t *ptr = image;
 8007916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007918:	61fb      	str	r3, [r7, #28]
    uint8_t data[2];

    for(i=0 ;i < pSize; i++)
 800791a:	2300      	movs	r3, #0
 800791c:	837b      	strh	r3, [r7, #26]
 800791e:	e01e      	b.n	800795e <HW_DrawImage+0x12c>
    {
    	buffer[i] = *(ptr++);
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	1c9a      	adds	r2, r3, #2
 8007924:	61fa      	str	r2, [r7, #28]
 8007926:	8b7a      	ldrh	r2, [r7, #26]
 8007928:	8819      	ldrh	r1, [r3, #0]
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            data[0] = (buffer[i] >> 8);
 8007930:	8b7a      	ldrh	r2, [r7, #26]
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007938:	0a1b      	lsrs	r3, r3, #8
 800793a:	b29b      	uxth	r3, r3
 800793c:	b2db      	uxtb	r3, r3
 800793e:	733b      	strb	r3, [r7, #12]
            data[1] = (buffer[i]);
 8007940:	8b7a      	ldrh	r2, [r7, #26]
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	737b      	strb	r3, [r7, #13]
 //           printf("data: %X, %X\n",data[0],data[1]);
            Display_WriteMultiData(data, 2);
 800794c:	f107 030c 	add.w	r3, r7, #12
 8007950:	2102      	movs	r1, #2
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff fd24 	bl	80073a0 <Display_WriteMultiData>
    for(i=0 ;i < pSize; i++)
 8007958:	8b7b      	ldrh	r3, [r7, #26]
 800795a:	3301      	adds	r3, #1
 800795c:	837b      	strh	r3, [r7, #26]
 800795e:	8b7a      	ldrh	r2, [r7, #26]
 8007960:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007964:	429a      	cmp	r2, r3
 8007966:	d3db      	bcc.n	8007920 <HW_DrawImage+0xee>
    }
#endif
    return UG_RESULT_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	46b5      	mov	sp, r6
}
 800796c:	4618      	mov	r0, r3
 800796e:	3724      	adds	r7, #36	; 0x24
 8007970:	46bd      	mov	sp, r7
 8007972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08007978 <__libc_init_array>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	2600      	movs	r6, #0
 800797c:	4d0c      	ldr	r5, [pc, #48]	; (80079b0 <__libc_init_array+0x38>)
 800797e:	4c0d      	ldr	r4, [pc, #52]	; (80079b4 <__libc_init_array+0x3c>)
 8007980:	1b64      	subs	r4, r4, r5
 8007982:	10a4      	asrs	r4, r4, #2
 8007984:	42a6      	cmp	r6, r4
 8007986:	d109      	bne.n	800799c <__libc_init_array+0x24>
 8007988:	f000 f822 	bl	80079d0 <_init>
 800798c:	2600      	movs	r6, #0
 800798e:	4d0a      	ldr	r5, [pc, #40]	; (80079b8 <__libc_init_array+0x40>)
 8007990:	4c0a      	ldr	r4, [pc, #40]	; (80079bc <__libc_init_array+0x44>)
 8007992:	1b64      	subs	r4, r4, r5
 8007994:	10a4      	asrs	r4, r4, #2
 8007996:	42a6      	cmp	r6, r4
 8007998:	d105      	bne.n	80079a6 <__libc_init_array+0x2e>
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a0:	4798      	blx	r3
 80079a2:	3601      	adds	r6, #1
 80079a4:	e7ee      	b.n	8007984 <__libc_init_array+0xc>
 80079a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079aa:	4798      	blx	r3
 80079ac:	3601      	adds	r6, #1
 80079ae:	e7f2      	b.n	8007996 <__libc_init_array+0x1e>
 80079b0:	0800e498 	.word	0x0800e498
 80079b4:	0800e498 	.word	0x0800e498
 80079b8:	0800e498 	.word	0x0800e498
 80079bc:	0800e49c 	.word	0x0800e49c

080079c0 <memset>:
 80079c0:	4603      	mov	r3, r0
 80079c2:	4402      	add	r2, r0
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d100      	bne.n	80079ca <memset+0xa>
 80079c8:	4770      	bx	lr
 80079ca:	f803 1b01 	strb.w	r1, [r3], #1
 80079ce:	e7f9      	b.n	80079c4 <memset+0x4>

080079d0 <_init>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	bf00      	nop
 80079d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d6:	bc08      	pop	{r3}
 80079d8:	469e      	mov	lr, r3
 80079da:	4770      	bx	lr

080079dc <_fini>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	bf00      	nop
 80079e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e2:	bc08      	pop	{r3}
 80079e4:	469e      	mov	lr, r3
 80079e6:	4770      	bx	lr
