
lcd_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba54  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006edc  0800bb68  0800bb68  0001bb68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a44  08012a44  000301e8  2**0
                  CONTENTS
  4 .ARM          00000000  08012a44  08012a44  000301e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012a44  08012a44  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012a44  08012a44  00022a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012a48  08012a48  00022a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08012a4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016f0  200001e8  08012c34  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200018d8  08012c34  000318d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029719  00000000  00000000  00030211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040f3  00000000  00000000  0005992a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00025a10  00000000  00000000  0005da1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  00083430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004d48  00000000  00000000  00084690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b74f  00000000  00000000  000893d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027cb6  00000000  00000000  000a4b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000952ce  00000000  00000000  000cc7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00161aab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053d8  00000000  00000000  00161afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb4c 	.word	0x0800bb4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800bb4c 	.word	0x0800bb4c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <SW3516_init>:
void read_from_register(uint8_t reg_address, uint8_t value){
	HAL_I2C_Mem_Read(&hi2c1, SW3516_address, reg_address, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
}


void SW3516_init(){
 80010d0:	b510      	push	{r4, lr}
	HAL_I2C_Mem_Write(&hi2c1, SW3516_address, I2C_CTRL, I2C_MEMADD_SIZE_8BIT, &Vinenable, 1, 10000);
 80010d2:	2301      	movs	r3, #1
 80010d4:	f242 7410 	movw	r4, #10000	; 0x2710
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <SW3516_init+0x20>)
void SW3516_init(){
 80010da:	b084      	sub	sp, #16
	HAL_I2C_Mem_Write(&hi2c1, SW3516_address, I2C_CTRL, I2C_MEMADD_SIZE_8BIT, &Vinenable, 1, 10000);
 80010dc:	9000      	str	r0, [sp, #0]
 80010de:	2213      	movs	r2, #19
 80010e0:	2178      	movs	r1, #120	; 0x78
 80010e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80010e6:	4803      	ldr	r0, [pc, #12]	; (80010f4 <SW3516_init+0x24>)
 80010e8:	f004 f802 	bl	80050f0 <HAL_I2C_Mem_Write>
}
 80010ec:	b004      	add	sp, #16
 80010ee:	bd10      	pop	{r4, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	200016a0 	.word	0x200016a0

080010f8 <convert_ADC>:
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
	  *structure_member |= (uint16_t)value & 0x000F;
}


void convert_ADC(float* current1, float* current2, float* voltagein, float* voltageout, float* temperature){
 80010f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 80010fc:	2401      	movs	r4, #1
 80010fe:	f242 7510 	movw	r5, #10000	; 0x2710

		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.currentA_ADC, iout1_buffer_enable);
 8001102:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 80013c4 <convert_ADC+0x2cc>
void convert_ADC(float* current1, float* current2, float* voltagein, float* voltageout, float* temperature){
 8001106:	b08b      	sub	sp, #44	; 0x2c
		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.currentA_ADC, iout1_buffer_enable);
 8001108:	4eaf      	ldr	r6, [pc, #700]	; (80013c8 <convert_ADC+0x2d0>)
void convert_ADC(float* current1, float* current2, float* voltagein, float* voltageout, float* temperature){
 800110a:	9307      	str	r3, [sp, #28]
 800110c:	f899 3000 	ldrb.w	r3, [r9]
		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.currentA_ADC, iout1_buffer_enable);
 8001110:	7836      	ldrb	r6, [r6, #0]
	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 8001112:	f10d 0a27 	add.w	sl, sp, #39	; 0x27
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_H, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 8001116:	f10d 0726 	add.w	r7, sp, #38	; 0x26
void convert_ADC(float* current1, float* current2, float* voltagein, float* voltageout, float* temperature){
 800111a:	e9cd 1205 	strd	r1, r2, [sp, #20]
 800111e:	4683      	mov	fp, r0
	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 8001120:	223a      	movs	r2, #58	; 0x3a
 8001122:	2178      	movs	r1, #120	; 0x78
 8001124:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001128:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 800112c:	48a7      	ldr	r0, [pc, #668]	; (80013cc <convert_ADC+0x2d4>)
 800112e:	4623      	mov	r3, r4
 8001130:	f8cd a000 	str.w	sl, [sp]
 8001134:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8001138:	f003 ffda 	bl	80050f0 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_H, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 800113c:	4623      	mov	r3, r4
 800113e:	223b      	movs	r2, #59	; 0x3b
 8001140:	2178      	movs	r1, #120	; 0x78
 8001142:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001146:	48a1      	ldr	r0, [pc, #644]	; (80013cc <convert_ADC+0x2d4>)
 8001148:	9700      	str	r7, [sp, #0]
 800114a:	f004 f8f3 	bl	8005334 <HAL_I2C_Mem_Read>
	  *structure_member  = (uint16_t)value << 4;
 800114e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8001152:	4e9f      	ldr	r6, [pc, #636]	; (80013d0 <convert_ADC+0x2d8>)
 8001154:	011b      	lsls	r3, r3, #4
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 8001156:	223c      	movs	r2, #60	; 0x3c
 8001158:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800115c:	2178      	movs	r1, #120	; 0x78
 800115e:	9700      	str	r7, [sp, #0]
 8001160:	489a      	ldr	r0, [pc, #616]	; (80013cc <convert_ADC+0x2d4>)
	  *structure_member  = (uint16_t)value << 4;
 8001162:	8033      	strh	r3, [r6, #0]
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 8001164:	4623      	mov	r3, r4
 8001166:	f004 f8e5 	bl	8005334 <HAL_I2C_Mem_Read>
	  *structure_member |= (uint16_t)value & 0x000F;
 800116a:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 800116e:	8833      	ldrh	r3, [r6, #0]
 8001170:	f000 000f 	and.w	r0, r0, #15
 8001174:	4318      	orrs	r0, r3
 8001176:	8030      	strh	r0, [r6, #0]
		*current1 = sw3516_current_ADC.currentA_ADC * 2.5;
 8001178:	f7ff f944 	bl	8000404 <__aeabi_i2d>
 800117c:	2200      	movs	r2, #0
 800117e:	4b95      	ldr	r3, [pc, #596]	; (80013d4 <convert_ADC+0x2dc>)
 8001180:	f7ff f9aa 	bl	80004d8 <__aeabi_dmul>
 8001184:	f7ff fc80 	bl	8000a88 <__aeabi_d2f>
 8001188:	f8cb 0000 	str.w	r0, [fp]
	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 800118c:	e9cd 4501 	strd	r4, r5, [sp, #4]
		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.currentC_ADC, iout2_buffer_enable);
 8001190:	4b91      	ldr	r3, [pc, #580]	; (80013d8 <convert_ADC+0x2e0>)
	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 8001192:	f8cd a000 	str.w	sl, [sp]
		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.currentC_ADC, iout2_buffer_enable);
 8001196:	781b      	ldrb	r3, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 8001198:	223a      	movs	r2, #58	; 0x3a
 800119a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800119e:	f899 3000 	ldrb.w	r3, [r9]
 80011a2:	2178      	movs	r1, #120	; 0x78
 80011a4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 80011a8:	4888      	ldr	r0, [pc, #544]	; (80013cc <convert_ADC+0x2d4>)
 80011aa:	4623      	mov	r3, r4
 80011ac:	f003 ffa0 	bl	80050f0 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_H, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 80011b0:	4623      	mov	r3, r4
 80011b2:	223b      	movs	r2, #59	; 0x3b
 80011b4:	2178      	movs	r1, #120	; 0x78
 80011b6:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80011ba:	4884      	ldr	r0, [pc, #528]	; (80013cc <convert_ADC+0x2d4>)
 80011bc:	9700      	str	r7, [sp, #0]
 80011be:	f004 f8b9 	bl	8005334 <HAL_I2C_Mem_Read>
	  *structure_member  = (uint16_t)value << 4;
 80011c2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 80011c6:	223c      	movs	r2, #60	; 0x3c
	  *structure_member  = (uint16_t)value << 4;
 80011c8:	011b      	lsls	r3, r3, #4
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 80011ca:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80011ce:	2178      	movs	r1, #120	; 0x78
 80011d0:	9700      	str	r7, [sp, #0]
 80011d2:	487e      	ldr	r0, [pc, #504]	; (80013cc <convert_ADC+0x2d4>)
	  *structure_member  = (uint16_t)value << 4;
 80011d4:	8073      	strh	r3, [r6, #2]
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 80011d6:	4623      	mov	r3, r4
 80011d8:	f004 f8ac 	bl	8005334 <HAL_I2C_Mem_Read>
	  *structure_member |= (uint16_t)value & 0x000F;
 80011dc:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 80011e0:	8873      	ldrh	r3, [r6, #2]
 80011e2:	f000 000f 	and.w	r0, r0, #15
 80011e6:	4318      	orrs	r0, r3
 80011e8:	8070      	strh	r0, [r6, #2]
		*current2 = sw3516_current_ADC.currentC_ADC * 2.5;
 80011ea:	f7ff f90b 	bl	8000404 <__aeabi_i2d>
 80011ee:	2200      	movs	r2, #0
 80011f0:	4b78      	ldr	r3, [pc, #480]	; (80013d4 <convert_ADC+0x2dc>)
 80011f2:	f7ff f971 	bl	80004d8 <__aeabi_dmul>
 80011f6:	f7ff fc47 	bl	8000a88 <__aeabi_d2f>
 80011fa:	9905      	ldr	r1, [sp, #20]
		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.voltagein_ADC, vin_buffer_enable);
 80011fc:	4b77      	ldr	r3, [pc, #476]	; (80013dc <convert_ADC+0x2e4>)
		*current2 = sw3516_current_ADC.currentC_ADC * 2.5;
 80011fe:	6008      	str	r0, [r1, #0]
	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 8001200:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001204:	f8cd a000 	str.w	sl, [sp]
		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.voltagein_ADC, vin_buffer_enable);
 8001208:	781b      	ldrb	r3, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 800120a:	223a      	movs	r2, #58	; 0x3a
 800120c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8001210:	f899 3000 	ldrb.w	r3, [r9]
 8001214:	2178      	movs	r1, #120	; 0x78
 8001216:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 800121a:	486c      	ldr	r0, [pc, #432]	; (80013cc <convert_ADC+0x2d4>)
 800121c:	4623      	mov	r3, r4
 800121e:	f003 ff67 	bl	80050f0 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_H, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 8001222:	4623      	mov	r3, r4
 8001224:	223b      	movs	r2, #59	; 0x3b
 8001226:	2178      	movs	r1, #120	; 0x78
 8001228:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800122c:	4867      	ldr	r0, [pc, #412]	; (80013cc <convert_ADC+0x2d4>)
 800122e:	9700      	str	r7, [sp, #0]
 8001230:	f004 f880 	bl	8005334 <HAL_I2C_Mem_Read>
	  *structure_member  = (uint16_t)value << 4;
 8001234:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 8001238:	223c      	movs	r2, #60	; 0x3c
	  *structure_member  = (uint16_t)value << 4;
 800123a:	011b      	lsls	r3, r3, #4
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 800123c:	2178      	movs	r1, #120	; 0x78
 800123e:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001242:	9700      	str	r7, [sp, #0]
 8001244:	4861      	ldr	r0, [pc, #388]	; (80013cc <convert_ADC+0x2d4>)
	  *structure_member  = (uint16_t)value << 4;
 8001246:	80b3      	strh	r3, [r6, #4]
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 8001248:	4623      	mov	r3, r4
 800124a:	f004 f873 	bl	8005334 <HAL_I2C_Mem_Read>
	  *structure_member |= (uint16_t)value & 0x000F;
 800124e:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8001252:	88b3      	ldrh	r3, [r6, #4]
 8001254:	f000 000f 	and.w	r0, r0, #15
 8001258:	4318      	orrs	r0, r3
 800125a:	80b0      	strh	r0, [r6, #4]
		*voltagein = sw3516_current_ADC.voltagein_ADC * 10;
 800125c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001260:	40a0      	lsls	r0, r4
 8001262:	f7ff fd1b 	bl	8000c9c <__aeabi_i2f>
 8001266:	9a06      	ldr	r2, [sp, #24]
		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.voltageout_ADC, vout_buffer_enable);
 8001268:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <convert_ADC+0x2e8>)
		*voltagein = sw3516_current_ADC.voltagein_ADC * 10;
 800126a:	6010      	str	r0, [r2, #0]
	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 800126c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001270:	f8cd a000 	str.w	sl, [sp]
		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.voltageout_ADC, vout_buffer_enable);
 8001274:	781b      	ldrb	r3, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 8001276:	223a      	movs	r2, #58	; 0x3a
 8001278:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800127c:	f899 3000 	ldrb.w	r3, [r9]
 8001280:	2178      	movs	r1, #120	; 0x78
 8001282:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 8001286:	4851      	ldr	r0, [pc, #324]	; (80013cc <convert_ADC+0x2d4>)
 8001288:	4623      	mov	r3, r4
 800128a:	f003 ff31 	bl	80050f0 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_H, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 800128e:	4623      	mov	r3, r4
 8001290:	223b      	movs	r2, #59	; 0x3b
 8001292:	2178      	movs	r1, #120	; 0x78
 8001294:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001298:	484c      	ldr	r0, [pc, #304]	; (80013cc <convert_ADC+0x2d4>)
 800129a:	9700      	str	r7, [sp, #0]
 800129c:	f004 f84a 	bl	8005334 <HAL_I2C_Mem_Read>
	  *structure_member  = (uint16_t)value << 4;
 80012a0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 80012a4:	223c      	movs	r2, #60	; 0x3c
	  *structure_member  = (uint16_t)value << 4;
 80012a6:	011b      	lsls	r3, r3, #4
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 80012a8:	2178      	movs	r1, #120	; 0x78
 80012aa:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80012ae:	9700      	str	r7, [sp, #0]
 80012b0:	4846      	ldr	r0, [pc, #280]	; (80013cc <convert_ADC+0x2d4>)
	  *structure_member  = (uint16_t)value << 4;
 80012b2:	80f3      	strh	r3, [r6, #6]
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 80012b4:	4623      	mov	r3, r4
 80012b6:	f004 f83d 	bl	8005334 <HAL_I2C_Mem_Read>
	  *structure_member |= (uint16_t)value & 0x000F;
 80012ba:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 80012be:	88f3      	ldrh	r3, [r6, #6]
 80012c0:	f000 000f 	and.w	r0, r0, #15
 80012c4:	4318      	orrs	r0, r3
 80012c6:	80f0      	strh	r0, [r6, #6]
		*voltageout = sw3516_current_ADC.voltageout_ADC * 6;
 80012c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80012cc:	40a0      	lsls	r0, r4
 80012ce:	f7ff fce5 	bl	8000c9c <__aeabi_i2f>
 80012d2:	9b07      	ldr	r3, [sp, #28]
	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 80012d4:	f8cd a000 	str.w	sl, [sp]
		*voltageout = sw3516_current_ADC.voltageout_ADC * 6;
 80012d8:	6018      	str	r0, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 80012da:	e9cd 4501 	strd	r4, r5, [sp, #4]
		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.temperature_ADC, temp_buffer_enable);
 80012de:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <convert_ADC+0x2ec>)
	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 80012e0:	223a      	movs	r2, #58	; 0x3a
		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.temperature_ADC, temp_buffer_enable);
 80012e2:	781b      	ldrb	r3, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 80012e4:	2178      	movs	r1, #120	; 0x78
 80012e6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 80012ea:	f899 3000 	ldrb.w	r3, [r9]
 80012ee:	4837      	ldr	r0, [pc, #220]	; (80013cc <convert_ADC+0x2d4>)
 80012f0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 80012f4:	4623      	mov	r3, r4
 80012f6:	f003 fefb 	bl	80050f0 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_H, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 80012fa:	4623      	mov	r3, r4
 80012fc:	223b      	movs	r2, #59	; 0x3b
 80012fe:	2178      	movs	r1, #120	; 0x78
 8001300:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001304:	4831      	ldr	r0, [pc, #196]	; (80013cc <convert_ADC+0x2d4>)
 8001306:	9700      	str	r7, [sp, #0]
 8001308:	f004 f814 	bl	8005334 <HAL_I2C_Mem_Read>
	  *structure_member  = (uint16_t)value << 4;
 800130c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 8001310:	223c      	movs	r2, #60	; 0x3c
	  *structure_member  = (uint16_t)value << 4;
 8001312:	011b      	lsls	r3, r3, #4
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 8001314:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001318:	2178      	movs	r1, #120	; 0x78
 800131a:	9700      	str	r7, [sp, #0]
 800131c:	482b      	ldr	r0, [pc, #172]	; (80013cc <convert_ADC+0x2d4>)
	  *structure_member  = (uint16_t)value << 4;
 800131e:	8133      	strh	r3, [r6, #8]
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 8001320:	4623      	mov	r3, r4
 8001322:	f004 f807 	bl	8005334 <HAL_I2C_Mem_Read>
	  *structure_member |= (uint16_t)value & 0x000F;
 8001326:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 800132a:	8933      	ldrh	r3, [r6, #8]
 800132c:	f000 000f 	and.w	r0, r0, #15
 8001330:	4318      	orrs	r0, r3
 8001332:	8130      	strh	r0, [r6, #8]
		*temperature = sw3516_current_ADC.temperature_ADC / 100.0;
 8001334:	f7ff f866 	bl	8000404 <__aeabi_i2d>
 8001338:	2200      	movs	r2, #0
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <convert_ADC+0x2f0>)
 800133c:	f7ff f9f6 	bl	800072c <__aeabi_ddiv>
 8001340:	f7ff fba2 	bl	8000a88 <__aeabi_d2f>
 8001344:	9b14      	ldr	r3, [sp, #80]	; 0x50
		HAL_I2C_Mem_Read(&hi2c1, SW3516_address, PWR_STATUS, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, 10000);
 8001346:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800134a:	2207      	movs	r2, #7
 800134c:	2178      	movs	r1, #120	; 0x78
 800134e:	f8cd 9000 	str.w	r9, [sp]
		*temperature = sw3516_current_ADC.temperature_ADC / 100.0;
 8001352:	6018      	str	r0, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, SW3516_address, PWR_STATUS, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, 10000);
 8001354:	4623      	mov	r3, r4
 8001356:	481d      	ldr	r0, [pc, #116]	; (80013cc <convert_ADC+0x2d4>)
 8001358:	f003 ffec 	bl	8005334 <HAL_I2C_Mem_Read>
		sw3516_current.status_USBC = reg_value & 0x01;
 800135c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80013ec <convert_ADC+0x2f4>
 8001360:	f899 3000 	ldrb.w	r3, [r9]
		sw3516_current.status_USBA = reg_value & 0x02;


		if(sw3516_current.status_USBA & sw3516_current.currentA>0 ){
 8001364:	2100      	movs	r1, #0
		sw3516_current.status_USBC = reg_value & 0x01;
 8001366:	ea03 0504 	and.w	r5, r3, r4
		sw3516_current.status_USBA = reg_value & 0x02;
 800136a:	f3c3 0640 	ubfx	r6, r3, #1, #1
		if(sw3516_current.status_USBA & sw3516_current.currentA>0 ){
 800136e:	f8d8 0000 	ldr.w	r0, [r8]
		sw3516_current.status_USBC = reg_value & 0x01;
 8001372:	f888 5015 	strb.w	r5, [r8, #21]
		sw3516_current.status_USBA = reg_value & 0x02;
 8001376:	f888 6014 	strb.w	r6, [r8, #20]
		if(sw3516_current.status_USBA & sw3516_current.currentA>0 ){
 800137a:	f7ff fe9f 	bl	80010bc <__aeabi_fcmpgt>
 800137e:	2800      	cmp	r0, #0
 8001380:	bf18      	it	ne
 8001382:	4620      	movne	r0, r4
 8001384:	b2c0      	uxtb	r0, r0
 8001386:	b1d0      	cbz	r0, 80013be <convert_ADC+0x2c6>
 8001388:	b1ce      	cbz	r6, 80013be <convert_ADC+0x2c6>

			sw3516_current.time_in_secs_A++;
 800138a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800138e:	4423      	add	r3, r4

		}
		else{	sw3516_current.time_in_secs_A=0;}

		if(sw3516_current.status_USBC & sw3516_current.currentC>0 ){
 8001390:	2100      	movs	r1, #0
 8001392:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001396:	f8c8 3018 	str.w	r3, [r8, #24]
 800139a:	f7ff fe8f 	bl	80010bc <__aeabi_fcmpgt>
 800139e:	b140      	cbz	r0, 80013b2 <convert_ADC+0x2ba>
 80013a0:	b13d      	cbz	r5, 80013b2 <convert_ADC+0x2ba>

					sw3516_current.time_in_secs_C++;
 80013a2:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80013a6:	3301      	adds	r3, #1
 80013a8:	f8c8 301c 	str.w	r3, [r8, #28]

				}
				else{	sw3516_current.time_in_secs_C=0;}
}
 80013ac:	b00b      	add	sp, #44	; 0x2c
 80013ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				else{	sw3516_current.time_in_secs_C=0;}
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c8 301c 	str.w	r3, [r8, #28]
}
 80013b8:	b00b      	add	sp, #44	; 0x2c
 80013ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else{	sw3516_current.time_in_secs_A=0;}
 80013be:	2300      	movs	r3, #0
 80013c0:	e7e6      	b.n	8001390 <convert_ADC+0x298>
 80013c2:	bf00      	nop
 80013c4:	20000204 	.word	0x20000204
 80013c8:	20000001 	.word	0x20000001
 80013cc:	200016a0 	.word	0x200016a0
 80013d0:	20000228 	.word	0x20000228
 80013d4:	40040000 	.word	0x40040000
 80013d8:	20000002 	.word	0x20000002
 80013dc:	20000004 	.word	0x20000004
 80013e0:	20000005 	.word	0x20000005
 80013e4:	20000003 	.word	0x20000003
 80013e8:	40590000 	.word	0x40590000
 80013ec:	20000208 	.word	0x20000208

080013f0 <sw3516_read>:


void sw3516_read(){
 80013f0:	b500      	push	{lr}
	//sw3516_previous= sw3516_current;
	convert_ADC(&sw3516_current.currentA, &sw3516_current.currentC, &sw3516_current.voltagein, &sw3516_current.voltageout, &sw3516_current.temperature);
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <sw3516_read+0x20>)
void sw3516_read(){
 80013f4:	b083      	sub	sp, #12
	convert_ADC(&sw3516_current.currentA, &sw3516_current.currentC, &sw3516_current.voltagein, &sw3516_current.voltageout, &sw3516_current.temperature);
 80013f6:	f100 0310 	add.w	r3, r0, #16
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	f100 0208 	add.w	r2, r0, #8
 8001400:	f100 030c 	add.w	r3, r0, #12
 8001404:	1d01      	adds	r1, r0, #4
 8001406:	f7ff fe77 	bl	80010f8 <convert_ADC>

}
 800140a:	b003      	add	sp, #12
 800140c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001410:	20000208 	.word	0x20000208

08001414 <usb_charging_page_msg>:
}usb_status_;

usb_status_ usb_status_A={false};
usb_status_ usb_status_C={false};

void usb_charging_page_msg( ){
 8001414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001418:	b082      	sub	sp, #8
	UG_MESSAGE page_msg={2,2,0,0,&obj_buff_window_page_3};
 800141a:	466c      	mov	r4, sp

if(guiST7735.active_window == &window_page_3){
 800141c:	49b2      	ldr	r1, [pc, #712]	; (80016e8 <usb_charging_page_msg+0x2d4>)
 800141e:	4ab3      	ldr	r2, [pc, #716]	; (80016ec <usb_charging_page_msg+0x2d8>)
 8001420:	694d      	ldr	r5, [r1, #20]
	UG_MESSAGE page_msg={2,2,0,0,&obj_buff_window_page_3};
 8001422:	4bb3      	ldr	r3, [pc, #716]	; (80016f0 <usb_charging_page_msg+0x2dc>)
if(guiST7735.active_window == &window_page_3){
 8001424:	4295      	cmp	r5, r2
	UG_MESSAGE page_msg={2,2,0,0,&obj_buff_window_page_3};
 8001426:	e893 0003 	ldmia.w	r3, {r0, r1}
 800142a:	e884 0003 	stmia.w	r4, {r0, r1}
if(guiST7735.active_window == &window_page_3){
 800142e:	d002      	beq.n	8001436 <usb_charging_page_msg+0x22>
    sw3516_previous= sw3516_current;

}


}
 8001430:	b002      	add	sp, #8
 8001432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(sw3516_current.temperature!=sw3516_previous.temperature){
 8001436:	4daf      	ldr	r5, [pc, #700]	; (80016f4 <usb_charging_page_msg+0x2e0>)
 8001438:	4eaf      	ldr	r6, [pc, #700]	; (80016f8 <usb_charging_page_msg+0x2e4>)
 800143a:	6928      	ldr	r0, [r5, #16]
 800143c:	6931      	ldr	r1, [r6, #16]
 800143e:	f7ff fe15 	bl	800106c <__aeabi_fcmpeq>
 8001442:	2800      	cmp	r0, #0
 8001444:	f000 8146 	beq.w	80016d4 <usb_charging_page_msg+0x2c0>
	 if(sw3516_current.status_USBC!=sw3516_previous.status_USBC ){
 8001448:	7d6a      	ldrb	r2, [r5, #21]
 800144a:	7d73      	ldrb	r3, [r6, #21]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 80f9 	bne.w	8001644 <usb_charging_page_msg+0x230>
		if(sw3516_current.time_in_secs_C!=sw3516_previous.time_in_secs_C){
 8001452:	69ea      	ldr	r2, [r5, #28]
 8001454:	69f3      	ldr	r3, [r6, #28]
 8001456:	429a      	cmp	r2, r3
 8001458:	f040 80e5 	bne.w	8001626 <usb_charging_page_msg+0x212>
    if(sw3516_current.status_USBA!=sw3516_previous.status_USBA){
 800145c:	7d2a      	ldrb	r2, [r5, #20]
 800145e:	7d33      	ldrb	r3, [r6, #20]
 8001460:	429a      	cmp	r2, r3
 8001462:	f040 80d1 	bne.w	8001608 <usb_charging_page_msg+0x1f4>
    if(sw3516_current.time_in_secs_A!=sw3516_previous.time_in_secs_A){
 8001466:	69aa      	ldr	r2, [r5, #24]
 8001468:	69b3      	ldr	r3, [r6, #24]
 800146a:	429a      	cmp	r2, r3
 800146c:	f040 80bb 	bne.w	80015e6 <usb_charging_page_msg+0x1d2>
    if(sw3516_current.voltageout!=sw3516_previous.voltageout){
 8001470:	68f1      	ldr	r1, [r6, #12]
 8001472:	68e8      	ldr	r0, [r5, #12]
 8001474:	f7ff fdfa 	bl	800106c <__aeabi_fcmpeq>
 8001478:	b9c8      	cbnz	r0, 80014ae <usb_charging_page_msg+0x9a>
    	if(sw3516_current.status_USBC || sw3516_current.status_USBC!=sw3516_previous.status_USBC){
 800147a:	7d6b      	ldrb	r3, [r5, #21]
 800147c:	b90b      	cbnz	r3, 8001482 <usb_charging_page_msg+0x6e>
 800147e:	7d73      	ldrb	r3, [r6, #21]
 8001480:	b143      	cbz	r3, 8001494 <usb_charging_page_msg+0x80>
		page_msg.sub_id=6;
 8001482:	f240 2306 	movw	r3, #518	; 0x206
		window_page_3_callback(&page_msg);
 8001486:	4620      	mov	r0, r4
		page_msg.sub_id=6;
 8001488:	f8ad 3002 	strh.w	r3, [sp, #2]
		window_page_3_callback(&page_msg);
 800148c:	f001 ffbe 	bl	800340c <window_page_3_callback>
		UG_Update();
 8001490:	f006 fa02 	bl	8007898 <UG_Update>
    	if(sw3516_current.status_USBA || sw3516_current.status_USBA!=sw3516_previous.status_USBA){
 8001494:	7d2b      	ldrb	r3, [r5, #20]
 8001496:	b90b      	cbnz	r3, 800149c <usb_charging_page_msg+0x88>
 8001498:	7d33      	ldrb	r3, [r6, #20]
 800149a:	b143      	cbz	r3, 80014ae <usb_charging_page_msg+0x9a>
		page_msg.sub_id=8;
 800149c:	f44f 7302 	mov.w	r3, #520	; 0x208
		window_page_3_callback(&page_msg);
 80014a0:	4620      	mov	r0, r4
		page_msg.sub_id=8;
 80014a2:	f8ad 3002 	strh.w	r3, [sp, #2]
		window_page_3_callback(&page_msg);
 80014a6:	f001 ffb1 	bl	800340c <window_page_3_callback>
		UG_Update();
 80014aa:	f006 f9f5 	bl	8007898 <UG_Update>
    if((sw3516_current.currentC!=sw3516_previous.currentC && sw3516_current.status_USBC) || sw3516_current.status_USBC!=sw3516_previous.status_USBC){
 80014ae:	6871      	ldr	r1, [r6, #4]
 80014b0:	6868      	ldr	r0, [r5, #4]
 80014b2:	f7ff fddb 	bl	800106c <__aeabi_fcmpeq>
 80014b6:	7d6b      	ldrb	r3, [r5, #21]
 80014b8:	2800      	cmp	r0, #0
 80014ba:	f040 8084 	bne.w	80015c6 <usb_charging_page_msg+0x1b2>
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8081 	beq.w	80015c6 <usb_charging_page_msg+0x1b2>
    	page_msg.sub_id=10;
 80014c4:	f240 230a 	movw	r3, #522	; 0x20a
    	window_page_3_callback(&page_msg);
 80014c8:	4620      	mov	r0, r4
    	page_msg.sub_id=10;
 80014ca:	f8ad 3002 	strh.w	r3, [sp, #2]
    	window_page_3_callback(&page_msg);
 80014ce:	f001 ff9d 	bl	800340c <window_page_3_callback>
    	UG_Update();
 80014d2:	f006 f9e1 	bl	8007898 <UG_Update>
    if((sw3516_current.currentA!=sw3516_previous.currentA && sw3516_current.status_USBA) ||  sw3516_current.status_USBA!=sw3516_previous.status_USBA){
 80014d6:	6831      	ldr	r1, [r6, #0]
 80014d8:	6828      	ldr	r0, [r5, #0]
 80014da:	f7ff fdc7 	bl	800106c <__aeabi_fcmpeq>
 80014de:	7d2b      	ldrb	r3, [r5, #20]
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d175      	bne.n	80015d0 <usb_charging_page_msg+0x1bc>
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d073      	beq.n	80015d0 <usb_charging_page_msg+0x1bc>
   	page_msg.sub_id=12;
 80014e8:	f44f 7303 	mov.w	r3, #524	; 0x20c
   	window_page_3_callback(&page_msg);
 80014ec:	4620      	mov	r0, r4
   	page_msg.sub_id=12;
 80014ee:	f8ad 3002 	strh.w	r3, [sp, #2]
   	window_page_3_callback(&page_msg);
 80014f2:	f001 ff8b 	bl	800340c <window_page_3_callback>
  	UG_Update();
 80014f6:	f006 f9cf 	bl	8007898 <UG_Update>
    if(((sw3516_current.voltageout!=sw3516_previous.voltageout || sw3516_current.currentC!=sw3516_previous.currentC) && sw3516_current.status_USBC) || sw3516_current.status_USBC!=sw3516_previous.status_USBC){
 80014fa:	68ef      	ldr	r7, [r5, #12]
 80014fc:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8001500:	4638      	mov	r0, r7
 8001502:	4641      	mov	r1, r8
 8001504:	f7ff fdb2 	bl	800106c <__aeabi_fcmpeq>
 8001508:	2800      	cmp	r0, #0
 800150a:	d065      	beq.n	80015d8 <usb_charging_page_msg+0x1c4>
 800150c:	6871      	ldr	r1, [r6, #4]
 800150e:	6868      	ldr	r0, [r5, #4]
 8001510:	f7ff fdac 	bl	800106c <__aeabi_fcmpeq>
 8001514:	2800      	cmp	r0, #0
 8001516:	d05f      	beq.n	80015d8 <usb_charging_page_msg+0x1c4>
 8001518:	7d6a      	ldrb	r2, [r5, #21]
 800151a:	7d73      	ldrb	r3, [r6, #21]
 800151c:	429a      	cmp	r2, r3
 800151e:	f000 80cc 	beq.w	80016ba <usb_charging_page_msg+0x2a6>
		page_msg.sub_id=14;
 8001522:	f240 230e 	movw	r3, #526	; 0x20e
		window_page_3_callback(&page_msg);
 8001526:	4620      	mov	r0, r4
		page_msg.sub_id=14;
 8001528:	f8ad 3002 	strh.w	r3, [sp, #2]
		window_page_3_callback(&page_msg);
 800152c:	f001 ff6e 	bl	800340c <window_page_3_callback>
		UG_Update();
 8001530:	f006 f9b2 	bl	8007898 <UG_Update>
    if(((sw3516_current.voltageout!=sw3516_previous.voltageout || sw3516_current.currentA!=sw3516_previous.currentA) && sw3516_current.status_USBA) || sw3516_current.status_USBA!=sw3516_previous.status_USBA){
 8001534:	68ef      	ldr	r7, [r5, #12]
 8001536:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800153a:	4641      	mov	r1, r8
 800153c:	4638      	mov	r0, r7
 800153e:	f7ff fd95 	bl	800106c <__aeabi_fcmpeq>
 8001542:	2800      	cmp	r0, #0
 8001544:	f040 80b9 	bne.w	80016ba <usb_charging_page_msg+0x2a6>
 8001548:	7d2b      	ldrb	r3, [r5, #20]
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80bd 	beq.w	80016ca <usb_charging_page_msg+0x2b6>
		page_msg.sub_id=16;
 8001550:	f44f 7304 	mov.w	r3, #528	; 0x210
		window_page_3_callback(&page_msg);
 8001554:	4620      	mov	r0, r4
		page_msg.sub_id=16;
 8001556:	f8ad 3002 	strh.w	r3, [sp, #2]
		window_page_3_callback(&page_msg);
 800155a:	f001 ff57 	bl	800340c <window_page_3_callback>
		UG_Update();
 800155e:	f006 f99b 	bl	8007898 <UG_Update>
    if(buck_convertor_current.status_ok!=buck_convertor_pervious.status_ok){
 8001562:	4d66      	ldr	r5, [pc, #408]	; (80016fc <usb_charging_page_msg+0x2e8>)
 8001564:	4e66      	ldr	r6, [pc, #408]	; (8001700 <usb_charging_page_msg+0x2ec>)
 8001566:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
 800156a:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
 800156e:	429a      	cmp	r2, r3
 8001570:	f040 8092 	bne.w	8001698 <usb_charging_page_msg+0x284>
    if(buck_convertor_current.status_cv!=buck_convertor_pervious.status_cv){
 8001574:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 8001578:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800157c:	429a      	cmp	r2, r3
 800157e:	d17a      	bne.n	8001676 <usb_charging_page_msg+0x262>
    if(buck_convertor_current.status_cc!=buck_convertor_pervious.status_cc){
 8001580:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
 8001584:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8001588:	429a      	cmp	r2, r3
 800158a:	d16a      	bne.n	8001662 <usb_charging_page_msg+0x24e>
    if(buck_convertor_current.voltageout_output!=buck_convertor_pervious.voltageout_output){
 800158c:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
 8001590:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 8001594:	f7ff fa08 	bl	80009a8 <__aeabi_dcmpeq>
 8001598:	2800      	cmp	r0, #0
 800159a:	f000 80bd 	beq.w	8001718 <usb_charging_page_msg+0x304>
    if(buck_convertor_current.current_output!=buck_convertor_pervious.current_output){
 800159e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80015a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80015a6:	f7ff f9ff 	bl	80009a8 <__aeabi_dcmpeq>
 80015aa:	2800      	cmp	r0, #0
 80015ac:	f000 80aa 	beq.w	8001704 <usb_charging_page_msg+0x2f0>
    sw3516_previous= sw3516_current;
 80015b0:	4c51      	ldr	r4, [pc, #324]	; (80016f8 <usb_charging_page_msg+0x2e4>)
 80015b2:	4d50      	ldr	r5, [pc, #320]	; (80016f4 <usb_charging_page_msg+0x2e0>)
 80015b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80015c0:	b002      	add	sp, #8
 80015c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((sw3516_current.currentC!=sw3516_previous.currentC && sw3516_current.status_USBC) || sw3516_current.status_USBC!=sw3516_previous.status_USBC){
 80015c6:	7d72      	ldrb	r2, [r6, #21]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	f47f af7b 	bne.w	80014c4 <usb_charging_page_msg+0xb0>
 80015ce:	e782      	b.n	80014d6 <usb_charging_page_msg+0xc2>
    if((sw3516_current.currentA!=sw3516_previous.currentA && sw3516_current.status_USBA) ||  sw3516_current.status_USBA!=sw3516_previous.status_USBA){
 80015d0:	7d32      	ldrb	r2, [r6, #20]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d188      	bne.n	80014e8 <usb_charging_page_msg+0xd4>
 80015d6:	e790      	b.n	80014fa <usb_charging_page_msg+0xe6>
    if(((sw3516_current.voltageout!=sw3516_previous.voltageout || sw3516_current.currentC!=sw3516_previous.currentC) && sw3516_current.status_USBC) || sw3516_current.status_USBC!=sw3516_previous.status_USBC){
 80015d8:	7d6b      	ldrb	r3, [r5, #21]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1a1      	bne.n	8001522 <usb_charging_page_msg+0x10e>
 80015de:	7d73      	ldrb	r3, [r6, #21]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d19e      	bne.n	8001522 <usb_charging_page_msg+0x10e>
 80015e4:	e7a9      	b.n	800153a <usb_charging_page_msg+0x126>
    			 		page_msg.sub_id=26;
 80015e6:	f240 231a 	movw	r3, #538	; 0x21a
    			 		 window_page_3_callback(&page_msg);
 80015ea:	4620      	mov	r0, r4
    			 		page_msg.sub_id=26;
 80015ec:	f8ad 3002 	strh.w	r3, [sp, #2]
    			 		 window_page_3_callback(&page_msg);
 80015f0:	f001 ff0c 	bl	800340c <window_page_3_callback>
    			 		 UG_Update();
 80015f4:	f006 f950 	bl	8007898 <UG_Update>
    if(sw3516_current.voltageout!=sw3516_previous.voltageout){
 80015f8:	68f1      	ldr	r1, [r6, #12]
 80015fa:	68e8      	ldr	r0, [r5, #12]
 80015fc:	f7ff fd36 	bl	800106c <__aeabi_fcmpeq>
 8001600:	2800      	cmp	r0, #0
 8001602:	f47f af54 	bne.w	80014ae <usb_charging_page_msg+0x9a>
 8001606:	e738      	b.n	800147a <usb_charging_page_msg+0x66>
			 		page_msg.sub_id=5;
 8001608:	f240 2305 	movw	r3, #517	; 0x205
			 		 window_page_3_callback(&page_msg);
 800160c:	4620      	mov	r0, r4
			 		page_msg.sub_id=5;
 800160e:	f8ad 3002 	strh.w	r3, [sp, #2]
			 		 window_page_3_callback(&page_msg);
 8001612:	f001 fefb 	bl	800340c <window_page_3_callback>
			 		 UG_Update();
 8001616:	f006 f93f 	bl	8007898 <UG_Update>
    if(sw3516_current.time_in_secs_A!=sw3516_previous.time_in_secs_A){
 800161a:	69aa      	ldr	r2, [r5, #24]
 800161c:	69b3      	ldr	r3, [r6, #24]
 800161e:	429a      	cmp	r2, r3
 8001620:	f43f af26 	beq.w	8001470 <usb_charging_page_msg+0x5c>
 8001624:	e7df      	b.n	80015e6 <usb_charging_page_msg+0x1d2>
				 		page_msg.sub_id=25;
 8001626:	f240 2319 	movw	r3, #537	; 0x219
				 		 window_page_3_callback(&page_msg);
 800162a:	4620      	mov	r0, r4
				 		page_msg.sub_id=25;
 800162c:	f8ad 3002 	strh.w	r3, [sp, #2]
				 		 window_page_3_callback(&page_msg);
 8001630:	f001 feec 	bl	800340c <window_page_3_callback>
				 		 UG_Update();
 8001634:	f006 f930 	bl	8007898 <UG_Update>
    if(sw3516_current.status_USBA!=sw3516_previous.status_USBA){
 8001638:	7d2a      	ldrb	r2, [r5, #20]
 800163a:	7d33      	ldrb	r3, [r6, #20]
 800163c:	429a      	cmp	r2, r3
 800163e:	f43f af12 	beq.w	8001466 <usb_charging_page_msg+0x52>
 8001642:	e7e1      	b.n	8001608 <usb_charging_page_msg+0x1f4>
		 		page_msg.sub_id=4;
 8001644:	f44f 7301 	mov.w	r3, #516	; 0x204
		 		 window_page_3_callback(&page_msg);
 8001648:	4620      	mov	r0, r4
		 		page_msg.sub_id=4;
 800164a:	f8ad 3002 	strh.w	r3, [sp, #2]
		 		 window_page_3_callback(&page_msg);
 800164e:	f001 fedd 	bl	800340c <window_page_3_callback>
		 		 UG_Update();
 8001652:	f006 f921 	bl	8007898 <UG_Update>
		if(sw3516_current.time_in_secs_C!=sw3516_previous.time_in_secs_C){
 8001656:	69ea      	ldr	r2, [r5, #28]
 8001658:	69f3      	ldr	r3, [r6, #28]
 800165a:	429a      	cmp	r2, r3
 800165c:	f43f aefe 	beq.w	800145c <usb_charging_page_msg+0x48>
 8001660:	e7e1      	b.n	8001626 <usb_charging_page_msg+0x212>
      	page_msg.sub_id=20;
 8001662:	f44f 7305 	mov.w	r3, #532	; 0x214
      	window_page_3_callback(&page_msg);
 8001666:	4620      	mov	r0, r4
      	page_msg.sub_id=20;
 8001668:	f8ad 3002 	strh.w	r3, [sp, #2]
      	window_page_3_callback(&page_msg);
 800166c:	f001 fece 	bl	800340c <window_page_3_callback>
      	 UG_Update();
 8001670:	f006 f912 	bl	8007898 <UG_Update>
 8001674:	e78a      	b.n	800158c <usb_charging_page_msg+0x178>
      	page_msg.sub_id=19;
 8001676:	f240 2313 	movw	r3, #531	; 0x213
      	window_page_3_callback(&page_msg);
 800167a:	4620      	mov	r0, r4
      	page_msg.sub_id=19;
 800167c:	f8ad 3002 	strh.w	r3, [sp, #2]
      	window_page_3_callback(&page_msg);
 8001680:	f001 fec4 	bl	800340c <window_page_3_callback>
      	 UG_Update();
 8001684:	f006 f908 	bl	8007898 <UG_Update>
    if(buck_convertor_current.status_cc!=buck_convertor_pervious.status_cc){
 8001688:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
 800168c:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8001690:	429a      	cmp	r2, r3
 8001692:	f43f af7b 	beq.w	800158c <usb_charging_page_msg+0x178>
 8001696:	e7e4      	b.n	8001662 <usb_charging_page_msg+0x24e>
      	page_msg.sub_id=18;
 8001698:	f240 2312 	movw	r3, #530	; 0x212
      	window_page_3_callback(&page_msg);
 800169c:	4620      	mov	r0, r4
      	page_msg.sub_id=18;
 800169e:	f8ad 3002 	strh.w	r3, [sp, #2]
      	window_page_3_callback(&page_msg);
 80016a2:	f001 feb3 	bl	800340c <window_page_3_callback>
      	 UG_Update();
 80016a6:	f006 f8f7 	bl	8007898 <UG_Update>
    if(buck_convertor_current.status_cv!=buck_convertor_pervious.status_cv){
 80016aa:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 80016ae:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80016b2:	429a      	cmp	r2, r3
 80016b4:	f43f af64 	beq.w	8001580 <usb_charging_page_msg+0x16c>
 80016b8:	e7dd      	b.n	8001676 <usb_charging_page_msg+0x262>
    if(((sw3516_current.voltageout!=sw3516_previous.voltageout || sw3516_current.currentA!=sw3516_previous.currentA) && sw3516_current.status_USBA) || sw3516_current.status_USBA!=sw3516_previous.status_USBA){
 80016ba:	6831      	ldr	r1, [r6, #0]
 80016bc:	6828      	ldr	r0, [r5, #0]
 80016be:	f7ff fcd5 	bl	800106c <__aeabi_fcmpeq>
 80016c2:	2800      	cmp	r0, #0
 80016c4:	f43f af40 	beq.w	8001548 <usb_charging_page_msg+0x134>
 80016c8:	7d2b      	ldrb	r3, [r5, #20]
 80016ca:	7d32      	ldrb	r2, [r6, #20]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f47f af3f 	bne.w	8001550 <usb_charging_page_msg+0x13c>
 80016d2:	e746      	b.n	8001562 <usb_charging_page_msg+0x14e>
		page_msg.sub_id=2;
 80016d4:	f240 2302 	movw	r3, #514	; 0x202
		 window_page_3_callback(&page_msg);
 80016d8:	4620      	mov	r0, r4
		page_msg.sub_id=2;
 80016da:	f8ad 3002 	strh.w	r3, [sp, #2]
		 window_page_3_callback(&page_msg);
 80016de:	f001 fe95 	bl	800340c <window_page_3_callback>
		 UG_Update();
 80016e2:	f006 f8d9 	bl	8007898 <UG_Update>
 80016e6:	e6af      	b.n	8001448 <usb_charging_page_msg+0x34>
 80016e8:	20001850 	.word	0x20001850
 80016ec:	20001638 	.word	0x20001638
 80016f0:	0800bb68 	.word	0x0800bb68
 80016f4:	20000208 	.word	0x20000208
 80016f8:	20000234 	.word	0x20000234
 80016fc:	20000258 	.word	0x20000258
 8001700:	20000290 	.word	0x20000290
      	page_msg.sub_id=23;
 8001704:	f240 2317 	movw	r3, #535	; 0x217
      	window_page_3_callback(&page_msg);
 8001708:	4620      	mov	r0, r4
      	page_msg.sub_id=23;
 800170a:	f8ad 3002 	strh.w	r3, [sp, #2]
      	window_page_3_callback(&page_msg);
 800170e:	f001 fe7d 	bl	800340c <window_page_3_callback>
      	 UG_Update();
 8001712:	f006 f8c1 	bl	8007898 <UG_Update>
 8001716:	e74b      	b.n	80015b0 <usb_charging_page_msg+0x19c>
      	page_msg.sub_id=21;
 8001718:	f240 2315 	movw	r3, #533	; 0x215
      	window_page_3_callback(&page_msg);
 800171c:	4620      	mov	r0, r4
      	page_msg.sub_id=21;
 800171e:	f8ad 3002 	strh.w	r3, [sp, #2]
      	window_page_3_callback(&page_msg);
 8001722:	f001 fe73 	bl	800340c <window_page_3_callback>
      	 UG_Update();
 8001726:	f006 f8b7 	bl	8007898 <UG_Update>
 800172a:	e738      	b.n	800159e <usb_charging_page_msg+0x18a>

0800172c <window_page_0_callback>:


void window_page_1_callback(UG_MESSAGE *msg){

}
void window_page_0_callback(UG_MESSAGE *msg){}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop

08001730 <window_logo_callback>:
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop

08001734 <window_page_2_callback>:
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop

08001738 <window_page_1_callback>:
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop

0800173c <Page_3>:
 void Page_3(){
 800173c:	b510      	push	{r4, lr}
	 UG_WindowShow(&window_page_3);
 800173e:	4810      	ldr	r0, [pc, #64]	; (8001780 <Page_3+0x44>)
 void Page_3(){
 8001740:	b082      	sub	sp, #8
	 UG_WindowShow(&window_page_3);
 8001742:	f005 fe91 	bl	8007468 <UG_WindowShow>
	 		 	 	   	UG_DrawLine(0, 32, 319, 32, C_WHITE);
 8001746:	f64f 74ff 	movw	r4, #65535	; 0xffff
	 		 		UG_Update();
 800174a:	f006 f8a5 	bl	8007898 <UG_Update>
	 		 	 	   	UG_DrawLine(0, 32, 319, 32, C_WHITE);
 800174e:	2320      	movs	r3, #32
 8001750:	f240 123f 	movw	r2, #319	; 0x13f
 8001754:	4619      	mov	r1, r3
 8001756:	2000      	movs	r0, #0
 8001758:	9400      	str	r4, [sp, #0]
 800175a:	f005 f887 	bl	800686c <UG_DrawLine>
	 		 	 	 	UG_DrawLine(160, 32, 160, 196, C_WHITE);
 800175e:	22a0      	movs	r2, #160	; 0xa0
 8001760:	23c4      	movs	r3, #196	; 0xc4
 8001762:	4610      	mov	r0, r2
 8001764:	2120      	movs	r1, #32
 8001766:	9400      	str	r4, [sp, #0]
 8001768:	f005 f880 	bl	800686c <UG_DrawLine>
	 		 	 	   	UG_DrawLine(0, 196, 319, 196, C_WHITE);
 800176c:	23c4      	movs	r3, #196	; 0xc4
 800176e:	f240 123f 	movw	r2, #319	; 0x13f
 8001772:	2000      	movs	r0, #0
 8001774:	4619      	mov	r1, r3
 8001776:	9400      	str	r4, [sp, #0]
 8001778:	f005 f878 	bl	800686c <UG_DrawLine>
 }
 800177c:	b002      	add	sp, #8
 800177e:	bd10      	pop	{r4, pc}
 8001780:	20001638 	.word	0x20001638

08001784 <begin>:
void begin(void){
 8001784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				UG_WindowCreate(&window_page_0, obj_buff_window_page_0, MAX_OBJECTS_WIN_GRAPH, window_page_0_callback);
 8001788:	4eea      	ldr	r6, [pc, #936]	; (8001b34 <begin+0x3b0>)
void begin(void){
 800178a:	b085      	sub	sp, #20
				UG_WindowCreate(&window_page_0, obj_buff_window_page_0, MAX_OBJECTS_WIN_GRAPH, window_page_0_callback);
 800178c:	2214      	movs	r2, #20
 800178e:	4bea      	ldr	r3, [pc, #936]	; (8001b38 <begin+0x3b4>)
 8001790:	4630      	mov	r0, r6
 8001792:	49ea      	ldr	r1, [pc, #936]	; (8001b3c <begin+0x3b8>)
 8001794:	f005 fe10 	bl	80073b8 <UG_WindowCreate>
		 	    UG_WindowSetStyle(&window_page_0, WND_STYLE_2D | WND_STYLE_HIDE_TITLE);
 8001798:	2100      	movs	r1, #0
 800179a:	4630      	mov	r0, r6
 800179c:	f005 fede 	bl	800755c <UG_WindowSetStyle>
		 	    UG_WindowSetBackColor(&window_page_0, C_BLACK);
 80017a0:	2100      	movs	r1, #0
 80017a2:	4630      	mov	r0, r6
		 	    UG_TextboxCreate(&window_page_0, &OK_graphic, TXB_ID_0, 0, 5, 70, 35);
 80017a4:	f04f 0905 	mov.w	r9, #5
		 	    UG_WindowSetBackColor(&window_page_0, C_BLACK);
 80017a8:	f005 fe70 	bl	800748c <UG_WindowSetBackColor>
		 	    UG_TextboxCreate(&window_page_0, &OK_graphic, TXB_ID_0, 0, 5, 70, 35);
 80017ac:	2446      	movs	r4, #70	; 0x46
 80017ae:	2300      	movs	r3, #0
 80017b0:	2223      	movs	r2, #35	; 0x23
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_0, &FONT_12X20);
 80017b2:	f8df 838c 	ldr.w	r8, [pc, #908]	; 8001b40 <begin+0x3bc>
		 	    UG_TextboxCreate(&window_page_0, &OK_graphic, TXB_ID_0, 0, 5, 70, 35);
 80017b6:	e9cd 4201 	strd	r4, r2, [sp, #4]
 80017ba:	f8cd 9000 	str.w	r9, [sp]
 80017be:	461a      	mov	r2, r3
 80017c0:	4630      	mov	r0, r6
 80017c2:	49e0      	ldr	r1, [pc, #896]	; (8001b44 <begin+0x3c0>)
 80017c4:	f006 f8e6 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_0, &FONT_12X20);
 80017c8:	4642      	mov	r2, r8
 80017ca:	2100      	movs	r1, #0
 80017cc:	4630      	mov	r0, r6
 80017ce:	f006 f9d7 	bl	8007b80 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_0, ALIGN_CENTER);
 80017d2:	2212      	movs	r2, #18
 80017d4:	2100      	movs	r1, #0
 80017d6:	4630      	mov	r0, r6
 80017d8:	f006 f9f8 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_0, C_GREEN);
 80017dc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80017e0:	2100      	movs	r1, #0
 80017e2:	4630      	mov	r0, r6
 80017e4:	f006 f980 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_0, C_BLACK);
 80017e8:	2200      	movs	r2, #0
 80017ea:	4630      	mov	r0, r6
 80017ec:	4611      	mov	r1, r2
 80017ee:	f006 f955 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_0, "OK");
 80017f2:	4ad5      	ldr	r2, [pc, #852]	; (8001b48 <begin+0x3c4>)
 80017f4:	2100      	movs	r1, #0
 80017f6:	4630      	mov	r0, r6
 80017f8:	f006 f99c 	bl	8007b34 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_0);
 80017fc:	2100      	movs	r1, #0
 80017fe:	4630      	mov	r0, r6
		 	    UG_TextboxCreate(&window_page_2, &dummy_text_1, TXB_ID_1, 1,1,102,70);
 8001800:	2701      	movs	r7, #1
		 	    UG_TextboxShow(&window_page_0, TXB_ID_0);
 8001802:	f006 f92b 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_0, &CV_graphic, TXB_ID_1, 75, 5, 105, 35);
 8001806:	2223      	movs	r2, #35	; 0x23
 8001808:	2369      	movs	r3, #105	; 0x69
 800180a:	9202      	str	r2, [sp, #8]
 800180c:	f8cd 9000 	str.w	r9, [sp]
 8001810:	463a      	mov	r2, r7
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	4630      	mov	r0, r6
 8001816:	234b      	movs	r3, #75	; 0x4b
 8001818:	49cc      	ldr	r1, [pc, #816]	; (8001b4c <begin+0x3c8>)
 800181a:	f006 f8bb 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_1, &FONT_12X20);
 800181e:	4642      	mov	r2, r8
 8001820:	4639      	mov	r1, r7
 8001822:	4630      	mov	r0, r6
 8001824:	f006 f9ac 	bl	8007b80 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_1, ALIGN_CENTER);
 8001828:	4639      	mov	r1, r7
 800182a:	2212      	movs	r2, #18
 800182c:	4630      	mov	r0, r6
 800182e:	f006 f9cd 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_1, C_YELLOW);
 8001832:	4639      	mov	r1, r7
 8001834:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001838:	4630      	mov	r0, r6
 800183a:	f006 f955 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_1, C_BLACK);
 800183e:	4639      	mov	r1, r7
 8001840:	2200      	movs	r2, #0
 8001842:	4630      	mov	r0, r6
 8001844:	f006 f92a 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_1, "CV");
 8001848:	4639      	mov	r1, r7
 800184a:	4ac1      	ldr	r2, [pc, #772]	; (8001b50 <begin+0x3cc>)
 800184c:	4630      	mov	r0, r6
 800184e:	f006 f971 	bl	8007b34 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_1);
 8001852:	4639      	mov	r1, r7
 8001854:	4630      	mov	r0, r6
 8001856:	f006 f901 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_0, &CC_graphic, TXB_ID_2, 110, 5, 140, 35);
 800185a:	2223      	movs	r2, #35	; 0x23
 800185c:	238c      	movs	r3, #140	; 0x8c
 800185e:	9202      	str	r2, [sp, #8]
 8001860:	f8cd 9000 	str.w	r9, [sp]
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	236e      	movs	r3, #110	; 0x6e
 800186a:	4630      	mov	r0, r6
 800186c:	49b9      	ldr	r1, [pc, #740]	; (8001b54 <begin+0x3d0>)
 800186e:	f006 f891 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_2, &FONT_12X20);
 8001872:	4642      	mov	r2, r8
 8001874:	2102      	movs	r1, #2
 8001876:	4630      	mov	r0, r6
 8001878:	f006 f982 	bl	8007b80 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_2, ALIGN_CENTER);
 800187c:	2212      	movs	r2, #18
 800187e:	2102      	movs	r1, #2
 8001880:	4630      	mov	r0, r6
 8001882:	f006 f9a3 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_2, 	C_DIM_GRAY);
 8001886:	f246 322c 	movw	r2, #25388	; 0x632c
 800188a:	2102      	movs	r1, #2
 800188c:	4630      	mov	r0, r6
 800188e:	f006 f92b 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_2, C_BLACK);
 8001892:	2200      	movs	r2, #0
 8001894:	2102      	movs	r1, #2
 8001896:	4630      	mov	r0, r6
 8001898:	f006 f900 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_2, "CC");
 800189c:	4aae      	ldr	r2, [pc, #696]	; (8001b58 <begin+0x3d4>)
 800189e:	2102      	movs	r1, #2
 80018a0:	4630      	mov	r0, r6
 80018a2:	f006 f947 	bl	8007b34 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_2);
 80018a6:	2102      	movs	r1, #2
 80018a8:	4630      	mov	r0, r6
		 	    UG_ImageCreate(&window_page_0, &image_1, IMG_ID_1,145, 8, 160,32);
 80018aa:	f04f 0a08 	mov.w	sl, #8
		 	    UG_TextboxShow(&window_page_0, TXB_ID_2);
 80018ae:	f006 f8d5 	bl	8007a5c <UG_TextboxShow>
		 	    UG_ImageCreate(&window_page_0, &image_1, IMG_ID_1,145, 8, 160,32);
 80018b2:	23a0      	movs	r3, #160	; 0xa0
 80018b4:	2220      	movs	r2, #32
 80018b6:	f8cd a000 	str.w	sl, [sp]
 80018ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80018be:	4630      	mov	r0, r6
 80018c0:	2391      	movs	r3, #145	; 0x91
 80018c2:	463a      	mov	r2, r7
 80018c4:	49a5      	ldr	r1, [pc, #660]	; (8001b5c <begin+0x3d8>)
 80018c6:	f006 f9a7 	bl	8007c18 <UG_ImageCreate>
		 	   	UG_ImageSetBMP(&window_page_0, IMG_ID_1, &logo_FNIRSI);
 80018ca:	4639      	mov	r1, r7
 80018cc:	4630      	mov	r0, r6
 80018ce:	4aa4      	ldr	r2, [pc, #656]	; (8001b60 <begin+0x3dc>)
 80018d0:	f006 f9ec 	bl	8007cac <UG_ImageSetBMP>
		 	    UG_TextboxCreate(&window_page_0, &current_V_graphic_page_1, TXB_ID_3, 1, 40, 73,60);
 80018d4:	2149      	movs	r1, #73	; 0x49
 80018d6:	233c      	movs	r3, #60	; 0x3c
 80018d8:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80018dc:	2328      	movs	r3, #40	; 0x28
 80018de:	2203      	movs	r2, #3
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	4630      	mov	r0, r6
 80018e4:	463b      	mov	r3, r7
 80018e6:	499f      	ldr	r1, [pc, #636]	; (8001b64 <begin+0x3e0>)
 80018e8:	f006 f854 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_3, &FONT_12X20);
 80018ec:	4642      	mov	r2, r8
 80018ee:	2103      	movs	r1, #3
 80018f0:	4630      	mov	r0, r6
 80018f2:	f006 f945 	bl	8007b80 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_3, ALIGN_CENTER);
 80018f6:	2212      	movs	r2, #18
 80018f8:	2103      	movs	r1, #3
 80018fa:	4630      	mov	r0, r6
 80018fc:	f006 f966 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_3, 	C_YELLOW);
 8001900:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001904:	2103      	movs	r1, #3
 8001906:	4630      	mov	r0, r6
 8001908:	f006 f8ee 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_3, C_BLACK);
 800190c:	2200      	movs	r2, #0
 800190e:	2103      	movs	r1, #3
 8001910:	4630      	mov	r0, r6
 8001912:	f006 f8c3 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_3, "12.10V");
 8001916:	4a94      	ldr	r2, [pc, #592]	; (8001b68 <begin+0x3e4>)
 8001918:	2103      	movs	r1, #3
 800191a:	4630      	mov	r0, r6
 800191c:	f006 f90a 	bl	8007b34 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_3);
 8001920:	2103      	movs	r1, #3
 8001922:	4630      	mov	r0, r6
 8001924:	f006 f89a 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_0, &current_I_graphic_page_1, TXB_ID_4, 1, 63, 73,83);
 8001928:	2049      	movs	r0, #73	; 0x49
 800192a:	2353      	movs	r3, #83	; 0x53
 800192c:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8001930:	233f      	movs	r3, #63	; 0x3f
 8001932:	2204      	movs	r2, #4
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	4630      	mov	r0, r6
 8001938:	463b      	mov	r3, r7
 800193a:	498c      	ldr	r1, [pc, #560]	; (8001b6c <begin+0x3e8>)
 800193c:	f006 f82a 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_4, &FONT_12X20);
 8001940:	4642      	mov	r2, r8
 8001942:	2104      	movs	r1, #4
 8001944:	4630      	mov	r0, r6
 8001946:	f006 f91b 	bl	8007b80 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_4, ALIGN_CENTER);
 800194a:	2212      	movs	r2, #18
 800194c:	2104      	movs	r1, #4
 800194e:	4630      	mov	r0, r6
 8001950:	f006 f93c 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_4, 	C_GREEN);
 8001954:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001958:	2104      	movs	r1, #4
 800195a:	4630      	mov	r0, r6
 800195c:	f006 f8c4 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_4, C_BLACK);
 8001960:	2200      	movs	r2, #0
 8001962:	2104      	movs	r1, #4
 8001964:	4630      	mov	r0, r6
 8001966:	f006 f899 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_4, "0.000A");
 800196a:	4a81      	ldr	r2, [pc, #516]	; (8001b70 <begin+0x3ec>)
 800196c:	2104      	movs	r1, #4
 800196e:	4630      	mov	r0, r6
 8001970:	f006 f8e0 	bl	8007b34 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_4);
 8001974:	2104      	movs	r1, #4
 8001976:	4630      	mov	r0, r6
 8001978:	f006 f870 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_0, &set_V_graphic_page_1, TXB_ID_5, 0, 218, 76, 238);
 800197c:	224c      	movs	r2, #76	; 0x4c
 800197e:	23ee      	movs	r3, #238	; 0xee
 8001980:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8001984:	22da      	movs	r2, #218	; 0xda
 8001986:	2300      	movs	r3, #0
 8001988:	9200      	str	r2, [sp, #0]
 800198a:	4630      	mov	r0, r6
 800198c:	464a      	mov	r2, r9
 800198e:	4979      	ldr	r1, [pc, #484]	; (8001b74 <begin+0x3f0>)
 8001990:	f006 f800 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_5, &FONT_12X20);
 8001994:	4642      	mov	r2, r8
 8001996:	4649      	mov	r1, r9
 8001998:	4630      	mov	r0, r6
 800199a:	f006 f8f1 	bl	8007b80 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_5, ALIGN_CENTER);
 800199e:	4649      	mov	r1, r9
 80019a0:	2212      	movs	r2, #18
 80019a2:	4630      	mov	r0, r6
 80019a4:	f006 f912 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_5, 	C_BLACK);
 80019a8:	4649      	mov	r1, r9
 80019aa:	2200      	movs	r2, #0
 80019ac:	4630      	mov	r0, r6
 80019ae:	f006 f89b 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_5, C_WHITE);
 80019b2:	4649      	mov	r1, r9
 80019b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b8:	4630      	mov	r0, r6
 80019ba:	f006 f86f 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_5, "SET V:");
 80019be:	4649      	mov	r1, r9
 80019c0:	4a6d      	ldr	r2, [pc, #436]	; (8001b78 <begin+0x3f4>)
 80019c2:	4630      	mov	r0, r6
 80019c4:	f006 f8b6 	bl	8007b34 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_5);
 80019c8:	4649      	mov	r1, r9
 80019ca:	4630      	mov	r0, r6
 80019cc:	f006 f846 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_0, &set_V_graphic_value_page_1, TXB_ID_6, 80, 218, 156, 238);
 80019d0:	23ee      	movs	r3, #238	; 0xee
 80019d2:	22da      	movs	r2, #218	; 0xda
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	239c      	movs	r3, #156	; 0x9c
 80019d8:	4630      	mov	r0, r6
 80019da:	e9cd 2300 	strd	r2, r3, [sp]
 80019de:	4967      	ldr	r1, [pc, #412]	; (8001b7c <begin+0x3f8>)
 80019e0:	2350      	movs	r3, #80	; 0x50
 80019e2:	2206      	movs	r2, #6
 80019e4:	f005 ffd6 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_6, &FONT_12X20);
 80019e8:	4642      	mov	r2, r8
 80019ea:	2106      	movs	r1, #6
 80019ec:	4630      	mov	r0, r6
 80019ee:	f006 f8c7 	bl	8007b80 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_6, ALIGN_CENTER);
 80019f2:	2212      	movs	r2, #18
 80019f4:	2106      	movs	r1, #6
 80019f6:	4630      	mov	r0, r6
 80019f8:	f006 f8e8 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_6, 	C_YELLOW);
 80019fc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a00:	2106      	movs	r1, #6
 8001a02:	4630      	mov	r0, r6
 8001a04:	f006 f870 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_6, C_BLACK);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2106      	movs	r1, #6
 8001a0c:	4630      	mov	r0, r6
 8001a0e:	f006 f845 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_6, "00.00V");
 8001a12:	4a5b      	ldr	r2, [pc, #364]	; (8001b80 <begin+0x3fc>)
 8001a14:	2106      	movs	r1, #6
 8001a16:	4630      	mov	r0, r6
 8001a18:	f006 f88c 	bl	8007b34 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_6);
 8001a1c:	2106      	movs	r1, #6
 8001a1e:	4630      	mov	r0, r6
 8001a20:	f006 f81c 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_0, &set_I_graphic_page_1, TXB_ID_7, 162, 218, 238, 238);
 8001a24:	23ee      	movs	r3, #238	; 0xee
 8001a26:	22da      	movs	r2, #218	; 0xda
 8001a28:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001a2c:	9200      	str	r2, [sp, #0]
 8001a2e:	23a2      	movs	r3, #162	; 0xa2
 8001a30:	2207      	movs	r2, #7
 8001a32:	4630      	mov	r0, r6
 8001a34:	4953      	ldr	r1, [pc, #332]	; (8001b84 <begin+0x400>)
 8001a36:	f005 ffad 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_7, &FONT_12X20);
 8001a3a:	4642      	mov	r2, r8
 8001a3c:	2107      	movs	r1, #7
 8001a3e:	4630      	mov	r0, r6
 8001a40:	f006 f89e 	bl	8007b80 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_7, ALIGN_CENTER);
 8001a44:	2212      	movs	r2, #18
 8001a46:	2107      	movs	r1, #7
 8001a48:	4630      	mov	r0, r6
 8001a4a:	f006 f8bf 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_7, 	C_BLACK);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2107      	movs	r1, #7
 8001a52:	4630      	mov	r0, r6
 8001a54:	f006 f848 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_7, C_WHITE);
 8001a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a5c:	2107      	movs	r1, #7
 8001a5e:	4630      	mov	r0, r6
 8001a60:	f006 f81c 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_7, "SET I:");
 8001a64:	4a48      	ldr	r2, [pc, #288]	; (8001b88 <begin+0x404>)
 8001a66:	2107      	movs	r1, #7
 8001a68:	4630      	mov	r0, r6
 8001a6a:	f006 f863 	bl	8007b34 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_7);
 8001a6e:	2107      	movs	r1, #7
 8001a70:	4630      	mov	r0, r6
 8001a72:	f005 fff3 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_0, &set_I_graphic_value_page_1, TXB_ID_8, 242, 218, 318, 238);
 8001a76:	23ee      	movs	r3, #238	; 0xee
 8001a78:	22da      	movs	r2, #218	; 0xda
 8001a7a:	9302      	str	r3, [sp, #8]
 8001a7c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001a80:	4630      	mov	r0, r6
 8001a82:	e9cd 2300 	strd	r2, r3, [sp]
 8001a86:	4941      	ldr	r1, [pc, #260]	; (8001b8c <begin+0x408>)
 8001a88:	23f2      	movs	r3, #242	; 0xf2
 8001a8a:	4652      	mov	r2, sl
 8001a8c:	f005 ff82 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_8, &FONT_12X20);
 8001a90:	4642      	mov	r2, r8
 8001a92:	4651      	mov	r1, sl
 8001a94:	4630      	mov	r0, r6
 8001a96:	f006 f873 	bl	8007b80 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_8, ALIGN_CENTER);
 8001a9a:	4651      	mov	r1, sl
 8001a9c:	2212      	movs	r2, #18
 8001a9e:	4630      	mov	r0, r6
 8001aa0:	f006 f894 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_8, 	C_YELLOW);
 8001aa4:	4651      	mov	r1, sl
 8001aa6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001aaa:	4630      	mov	r0, r6
 8001aac:	f006 f81c 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_8, C_BLACK);
 8001ab0:	4651      	mov	r1, sl
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4630      	mov	r0, r6
	 	 	 	UG_WindowCreate(&window_page_1, obj_buff_window_page_1, MAX_OBJECTS_WIN_GRAPH, window_page_1_callback);
 8001ab6:	4c36      	ldr	r4, [pc, #216]	; (8001b90 <begin+0x40c>)
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_8, C_BLACK);
 8001ab8:	f005 fff0 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_8, "0.000A");
 8001abc:	4651      	mov	r1, sl
 8001abe:	4a2c      	ldr	r2, [pc, #176]	; (8001b70 <begin+0x3ec>)
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	f006 f837 	bl	8007b34 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_8);
 8001ac6:	4651      	mov	r1, sl
 8001ac8:	4630      	mov	r0, r6
 8001aca:	f005 ffc7 	bl	8007a5c <UG_TextboxShow>
	 	 	 	UG_WindowCreate(&window_page_1, obj_buff_window_page_1, MAX_OBJECTS_WIN_GRAPH, window_page_1_callback);
 8001ace:	2214      	movs	r2, #20
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <begin+0x410>)
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	4930      	ldr	r1, [pc, #192]	; (8001b98 <begin+0x414>)
 8001ad6:	f005 fc6f 	bl	80073b8 <UG_WindowCreate>
		 	    UG_WindowSetStyle(&window_page_1, WND_STYLE_2D | WND_STYLE_HIDE_TITLE);
 8001ada:	2100      	movs	r1, #0
 8001adc:	4620      	mov	r0, r4
 8001ade:	f005 fd3d 	bl	800755c <UG_WindowSetStyle>
		 	    UG_WindowSetBackColor(&window_page_1, C_BLACK);
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f005 fcd1 	bl	800748c <UG_WindowSetBackColor>
		   	    UG_TextboxCreate(&window_page_1, &current_CV_graphic, TXB_ID_3, 0, 10, 210, 26);
 8001aea:	f04f 0c0a 	mov.w	ip, #10
 8001aee:	22d2      	movs	r2, #210	; 0xd2
 8001af0:	211a      	movs	r1, #26
		  	    UG_TextboxSetFont(&window_page_1, TXB_ID_3, &FONT_10X16);
 8001af2:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8001b9c <begin+0x418>
		   	    UG_TextboxCreate(&window_page_1, &current_CV_graphic, TXB_ID_3, 0, 10, 210, 26);
 8001af6:	f8cd c000 	str.w	ip, [sp]
 8001afa:	2300      	movs	r3, #0
 8001afc:	4616      	mov	r6, r2
 8001afe:	9102      	str	r1, [sp, #8]
 8001b00:	9201      	str	r2, [sp, #4]
 8001b02:	4620      	mov	r0, r4
 8001b04:	2203      	movs	r2, #3
 8001b06:	4926      	ldr	r1, [pc, #152]	; (8001ba0 <begin+0x41c>)
 8001b08:	f005 ff44 	bl	8007994 <UG_TextboxCreate>
		  	    UG_TextboxSetFont(&window_page_1, TXB_ID_3, &FONT_10X16);
 8001b0c:	465a      	mov	r2, fp
 8001b0e:	2103      	movs	r1, #3
 8001b10:	4620      	mov	r0, r4
 8001b12:	f006 f835 	bl	8007b80 <UG_TextboxSetFont>
		 	   	UG_TextboxSetAlignment(&window_page_1, TXB_ID_3, ALIGN_CENTER_LEFT);
 8001b16:	2211      	movs	r2, #17
 8001b18:	2103      	movs	r1, #3
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f006 f856 	bl	8007bcc <UG_TextboxSetAlignment>
		 	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_3, C_YELLOW);
 8001b20:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001b24:	2103      	movs	r1, #3
 8001b26:	4620      	mov	r0, r4
 8001b28:	f005 ffde 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_3, C_BLACK);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2103      	movs	r1, #3
 8001b30:	e038      	b.n	8001ba4 <begin+0x420>
 8001b32:	bf00      	nop
 8001b34:	2000159c 	.word	0x2000159c
 8001b38:	0800172d 	.word	0x0800172d
 8001b3c:	200007d8 	.word	0x200007d8
 8001b40:	0800d754 	.word	0x0800d754
 8001b44:	20000324 	.word	0x20000324
 8001b48:	0800bb70 	.word	0x0800bb70
 8001b4c:	200002dc 	.word	0x200002dc
 8001b50:	0800bb74 	.word	0x0800bb74
 8001b54:	200002c8 	.word	0x200002c8
 8001b58:	0800bb78 	.word	0x0800bb78
 8001b5c:	20000550 	.word	0x20000550
 8001b60:	0800d6e8 	.word	0x0800d6e8
 8001b64:	20000424 	.word	0x20000424
 8001b68:	0800bb7c 	.word	0x0800bb7c
 8001b6c:	200003d4 	.word	0x200003d4
 8001b70:	0800bb84 	.word	0x0800bb84
 8001b74:	20001308 	.word	0x20001308
 8001b78:	0800bb8c 	.word	0x0800bb8c
 8001b7c:	20001330 	.word	0x20001330
 8001b80:	0800bb94 	.word	0x0800bb94
 8001b84:	200012b8 	.word	0x200012b8
 8001b88:	0800bb9c 	.word	0x0800bb9c
 8001b8c:	200012e0 	.word	0x200012e0
 8001b90:	200015d0 	.word	0x200015d0
 8001b94:	08001739 	.word	0x08001739
 8001b98:	20000a58 	.word	0x20000a58
 8001b9c:	0800d740 	.word	0x0800d740
 8001ba0:	20000398 	.word	0x20000398
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f005 ff79 	bl	8007a9c <UG_TextboxSetForeColor>
		  	    UG_TextboxSetText(&window_page_1, TXB_ID_3, "VOLTS");
 8001baa:	4aea      	ldr	r2, [pc, #936]	; (8001f54 <begin+0x7d0>)
 8001bac:	2103      	movs	r1, #3
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f005 ffc0 	bl	8007b34 <UG_TextboxSetText>
		 	   	UG_TextboxShow(&window_page_1, TXB_ID_3);
 8001bb4:	2103      	movs	r1, #3
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f005 ff50 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_1, &current_V_graphic_page_2, TXB_ID_4, 0, 31, 181, 71);
 8001bbc:	f04f 0e1f 	mov.w	lr, #31
 8001bc0:	20b5      	movs	r0, #181	; 0xb5
 8001bc2:	2147      	movs	r1, #71	; 0x47
 8001bc4:	f8cd e000 	str.w	lr, [sp]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001bce:	2204      	movs	r2, #4
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	49e1      	ldr	r1, [pc, #900]	; (8001f58 <begin+0x7d4>)
 8001bd4:	f005 fede 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_4, &FONT_24X40);
 8001bd8:	2104      	movs	r1, #4
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4adf      	ldr	r2, [pc, #892]	; (8001f5c <begin+0x7d8>)
 8001bde:	f005 ffcf 	bl	8007b80 <UG_TextboxSetFont>
	  	 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_4, ALIGN_CENTER);
 8001be2:	2212      	movs	r2, #18
 8001be4:	2104      	movs	r1, #4
 8001be6:	4620      	mov	r0, r4
 8001be8:	f005 fff0 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_4, C_DIM_GRAY);
 8001bec:	f246 322c 	movw	r2, #25388	; 0x632c
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f005 ff78 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_4, C_WHITE);
 8001bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f005 ff4c 	bl	8007a9c <UG_TextboxSetForeColor>
		  	    UG_TextboxSetText(&window_page_1, TXB_ID_4, "00.00");
 8001c04:	4ad6      	ldr	r2, [pc, #856]	; (8001f60 <begin+0x7dc>)
 8001c06:	2104      	movs	r1, #4
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f005 ff93 	bl	8007b34 <UG_TextboxSetText>
		  	    UG_TextboxShow(&window_page_1, TXB_ID_4);
 8001c0e:	2104      	movs	r1, #4
 8001c10:	4620      	mov	r0, r4
 8001c12:	f005 ff23 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_1, &current_V2_graphic, TXB_ID_5, 186, 27, 210, 71);
 8001c16:	2147      	movs	r1, #71	; 0x47
 8001c18:	231b      	movs	r3, #27
 8001c1a:	e9cd 6101 	strd	r6, r1, [sp, #4]
 8001c1e:	464a      	mov	r2, r9
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	4620      	mov	r0, r4
 8001c24:	23ba      	movs	r3, #186	; 0xba
 8001c26:	49cf      	ldr	r1, [pc, #828]	; (8001f64 <begin+0x7e0>)
 8001c28:	f005 feb4 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_5, &FONT_24X40);
 8001c2c:	4649      	mov	r1, r9
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4aca      	ldr	r2, [pc, #808]	; (8001f5c <begin+0x7d8>)
 8001c32:	f005 ffa5 	bl	8007b80 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_5, ALIGN_CENTER);
 8001c36:	4649      	mov	r1, r9
 8001c38:	2212      	movs	r2, #18
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f005 ffc6 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_5, C_YELLOW);
 8001c40:	4649      	mov	r1, r9
 8001c42:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001c46:	4620      	mov	r0, r4
 8001c48:	f005 ff4e 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_5, C_BLACK);
 8001c4c:	4649      	mov	r1, r9
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4620      	mov	r0, r4
 8001c52:	f005 ff23 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_5, "V");
 8001c56:	4649      	mov	r1, r9
 8001c58:	4ac3      	ldr	r2, [pc, #780]	; (8001f68 <begin+0x7e4>)
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f005 ff6a 	bl	8007b34 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_5);
 8001c60:	4649      	mov	r1, r9
 8001c62:	4620      	mov	r0, r4
 8001c64:	f005 fefa 	bl	8007a5c <UG_TextboxShow>
		   	    UG_TextboxCreate(&window_page_1, &current_CC_graphic, TXB_ID_6, 0, 76, 210, 92);
 8001c68:	224c      	movs	r2, #76	; 0x4c
 8001c6a:	235c      	movs	r3, #92	; 0x5c
 8001c6c:	9601      	str	r6, [sp, #4]
 8001c6e:	9200      	str	r2, [sp, #0]
 8001c70:	9302      	str	r3, [sp, #8]
 8001c72:	2206      	movs	r2, #6
 8001c74:	2300      	movs	r3, #0
 8001c76:	4620      	mov	r0, r4
 8001c78:	49bc      	ldr	r1, [pc, #752]	; (8001f6c <begin+0x7e8>)
 8001c7a:	f005 fe8b 	bl	8007994 <UG_TextboxCreate>
		  	    UG_TextboxSetFont(&window_page_1, TXB_ID_6, &FONT_10X16);
 8001c7e:	465a      	mov	r2, fp
 8001c80:	2106      	movs	r1, #6
 8001c82:	4620      	mov	r0, r4
 8001c84:	f005 ff7c 	bl	8007b80 <UG_TextboxSetFont>
		 	   	UG_TextboxSetAlignment(&window_page_1, TXB_ID_6, ALIGN_CENTER_LEFT);
 8001c88:	2211      	movs	r2, #17
 8001c8a:	2106      	movs	r1, #6
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f005 ff9d 	bl	8007bcc <UG_TextboxSetAlignment>
		 	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_6, C_GREEN);
 8001c92:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001c96:	2106      	movs	r1, #6
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f005 ff25 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_6, C_BLACK);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2106      	movs	r1, #6
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f005 fefa 	bl	8007a9c <UG_TextboxSetForeColor>
		  	    UG_TextboxSetText(&window_page_1, TXB_ID_6, "AMPS");
 8001ca8:	4ab1      	ldr	r2, [pc, #708]	; (8001f70 <begin+0x7ec>)
 8001caa:	2106      	movs	r1, #6
 8001cac:	4620      	mov	r0, r4
 8001cae:	f005 ff41 	bl	8007b34 <UG_TextboxSetText>
		 	   	UG_TextboxShow(&window_page_1, TXB_ID_6);
 8001cb2:	2106      	movs	r1, #6
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f005 fed1 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_1, &current_I_graphic_page_2, TXB_ID_7, 0, 97, 181, 137);
 8001cba:	f04f 0c89 	mov.w	ip, #137	; 0x89
 8001cbe:	20b5      	movs	r0, #181	; 0xb5
 8001cc0:	2361      	movs	r3, #97	; 0x61
 8001cc2:	f8cd c008 	str.w	ip, [sp, #8]
		   	    UG_TextboxCreate(&window_page_1, &current_CC_graphic, TXB_ID_6, 0, 76, 210, 92);
 8001cc6:	46b1      	mov	r9, r6
		 	    UG_TextboxCreate(&window_page_1, &current_I_graphic_page_2, TXB_ID_7, 0, 97, 181, 137);
 8001cc8:	9001      	str	r0, [sp, #4]
 8001cca:	4606      	mov	r6, r0
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2207      	movs	r2, #7
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	49a7      	ldr	r1, [pc, #668]	; (8001f74 <begin+0x7f0>)
 8001cd6:	f005 fe5d 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_7, &FONT_24X40);
 8001cda:	2107      	movs	r1, #7
 8001cdc:	4620      	mov	r0, r4
 8001cde:	4a9f      	ldr	r2, [pc, #636]	; (8001f5c <begin+0x7d8>)
 8001ce0:	f005 ff4e 	bl	8007b80 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_7, ALIGN_CENTER);
 8001ce4:	2212      	movs	r2, #18
 8001ce6:	2107      	movs	r1, #7
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f005 ff6f 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_7, C_DIM_GRAY);
 8001cee:	f246 322c 	movw	r2, #25388	; 0x632c
 8001cf2:	2107      	movs	r1, #7
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f005 fef7 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_7, C_WHITE);
 8001cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cfe:	2107      	movs	r1, #7
 8001d00:	4620      	mov	r0, r4
 8001d02:	f005 fecb 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_7, "0.000");
 8001d06:	4a9c      	ldr	r2, [pc, #624]	; (8001f78 <begin+0x7f4>)
 8001d08:	2107      	movs	r1, #7
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f005 ff12 	bl	8007b34 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_7);
 8001d10:	2107      	movs	r1, #7
 8001d12:	4620      	mov	r0, r4
 8001d14:	f005 fea2 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_1, &current_I2_graphic, TXB_ID_8, 186, 93, 210, 137);
 8001d18:	f04f 0c89 	mov.w	ip, #137	; 0x89
 8001d1c:	235d      	movs	r3, #93	; 0x5d
 8001d1e:	e9cd 9c01 	strd	r9, ip, [sp, #4]
 8001d22:	4652      	mov	r2, sl
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	4620      	mov	r0, r4
 8001d28:	23ba      	movs	r3, #186	; 0xba
 8001d2a:	4994      	ldr	r1, [pc, #592]	; (8001f7c <begin+0x7f8>)
 8001d2c:	f005 fe32 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_8, &FONT_24X40);
 8001d30:	4651      	mov	r1, sl
 8001d32:	4620      	mov	r0, r4
 8001d34:	4a89      	ldr	r2, [pc, #548]	; (8001f5c <begin+0x7d8>)
 8001d36:	f005 ff23 	bl	8007b80 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_8, ALIGN_CENTER);
 8001d3a:	4651      	mov	r1, sl
 8001d3c:	2212      	movs	r2, #18
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f005 ff44 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_8, C_GREEN);
 8001d44:	4651      	mov	r1, sl
 8001d46:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f005 fecc 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_8, C_BLACK);
 8001d50:	4651      	mov	r1, sl
 8001d52:	2200      	movs	r2, #0
 8001d54:	4620      	mov	r0, r4
 8001d56:	f005 fea1 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_8, "I");
 8001d5a:	4651      	mov	r1, sl
 8001d5c:	4a88      	ldr	r2, [pc, #544]	; (8001f80 <begin+0x7fc>)
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f005 fee8 	bl	8007b34 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_8);
 8001d64:	4651      	mov	r1, sl
 8001d66:	4620      	mov	r0, r4
 8001d68:	f005 fe78 	bl	8007a5c <UG_TextboxShow>
		   	    UG_TextboxCreate(&window_page_1, &current_CW_graphic, TXB_ID_9, 0, 142, 210, 158);
 8001d6c:	239e      	movs	r3, #158	; 0x9e
 8001d6e:	9302      	str	r3, [sp, #8]
 8001d70:	238e      	movs	r3, #142	; 0x8e
 8001d72:	f8cd 9004 	str.w	r9, [sp, #4]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2209      	movs	r2, #9
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	4981      	ldr	r1, [pc, #516]	; (8001f84 <begin+0x800>)
 8001d80:	f005 fe08 	bl	8007994 <UG_TextboxCreate>
		  	    UG_TextboxSetFont(&window_page_1, TXB_ID_9, &FONT_10X16);
 8001d84:	465a      	mov	r2, fp
 8001d86:	2109      	movs	r1, #9
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f005 fef9 	bl	8007b80 <UG_TextboxSetFont>
		 	   	UG_TextboxSetAlignment(&window_page_1, TXB_ID_9, ALIGN_CENTER_LEFT);
 8001d8e:	2211      	movs	r2, #17
 8001d90:	2109      	movs	r1, #9
 8001d92:	4620      	mov	r0, r4
 8001d94:	f005 ff1a 	bl	8007bcc <UG_TextboxSetAlignment>
		 	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_9, C_VIOLET);
 8001d98:	f24e 421c 	movw	r2, #58396	; 0xe41c
 8001d9c:	2109      	movs	r1, #9
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f005 fea2 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_9, C_BLACK);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2109      	movs	r1, #9
 8001da8:	4620      	mov	r0, r4
 8001daa:	f005 fe77 	bl	8007a9c <UG_TextboxSetForeColor>
		  	    UG_TextboxSetText(&window_page_1, TXB_ID_9, "WATTS");
 8001dae:	4a76      	ldr	r2, [pc, #472]	; (8001f88 <begin+0x804>)
 8001db0:	2109      	movs	r1, #9
 8001db2:	4620      	mov	r0, r4
 8001db4:	f005 febe 	bl	8007b34 <UG_TextboxSetText>
		 	   	UG_TextboxShow(&window_page_1, TXB_ID_9);
 8001db8:	2109      	movs	r1, #9
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f005 fe4e 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_1, &current_W_graphic, TXB_ID_10, 0, 163, 181, 203);
 8001dc0:	f04f 0acb 	mov.w	sl, #203	; 0xcb
 8001dc4:	23a3      	movs	r3, #163	; 0xa3
 8001dc6:	9601      	str	r6, [sp, #4]
 8001dc8:	f8cd a008 	str.w	sl, [sp, #8]
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	220a      	movs	r2, #10
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	496d      	ldr	r1, [pc, #436]	; (8001f8c <begin+0x808>)
 8001dd6:	f005 fddd 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_10, &FONT_24X40);
 8001dda:	210a      	movs	r1, #10
 8001ddc:	4620      	mov	r0, r4
 8001dde:	4a5f      	ldr	r2, [pc, #380]	; (8001f5c <begin+0x7d8>)
 8001de0:	f005 fece 	bl	8007b80 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_10, ALIGN_CENTER);
 8001de4:	2212      	movs	r2, #18
 8001de6:	210a      	movs	r1, #10
 8001de8:	4620      	mov	r0, r4
 8001dea:	f005 feef 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_10, C_DIM_GRAY);
 8001dee:	f246 322c 	movw	r2, #25388	; 0x632c
 8001df2:	210a      	movs	r1, #10
 8001df4:	4620      	mov	r0, r4
 8001df6:	f005 fe77 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_10, C_WHITE);
 8001dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dfe:	210a      	movs	r1, #10
 8001e00:	4620      	mov	r0, r4
 8001e02:	f005 fe4b 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_10, "200.0");
 8001e06:	4a62      	ldr	r2, [pc, #392]	; (8001f90 <begin+0x80c>)
 8001e08:	210a      	movs	r1, #10
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f005 fe92 	bl	8007b34 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_10);
 8001e10:	210a      	movs	r1, #10
 8001e12:	4620      	mov	r0, r4
 8001e14:	f005 fe22 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_1, &current_W2_graphic, TXB_ID_11, 186, 159, 210, 203);
 8001e18:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8001e1c:	f04f 0a9f 	mov.w	sl, #159	; 0x9f
 8001e20:	23ba      	movs	r3, #186	; 0xba
 8001e22:	f8cd a000 	str.w	sl, [sp]
 8001e26:	220b      	movs	r2, #11
 8001e28:	4620      	mov	r0, r4
 8001e2a:	495a      	ldr	r1, [pc, #360]	; (8001f94 <begin+0x810>)
 8001e2c:	f005 fdb2 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_11, &FONT_24X40);
 8001e30:	210b      	movs	r1, #11
 8001e32:	4620      	mov	r0, r4
 8001e34:	4a49      	ldr	r2, [pc, #292]	; (8001f5c <begin+0x7d8>)
 8001e36:	f005 fea3 	bl	8007b80 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_11, ALIGN_CENTER);
 8001e3a:	2212      	movs	r2, #18
 8001e3c:	210b      	movs	r1, #11
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f005 fec4 	bl	8007bcc <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_11, C_VIOLET);
 8001e44:	f24e 421c 	movw	r2, #58396	; 0xe41c
 8001e48:	210b      	movs	r1, #11
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f005 fe4c 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_11, C_BLACK);
 8001e50:	2200      	movs	r2, #0
 8001e52:	210b      	movs	r1, #11
 8001e54:	4620      	mov	r0, r4
 8001e56:	f005 fe21 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_11, "W");
 8001e5a:	4a4f      	ldr	r2, [pc, #316]	; (8001f98 <begin+0x814>)
 8001e5c:	210b      	movs	r1, #11
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f005 fe68 	bl	8007b34 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_11);
 8001e64:	210b      	movs	r1, #11
 8001e66:	4620      	mov	r0, r4
 8001e68:	f005 fdf8 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_1, &temp_graphic, TXB_ID_12, 220, 10, 318, 26);
 8001e6c:	f44f 769f 	mov.w	r6, #318	; 0x13e
 8001e70:	200a      	movs	r0, #10
 8001e72:	f04f 091a 	mov.w	r9, #26
 8001e76:	23dc      	movs	r3, #220	; 0xdc
 8001e78:	e88d 0241 	stmia.w	sp, {r0, r6, r9}
 8001e7c:	220c      	movs	r2, #12
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4946      	ldr	r1, [pc, #280]	; (8001f9c <begin+0x818>)
 8001e82:	f005 fd87 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_12, &FONT_10X16);
 8001e86:	465a      	mov	r2, fp
 8001e88:	210c      	movs	r1, #12
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f005 fe78 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_12, ALIGN_CENTER);
 8001e90:	2212      	movs	r2, #18
 8001e92:	210c      	movs	r1, #12
 8001e94:	4620      	mov	r0, r4
 8001e96:	f005 fe99 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_12, 	C_ORANGE);
 8001e9a:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 8001e9e:	210c      	movs	r1, #12
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f005 fe21 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_12, C_BLACK);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	210c      	movs	r1, #12
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f005 fdf6 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_12, "TEMP C");
 8001eb0:	4a3b      	ldr	r2, [pc, #236]	; (8001fa0 <begin+0x81c>)
 8001eb2:	210c      	movs	r1, #12
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	f005 fe3d 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_12);
 8001eba:	210c      	movs	r1, #12
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	f005 fdcd 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_1, &current_T_graphic, TXB_ID_13, 220, 31, 318, 71);
 8001ec2:	f04f 0e1f 	mov.w	lr, #31
 8001ec6:	2147      	movs	r1, #71	; 0x47
 8001ec8:	e9cd e600 	strd	lr, r6, [sp]
 8001ecc:	23dc      	movs	r3, #220	; 0xdc
 8001ece:	9102      	str	r1, [sp, #8]
 8001ed0:	220d      	movs	r2, #13
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	4933      	ldr	r1, [pc, #204]	; (8001fa4 <begin+0x820>)
 8001ed6:	f005 fd5d 	bl	8007994 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_13, &FONT_12X20);
 8001eda:	4642      	mov	r2, r8
 8001edc:	210d      	movs	r1, #13
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f005 fe4e 	bl	8007b80 <UG_TextboxSetFont>
		  	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_13, ALIGN_CENTER);
 8001ee4:	2212      	movs	r2, #18
 8001ee6:	210d      	movs	r1, #13
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f005 fe6f 	bl	8007bcc <UG_TextboxSetAlignment>
		  	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_13, C_DIM_GRAY);
 8001eee:	f246 322c 	movw	r2, #25388	; 0x632c
 8001ef2:	210d      	movs	r1, #13
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f005 fdf7 	bl	8007ae8 <UG_TextboxSetBackColor>
		  	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_13, C_WHITE);
 8001efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001efe:	210d      	movs	r1, #13
 8001f00:	4620      	mov	r0, r4
 8001f02:	f005 fdcb 	bl	8007a9c <UG_TextboxSetForeColor>
		   	    UG_TextboxSetText(&window_page_1, TXB_ID_13, "24.5");
 8001f06:	4a28      	ldr	r2, [pc, #160]	; (8001fa8 <begin+0x824>)
 8001f08:	210d      	movs	r1, #13
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f005 fe12 	bl	8007b34 <UG_TextboxSetText>
		   	    UG_TextboxShow(&window_page_1, TXB_ID_13);
 8001f10:	210d      	movs	r1, #13
 8001f12:	4620      	mov	r0, r4
 8001f14:	f005 fda2 	bl	8007a5c <UG_TextboxShow>
		        UG_TextboxCreate(&window_page_1, &USBC_graphic, TXB_ID_14, 220, 76, 318, 107);
 8001f18:	224c      	movs	r2, #76	; 0x4c
 8001f1a:	236b      	movs	r3, #107	; 0x6b
 8001f1c:	e9cd 2600 	strd	r2, r6, [sp]
 8001f20:	9302      	str	r3, [sp, #8]
 8001f22:	220e      	movs	r2, #14
 8001f24:	23dc      	movs	r3, #220	; 0xdc
 8001f26:	4620      	mov	r0, r4
 8001f28:	4920      	ldr	r1, [pc, #128]	; (8001fac <begin+0x828>)
 8001f2a:	f005 fd33 	bl	8007994 <UG_TextboxCreate>
		   	    UG_TextboxSetFont(&window_page_1, TXB_ID_14, &FONT_12X20);
 8001f2e:	4642      	mov	r2, r8
 8001f30:	210e      	movs	r1, #14
 8001f32:	4620      	mov	r0, r4
 8001f34:	f005 fe24 	bl	8007b80 <UG_TextboxSetFont>
		   	   	UG_TextboxSetAlignment(&window_page_1, TXB_ID_14, ALIGN_CENTER);
 8001f38:	2212      	movs	r2, #18
 8001f3a:	210e      	movs	r1, #14
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f005 fe45 	bl	8007bcc <UG_TextboxSetAlignment>
		   	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_14, C_GREEN_YELLOW);
 8001f42:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8001f46:	210e      	movs	r1, #14
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f005 fdcd 	bl	8007ae8 <UG_TextboxSetBackColor>
		   	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_14, C_BLACK);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	e02e      	b.n	8001fb0 <begin+0x82c>
 8001f52:	bf00      	nop
 8001f54:	0800bba4 	.word	0x0800bba4
 8001f58:	20000438 	.word	0x20000438
 8001f5c:	0800d768 	.word	0x0800d768
 8001f60:	0800bbac 	.word	0x0800bbac
 8001f64:	20000410 	.word	0x20000410
 8001f68:	0800bbfc 	.word	0x0800bbfc
 8001f6c:	20000384 	.word	0x20000384
 8001f70:	0800bbb4 	.word	0x0800bbb4
 8001f74:	200003e8 	.word	0x200003e8
 8001f78:	0800bbbc 	.word	0x0800bbbc
 8001f7c:	200003c0 	.word	0x200003c0
 8001f80:	0800bc04 	.word	0x0800bc04
 8001f84:	200003ac 	.word	0x200003ac
 8001f88:	0800bbc4 	.word	0x0800bbc4
 8001f8c:	20000460 	.word	0x20000460
 8001f90:	0800bbcc 	.word	0x0800bbcc
 8001f94:	2000044c 	.word	0x2000044c
 8001f98:	0800bbd4 	.word	0x0800bbd4
 8001f9c:	20001358 	.word	0x20001358
 8001fa0:	0800bbd8 	.word	0x0800bbd8
 8001fa4:	200003fc 	.word	0x200003fc
 8001fa8:	0800bbe0 	.word	0x0800bbe0
 8001fac:	2000034c 	.word	0x2000034c
 8001fb0:	210e      	movs	r1, #14
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f005 fd72 	bl	8007a9c <UG_TextboxSetForeColor>
		   	    UG_TextboxSetText(&window_page_1, TXB_ID_14, "USB C");
 8001fb8:	4ae9      	ldr	r2, [pc, #932]	; (8002360 <begin+0xbdc>)
 8001fba:	210e      	movs	r1, #14
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f005 fdb9 	bl	8007b34 <UG_TextboxSetText>
		  	   	UG_TextboxShow(&window_page_1, TXB_ID_14);
 8001fc2:	210e      	movs	r1, #14
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f005 fd49 	bl	8007a5c <UG_TextboxShow>
		  	    UG_TextboxCreate(&window_page_1, &USBB_graphic, TXB_ID_15, 220, 109, 318, 137);
 8001fca:	f04f 0c89 	mov.w	ip, #137	; 0x89
 8001fce:	236d      	movs	r3, #109	; 0x6d
 8001fd0:	e9cd 6c01 	strd	r6, ip, [sp, #4]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	23dc      	movs	r3, #220	; 0xdc
 8001fda:	4620      	mov	r0, r4
 8001fdc:	49e1      	ldr	r1, [pc, #900]	; (8002364 <begin+0xbe0>)
 8001fde:	f005 fcd9 	bl	8007994 <UG_TextboxCreate>
		  	  	UG_TextboxSetFont(&window_page_1, TXB_ID_15, &FONT_12X20);
 8001fe2:	4642      	mov	r2, r8
 8001fe4:	210f      	movs	r1, #15
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f005 fdca 	bl	8007b80 <UG_TextboxSetFont>
		  	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_15, ALIGN_CENTER);
 8001fec:	2212      	movs	r2, #18
 8001fee:	210f      	movs	r1, #15
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f005 fdeb 	bl	8007bcc <UG_TextboxSetAlignment>
		   	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_15, C_DIM_GRAY);
 8001ff6:	f246 322c 	movw	r2, #25388	; 0x632c
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f005 fd73 	bl	8007ae8 <UG_TextboxSetBackColor>
		   	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_15, C_WHITE);
 8002002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002006:	210f      	movs	r1, #15
 8002008:	4620      	mov	r0, r4
 800200a:	f005 fd47 	bl	8007a9c <UG_TextboxSetForeColor>
	    	    UG_TextboxSetText(&window_page_1, TXB_ID_15, "USB B");
 800200e:	4ad6      	ldr	r2, [pc, #856]	; (8002368 <begin+0xbe4>)
 8002010:	210f      	movs	r1, #15
 8002012:	4620      	mov	r0, r4
 8002014:	f005 fd8e 	bl	8007b34 <UG_TextboxSetText>
		   	   	UG_TextboxShow(&window_page_1, TXB_ID_15);
 8002018:	210f      	movs	r1, #15
 800201a:	4620      	mov	r0, r4
 800201c:	f005 fd1e 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_1, &set_V_graphic_page_2, TXB_ID_16, 220, 143, 318, 159);
 8002020:	238f      	movs	r3, #143	; 0x8f
 8002022:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2210      	movs	r2, #16
 800202a:	23dc      	movs	r3, #220	; 0xdc
 800202c:	4620      	mov	r0, r4
 800202e:	49cf      	ldr	r1, [pc, #828]	; (800236c <begin+0xbe8>)
 8002030:	f005 fcb0 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_16, &FONT_10X16);
 8002034:	465a      	mov	r2, fp
 8002036:	2110      	movs	r1, #16
 8002038:	4620      	mov	r0, r4
 800203a:	f005 fda1 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_16, ALIGN_CENTER);
 800203e:	2212      	movs	r2, #18
 8002040:	2110      	movs	r1, #16
 8002042:	4620      	mov	r0, r4
 8002044:	f005 fdc2 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_16, 	C_VIOLET);
 8002048:	f24e 421c 	movw	r2, #58396	; 0xe41c
 800204c:	2110      	movs	r1, #16
 800204e:	4620      	mov	r0, r4
 8002050:	f005 fd4a 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_16, C_BLACK);
 8002054:	2200      	movs	r2, #0
 8002056:	2110      	movs	r1, #16
 8002058:	4620      	mov	r0, r4
 800205a:	f005 fd1f 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_16, "SET V");
 800205e:	4ac4      	ldr	r2, [pc, #784]	; (8002370 <begin+0xbec>)
 8002060:	2110      	movs	r1, #16
 8002062:	4620      	mov	r0, r4
 8002064:	f005 fd66 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_16);
 8002068:	2110      	movs	r1, #16
 800206a:	4620      	mov	r0, r4
 800206c:	f005 fcf6 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_1, &set_V_graphic_value_page_2, TXB_ID_17, 220, 163, 318, 185);
 8002070:	23a3      	movs	r3, #163	; 0xa3
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	23b9      	movs	r3, #185	; 0xb9
 8002076:	2211      	movs	r2, #17
 8002078:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800207c:	4620      	mov	r0, r4
 800207e:	23dc      	movs	r3, #220	; 0xdc
 8002080:	49bc      	ldr	r1, [pc, #752]	; (8002374 <begin+0xbf0>)
 8002082:	f005 fc87 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_17, &FONT_12X20);
 8002086:	4642      	mov	r2, r8
 8002088:	2111      	movs	r1, #17
 800208a:	4620      	mov	r0, r4
 800208c:	f005 fd78 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_17, ALIGN_CENTER);
 8002090:	2212      	movs	r2, #18
 8002092:	2111      	movs	r1, #17
 8002094:	4620      	mov	r0, r4
 8002096:	f005 fd99 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_17, 	C_DIM_GRAY);
 800209a:	f246 322c 	movw	r2, #25388	; 0x632c
 800209e:	2111      	movs	r1, #17
 80020a0:	4620      	mov	r0, r4
 80020a2:	f005 fd21 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_17, C_WHITE);
 80020a6:	2111      	movs	r1, #17
 80020a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ac:	4620      	mov	r0, r4
 80020ae:	f005 fcf5 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_17, "00.00");
 80020b2:	4ab1      	ldr	r2, [pc, #708]	; (8002378 <begin+0xbf4>)
 80020b4:	2111      	movs	r1, #17
 80020b6:	4620      	mov	r0, r4
 80020b8:	f005 fd3c 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_17);
 80020bc:	2111      	movs	r1, #17
 80020be:	4620      	mov	r0, r4
 80020c0:	f005 fccc 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_1, &set_I_graphic_page_2, TXB_ID_18, 220, 190, 318, 206);
 80020c4:	23ce      	movs	r3, #206	; 0xce
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	23be      	movs	r3, #190	; 0xbe
 80020ca:	9601      	str	r6, [sp, #4]
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2212      	movs	r2, #18
 80020d0:	23dc      	movs	r3, #220	; 0xdc
 80020d2:	4620      	mov	r0, r4
 80020d4:	49a9      	ldr	r1, [pc, #676]	; (800237c <begin+0xbf8>)
 80020d6:	f005 fc5d 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_18, &FONT_10X16);
 80020da:	465a      	mov	r2, fp
 80020dc:	2112      	movs	r1, #18
 80020de:	4620      	mov	r0, r4
 80020e0:	f005 fd4e 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_18, ALIGN_CENTER);
 80020e4:	2212      	movs	r2, #18
 80020e6:	4620      	mov	r0, r4
 80020e8:	4611      	mov	r1, r2
 80020ea:	f005 fd6f 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_18, 	C_VIOLET);
 80020ee:	f24e 421c 	movw	r2, #58396	; 0xe41c
 80020f2:	2112      	movs	r1, #18
 80020f4:	4620      	mov	r0, r4
 80020f6:	f005 fcf7 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_18, C_BLACK);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2112      	movs	r1, #18
 80020fe:	4620      	mov	r0, r4
 8002100:	f005 fccc 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_18, "SET I");
 8002104:	4a9e      	ldr	r2, [pc, #632]	; (8002380 <begin+0xbfc>)
 8002106:	2112      	movs	r1, #18
 8002108:	4620      	mov	r0, r4
 800210a:	f005 fd13 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_18);
 800210e:	2112      	movs	r1, #18
 8002110:	4620      	mov	r0, r4
 8002112:	f005 fca3 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_1, &set_I_graphic_value_page_2, TXB_ID_19, 220, 209, 318, 231);
 8002116:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800211a:	23e7      	movs	r3, #231	; 0xe7
 800211c:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8002120:	23d1      	movs	r3, #209	; 0xd1
 8002122:	2213      	movs	r2, #19
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	4620      	mov	r0, r4
 8002128:	23dc      	movs	r3, #220	; 0xdc
 800212a:	4996      	ldr	r1, [pc, #600]	; (8002384 <begin+0xc00>)
 800212c:	f005 fc32 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_19, &FONT_12X20);
 8002130:	4642      	mov	r2, r8
 8002132:	2113      	movs	r1, #19
 8002134:	4620      	mov	r0, r4
 8002136:	f005 fd23 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_19, ALIGN_CENTER);
 800213a:	2212      	movs	r2, #18
 800213c:	2113      	movs	r1, #19
 800213e:	4620      	mov	r0, r4
 8002140:	f005 fd44 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_19, 	C_DIM_GRAY);
 8002144:	f246 322c 	movw	r2, #25388	; 0x632c
 8002148:	2113      	movs	r1, #19
 800214a:	4620      	mov	r0, r4
 800214c:	f005 fccc 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_19, C_WHITE);
 8002150:	2113      	movs	r1, #19
 8002152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002156:	4620      	mov	r0, r4
		 		UG_WindowCreate(&window_page_2, obj_buff_window_page_2, MAX_OBJECTS_WIN_GRAPH, window_page_2_callback);
 8002158:	4d8b      	ldr	r5, [pc, #556]	; (8002388 <begin+0xc04>)
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_19, C_WHITE);
 800215a:	f005 fc9f 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_19, "0.000");
 800215e:	4a8b      	ldr	r2, [pc, #556]	; (800238c <begin+0xc08>)
 8002160:	2113      	movs	r1, #19
 8002162:	4620      	mov	r0, r4
 8002164:	f005 fce6 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_19);
 8002168:	4620      	mov	r0, r4
 800216a:	2113      	movs	r1, #19
 800216c:	f005 fc76 	bl	8007a5c <UG_TextboxShow>
		 		UG_WindowCreate(&window_page_2, obj_buff_window_page_2, MAX_OBJECTS_WIN_GRAPH, window_page_2_callback);
 8002170:	2214      	movs	r2, #20
 8002172:	4b87      	ldr	r3, [pc, #540]	; (8002390 <begin+0xc0c>)
 8002174:	4628      	mov	r0, r5
 8002176:	4987      	ldr	r1, [pc, #540]	; (8002394 <begin+0xc10>)
 8002178:	f005 f91e 	bl	80073b8 <UG_WindowCreate>
				UG_WindowSetStyle(&window_page_2, WND_STYLE_2D | WND_STYLE_SHOW_TITLE);
 800217c:	2102      	movs	r1, #2
 800217e:	4628      	mov	r0, r5
 8002180:	f005 f9ec 	bl	800755c <UG_WindowSetStyle>
				UG_WindowSetBackColor(&window_page_2, C_BLACK);
 8002184:	2100      	movs	r1, #0
 8002186:	4628      	mov	r0, r5
 8002188:	f005 f980 	bl	800748c <UG_WindowSetBackColor>
				UG_WindowSetTitleColor(&window_page_2, C_BLACK); //title ending line is 22 pixel in height
 800218c:	2100      	movs	r1, #0
 800218e:	4628      	mov	r0, r5
 8002190:	f005 f998 	bl	80074c4 <UG_WindowSetTitleColor>
				UG_WindowSetTitleTextColor(&window_page_2, C_ORANGE);
 8002194:	f44f 417d 	mov.w	r1, #64768	; 0xfd00
 8002198:	4628      	mov	r0, r5
 800219a:	f005 f985 	bl	80074a8 <UG_WindowSetTitleTextColor>
				UG_WindowSetTitleTextAlignment(&window_page_2, ALIGN_CENTER);
 800219e:	2112      	movs	r1, #18
 80021a0:	4628      	mov	r0, r5
 80021a2:	f005 f9cb 	bl	800753c <UG_WindowSetTitleTextAlignment>
				UG_WindowSetTitleText(&window_page_2,"Window");
 80021a6:	4628      	mov	r0, r5
 80021a8:	497b      	ldr	r1, [pc, #492]	; (8002398 <begin+0xc14>)
 80021aa:	f005 f999 	bl	80074e0 <UG_WindowSetTitleText>
				UG_WindowSetTitleTextFont(&window_page_2,&FONT_12X20);
 80021ae:	4641      	mov	r1, r8
 80021b0:	4628      	mov	r0, r5
 80021b2:	f005 f9a3 	bl	80074fc <UG_WindowSetTitleTextFont>
		 	    UG_TextboxCreate(&window_page_2, &dummy_text_1, TXB_ID_1, 1,1,102,70);
 80021b6:	2246      	movs	r2, #70	; 0x46
 80021b8:	9202      	str	r2, [sp, #8]
 80021ba:	2266      	movs	r2, #102	; 0x66
 80021bc:	463b      	mov	r3, r7
 80021be:	4614      	mov	r4, r2
 80021c0:	e9cd 7200 	strd	r7, r2, [sp]
 80021c4:	4628      	mov	r0, r5
 80021c6:	463a      	mov	r2, r7
 80021c8:	4974      	ldr	r1, [pc, #464]	; (800239c <begin+0xc18>)
 80021ca:	f005 fbe3 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_1, &FONT_12X20);
 80021ce:	4642      	mov	r2, r8
 80021d0:	4639      	mov	r1, r7
 80021d2:	4628      	mov	r0, r5
 80021d4:	f005 fcd4 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_1, ALIGN_CENTER);
 80021d8:	4639      	mov	r1, r7
 80021da:	2212      	movs	r2, #18
 80021dc:	4628      	mov	r0, r5
 80021de:	f005 fcf5 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_1, 	C_ORANGE);
 80021e2:	4639      	mov	r1, r7
 80021e4:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 80021e8:	4628      	mov	r0, r5
 80021ea:	f005 fc7d 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_1, C_WHITE);
 80021ee:	4639      	mov	r1, r7
 80021f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f4:	4628      	mov	r0, r5
 80021f6:	f005 fc51 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_1, "PS\n Configuration");
 80021fa:	4639      	mov	r1, r7
 80021fc:	4a68      	ldr	r2, [pc, #416]	; (80023a0 <begin+0xc1c>)
 80021fe:	4628      	mov	r0, r5
 8002200:	f005 fc98 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_1);
 8002204:	4639      	mov	r1, r7
 8002206:	4628      	mov	r0, r5
 8002208:	f005 fc28 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_2, &dummy_text_2, TXB_ID_2, 1,73,102,142);
 800220c:	238e      	movs	r3, #142	; 0x8e
 800220e:	9302      	str	r3, [sp, #8]
 8002210:	2349      	movs	r3, #73	; 0x49
 8002212:	9401      	str	r4, [sp, #4]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2202      	movs	r2, #2
 8002218:	463b      	mov	r3, r7
 800221a:	4628      	mov	r0, r5
 800221c:	4961      	ldr	r1, [pc, #388]	; (80023a4 <begin+0xc20>)
 800221e:	f005 fbb9 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_2, &FONT_12X20);
 8002222:	4642      	mov	r2, r8
 8002224:	2102      	movs	r1, #2
 8002226:	4628      	mov	r0, r5
 8002228:	f005 fcaa 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_2, ALIGN_CENTER);
 800222c:	2212      	movs	r2, #18
 800222e:	2102      	movs	r1, #2
 8002230:	4628      	mov	r0, r5
 8002232:	f005 fccb 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_2, 	C_BLACK);
 8002236:	2200      	movs	r2, #0
 8002238:	2102      	movs	r1, #2
 800223a:	4628      	mov	r0, r5
 800223c:	f005 fc54 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_2, C_WHITE);
 8002240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002244:	2102      	movs	r1, #2
 8002246:	4628      	mov	r0, r5
 8002248:	f005 fc28 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_2, "Tab_2");
 800224c:	4a56      	ldr	r2, [pc, #344]	; (80023a8 <begin+0xc24>)
 800224e:	2102      	movs	r1, #2
 8002250:	4628      	mov	r0, r5
 8002252:	f005 fc6f 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_2);
 8002256:	2102      	movs	r1, #2
 8002258:	4628      	mov	r0, r5
 800225a:	f005 fbff 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_2, &dummy_text_3, TXB_ID_3, 1,146,102,215);
 800225e:	22d7      	movs	r2, #215	; 0xd7
 8002260:	2392      	movs	r3, #146	; 0x92
 8002262:	9401      	str	r4, [sp, #4]
 8002264:	9202      	str	r2, [sp, #8]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2203      	movs	r2, #3
 800226a:	463b      	mov	r3, r7
 800226c:	4628      	mov	r0, r5
 800226e:	494f      	ldr	r1, [pc, #316]	; (80023ac <begin+0xc28>)
 8002270:	f005 fb90 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_3, &FONT_12X20);
 8002274:	4642      	mov	r2, r8
 8002276:	2103      	movs	r1, #3
 8002278:	4628      	mov	r0, r5
 800227a:	f005 fc81 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_3, ALIGN_CENTER);
 800227e:	2212      	movs	r2, #18
 8002280:	2103      	movs	r1, #3
 8002282:	4628      	mov	r0, r5
 8002284:	f005 fca2 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_3, 	C_BLACK);
 8002288:	2200      	movs	r2, #0
 800228a:	2103      	movs	r1, #3
 800228c:	4628      	mov	r0, r5
 800228e:	f005 fc2b 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_3, C_WHITE);
 8002292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002296:	2103      	movs	r1, #3
 8002298:	4628      	mov	r0, r5
 800229a:	f005 fbff 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_3, "Tab_3");
 800229e:	4a44      	ldr	r2, [pc, #272]	; (80023b0 <begin+0xc2c>)
 80022a0:	2103      	movs	r1, #3
 80022a2:	4628      	mov	r0, r5
 80022a4:	f005 fc46 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_3);
 80022a8:	2103      	movs	r1, #3
 80022aa:	4628      	mov	r0, r5
 80022ac:	f005 fbd6 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_2, &dummy_text_4, TXB_ID_4, 120,34,210,50);
 80022b0:	24d2      	movs	r4, #210	; 0xd2
 80022b2:	2232      	movs	r2, #50	; 0x32
 80022b4:	2022      	movs	r0, #34	; 0x22
 80022b6:	2378      	movs	r3, #120	; 0x78
 80022b8:	e9cd 4201 	strd	r4, r2, [sp, #4]
 80022bc:	9000      	str	r0, [sp, #0]
 80022be:	2204      	movs	r2, #4
 80022c0:	4628      	mov	r0, r5
 80022c2:	493c      	ldr	r1, [pc, #240]	; (80023b4 <begin+0xc30>)
 80022c4:	f005 fb66 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_4, &FONT_10X16);
 80022c8:	465a      	mov	r2, fp
 80022ca:	2104      	movs	r1, #4
 80022cc:	4628      	mov	r0, r5
 80022ce:	f005 fc57 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_4, ALIGN_CENTER_LEFT);
 80022d2:	2211      	movs	r2, #17
 80022d4:	2104      	movs	r1, #4
 80022d6:	4628      	mov	r0, r5
 80022d8:	f005 fc78 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_4, 	C_BLACK);
 80022dc:	2200      	movs	r2, #0
 80022de:	2104      	movs	r1, #4
 80022e0:	4628      	mov	r0, r5
 80022e2:	f005 fc01 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_4, C_WHITE);
 80022e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ea:	2104      	movs	r1, #4
 80022ec:	4628      	mov	r0, r5
 80022ee:	f005 fbd5 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_4, "Voltage");
 80022f2:	4a31      	ldr	r2, [pc, #196]	; (80023b8 <begin+0xc34>)
 80022f4:	2104      	movs	r1, #4
 80022f6:	4628      	mov	r0, r5
 80022f8:	f005 fc1c 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_4);
 80022fc:	2104      	movs	r1, #4
 80022fe:	4628      	mov	r0, r5
								UG_TextboxCreate(&window_page_3, &textbox_pe, TXB_ID_0, 5, 5, 65, 27);
 8002300:	f04f 0a05 	mov.w	sl, #5
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_4);
 8002304:	f005 fbaa 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_2, &dummy_text_5, TXB_ID_5, 220,34,310,50);
 8002308:	f04f 0c32 	mov.w	ip, #50	; 0x32
 800230c:	2022      	movs	r0, #34	; 0x22
 800230e:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002312:	23dc      	movs	r3, #220	; 0xdc
 8002314:	e88d 1005 	stmia.w	sp, {r0, r2, ip}
 8002318:	4928      	ldr	r1, [pc, #160]	; (80023bc <begin+0xc38>)
 800231a:	4652      	mov	r2, sl
 800231c:	4628      	mov	r0, r5
 800231e:	f005 fb39 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_5, &FONT_10X16);
 8002322:	465a      	mov	r2, fp
 8002324:	4651      	mov	r1, sl
 8002326:	4628      	mov	r0, r5
 8002328:	f005 fc2a 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_5, ALIGN_CENTER_LEFT);
 800232c:	4651      	mov	r1, sl
 800232e:	2211      	movs	r2, #17
 8002330:	4628      	mov	r0, r5
 8002332:	f005 fc4b 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_5, 	C_BLACK);
 8002336:	4651      	mov	r1, sl
 8002338:	2200      	movs	r2, #0
 800233a:	4628      	mov	r0, r5
 800233c:	f005 fbd4 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_5, C_WHITE);
 8002340:	4651      	mov	r1, sl
 8002342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002346:	4628      	mov	r0, r5
 8002348:	f005 fba8 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_5, "Ampere");
 800234c:	4651      	mov	r1, sl
 800234e:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <begin+0xc3c>)
 8002350:	4628      	mov	r0, r5
 8002352:	f005 fbef 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_5);
 8002356:	4651      	mov	r1, sl
 8002358:	4628      	mov	r0, r5
 800235a:	f005 fb7f 	bl	8007a5c <UG_TextboxShow>
 800235e:	e031      	b.n	80023c4 <begin+0xc40>
 8002360:	0800bbe8 	.word	0x0800bbe8
 8002364:	20000338 	.word	0x20000338
 8002368:	0800bbf0 	.word	0x0800bbf0
 800236c:	2000131c 	.word	0x2000131c
 8002370:	0800bbf8 	.word	0x0800bbf8
 8002374:	20001344 	.word	0x20001344
 8002378:	0800bbac 	.word	0x0800bbac
 800237c:	200012cc 	.word	0x200012cc
 8002380:	0800bc00 	.word	0x0800bc00
 8002384:	200012f4 	.word	0x200012f4
 8002388:	20001604 	.word	0x20001604
 800238c:	0800bbbc 	.word	0x0800bbbc
 8002390:	08001735 	.word	0x08001735
 8002394:	20000cd8 	.word	0x20000cd8
 8002398:	0800bc08 	.word	0x0800bc08
 800239c:	20000474 	.word	0x20000474
 80023a0:	0800bc10 	.word	0x0800bc10
 80023a4:	200004b0 	.word	0x200004b0
 80023a8:	0800bc24 	.word	0x0800bc24
 80023ac:	200004c4 	.word	0x200004c4
 80023b0:	0800bc2c 	.word	0x0800bc2c
 80023b4:	200004d8 	.word	0x200004d8
 80023b8:	0800bc34 	.word	0x0800bc34
 80023bc:	200004ec 	.word	0x200004ec
 80023c0:	0800bc3c 	.word	0x0800bc3c
		 	    UG_TextboxCreate(&window_page_2, &dummy_text_6, TXB_ID_6, 115,55,210,95);
 80023c4:	f04f 0c37 	mov.w	ip, #55	; 0x37
 80023c8:	205f      	movs	r0, #95	; 0x5f
 80023ca:	f8cd c000 	str.w	ip, [sp]
 80023ce:	2373      	movs	r3, #115	; 0x73
 80023d0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80023d4:	2206      	movs	r2, #6
 80023d6:	4628      	mov	r0, r5
 80023d8:	49eb      	ldr	r1, [pc, #940]	; (8002788 <begin+0x1004>)
 80023da:	f005 fadb 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_6, &FONT_12X20);
 80023de:	4642      	mov	r2, r8
 80023e0:	2106      	movs	r1, #6
 80023e2:	4628      	mov	r0, r5
 80023e4:	f005 fbcc 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_6, ALIGN_CENTER);
 80023e8:	2212      	movs	r2, #18
 80023ea:	2106      	movs	r1, #6
 80023ec:	4628      	mov	r0, r5
 80023ee:	f005 fbed 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_6, 	C_ORANGE);
 80023f2:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 80023f6:	2106      	movs	r1, #6
 80023f8:	4628      	mov	r0, r5
 80023fa:	f005 fb75 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_6, C_BLACK);
 80023fe:	2200      	movs	r2, #0
 8002400:	2106      	movs	r1, #6
 8002402:	4628      	mov	r0, r5
 8002404:	f005 fb4a 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_6, "00.00V");
 8002408:	4ae0      	ldr	r2, [pc, #896]	; (800278c <begin+0x1008>)
 800240a:	2106      	movs	r1, #6
 800240c:	4628      	mov	r0, r5
 800240e:	f005 fb91 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_6);
 8002412:	2106      	movs	r1, #6
 8002414:	4628      	mov	r0, r5
 8002416:	f005 fb21 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_2, &dummy_text_7, TXB_ID_7, 215,55,310,95);
 800241a:	f04f 0c37 	mov.w	ip, #55	; 0x37
 800241e:	205f      	movs	r0, #95	; 0x5f
 8002420:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002424:	23d7      	movs	r3, #215	; 0xd7
 8002426:	e9cd c200 	strd	ip, r2, [sp]
 800242a:	9002      	str	r0, [sp, #8]
 800242c:	2207      	movs	r2, #7
 800242e:	4628      	mov	r0, r5
 8002430:	49d7      	ldr	r1, [pc, #860]	; (8002790 <begin+0x100c>)
 8002432:	f005 faaf 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_7, &FONT_12X20);
 8002436:	4642      	mov	r2, r8
 8002438:	2107      	movs	r1, #7
 800243a:	4628      	mov	r0, r5
 800243c:	f005 fba0 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_7, ALIGN_CENTER);
 8002440:	2212      	movs	r2, #18
 8002442:	2107      	movs	r1, #7
 8002444:	4628      	mov	r0, r5
 8002446:	f005 fbc1 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_7, 	C_ORANGE);
 800244a:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 800244e:	2107      	movs	r1, #7
 8002450:	4628      	mov	r0, r5
 8002452:	f005 fb49 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_7, C_BLACK);
 8002456:	2200      	movs	r2, #0
 8002458:	2107      	movs	r1, #7
 800245a:	4628      	mov	r0, r5
 800245c:	f005 fb1e 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_7, "0.000A");
 8002460:	4acc      	ldr	r2, [pc, #816]	; (8002794 <begin+0x1010>)
 8002462:	2107      	movs	r1, #7
 8002464:	4628      	mov	r0, r5
 8002466:	f005 fb65 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_7);
 800246a:	2107      	movs	r1, #7
 800246c:	4628      	mov	r0, r5
 800246e:	f005 faf5 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_2, &dummy_text_8, TXB_ID_8, 120,120,210,140);
 8002472:	f04f 0c78 	mov.w	ip, #120	; 0x78
 8002476:	208c      	movs	r0, #140	; 0x8c
 8002478:	4663      	mov	r3, ip
 800247a:	f8cd c000 	str.w	ip, [sp]
 800247e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002482:	2208      	movs	r2, #8
 8002484:	4628      	mov	r0, r5
 8002486:	49c4      	ldr	r1, [pc, #784]	; (8002798 <begin+0x1014>)
 8002488:	f005 fa84 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_8, &FONT_10X16);
 800248c:	465a      	mov	r2, fp
 800248e:	2108      	movs	r1, #8
 8002490:	4628      	mov	r0, r5
 8002492:	f005 fb75 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_8, ALIGN_CENTER_LEFT);
 8002496:	2211      	movs	r2, #17
 8002498:	2108      	movs	r1, #8
 800249a:	4628      	mov	r0, r5
 800249c:	f005 fb96 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_8, 	C_BLACK);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2108      	movs	r1, #8
 80024a4:	4628      	mov	r0, r5
 80024a6:	f005 fb1f 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_8, C_WHITE);
 80024aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ae:	2108      	movs	r1, #8
 80024b0:	4628      	mov	r0, r5
 80024b2:	f005 faf3 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_8, "Watts");
 80024b6:	4ab9      	ldr	r2, [pc, #740]	; (800279c <begin+0x1018>)
 80024b8:	2108      	movs	r1, #8
 80024ba:	4628      	mov	r0, r5
 80024bc:	f005 fb3a 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_8);
 80024c0:	2108      	movs	r1, #8
 80024c2:	4628      	mov	r0, r5
 80024c4:	f005 faca 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_2, &dummy_text_9, TXB_ID_9, 220,120,310,140);
 80024c8:	f04f 0c78 	mov.w	ip, #120	; 0x78
 80024cc:	208c      	movs	r0, #140	; 0x8c
 80024ce:	f44f 729b 	mov.w	r2, #310	; 0x136
 80024d2:	23dc      	movs	r3, #220	; 0xdc
 80024d4:	e9cd c200 	strd	ip, r2, [sp]
 80024d8:	9002      	str	r0, [sp, #8]
 80024da:	2209      	movs	r2, #9
 80024dc:	4628      	mov	r0, r5
 80024de:	49b0      	ldr	r1, [pc, #704]	; (80027a0 <begin+0x101c>)
 80024e0:	f005 fa58 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_9, &FONT_10X16);
 80024e4:	465a      	mov	r2, fp
 80024e6:	2109      	movs	r1, #9
 80024e8:	4628      	mov	r0, r5
 80024ea:	f005 fb49 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_9, ALIGN_CENTER_LEFT);
 80024ee:	2211      	movs	r2, #17
 80024f0:	2109      	movs	r1, #9
 80024f2:	4628      	mov	r0, r5
 80024f4:	f005 fb6a 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_9, 	C_BLACK);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2109      	movs	r1, #9
 80024fc:	4628      	mov	r0, r5
 80024fe:	f005 faf3 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_9, C_WHITE);
 8002502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002506:	2109      	movs	r1, #9
 8002508:	4628      	mov	r0, r5
 800250a:	f005 fac7 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_9, "Temp");
 800250e:	4aa5      	ldr	r2, [pc, #660]	; (80027a4 <begin+0x1020>)
 8002510:	2109      	movs	r1, #9
 8002512:	4628      	mov	r0, r5
 8002514:	f005 fb0e 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_9);
 8002518:	2109      	movs	r1, #9
 800251a:	4628      	mov	r0, r5
 800251c:	f005 fa9e 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_2, &dummy_text_10, TXB_ID_10, 115,145,210,185);
 8002520:	21b9      	movs	r1, #185	; 0xb9
 8002522:	9401      	str	r4, [sp, #4]
 8002524:	9102      	str	r1, [sp, #8]
 8002526:	460c      	mov	r4, r1
 8002528:	2191      	movs	r1, #145	; 0x91
 800252a:	2373      	movs	r3, #115	; 0x73
 800252c:	9100      	str	r1, [sp, #0]
 800252e:	220a      	movs	r2, #10
 8002530:	4628      	mov	r0, r5
 8002532:	499d      	ldr	r1, [pc, #628]	; (80027a8 <begin+0x1024>)
 8002534:	f005 fa2e 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_10, &FONT_12X20);
 8002538:	4642      	mov	r2, r8
 800253a:	210a      	movs	r1, #10
 800253c:	4628      	mov	r0, r5
 800253e:	f005 fb1f 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_10, ALIGN_CENTER);
 8002542:	2212      	movs	r2, #18
 8002544:	210a      	movs	r1, #10
 8002546:	4628      	mov	r0, r5
 8002548:	f005 fb40 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_10, 	C_ORANGE);
 800254c:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 8002550:	210a      	movs	r1, #10
 8002552:	4628      	mov	r0, r5
 8002554:	f005 fac8 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_10, C_BLACK);
 8002558:	2200      	movs	r2, #0
 800255a:	210a      	movs	r1, #10
 800255c:	4628      	mov	r0, r5
 800255e:	f005 fa9d 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_10, "000W");
 8002562:	4a92      	ldr	r2, [pc, #584]	; (80027ac <begin+0x1028>)
 8002564:	210a      	movs	r1, #10
 8002566:	4628      	mov	r0, r5
 8002568:	f005 fae4 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_10);
 800256c:	210a      	movs	r1, #10
 800256e:	4628      	mov	r0, r5
 8002570:	f005 fa74 	bl	8007a5c <UG_TextboxShow>
		 	    UG_TextboxCreate(&window_page_2, &dummy_text_11, TXB_ID_11, 215,145,310,185);
 8002574:	9402      	str	r4, [sp, #8]
 8002576:	2191      	movs	r1, #145	; 0x91
 8002578:	f44f 749b 	mov.w	r4, #310	; 0x136
 800257c:	23d7      	movs	r3, #215	; 0xd7
 800257e:	e9cd 1400 	strd	r1, r4, [sp]
 8002582:	220b      	movs	r2, #11
 8002584:	4628      	mov	r0, r5
 8002586:	498a      	ldr	r1, [pc, #552]	; (80027b0 <begin+0x102c>)
 8002588:	f005 fa04 	bl	8007994 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_11, &FONT_12X20);
 800258c:	4642      	mov	r2, r8
 800258e:	210b      	movs	r1, #11
 8002590:	4628      	mov	r0, r5
 8002592:	f005 faf5 	bl	8007b80 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_11, ALIGN_CENTER);
 8002596:	2212      	movs	r2, #18
 8002598:	210b      	movs	r1, #11
 800259a:	4628      	mov	r0, r5
 800259c:	f005 fb16 	bl	8007bcc <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_11, 	C_ORANGE);
 80025a0:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 80025a4:	210b      	movs	r1, #11
 80025a6:	4628      	mov	r0, r5
 80025a8:	f005 fa9e 	bl	8007ae8 <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_11, C_BLACK);
 80025ac:	2200      	movs	r2, #0
 80025ae:	210b      	movs	r1, #11
 80025b0:	4628      	mov	r0, r5
		 		UG_WindowCreate(&LOGO, obj_buff_window_logo, MAX_OBJECTS_WIN_GRAPH, window_logo_callback);
 80025b2:	f8df 9200 	ldr.w	r9, [pc, #512]	; 80027b4 <begin+0x1030>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_11, C_BLACK);
 80025b6:	f005 fa71 	bl	8007a9c <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_11, "50 C");
 80025ba:	4a7f      	ldr	r2, [pc, #508]	; (80027b8 <begin+0x1034>)
 80025bc:	210b      	movs	r1, #11
 80025be:	4628      	mov	r0, r5
 80025c0:	f005 fab8 	bl	8007b34 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_11);
 80025c4:	4628      	mov	r0, r5
 80025c6:	210b      	movs	r1, #11
 80025c8:	f005 fa48 	bl	8007a5c <UG_TextboxShow>
		 		UG_WindowCreate(&LOGO, obj_buff_window_logo, MAX_OBJECTS_WIN_GRAPH, window_logo_callback);
 80025cc:	2214      	movs	r2, #20
 80025ce:	4b7b      	ldr	r3, [pc, #492]	; (80027bc <begin+0x1038>)
 80025d0:	4648      	mov	r0, r9
 80025d2:	497b      	ldr	r1, [pc, #492]	; (80027c0 <begin+0x103c>)
 80025d4:	f004 fef0 	bl	80073b8 <UG_WindowCreate>
				UG_WindowSetStyle(&LOGO, WND_STYLE_2D | WND_STYLE_HIDE_TITLE);
 80025d8:	2100      	movs	r1, #0
 80025da:	4648      	mov	r0, r9
 80025dc:	f004 ffbe 	bl	800755c <UG_WindowSetStyle>
				UG_WindowSetBackColor(&LOGO, C_BLACK);
 80025e0:	2100      	movs	r1, #0
 80025e2:	4648      	mov	r0, r9
 80025e4:	f004 ff52 	bl	800748c <UG_WindowSetBackColor>
				UG_ImageCreate(&LOGO, &image_1, IMG_ID_1,105, 50, 245,74);
 80025e8:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
 80025ec:	2232      	movs	r2, #50	; 0x32
 80025ee:	23f5      	movs	r3, #245	; 0xf5
 80025f0:	4648      	mov	r0, r9
 80025f2:	e88d 400c 	stmia.w	sp, {r2, r3, lr}
 80025f6:	4973      	ldr	r1, [pc, #460]	; (80027c4 <begin+0x1040>)
 80025f8:	2369      	movs	r3, #105	; 0x69
 80025fa:	463a      	mov	r2, r7
 80025fc:	f005 fb0c 	bl	8007c18 <UG_ImageCreate>
				UG_ImageSetBMP(&LOGO, IMG_ID_1, &logo_FNIRSI);
 8002600:	4639      	mov	r1, r7
 8002602:	4648      	mov	r0, r9
 8002604:	4a70      	ldr	r2, [pc, #448]	; (80027c8 <begin+0x1044>)
 8002606:	f005 fb51 	bl	8007cac <UG_ImageSetBMP>
				UG_TextboxCreate(&LOGO, &website_graphic, TXB_ID_0, 1, 116, 318, 154);
 800260a:	259a      	movs	r5, #154	; 0x9a
 800260c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8002610:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8002614:	2374      	movs	r3, #116	; 0x74
 8002616:	2200      	movs	r2, #0
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	4648      	mov	r0, r9
 800261c:	463b      	mov	r3, r7
 800261e:	496b      	ldr	r1, [pc, #428]	; (80027cc <begin+0x1048>)
 8002620:	f005 f9b8 	bl	8007994 <UG_TextboxCreate>
				UG_TextboxSetFont(&LOGO, TXB_ID_0, &FONT_10X16);
 8002624:	465a      	mov	r2, fp
 8002626:	2100      	movs	r1, #0
 8002628:	4648      	mov	r0, r9
 800262a:	f005 faa9 	bl	8007b80 <UG_TextboxSetFont>
				UG_TextboxSetAlignment(&LOGO, TXB_ID_0, ALIGN_CENTER);
 800262e:	2212      	movs	r2, #18
 8002630:	2100      	movs	r1, #0
 8002632:	4648      	mov	r0, r9
 8002634:	f005 faca 	bl	8007bcc <UG_TextboxSetAlignment>
				UG_TextboxSetBackColor(&LOGO, TXB_ID_0, C_BLACK);
 8002638:	2200      	movs	r2, #0
 800263a:	4648      	mov	r0, r9
 800263c:	4611      	mov	r1, r2
 800263e:	f005 fa53 	bl	8007ae8 <UG_TextboxSetBackColor>
				UG_TextboxSetForeColor(&LOGO, TXB_ID_0, C_WHITE);
 8002642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002646:	2100      	movs	r1, #0
 8002648:	4648      	mov	r0, r9
 800264a:	f005 fa27 	bl	8007a9c <UG_TextboxSetForeColor>
				UG_TextboxSetText(&LOGO, TXB_ID_0, "http://www.fnirsi.cn");
 800264e:	4a60      	ldr	r2, [pc, #384]	; (80027d0 <begin+0x104c>)
 8002650:	2100      	movs	r1, #0
 8002652:	4648      	mov	r0, r9
 8002654:	f005 fa6e 	bl	8007b34 <UG_TextboxSetText>
				UG_TextboxShow(&LOGO, TXB_ID_0);
 8002658:	2100      	movs	r1, #0
 800265a:	4648      	mov	r0, r9
 800265c:	f005 f9fe 	bl	8007a5c <UG_TextboxShow>
				UG_TextboxCreate(&LOGO, &WD_graphic, TXB_ID_1, 90, 85, 230, 115);
 8002660:	22e6      	movs	r2, #230	; 0xe6
 8002662:	2373      	movs	r3, #115	; 0x73
 8002664:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002668:	2355      	movs	r3, #85	; 0x55
 800266a:	463a      	mov	r2, r7
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	4648      	mov	r0, r9
 8002670:	235a      	movs	r3, #90	; 0x5a
 8002672:	4958      	ldr	r1, [pc, #352]	; (80027d4 <begin+0x1050>)
 8002674:	f005 f98e 	bl	8007994 <UG_TextboxCreate>
				UG_TextboxSetFont(&LOGO, TXB_ID_1, &FONT_12X20);
 8002678:	4642      	mov	r2, r8
 800267a:	4639      	mov	r1, r7
 800267c:	4648      	mov	r0, r9
 800267e:	f005 fa7f 	bl	8007b80 <UG_TextboxSetFont>
				UG_TextboxSetAlignment(&LOGO, TXB_ID_1, ALIGN_CENTER);
 8002682:	4639      	mov	r1, r7
 8002684:	2212      	movs	r2, #18
 8002686:	4648      	mov	r0, r9
 8002688:	f005 faa0 	bl	8007bcc <UG_TextboxSetAlignment>
				UG_TextboxSetBackColor(&LOGO, TXB_ID_1, C_YELLOW);
 800268c:	4639      	mov	r1, r7
 800268e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002692:	4648      	mov	r0, r9
 8002694:	f005 fa28 	bl	8007ae8 <UG_TextboxSetBackColor>
				UG_TextboxSetForeColor(&LOGO, TXB_ID_1, C_BLACK);
 8002698:	4639      	mov	r1, r7
 800269a:	2200      	movs	r2, #0
 800269c:	4648      	mov	r0, r9
								UG_WindowCreate(&window_page_3, obj_buff_window_page_3, MAX_OBJECTS_WIN_PAGE_3, window_page_3_callback);
 800269e:	4e4e      	ldr	r6, [pc, #312]	; (80027d8 <begin+0x1054>)
				UG_TextboxSetForeColor(&LOGO, TXB_ID_1, C_BLACK);
 80026a0:	f005 f9fc 	bl	8007a9c <UG_TextboxSetForeColor>
				UG_TextboxSetText(&LOGO, TXB_ID_1, "WD-02");
 80026a4:	4639      	mov	r1, r7
 80026a6:	4a4d      	ldr	r2, [pc, #308]	; (80027dc <begin+0x1058>)
 80026a8:	4648      	mov	r0, r9
 80026aa:	f005 fa43 	bl	8007b34 <UG_TextboxSetText>
				UG_TextboxShow(&LOGO, TXB_ID_1);
 80026ae:	4639      	mov	r1, r7
 80026b0:	4648      	mov	r0, r9
 80026b2:	f005 f9d3 	bl	8007a5c <UG_TextboxShow>
								UG_WindowCreate(&window_page_3, obj_buff_window_page_3, MAX_OBJECTS_WIN_PAGE_3, window_page_3_callback);
 80026b6:	221b      	movs	r2, #27
 80026b8:	4b49      	ldr	r3, [pc, #292]	; (80027e0 <begin+0x105c>)
 80026ba:	4630      	mov	r0, r6
 80026bc:	4949      	ldr	r1, [pc, #292]	; (80027e4 <begin+0x1060>)
 80026be:	f004 fe7b 	bl	80073b8 <UG_WindowCreate>
								UG_WindowSetStyle(&window_page_3, WND_STYLE_2D | WND_STYLE_HIDE_TITLE);
 80026c2:	2100      	movs	r1, #0
 80026c4:	4630      	mov	r0, r6
 80026c6:	f004 ff49 	bl	800755c <UG_WindowSetStyle>
								UG_WindowSetBackColor(&window_page_3, C_BLACK);
 80026ca:	2100      	movs	r1, #0
 80026cc:	4630      	mov	r0, r6
 80026ce:	f004 fedd 	bl	800748c <UG_WindowSetBackColor>
								UG_TextboxCreate(&window_page_3, &textbox_pe, TXB_ID_0, 5, 5, 65, 27);
 80026d2:	f04f 091b 	mov.w	r9, #27
 80026d6:	2341      	movs	r3, #65	; 0x41
 80026d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80026dc:	f8cd a000 	str.w	sl, [sp]
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	4653      	mov	r3, sl
 80026e6:	4630      	mov	r0, r6
 80026e8:	493f      	ldr	r1, [pc, #252]	; (80027e8 <begin+0x1064>)
 80026ea:	f005 f953 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_0, &FONT_10X16);
 80026ee:	465a      	mov	r2, fp
 80026f0:	2100      	movs	r1, #0
 80026f2:	4630      	mov	r0, r6
 80026f4:	f005 fa44 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_0, ALIGN_CENTER);
 80026f8:	2212      	movs	r2, #18
 80026fa:	2100      	movs	r1, #0
 80026fc:	4630      	mov	r0, r6
 80026fe:	f005 fa65 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_0, C_YELLOW);
 8002702:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002706:	2100      	movs	r1, #0
 8002708:	4630      	mov	r0, r6
 800270a:	f005 f9ed 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_0, C_BLACK);
 800270e:	2200      	movs	r2, #0
 8002710:	4630      	mov	r0, r6
 8002712:	4611      	mov	r1, r2
 8002714:	f005 f9c2 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_0, "PE2.0");
 8002718:	4a34      	ldr	r2, [pc, #208]	; (80027ec <begin+0x1068>)
 800271a:	2100      	movs	r1, #0
 800271c:	4630      	mov	r0, r6
 800271e:	f005 fa09 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_0);
 8002722:	2100      	movs	r1, #0
 8002724:	4630      	mov	r0, r6
 8002726:	f005 f999 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_temp, TXB_ID_1, 180, 5, 225, 27);
 800272a:	23e1      	movs	r3, #225	; 0xe1
 800272c:	463a      	mov	r2, r7
 800272e:	f8cd 9008 	str.w	r9, [sp, #8]
 8002732:	f8cd a000 	str.w	sl, [sp]
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	4630      	mov	r0, r6
 800273a:	23b4      	movs	r3, #180	; 0xb4
 800273c:	492c      	ldr	r1, [pc, #176]	; (80027f0 <begin+0x106c>)
 800273e:	f005 f929 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_1, &FONT_10X16);
 8002742:	465a      	mov	r2, fp
 8002744:	4639      	mov	r1, r7
 8002746:	4630      	mov	r0, r6
 8002748:	f005 fa1a 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_1, ALIGN_CENTER);
 800274c:	4639      	mov	r1, r7
 800274e:	2212      	movs	r2, #18
 8002750:	4630      	mov	r0, r6
 8002752:	f005 fa3b 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_1, C_YELLOW);
 8002756:	4639      	mov	r1, r7
 8002758:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800275c:	4630      	mov	r0, r6
 800275e:	f005 f9c3 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_1, C_BLACK);
 8002762:	4639      	mov	r1, r7
 8002764:	2200      	movs	r2, #0
 8002766:	4630      	mov	r0, r6
 8002768:	f005 f998 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_1, "TEMP");
 800276c:	4639      	mov	r1, r7
 800276e:	4a21      	ldr	r2, [pc, #132]	; (80027f4 <begin+0x1070>)
 8002770:	4630      	mov	r0, r6
 8002772:	f005 f9df 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_1);
 8002776:	4639      	mov	r1, r7
 8002778:	4630      	mov	r0, r6
 800277a:	f005 f96f 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_temp_value, TXB_ID_2, 230, 5, 290, 27);
 800277e:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002782:	23e6      	movs	r3, #230	; 0xe6
 8002784:	e038      	b.n	80027f8 <begin+0x1074>
 8002786:	bf00      	nop
 8002788:	20000500 	.word	0x20000500
 800278c:	0800bb94 	.word	0x0800bb94
 8002790:	20000514 	.word	0x20000514
 8002794:	0800bb84 	.word	0x0800bb84
 8002798:	20000528 	.word	0x20000528
 800279c:	0800bc44 	.word	0x0800bc44
 80027a0:	2000053c 	.word	0x2000053c
 80027a4:	0800bc4c 	.word	0x0800bc4c
 80027a8:	20000488 	.word	0x20000488
 80027ac:	0800bc54 	.word	0x0800bc54
 80027b0:	2000049c 	.word	0x2000049c
 80027b4:	200002f0 	.word	0x200002f0
 80027b8:	0800bc5c 	.word	0x0800bc5c
 80027bc:	08001731 	.word	0x08001731
 80027c0:	20000558 	.word	0x20000558
 80027c4:	20000550 	.word	0x20000550
 80027c8:	0800d6e8 	.word	0x0800d6e8
 80027cc:	20001588 	.word	0x20001588
 80027d0:	0800bc64 	.word	0x0800bc64
 80027d4:	20000360 	.word	0x20000360
 80027d8:	20001638 	.word	0x20001638
 80027dc:	0800bc7c 	.word	0x0800bc7c
 80027e0:	0800340d 	.word	0x0800340d
 80027e4:	20000f58 	.word	0x20000f58
 80027e8:	200014e8 	.word	0x200014e8
 80027ec:	0800bc84 	.word	0x0800bc84
 80027f0:	200014fc 	.word	0x200014fc
 80027f4:	0800bc8c 	.word	0x0800bc8c
 80027f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80027fc:	f8cd a000 	str.w	sl, [sp]
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4630      	mov	r0, r6
 8002804:	2202      	movs	r2, #2
 8002806:	49ec      	ldr	r1, [pc, #944]	; (8002bb8 <begin+0x1434>)
 8002808:	f005 f8c4 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_2, &FONT_10X16);
 800280c:	465a      	mov	r2, fp
 800280e:	2102      	movs	r1, #2
 8002810:	4630      	mov	r0, r6
 8002812:	f005 f9b5 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_2, ALIGN_CENTER);
 8002816:	2212      	movs	r2, #18
 8002818:	2102      	movs	r1, #2
 800281a:	4630      	mov	r0, r6
 800281c:	f005 f9d6 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_2, C_BLACK);
 8002820:	2200      	movs	r2, #0
 8002822:	2102      	movs	r1, #2
 8002824:	4630      	mov	r0, r6
 8002826:	f005 f95f 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_2, C_YELLOW);
 800282a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800282e:	2102      	movs	r1, #2
 8002830:	4630      	mov	r0, r6
 8002832:	f005 f933 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxShow(&window_page_3, TXB_ID_2);
 8002836:	2102      	movs	r1, #2
 8002838:	4630      	mov	r0, r6
 800283a:	f005 f90f 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_temp_symbol, TXB_ID_3, 295, 5, 310, 27);
 800283e:	f240 1327 	movw	r3, #295	; 0x127
 8002842:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8002846:	f8cd a000 	str.w	sl, [sp]
 800284a:	2203      	movs	r2, #3
 800284c:	4630      	mov	r0, r6
 800284e:	49db      	ldr	r1, [pc, #876]	; (8002bbc <begin+0x1438>)
 8002850:	f005 f8a0 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_3, &FONT_10X16);
 8002854:	465a      	mov	r2, fp
 8002856:	2103      	movs	r1, #3
 8002858:	4630      	mov	r0, r6
 800285a:	f005 f991 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_3, ALIGN_CENTER);
 800285e:	2212      	movs	r2, #18
 8002860:	2103      	movs	r1, #3
 8002862:	4630      	mov	r0, r6
 8002864:	f005 f9b2 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_3, C_BLACK);
 8002868:	2200      	movs	r2, #0
 800286a:	2103      	movs	r1, #3
 800286c:	4630      	mov	r0, r6
 800286e:	f005 f93b 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_3, C_YELLOW);
 8002872:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002876:	2103      	movs	r1, #3
 8002878:	4630      	mov	r0, r6
 800287a:	f005 f90f 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_3, "C");
 800287e:	4ad0      	ldr	r2, [pc, #832]	; (8002bc0 <begin+0x143c>)
 8002880:	2103      	movs	r1, #3
 8002882:	4630      	mov	r0, r6
 8002884:	f005 f956 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_3);
 8002888:	2103      	movs	r1, #3
 800288a:	4630      	mov	r0, r6
 800288c:	f005 f8e6 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_usbc, TXB_ID_4, 5, 32, 50, 59);
 8002890:	f04f 093b 	mov.w	r9, #59	; 0x3b
 8002894:	2720      	movs	r7, #32
 8002896:	2232      	movs	r2, #50	; 0x32
 8002898:	4653      	mov	r3, sl
 800289a:	e9cd 2901 	strd	r2, r9, [sp, #4]
 800289e:	9700      	str	r7, [sp, #0]
 80028a0:	2204      	movs	r2, #4
 80028a2:	4630      	mov	r0, r6
 80028a4:	49c7      	ldr	r1, [pc, #796]	; (8002bc4 <begin+0x1440>)
 80028a6:	f005 f875 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_4, &FONT_10X16);
 80028aa:	465a      	mov	r2, fp
 80028ac:	2104      	movs	r1, #4
 80028ae:	4630      	mov	r0, r6
 80028b0:	f005 f966 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_4, ALIGN_CENTER);
 80028b4:	2212      	movs	r2, #18
 80028b6:	2104      	movs	r1, #4
 80028b8:	4630      	mov	r0, r6
 80028ba:	f005 f987 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_4, C_BLACK);
 80028be:	2200      	movs	r2, #0
 80028c0:	2104      	movs	r1, #4
 80028c2:	4630      	mov	r0, r6
 80028c4:	f005 f8ea 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_4, "USBC");
 80028c8:	4abf      	ldr	r2, [pc, #764]	; (8002bc8 <begin+0x1444>)
 80028ca:	2104      	movs	r1, #4
 80028cc:	4630      	mov	r0, r6
 80028ce:	f005 f931 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_4);
 80028d2:	2104      	movs	r1, #4
 80028d4:	4630      	mov	r0, r6
 80028d6:	f005 f8c1 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_usba, TXB_ID_5, 175, 32, 215, 59);
 80028da:	22d7      	movs	r2, #215	; 0xd7
 80028dc:	23af      	movs	r3, #175	; 0xaf
 80028de:	e9cd 2901 	strd	r2, r9, [sp, #4]
 80028e2:	9700      	str	r7, [sp, #0]
 80028e4:	4652      	mov	r2, sl
 80028e6:	4630      	mov	r0, r6
 80028e8:	49b8      	ldr	r1, [pc, #736]	; (8002bcc <begin+0x1448>)
 80028ea:	f005 f853 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_5, &FONT_10X16);
 80028ee:	465a      	mov	r2, fp
 80028f0:	4651      	mov	r1, sl
 80028f2:	4630      	mov	r0, r6
 80028f4:	f005 f944 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_5, ALIGN_CENTER);
 80028f8:	4651      	mov	r1, sl
 80028fa:	2212      	movs	r2, #18
 80028fc:	4630      	mov	r0, r6
 80028fe:	f005 f965 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_5, C_BLACK);
 8002902:	4651      	mov	r1, sl
 8002904:	2200      	movs	r2, #0
 8002906:	4630      	mov	r0, r6
 8002908:	f005 f8c8 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_5, "USBA");
 800290c:	4651      	mov	r1, sl
 800290e:	4ab0      	ldr	r2, [pc, #704]	; (8002bd0 <begin+0x144c>)
 8002910:	4630      	mov	r0, r6
 8002912:	f005 f90f 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_5);
 8002916:	4651      	mov	r1, sl
 8002918:	4630      	mov	r0, r6
 800291a:	f005 f89f 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_usbc_voltage_value, TXB_ID_6, 5, 64, 130, 104);
 800291e:	2368      	movs	r3, #104	; 0x68
 8002920:	2182      	movs	r1, #130	; 0x82
 8002922:	461f      	mov	r7, r3
 8002924:	9302      	str	r3, [sp, #8]
 8002926:	2340      	movs	r3, #64	; 0x40
 8002928:	2206      	movs	r2, #6
 800292a:	e9cd 3100 	strd	r3, r1, [sp]
 800292e:	4630      	mov	r0, r6
 8002930:	4653      	mov	r3, sl
 8002932:	49a8      	ldr	r1, [pc, #672]	; (8002bd4 <begin+0x1450>)
 8002934:	f005 f82e 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_6, &FONT_24X40);
 8002938:	2106      	movs	r1, #6
 800293a:	4630      	mov	r0, r6
 800293c:	4aa6      	ldr	r2, [pc, #664]	; (8002bd8 <begin+0x1454>)
 800293e:	f005 f91f 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_6, ALIGN_CENTER);
 8002942:	2212      	movs	r2, #18
 8002944:	2106      	movs	r1, #6
 8002946:	4630      	mov	r0, r6
 8002948:	f005 f940 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_6, C_YELLOW_GREEN);
 800294c:	f249 6246 	movw	r2, #38470	; 0x9646
 8002950:	2106      	movs	r1, #6
 8002952:	4630      	mov	r0, r6
 8002954:	f005 f8c8 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_6, C_WHITE);
 8002958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800295c:	2106      	movs	r1, #6
 800295e:	4630      	mov	r0, r6
 8002960:	f005 f89c 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxShow(&window_page_3, TXB_ID_6);
 8002964:	2106      	movs	r1, #6
 8002966:	4630      	mov	r0, r6
 8002968:	f005 f878 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_usbc_voltage_symbol, TXB_ID_7, 130, 64, 145, 104);
 800296c:	f04f 0891 	mov.w	r8, #145	; 0x91
 8002970:	2340      	movs	r3, #64	; 0x40
 8002972:	9702      	str	r7, [sp, #8]
 8002974:	e9cd 3800 	strd	r3, r8, [sp]
 8002978:	2207      	movs	r2, #7
 800297a:	2382      	movs	r3, #130	; 0x82
 800297c:	4630      	mov	r0, r6
 800297e:	4997      	ldr	r1, [pc, #604]	; (8002bdc <begin+0x1458>)
 8002980:	f005 f808 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_7, &FONT_10X16);
 8002984:	465a      	mov	r2, fp
 8002986:	2107      	movs	r1, #7
 8002988:	4630      	mov	r0, r6
 800298a:	f005 f8f9 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_7, ALIGN_V_BOTTOM);
 800298e:	2220      	movs	r2, #32
 8002990:	2107      	movs	r1, #7
 8002992:	4630      	mov	r0, r6
 8002994:	f005 f91a 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_7, C_YELLOW_GREEN);
 8002998:	f249 6246 	movw	r2, #38470	; 0x9646
 800299c:	2107      	movs	r1, #7
 800299e:	4630      	mov	r0, r6
 80029a0:	f005 f8a2 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_7, C_WHITE);
 80029a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029a8:	2107      	movs	r1, #7
 80029aa:	4630      	mov	r0, r6
 80029ac:	f005 f876 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_7, "V");
 80029b0:	4a8b      	ldr	r2, [pc, #556]	; (8002be0 <begin+0x145c>)
 80029b2:	2107      	movs	r1, #7
 80029b4:	4630      	mov	r0, r6
 80029b6:	f005 f8bd 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_7);
 80029ba:	2107      	movs	r1, #7
 80029bc:	4630      	mov	r0, r6
 80029be:	f005 f84d 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_usba_voltage_value, TXB_ID_8, 175, 64, 300, 104);
 80029c2:	2340      	movs	r3, #64	; 0x40
 80029c4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029c8:	9702      	str	r7, [sp, #8]
 80029ca:	e9cd 3200 	strd	r3, r2, [sp]
 80029ce:	4630      	mov	r0, r6
 80029d0:	23af      	movs	r3, #175	; 0xaf
 80029d2:	2208      	movs	r2, #8
 80029d4:	4983      	ldr	r1, [pc, #524]	; (8002be4 <begin+0x1460>)
 80029d6:	f004 ffdd 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_8, &FONT_24X40);
 80029da:	2108      	movs	r1, #8
 80029dc:	4630      	mov	r0, r6
 80029de:	4a7e      	ldr	r2, [pc, #504]	; (8002bd8 <begin+0x1454>)
 80029e0:	f005 f8ce 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_8, ALIGN_CENTER);
 80029e4:	2212      	movs	r2, #18
 80029e6:	2108      	movs	r1, #8
 80029e8:	4630      	mov	r0, r6
 80029ea:	f005 f8ef 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_8, C_YELLOW_GREEN);
 80029ee:	f249 6246 	movw	r2, #38470	; 0x9646
 80029f2:	2108      	movs	r1, #8
 80029f4:	4630      	mov	r0, r6
 80029f6:	f005 f877 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_8, C_WHITE);
 80029fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029fe:	2108      	movs	r1, #8
 8002a00:	4630      	mov	r0, r6
 8002a02:	f005 f84b 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxShow(&window_page_3, TXB_ID_8);
 8002a06:	2108      	movs	r1, #8
 8002a08:	4630      	mov	r0, r6
 8002a0a:	f005 f827 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_usba_voltage_symbol, TXB_ID_9, 300, 64, 310, 104);
 8002a0e:	2340      	movs	r3, #64	; 0x40
 8002a10:	9702      	str	r7, [sp, #8]
 8002a12:	e9cd 3400 	strd	r3, r4, [sp]
 8002a16:	2209      	movs	r2, #9
 8002a18:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002a1c:	4630      	mov	r0, r6
 8002a1e:	4972      	ldr	r1, [pc, #456]	; (8002be8 <begin+0x1464>)
 8002a20:	f004 ffb8 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_9, &FONT_10X16);
 8002a24:	465a      	mov	r2, fp
 8002a26:	2109      	movs	r1, #9
 8002a28:	4630      	mov	r0, r6
 8002a2a:	f005 f8a9 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_9, ALIGN_V_BOTTOM);
 8002a2e:	2220      	movs	r2, #32
 8002a30:	2109      	movs	r1, #9
 8002a32:	4630      	mov	r0, r6
 8002a34:	f005 f8ca 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_9, C_YELLOW_GREEN);
 8002a38:	f249 6246 	movw	r2, #38470	; 0x9646
 8002a3c:	2109      	movs	r1, #9
 8002a3e:	4630      	mov	r0, r6
 8002a40:	f005 f852 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_9, C_WHITE);
 8002a44:	2109      	movs	r1, #9
 8002a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a4a:	4630      	mov	r0, r6
 8002a4c:	f005 f826 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_9, "V");
 8002a50:	4a63      	ldr	r2, [pc, #396]	; (8002be0 <begin+0x145c>)
 8002a52:	2109      	movs	r1, #9
 8002a54:	4630      	mov	r0, r6
 8002a56:	f005 f86d 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_9);
 8002a5a:	2109      	movs	r1, #9
 8002a5c:	4630      	mov	r0, r6
 8002a5e:	f004 fffd 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_usbc_current_value, TXB_ID_10, 5, 109, 130, 149);
 8002a62:	2395      	movs	r3, #149	; 0x95
 8002a64:	2082      	movs	r0, #130	; 0x82
 8002a66:	461f      	mov	r7, r3
 8002a68:	9302      	str	r3, [sp, #8]
 8002a6a:	236d      	movs	r3, #109	; 0x6d
 8002a6c:	220a      	movs	r2, #10
 8002a6e:	e9cd 3000 	strd	r3, r0, [sp]
 8002a72:	495e      	ldr	r1, [pc, #376]	; (8002bec <begin+0x1468>)
 8002a74:	4653      	mov	r3, sl
 8002a76:	4630      	mov	r0, r6
 8002a78:	f004 ff8c 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_10, &FONT_24X40);
 8002a7c:	210a      	movs	r1, #10
 8002a7e:	4630      	mov	r0, r6
 8002a80:	4a55      	ldr	r2, [pc, #340]	; (8002bd8 <begin+0x1454>)
 8002a82:	f005 f87d 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_10, ALIGN_CENTER);
 8002a86:	2212      	movs	r2, #18
 8002a88:	210a      	movs	r1, #10
 8002a8a:	4630      	mov	r0, r6
 8002a8c:	f005 f89e 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_10, C_BROWN);
 8002a90:	f24a 1245 	movw	r2, #41285	; 0xa145
 8002a94:	210a      	movs	r1, #10
 8002a96:	4630      	mov	r0, r6
 8002a98:	f005 f826 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_10, C_WHITE);
 8002a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aa0:	210a      	movs	r1, #10
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	f004 fffa 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxShow(&window_page_3, TXB_ID_10);
 8002aa8:	210a      	movs	r1, #10
 8002aaa:	4630      	mov	r0, r6
 8002aac:	f004 ffd6 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_usbc_current_symbol, TXB_ID_11, 130, 109, 145, 149);
 8002ab0:	236d      	movs	r3, #109	; 0x6d
 8002ab2:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	220b      	movs	r2, #11
 8002aba:	2382      	movs	r3, #130	; 0x82
 8002abc:	4630      	mov	r0, r6
 8002abe:	494c      	ldr	r1, [pc, #304]	; (8002bf0 <begin+0x146c>)
 8002ac0:	f004 ff68 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_11, &FONT_10X16);
 8002ac4:	465a      	mov	r2, fp
 8002ac6:	210b      	movs	r1, #11
 8002ac8:	4630      	mov	r0, r6
 8002aca:	f005 f859 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_11, ALIGN_V_BOTTOM);
 8002ace:	2220      	movs	r2, #32
 8002ad0:	210b      	movs	r1, #11
 8002ad2:	4630      	mov	r0, r6
 8002ad4:	f005 f87a 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_11, C_BROWN);
 8002ad8:	f24a 1245 	movw	r2, #41285	; 0xa145
 8002adc:	210b      	movs	r1, #11
 8002ade:	4630      	mov	r0, r6
 8002ae0:	f005 f802 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_11, C_WHITE);
 8002ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ae8:	210b      	movs	r1, #11
 8002aea:	4630      	mov	r0, r6
 8002aec:	f004 ffd6 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_11, "A");
 8002af0:	4a40      	ldr	r2, [pc, #256]	; (8002bf4 <begin+0x1470>)
 8002af2:	210b      	movs	r1, #11
 8002af4:	4630      	mov	r0, r6
 8002af6:	f005 f81d 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_11);
 8002afa:	210b      	movs	r1, #11
 8002afc:	4630      	mov	r0, r6
 8002afe:	f004 ffad 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_usba_current_value, TXB_ID_12, 175, 109, 300, 149);
 8002b02:	236d      	movs	r3, #109	; 0x6d
 8002b04:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002b08:	9702      	str	r7, [sp, #8]
 8002b0a:	e9cd 3100 	strd	r3, r1, [sp]
 8002b0e:	220c      	movs	r2, #12
 8002b10:	23af      	movs	r3, #175	; 0xaf
 8002b12:	4630      	mov	r0, r6
 8002b14:	4938      	ldr	r1, [pc, #224]	; (8002bf8 <begin+0x1474>)
 8002b16:	f004 ff3d 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_12, &FONT_24X40);
 8002b1a:	210c      	movs	r1, #12
 8002b1c:	4630      	mov	r0, r6
 8002b1e:	4a2e      	ldr	r2, [pc, #184]	; (8002bd8 <begin+0x1454>)
 8002b20:	f005 f82e 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_12, ALIGN_CENTER);
 8002b24:	2212      	movs	r2, #18
 8002b26:	210c      	movs	r1, #12
 8002b28:	4630      	mov	r0, r6
 8002b2a:	f005 f84f 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_12, C_BROWN);
 8002b2e:	f24a 1245 	movw	r2, #41285	; 0xa145
 8002b32:	210c      	movs	r1, #12
 8002b34:	4630      	mov	r0, r6
 8002b36:	f004 ffd7 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_12, C_WHITE);
 8002b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b3e:	210c      	movs	r1, #12
 8002b40:	4630      	mov	r0, r6
 8002b42:	f004 ffab 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxShow(&window_page_3, TXB_ID_12);
 8002b46:	210c      	movs	r1, #12
 8002b48:	4630      	mov	r0, r6
 8002b4a:	f004 ff87 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_usba_current_symbol, TXB_ID_13, 300, 109, 310, 149);
 8002b4e:	236d      	movs	r3, #109	; 0x6d
 8002b50:	9702      	str	r7, [sp, #8]
 8002b52:	e9cd 3400 	strd	r3, r4, [sp]
 8002b56:	220d      	movs	r2, #13
 8002b58:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002b5c:	4630      	mov	r0, r6
 8002b5e:	4927      	ldr	r1, [pc, #156]	; (8002bfc <begin+0x1478>)
 8002b60:	f004 ff18 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_13, &FONT_10X16);
 8002b64:	465a      	mov	r2, fp
 8002b66:	210d      	movs	r1, #13
 8002b68:	4630      	mov	r0, r6
 8002b6a:	f005 f809 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_13, ALIGN_V_BOTTOM);
 8002b6e:	2220      	movs	r2, #32
 8002b70:	210d      	movs	r1, #13
 8002b72:	4630      	mov	r0, r6
 8002b74:	f005 f82a 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_13, C_BROWN);
 8002b78:	f24a 1245 	movw	r2, #41285	; 0xa145
 8002b7c:	210d      	movs	r1, #13
 8002b7e:	4630      	mov	r0, r6
 8002b80:	f004 ffb2 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_13, C_WHITE);
 8002b84:	210d      	movs	r1, #13
 8002b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	f004 ff86 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_13, "A");
 8002b90:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <begin+0x1470>)
 8002b92:	210d      	movs	r1, #13
 8002b94:	4630      	mov	r0, r6
 8002b96:	f004 ffcd 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_13);
 8002b9a:	210d      	movs	r1, #13
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	f004 ff5d 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_usbc_watt_value, TXB_ID_14, 5, 154, 130, 194);
 8002ba2:	4653      	mov	r3, sl
 8002ba4:	2282      	movs	r2, #130	; 0x82
 8002ba6:	f04f 0ac2 	mov.w	sl, #194	; 0xc2
 8002baa:	9500      	str	r5, [sp, #0]
 8002bac:	e9cd 2a01 	strd	r2, sl, [sp, #4]
 8002bb0:	4630      	mov	r0, r6
 8002bb2:	220e      	movs	r2, #14
 8002bb4:	e024      	b.n	8002c00 <begin+0x147c>
 8002bb6:	bf00      	nop
 8002bb8:	20001524 	.word	0x20001524
 8002bbc:	20001510 	.word	0x20001510
 8002bc0:	0800bbec 	.word	0x0800bbec
 8002bc4:	20001560 	.word	0x20001560
 8002bc8:	0800bc94 	.word	0x0800bc94
 8002bcc:	20001538 	.word	0x20001538
 8002bd0:	0800bc9c 	.word	0x0800bc9c
 8002bd4:	200014ac 	.word	0x200014ac
 8002bd8:	0800d768 	.word	0x0800d768
 8002bdc:	20001498 	.word	0x20001498
 8002be0:	0800bbfc 	.word	0x0800bbfc
 8002be4:	20001434 	.word	0x20001434
 8002be8:	20001420 	.word	0x20001420
 8002bec:	20001484 	.word	0x20001484
 8002bf0:	20001470 	.word	0x20001470
 8002bf4:	0800bca4 	.word	0x0800bca4
 8002bf8:	2000140c 	.word	0x2000140c
 8002bfc:	200013f8 	.word	0x200013f8
 8002c00:	49e7      	ldr	r1, [pc, #924]	; (8002fa0 <begin+0x181c>)
 8002c02:	f004 fec7 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_14, &FONT_24X40);
 8002c06:	210e      	movs	r1, #14
 8002c08:	4630      	mov	r0, r6
 8002c0a:	4ae6      	ldr	r2, [pc, #920]	; (8002fa4 <begin+0x1820>)
 8002c0c:	f004 ffb8 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_14, ALIGN_CENTER);
 8002c10:	2212      	movs	r2, #18
 8002c12:	210e      	movs	r1, #14
 8002c14:	4630      	mov	r0, r6
 8002c16:	f004 ffd9 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_14, C_INDIGO);
 8002c1a:	f644 020f 	movw	r2, #18447	; 0x480f
 8002c1e:	210e      	movs	r1, #14
 8002c20:	4630      	mov	r0, r6
 8002c22:	f004 ff61 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_14, C_WHITE);
 8002c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c2a:	210e      	movs	r1, #14
 8002c2c:	4630      	mov	r0, r6
 8002c2e:	f004 ff35 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxShow(&window_page_3, TXB_ID_14);
 8002c32:	210e      	movs	r1, #14
 8002c34:	4630      	mov	r0, r6
 8002c36:	f004 ff11 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_usbc_watt_symbol, TXB_ID_15, 130, 154, 145, 194);
 8002c3a:	2382      	movs	r3, #130	; 0x82
 8002c3c:	9500      	str	r5, [sp, #0]
 8002c3e:	220f      	movs	r2, #15
 8002c40:	4630      	mov	r0, r6
 8002c42:	e9cd 8a01 	strd	r8, sl, [sp, #4]
 8002c46:	49d8      	ldr	r1, [pc, #864]	; (8002fa8 <begin+0x1824>)
 8002c48:	f004 fea4 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_15, &FONT_10X16);
 8002c4c:	465a      	mov	r2, fp
 8002c4e:	210f      	movs	r1, #15
 8002c50:	4630      	mov	r0, r6
 8002c52:	f004 ff95 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_15, ALIGN_V_BOTTOM);
 8002c56:	2220      	movs	r2, #32
 8002c58:	210f      	movs	r1, #15
 8002c5a:	4630      	mov	r0, r6
 8002c5c:	f004 ffb6 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_15, C_INDIGO);
 8002c60:	f644 020f 	movw	r2, #18447	; 0x480f
 8002c64:	210f      	movs	r1, #15
 8002c66:	4630      	mov	r0, r6
 8002c68:	f004 ff3e 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_15, C_WHITE);
 8002c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c70:	210f      	movs	r1, #15
 8002c72:	4630      	mov	r0, r6
 8002c74:	f004 ff12 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_15, "W");
 8002c78:	4acc      	ldr	r2, [pc, #816]	; (8002fac <begin+0x1828>)
 8002c7a:	210f      	movs	r1, #15
 8002c7c:	4630      	mov	r0, r6
 8002c7e:	f004 ff59 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_15);
 8002c82:	210f      	movs	r1, #15
 8002c84:	4630      	mov	r0, r6
 8002c86:	f004 fee9 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_usba_watt_value, TXB_ID_16, 175, 154, 300, 194);
 8002c8a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002c8e:	23af      	movs	r3, #175	; 0xaf
 8002c90:	e9cd 5100 	strd	r5, r1, [sp]
 8002c94:	2210      	movs	r2, #16
 8002c96:	4630      	mov	r0, r6
 8002c98:	49c5      	ldr	r1, [pc, #788]	; (8002fb0 <begin+0x182c>)
 8002c9a:	f8cd a008 	str.w	sl, [sp, #8]
 8002c9e:	f004 fe79 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_16, &FONT_24X40);
 8002ca2:	2110      	movs	r1, #16
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	4abf      	ldr	r2, [pc, #764]	; (8002fa4 <begin+0x1820>)
 8002ca8:	f004 ff6a 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_16, ALIGN_CENTER);
 8002cac:	2212      	movs	r2, #18
 8002cae:	2110      	movs	r1, #16
 8002cb0:	4630      	mov	r0, r6
 8002cb2:	f004 ff8b 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_16, C_INDIGO);
 8002cb6:	f644 020f 	movw	r2, #18447	; 0x480f
 8002cba:	2110      	movs	r1, #16
 8002cbc:	4630      	mov	r0, r6
 8002cbe:	f004 ff13 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_16, C_WHITE);
 8002cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cc6:	2110      	movs	r1, #16
 8002cc8:	4630      	mov	r0, r6
 8002cca:	f004 fee7 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxShow(&window_page_3, TXB_ID_16);
 8002cce:	2110      	movs	r1, #16
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	f004 fec3 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_usba_watt_symbol, TXB_ID_17, 300, 154, 310, 194);
 8002cd6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002cda:	9500      	str	r5, [sp, #0]
 8002cdc:	2211      	movs	r2, #17
 8002cde:	4630      	mov	r0, r6
 8002ce0:	49b4      	ldr	r1, [pc, #720]	; (8002fb4 <begin+0x1830>)
 8002ce2:	f8cd a008 	str.w	sl, [sp, #8]
 8002ce6:	9401      	str	r4, [sp, #4]
 8002ce8:	f004 fe54 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_17, &FONT_10X16);
 8002cec:	465a      	mov	r2, fp
 8002cee:	2111      	movs	r1, #17
 8002cf0:	4630      	mov	r0, r6
 8002cf2:	f004 ff45 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_17, ALIGN_V_BOTTOM);
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	2111      	movs	r1, #17
 8002cfa:	4630      	mov	r0, r6
 8002cfc:	f004 ff66 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_17, C_INDIGO);
 8002d00:	f644 020f 	movw	r2, #18447	; 0x480f
 8002d04:	2111      	movs	r1, #17
 8002d06:	4630      	mov	r0, r6
 8002d08:	f004 feee 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_17, C_WHITE);
 8002d0c:	2111      	movs	r1, #17
 8002d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d12:	4630      	mov	r0, r6
 8002d14:	f004 fec2 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_17, "W");
 8002d18:	4aa4      	ldr	r2, [pc, #656]	; (8002fac <begin+0x1828>)
 8002d1a:	2111      	movs	r1, #17
 8002d1c:	4630      	mov	r0, r6
 8002d1e:	f004 ff09 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_17);
 8002d22:	2111      	movs	r1, #17
 8002d24:	4630      	mov	r0, r6
 8002d26:	f004 fe99 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_ok_symbol, TXB_ID_18, 15, 200, 65, 235);
 8002d2a:	25eb      	movs	r5, #235	; 0xeb
 8002d2c:	27c8      	movs	r7, #200	; 0xc8
 8002d2e:	2341      	movs	r3, #65	; 0x41
 8002d30:	9502      	str	r5, [sp, #8]
 8002d32:	e9cd 7300 	strd	r7, r3, [sp]
 8002d36:	2212      	movs	r2, #18
 8002d38:	230f      	movs	r3, #15
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	499e      	ldr	r1, [pc, #632]	; (8002fb8 <begin+0x1834>)
 8002d3e:	f004 fe29 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_18, &FONT_10X16);
 8002d42:	465a      	mov	r2, fp
 8002d44:	2112      	movs	r1, #18
 8002d46:	4630      	mov	r0, r6
 8002d48:	f004 ff1a 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_18, ALIGN_CENTER);
 8002d4c:	2212      	movs	r2, #18
 8002d4e:	4630      	mov	r0, r6
 8002d50:	4611      	mov	r1, r2
 8002d52:	f004 ff3b 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_18, C_BLACK);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2112      	movs	r1, #18
 8002d5a:	4630      	mov	r0, r6
 8002d5c:	f004 fe9e 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_18, "OK");
 8002d60:	4a96      	ldr	r2, [pc, #600]	; (8002fbc <begin+0x1838>)
 8002d62:	2112      	movs	r1, #18
 8002d64:	4630      	mov	r0, r6
 8002d66:	f004 fee5 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_18);
 8002d6a:	2112      	movs	r1, #18
 8002d6c:	4630      	mov	r0, r6
 8002d6e:	f004 fe75 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_cv_symbol, TXB_ID_19, 70, 200, 95, 235);
 8002d72:	235f      	movs	r3, #95	; 0x5f
 8002d74:	9502      	str	r5, [sp, #8]
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	2213      	movs	r2, #19
 8002d7a:	2346      	movs	r3, #70	; 0x46
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	4990      	ldr	r1, [pc, #576]	; (8002fc0 <begin+0x183c>)
 8002d80:	9700      	str	r7, [sp, #0]
 8002d82:	f004 fe07 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_19, &FONT_10X16);
 8002d86:	465a      	mov	r2, fp
 8002d88:	2113      	movs	r1, #19
 8002d8a:	4630      	mov	r0, r6
 8002d8c:	f004 fef8 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_19, ALIGN_CENTER);
 8002d90:	2212      	movs	r2, #18
 8002d92:	2113      	movs	r1, #19
 8002d94:	4630      	mov	r0, r6
 8002d96:	f004 ff19 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_19, C_BLACK);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2113      	movs	r1, #19
 8002d9e:	4630      	mov	r0, r6
 8002da0:	f004 fe7c 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_19, "CV");
 8002da4:	4a87      	ldr	r2, [pc, #540]	; (8002fc4 <begin+0x1840>)
 8002da6:	2113      	movs	r1, #19
 8002da8:	4630      	mov	r0, r6
 8002daa:	f004 fec3 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_19);
 8002dae:	2113      	movs	r1, #19
 8002db0:	4630      	mov	r0, r6
 8002db2:	f004 fe53 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_cc_symbol, TXB_ID_20, 100, 200, 125, 235);
 8002db6:	237d      	movs	r3, #125	; 0x7d
 8002db8:	9502      	str	r5, [sp, #8]
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	2214      	movs	r2, #20
 8002dbe:	2364      	movs	r3, #100	; 0x64
 8002dc0:	4630      	mov	r0, r6
 8002dc2:	4981      	ldr	r1, [pc, #516]	; (8002fc8 <begin+0x1844>)
 8002dc4:	9700      	str	r7, [sp, #0]
 8002dc6:	f004 fde5 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_20, &FONT_10X16);
 8002dca:	465a      	mov	r2, fp
 8002dcc:	2114      	movs	r1, #20
 8002dce:	4630      	mov	r0, r6
 8002dd0:	f004 fed6 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_20, ALIGN_CENTER);
 8002dd4:	2212      	movs	r2, #18
 8002dd6:	2114      	movs	r1, #20
 8002dd8:	4630      	mov	r0, r6
 8002dda:	f004 fef7 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_20, C_BLACK);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2114      	movs	r1, #20
 8002de2:	4630      	mov	r0, r6
 8002de4:	f004 fe5a 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_20, "CC");
 8002de8:	4a78      	ldr	r2, [pc, #480]	; (8002fcc <begin+0x1848>)
 8002dea:	2114      	movs	r1, #20
 8002dec:	4630      	mov	r0, r6
 8002dee:	f004 fea1 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_20);
 8002df2:	2114      	movs	r1, #20
 8002df4:	4630      	mov	r0, r6
 8002df6:	f004 fe31 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_output_voltage_value, TXB_ID_21, 130, 200, 185, 235);
 8002dfa:	22b9      	movs	r2, #185	; 0xb9
 8002dfc:	2382      	movs	r3, #130	; 0x82
 8002dfe:	9502      	str	r5, [sp, #8]
 8002e00:	9201      	str	r2, [sp, #4]
 8002e02:	4630      	mov	r0, r6
 8002e04:	2215      	movs	r2, #21
 8002e06:	4972      	ldr	r1, [pc, #456]	; (8002fd0 <begin+0x184c>)
 8002e08:	9700      	str	r7, [sp, #0]
 8002e0a:	f004 fdc3 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_21, &FONT_10X16);
 8002e0e:	465a      	mov	r2, fp
 8002e10:	2115      	movs	r1, #21
 8002e12:	4630      	mov	r0, r6
 8002e14:	f004 feb4 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_21, ALIGN_CENTER);
 8002e18:	2212      	movs	r2, #18
 8002e1a:	2115      	movs	r1, #21
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	f004 fed5 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_21, C_BLACK);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2115      	movs	r1, #21
 8002e26:	4630      	mov	r0, r6
 8002e28:	f004 fe5e 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_21, C_WHITE);
 8002e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e30:	2115      	movs	r1, #21
 8002e32:	4630      	mov	r0, r6
 8002e34:	f004 fe32 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxShow(&window_page_3, TXB_ID_21);
 8002e38:	2115      	movs	r1, #21
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	f004 fe0e 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_output_voltage_symbol, TXB_ID_22, 190, 200, 205, 235);
 8002e40:	23cd      	movs	r3, #205	; 0xcd
 8002e42:	9502      	str	r5, [sp, #8]
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	2216      	movs	r2, #22
 8002e48:	23be      	movs	r3, #190	; 0xbe
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	4961      	ldr	r1, [pc, #388]	; (8002fd4 <begin+0x1850>)
 8002e4e:	9700      	str	r7, [sp, #0]
 8002e50:	f004 fda0 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_22, &FONT_10X16);
 8002e54:	465a      	mov	r2, fp
 8002e56:	2116      	movs	r1, #22
 8002e58:	4630      	mov	r0, r6
 8002e5a:	f004 fe91 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_22, ALIGN_CENTER);
 8002e5e:	2212      	movs	r2, #18
 8002e60:	2116      	movs	r1, #22
 8002e62:	4630      	mov	r0, r6
 8002e64:	f004 feb2 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_22, C_BLACK);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2116      	movs	r1, #22
 8002e6c:	4630      	mov	r0, r6
 8002e6e:	f004 fe3b 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_22, C_WHITE);
 8002e72:	2116      	movs	r1, #22
 8002e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e78:	4630      	mov	r0, r6
 8002e7a:	f004 fe0f 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_22, "V");
 8002e7e:	4a56      	ldr	r2, [pc, #344]	; (8002fd8 <begin+0x1854>)
 8002e80:	2116      	movs	r1, #22
 8002e82:	4630      	mov	r0, r6
 8002e84:	f004 fe56 	bl	8007b34 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_22);
 8002e88:	2116      	movs	r1, #22
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	f004 fde6 	bl	8007a5c <UG_TextboxShow>
								UG_TextboxCreate(&window_page_3, &textbox_page3_output_current_value, TXB_ID_23, 210, 200, 265, 235);
 8002e90:	f240 1309 	movw	r3, #265	; 0x109
 8002e94:	9502      	str	r5, [sp, #8]
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	2217      	movs	r2, #23
 8002e9a:	23d2      	movs	r3, #210	; 0xd2
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	494f      	ldr	r1, [pc, #316]	; (8002fdc <begin+0x1858>)
 8002ea0:	9700      	str	r7, [sp, #0]
 8002ea2:	f004 fd77 	bl	8007994 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_23, &FONT_10X16);
 8002ea6:	465a      	mov	r2, fp
 8002ea8:	2117      	movs	r1, #23
 8002eaa:	4630      	mov	r0, r6
 8002eac:	f004 fe68 	bl	8007b80 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_23, ALIGN_CENTER);
 8002eb0:	2212      	movs	r2, #18
 8002eb2:	2117      	movs	r1, #23
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	f004 fe89 	bl	8007bcc <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_23, C_BLACK);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2117      	movs	r1, #23
 8002ebe:	4630      	mov	r0, r6
 8002ec0:	f004 fe12 	bl	8007ae8 <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_23, C_WHITE);
 8002ec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ec8:	2117      	movs	r1, #23
 8002eca:	4630      	mov	r0, r6
 8002ecc:	f004 fde6 	bl	8007a9c <UG_TextboxSetForeColor>
								UG_TextboxShow(&window_page_3, TXB_ID_23);
 8002ed0:	2117      	movs	r1, #23
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	f004 fdc2 	bl	8007a5c <UG_TextboxShow>
		UG_TextboxCreate(&window_page_3, &textbox_page3_output_current_symbol, TXB_ID_24, 270, 200, 285, 235);
 8002ed8:	f240 131d 	movw	r3, #285	; 0x11d
 8002edc:	9502      	str	r5, [sp, #8]
		UG_TextboxCreate(&window_page_3, &textbox_usbc_timer, TXB_ID_25, 55, 32, 145, 59);
 8002ede:	2520      	movs	r5, #32
		UG_TextboxCreate(&window_page_3, &textbox_page3_output_current_symbol, TXB_ID_24, 270, 200, 285, 235);
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	2218      	movs	r2, #24
 8002ee4:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002ee8:	4630      	mov	r0, r6
 8002eea:	493d      	ldr	r1, [pc, #244]	; (8002fe0 <begin+0x185c>)
 8002eec:	9700      	str	r7, [sp, #0]
 8002eee:	f004 fd51 	bl	8007994 <UG_TextboxCreate>
		UG_TextboxSetFont(&window_page_3, TXB_ID_24, &FONT_10X16);
 8002ef2:	465a      	mov	r2, fp
 8002ef4:	2118      	movs	r1, #24
 8002ef6:	4630      	mov	r0, r6
 8002ef8:	f004 fe42 	bl	8007b80 <UG_TextboxSetFont>
		UG_TextboxSetAlignment(&window_page_3, TXB_ID_24, ALIGN_CENTER);
 8002efc:	2212      	movs	r2, #18
 8002efe:	2118      	movs	r1, #24
 8002f00:	4630      	mov	r0, r6
 8002f02:	f004 fe63 	bl	8007bcc <UG_TextboxSetAlignment>
		UG_TextboxSetBackColor(&window_page_3, TXB_ID_24, C_BLACK);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2118      	movs	r1, #24
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	f004 fdec 	bl	8007ae8 <UG_TextboxSetBackColor>
		UG_TextboxSetForeColor(&window_page_3, TXB_ID_24, C_WHITE);
 8002f10:	2118      	movs	r1, #24
 8002f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f16:	4630      	mov	r0, r6
 8002f18:	f004 fdc0 	bl	8007a9c <UG_TextboxSetForeColor>
		UG_TextboxSetText(&window_page_3, TXB_ID_24, "A");
 8002f1c:	4a31      	ldr	r2, [pc, #196]	; (8002fe4 <begin+0x1860>)
 8002f1e:	2118      	movs	r1, #24
 8002f20:	4630      	mov	r0, r6
 8002f22:	f004 fe07 	bl	8007b34 <UG_TextboxSetText>
		UG_TextboxShow(&window_page_3, TXB_ID_24);
 8002f26:	2118      	movs	r1, #24
 8002f28:	4630      	mov	r0, r6
 8002f2a:	f004 fd97 	bl	8007a5c <UG_TextboxShow>
		UG_TextboxCreate(&window_page_3, &textbox_usbc_timer, TXB_ID_25, 55, 32, 145, 59);
 8002f2e:	2337      	movs	r3, #55	; 0x37
 8002f30:	2219      	movs	r2, #25
 8002f32:	4630      	mov	r0, r6
 8002f34:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8002f38:	492b      	ldr	r1, [pc, #172]	; (8002fe8 <begin+0x1864>)
 8002f3a:	9500      	str	r5, [sp, #0]
 8002f3c:	f004 fd2a 	bl	8007994 <UG_TextboxCreate>
		UG_TextboxSetFont(&window_page_3, TXB_ID_25, &FONT_10X16);
 8002f40:	465a      	mov	r2, fp
 8002f42:	2119      	movs	r1, #25
 8002f44:	4630      	mov	r0, r6
 8002f46:	f004 fe1b 	bl	8007b80 <UG_TextboxSetFont>
		UG_TextboxSetAlignment(&window_page_3, TXB_ID_25, ALIGN_CENTER);
 8002f4a:	2212      	movs	r2, #18
 8002f4c:	2119      	movs	r1, #25
 8002f4e:	4630      	mov	r0, r6
 8002f50:	f004 fe3c 	bl	8007bcc <UG_TextboxSetAlignment>
		UG_TextboxSetBackColor(&window_page_3, TXB_ID_25, C_LIGHT_SLATE_GRAY);
 8002f54:	f247 4232 	movw	r2, #29746	; 0x7432
 8002f58:	2119      	movs	r1, #25
 8002f5a:	4630      	mov	r0, r6
 8002f5c:	f004 fdc4 	bl	8007ae8 <UG_TextboxSetBackColor>
		UG_TextboxSetForeColor(&window_page_3, TXB_ID_25, C_WHITE_SMOKE);
 8002f60:	f64e 729d 	movw	r2, #61341	; 0xef9d
 8002f64:	2119      	movs	r1, #25
 8002f66:	4630      	mov	r0, r6
 8002f68:	f004 fd98 	bl	8007a9c <UG_TextboxSetForeColor>
		UG_TextboxShow(&window_page_3, TXB_ID_25);
 8002f6c:	2119      	movs	r1, #25
 8002f6e:	4630      	mov	r0, r6
 8002f70:	f004 fd74 	bl	8007a5c <UG_TextboxShow>
		UG_TextboxCreate(&window_page_3, &textbox_usba_timer, TXB_ID_26, 220, 32, 310, 59);
 8002f74:	23dc      	movs	r3, #220	; 0xdc
 8002f76:	221a      	movs	r2, #26
 8002f78:	4630      	mov	r0, r6
 8002f7a:	e9cd 5400 	strd	r5, r4, [sp]
 8002f7e:	491b      	ldr	r1, [pc, #108]	; (8002fec <begin+0x1868>)
 8002f80:	f8cd 9008 	str.w	r9, [sp, #8]
 8002f84:	f004 fd06 	bl	8007994 <UG_TextboxCreate>
		UG_TextboxSetFont(&window_page_3, TXB_ID_26, &FONT_10X16);
 8002f88:	465a      	mov	r2, fp
 8002f8a:	211a      	movs	r1, #26
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	f004 fdf7 	bl	8007b80 <UG_TextboxSetFont>
		UG_TextboxSetAlignment(&window_page_3, TXB_ID_26, ALIGN_CENTER);
 8002f92:	2212      	movs	r2, #18
 8002f94:	211a      	movs	r1, #26
 8002f96:	4630      	mov	r0, r6
 8002f98:	f004 fe18 	bl	8007bcc <UG_TextboxSetAlignment>
 8002f9c:	e028      	b.n	8002ff0 <begin+0x186c>
 8002f9e:	bf00      	nop
 8002fa0:	200014d4 	.word	0x200014d4
 8002fa4:	0800d768 	.word	0x0800d768
 8002fa8:	200014c0 	.word	0x200014c0
 8002fac:	0800bbd4 	.word	0x0800bbd4
 8002fb0:	2000145c 	.word	0x2000145c
 8002fb4:	20001448 	.word	0x20001448
 8002fb8:	20001394 	.word	0x20001394
 8002fbc:	0800bb70 	.word	0x0800bb70
 8002fc0:	20001380 	.word	0x20001380
 8002fc4:	0800bb74 	.word	0x0800bb74
 8002fc8:	2000136c 	.word	0x2000136c
 8002fcc:	0800bb78 	.word	0x0800bb78
 8002fd0:	200013e4 	.word	0x200013e4
 8002fd4:	200013d0 	.word	0x200013d0
 8002fd8:	0800bbfc 	.word	0x0800bbfc
 8002fdc:	200013bc 	.word	0x200013bc
 8002fe0:	200013a8 	.word	0x200013a8
 8002fe4:	0800bca4 	.word	0x0800bca4
 8002fe8:	20001574 	.word	0x20001574
 8002fec:	2000154c 	.word	0x2000154c
		UG_TextboxSetBackColor(&window_page_3, TXB_ID_26, C_LIGHT_SLATE_GRAY);
 8002ff0:	f247 4232 	movw	r2, #29746	; 0x7432
 8002ff4:	211a      	movs	r1, #26
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	f004 fd76 	bl	8007ae8 <UG_TextboxSetBackColor>
		UG_TextboxSetForeColor(&window_page_3, TXB_ID_26, C_WHITE_SMOKE);
 8002ffc:	211a      	movs	r1, #26
 8002ffe:	f64e 729d 	movw	r2, #61341	; 0xef9d
 8003002:	4630      	mov	r0, r6
 8003004:	f004 fd4a 	bl	8007a9c <UG_TextboxSetForeColor>
		UG_TextboxShow(&window_page_3, TXB_ID_26);
 8003008:	211a      	movs	r1, #26
 800300a:	4630      	mov	r0, r6
}
 800300c:	b005      	add	sp, #20
 800300e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		UG_TextboxShow(&window_page_3, TXB_ID_26);
 8003012:	f004 bd23 	b.w	8007a5c <UG_TextboxShow>
 8003016:	bf00      	nop

08003018 <_write>:
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
  for(i=0 ; i<len ; i++)
 8003018:	1e10      	subs	r0, r2, #0
 800301a:	dd29      	ble.n	8003070 <_write+0x58>
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800301c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003020:	eb01 0c00 	add.w	ip, r1, r0
 8003024:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
    ITM_SendChar((*ptr++));
 8003028:	3101      	adds	r1, #1
 800302a:	07d2      	lsls	r2, r2, #31
 800302c:	d51d      	bpl.n	800306a <_write+0x52>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800302e:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003032:	07d2      	lsls	r2, r2, #31
 8003034:	d519      	bpl.n	800306a <_write+0x52>
{
 8003036:	b500      	push	{lr}
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003038:	681a      	ldr	r2, [r3, #0]
    ITM_SendChar((*ptr++));
 800303a:	f811 ec01 	ldrb.w	lr, [r1, #-1]
 800303e:	b91a      	cbnz	r2, 8003048 <_write+0x30>
    {
      __NOP();
 8003040:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2a00      	cmp	r2, #0
 8003046:	d0fb      	beq.n	8003040 <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003048:	f883 e000 	strb.w	lr, [r3]
  for(i=0 ; i<len ; i++)
 800304c:	4561      	cmp	r1, ip
 800304e:	d00a      	beq.n	8003066 <_write+0x4e>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003050:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
    ITM_SendChar((*ptr++));
 8003054:	3101      	adds	r1, #1
 8003056:	07d2      	lsls	r2, r2, #31
 8003058:	d5f8      	bpl.n	800304c <_write+0x34>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800305a:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800305e:	07d2      	lsls	r2, r2, #31
 8003060:	d4ea      	bmi.n	8003038 <_write+0x20>
  for(i=0 ; i<len ; i++)
 8003062:	4561      	cmp	r1, ip
 8003064:	d1f4      	bne.n	8003050 <_write+0x38>
  return len;
}
 8003066:	f85d fb04 	ldr.w	pc, [sp], #4
  for(i=0 ; i<len ; i++)
 800306a:	4561      	cmp	r1, ip
 800306c:	d1da      	bne.n	8003024 <_write+0xc>
 800306e:	4770      	bx	lr
}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop

08003074 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003074:	2300      	movs	r3, #0
{
 8003076:	b5d0      	push	{r4, r6, r7, lr}
 8003078:	b094      	sub	sp, #80	; 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800307a:	2601      	movs	r6, #1
 800307c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003080:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003082:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003084:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003088:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800308c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003090:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003094:	e9cd 3301 	strd	r3, r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003098:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800309a:	9304      	str	r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800309c:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800309e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030a0:	9303      	str	r3, [sp, #12]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030a6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030a8:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030ac:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030ae:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030b0:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030b2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b4:	f002 fb06 	bl	80056c4 <HAL_RCC_OscConfig>
 80030b8:	b108      	cbz	r0, 80030be <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030ba:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030bc:	e7fe      	b.n	80030bc <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030be:	220f      	movs	r2, #15
 80030c0:	2302      	movs	r3, #2
 80030c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030cc:	9008      	str	r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030ce:	4621      	mov	r1, r4
 80030d0:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030d6:	f002 fce5 	bl	8005aa4 <HAL_RCC_ClockConfig>
 80030da:	b108      	cbz	r0, 80030e0 <SystemClock_Config+0x6c>
 80030dc:	b672      	cpsid	i
  while (1)
 80030de:	e7fe      	b.n	80030de <SystemClock_Config+0x6a>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80030e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030e4:	4668      	mov	r0, sp
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80030e6:	9400      	str	r4, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80030e8:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030ea:	f002 fdcb 	bl	8005c84 <HAL_RCCEx_PeriphCLKConfig>
 80030ee:	b108      	cbz	r0, 80030f4 <SystemClock_Config+0x80>
 80030f0:	b672      	cpsid	i
  while (1)
 80030f2:	e7fe      	b.n	80030f2 <SystemClock_Config+0x7e>
}
 80030f4:	b014      	add	sp, #80	; 0x50
 80030f6:	bdd0      	pop	{r4, r6, r7, pc}

080030f8 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	2400      	movs	r4, #0
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 80030fe:	f000 ffdb 	bl	80040b8 <HAL_Init>
  SystemClock_Config();
 8003102:	f7ff ffb7 	bl	8003074 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003106:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800310a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800310e:	4b96      	ldr	r3, [pc, #600]	; (8003368 <main+0x270>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|LCD_WR_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8003110:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003114:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|LCD_WR_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8003116:	4895      	ldr	r0, [pc, #596]	; (800336c <main+0x274>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003118:	f042 0210 	orr.w	r2, r2, #16
 800311c:	619a      	str	r2, [r3, #24]
 800311e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003120:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003122:	f002 0210 	and.w	r2, r2, #16
 8003126:	9200      	str	r2, [sp, #0]
 8003128:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800312a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800312c:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003130:	f042 0220 	orr.w	r2, r2, #32
 8003134:	619a      	str	r2, [r3, #24]
 8003136:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003138:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800313c:	f002 0220 	and.w	r2, r2, #32
 8003140:	9201      	str	r2, [sp, #4]
 8003142:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003144:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RD_Pin|LCD_D2_Pin|LCD_D3_Pin
 8003146:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003148:	f042 0204 	orr.w	r2, r2, #4
 800314c:	619a      	str	r2, [r3, #24]
 800314e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RD_Pin|LCD_D2_Pin|LCD_D3_Pin
 8003150:	2703      	movs	r7, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003152:	f002 0204 	and.w	r2, r2, #4
 8003156:	9202      	str	r2, [sp, #8]
 8003158:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	f042 0208 	orr.w	r2, r2, #8
 8003160:	619a      	str	r2, [r3, #24]
 8003162:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|LCD_WR_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8003164:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	9303      	str	r3, [sp, #12]
 800316c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|LCD_WR_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800316e:	f001 fc6f 	bl	8004a50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LCD_RD_Pin|LCD_D2_Pin|LCD_D3_Pin
 8003172:	4622      	mov	r2, r4
 8003174:	f64f 7103 	movw	r1, #65283	; 0xff03
 8003178:	487d      	ldr	r0, [pc, #500]	; (8003370 <main+0x278>)
 800317a:	f001 fc69 	bl	8004a50 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14|ENC_push_button_Pin;
 800317e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003182:	4b7c      	ldr	r3, [pc, #496]	; (8003374 <main+0x27c>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003184:	487c      	ldr	r0, [pc, #496]	; (8003378 <main+0x280>)
 8003186:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_14|ENC_push_button_Pin;
 8003188:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800318c:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800318e:	f001 fb51 	bl	8004834 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003192:	2220      	movs	r2, #32
 8003194:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003196:	4875      	ldr	r0, [pc, #468]	; (800336c <main+0x274>)
 8003198:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800319a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800319e:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a2:	f001 fb47 	bl	8004834 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RD_Pin|LCD_D2_Pin|LCD_D3_Pin
 80031a6:	f647 7203 	movw	r2, #32515	; 0x7f03
 80031aa:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ac:	4870      	ldr	r0, [pc, #448]	; (8003370 <main+0x278>)
 80031ae:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RD_Pin|LCD_D2_Pin|LCD_D3_Pin
 80031b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80031b4:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b8:	f001 fb3c 	bl	8004834 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 80031bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80031c0:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 80031c2:	486b      	ldr	r0, [pc, #428]	; (8003370 <main+0x278>)
 80031c4:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 80031c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80031ca:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 80031ce:	f001 fb31 	bl	8004834 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_WR_Pin|LCD_DC_Pin|LCD_CS_Pin;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d8:	4864      	ldr	r0, [pc, #400]	; (800336c <main+0x274>)
 80031da:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LCD_WR_Pin|LCD_DC_Pin|LCD_CS_Pin;
 80031dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80031e0:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e4:	f001 fb26 	bl	8004834 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80031e8:	4622      	mov	r2, r4
 80031ea:	4621      	mov	r1, r4
 80031ec:	2028      	movs	r0, #40	; 0x28
 80031ee:	f001 fabd 	bl	800476c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031f2:	2028      	movs	r0, #40	; 0x28
 80031f4:	f001 faf8 	bl	80047e8 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 80031f8:	4860      	ldr	r0, [pc, #384]	; (800337c <main+0x284>)
 80031fa:	4b61      	ldr	r3, [pc, #388]	; (8003380 <main+0x288>)
  hi2c1.Init.OwnAddress2 = 0;
 80031fc:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hi2c1.Instance = I2C1;
 8003200:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003202:	4b60      	ldr	r3, [pc, #384]	; (8003384 <main+0x28c>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003204:	e9c0 4407 	strd	r4, r4, [r0, #28]
  hi2c1.Init.ClockSpeed = 100000;
 8003208:	6043      	str	r3, [r0, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800320a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800320e:	6084      	str	r4, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003210:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003212:	6103      	str	r3, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003214:	f001 fea4 	bl	8004f60 <HAL_I2C_Init>
 8003218:	b108      	cbz	r0, 800321e <main+0x126>
 800321a:	b672      	cpsid	i
  while (1)
 800321c:	e7fe      	b.n	800321c <main+0x124>
  htim1.Instance = TIM1;
 800321e:	4c5a      	ldr	r4, [pc, #360]	; (8003388 <main+0x290>)
 8003220:	4b5a      	ldr	r3, [pc, #360]	; (800338c <main+0x294>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003222:	e9cd 0006 	strd	r0, r0, [sp, #24]
  htim1.Instance = TIM1;
 8003226:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 2;
 8003228:	2302      	movs	r3, #2
 800322a:	6063      	str	r3, [r4, #4]
  htim1.Init.Period = 48000;
 800322c:	f64b 3380 	movw	r3, #48000	; 0xbb80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003230:	e9cd 0008 	strd	r0, r0, [sp, #32]
  htim1.Init.RepetitionCounter = 0;
 8003234:	e9c4 0004 	strd	r0, r0, [r4, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003238:	9004      	str	r0, [sp, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800323a:	60a0      	str	r0, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800323c:	61a0      	str	r0, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800323e:	9005      	str	r0, [sp, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003240:	4620      	mov	r0, r4
  htim1.Init.Period = 48000;
 8003242:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003244:	f002 fe1a 	bl	8005e7c <HAL_TIM_Base_Init>
 8003248:	b108      	cbz	r0, 800324e <main+0x156>
 800324a:	b672      	cpsid	i
  while (1)
 800324c:	e7fe      	b.n	800324c <main+0x154>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800324e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003252:	4620      	mov	r0, r4
 8003254:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003256:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003258:	f003 f88a 	bl	8006370 <HAL_TIM_ConfigClockSource>
 800325c:	b108      	cbz	r0, 8003262 <main+0x16a>
 800325e:	b672      	cpsid	i
  while (1)
 8003260:	e7fe      	b.n	8003260 <main+0x168>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003262:	2600      	movs	r6, #0
 8003264:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003266:	4620      	mov	r0, r4
 8003268:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800326a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800326e:	f003 f9d7 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 8003272:	b9c8      	cbnz	r0, 80032a8 <main+0x1b0>
  htim3.Init.Prescaler = 6;
 8003274:	2106      	movs	r1, #6
  htim3.Init.Period = 1000;
 8003276:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim3.Instance = TIM3;
 800327a:	4c45      	ldr	r4, [pc, #276]	; (8003390 <main+0x298>)
 800327c:	4b45      	ldr	r3, [pc, #276]	; (8003394 <main+0x29c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800327e:	e9cd 0004 	strd	r0, r0, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003282:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8003286:	e9cd 0008 	strd	r0, r0, [sp, #32]
 800328a:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800328e:	900c      	str	r0, [sp, #48]	; 0x30
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003290:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003292:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003294:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003296:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 6;
 8003298:	6061      	str	r1, [r4, #4]
  htim3.Init.Period = 1000;
 800329a:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 800329c:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800329e:	f002 fea1 	bl	8005fe4 <HAL_TIM_PWM_Init>
 80032a2:	b118      	cbz	r0, 80032ac <main+0x1b4>
 80032a4:	b672      	cpsid	i
  while (1)
 80032a6:	e7fe      	b.n	80032a6 <main+0x1ae>
 80032a8:	b672      	cpsid	i
 80032aa:	e7fe      	b.n	80032aa <main+0x1b2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032ac:	4620      	mov	r0, r4
 80032ae:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b0:	e9cd 6704 	strd	r6, r7, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032b4:	f003 f9b4 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 80032b8:	4602      	mov	r2, r0
 80032ba:	b108      	cbz	r0, 80032c0 <main+0x1c8>
 80032bc:	b672      	cpsid	i
  while (1)
 80032be:	e7fe      	b.n	80032be <main+0x1c6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032c0:	2100      	movs	r1, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032c2:	9008      	str	r0, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032c4:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032c6:	2060      	movs	r0, #96	; 0x60
 80032c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032cc:	4620      	mov	r0, r4
 80032ce:	a906      	add	r1, sp, #24
 80032d0:	f002 ff52 	bl	8006178 <HAL_TIM_PWM_ConfigChannel>
 80032d4:	b108      	cbz	r0, 80032da <main+0x1e2>
 80032d6:	b672      	cpsid	i
  while (1)
 80032d8:	e7fe      	b.n	80032d8 <main+0x1e0>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032da:	2204      	movs	r2, #4
 80032dc:	4620      	mov	r0, r4
 80032de:	a906      	add	r1, sp, #24
 80032e0:	f002 ff4a 	bl	8006178 <HAL_TIM_PWM_ConfigChannel>
 80032e4:	4606      	mov	r6, r0
 80032e6:	b108      	cbz	r0, 80032ec <main+0x1f4>
 80032e8:	b672      	cpsid	i
  while (1)
 80032ea:	e7fe      	b.n	80032ea <main+0x1f2>
  HAL_TIM_MspPostInit(&htim3);
 80032ec:	4620      	mov	r0, r4
 80032ee:	f000 fdf7 	bl	8003ee0 <HAL_TIM_MspPostInit>
  hadc1.Instance = ADC1;
 80032f2:	4c29      	ldr	r4, [pc, #164]	; (8003398 <main+0x2a0>)
 80032f4:	4b29      	ldr	r3, [pc, #164]	; (800339c <main+0x2a4>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80032f6:	f44f 7180 	mov.w	r1, #256	; 0x100
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc1.Instance = ADC1;
 80032fe:	6023      	str	r3, [r4, #0]
  hadc1.Init.NbrOfConversion = 3;
 8003300:	2303      	movs	r3, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003302:	4620      	mov	r0, r4
  hadc1.Init.NbrOfConversion = 3;
 8003304:	6123      	str	r3, [r4, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003306:	e9cd 6606 	strd	r6, r6, [sp, #24]
 800330a:	9608      	str	r6, [sp, #32]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800330c:	7325      	strb	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800330e:	7526      	strb	r6, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003310:	6066      	str	r6, [r4, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003312:	60a1      	str	r1, [r4, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003314:	61e2      	str	r2, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003316:	f000 ff05 	bl	8004124 <HAL_ADC_Init>
 800331a:	4603      	mov	r3, r0
 800331c:	b108      	cbz	r0, 8003322 <main+0x22a>
 800331e:	b672      	cpsid	i
  while (1)
 8003320:	e7fe      	b.n	8003320 <main+0x228>
  sConfig.Channel = ADC_CHANNEL_2;
 8003322:	2602      	movs	r6, #2
 8003324:	2701      	movs	r7, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003326:	4620      	mov	r0, r4
 8003328:	a906      	add	r1, sp, #24
  sConfig.Channel = ADC_CHANNEL_2;
 800332a:	e9cd 6706 	strd	r6, r7, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800332e:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003330:	f001 f8c6 	bl	80044c0 <HAL_ADC_ConfigChannel>
 8003334:	b108      	cbz	r0, 800333a <main+0x242>
 8003336:	b672      	cpsid	i
  while (1)
 8003338:	e7fe      	b.n	8003338 <main+0x240>
  sConfig.Channel = ADC_CHANNEL_3;
 800333a:	2203      	movs	r2, #3
 800333c:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800333e:	4816      	ldr	r0, [pc, #88]	; (8003398 <main+0x2a0>)
 8003340:	a906      	add	r1, sp, #24
  sConfig.Channel = ADC_CHANNEL_3;
 8003342:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003346:	f001 f8bb 	bl	80044c0 <HAL_ADC_ConfigChannel>
 800334a:	b108      	cbz	r0, 8003350 <main+0x258>
 800334c:	b672      	cpsid	i
  while (1)
 800334e:	e7fe      	b.n	800334e <main+0x256>
  sConfig.Channel = ADC_CHANNEL_4;
 8003350:	2204      	movs	r2, #4
 8003352:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003354:	4810      	ldr	r0, [pc, #64]	; (8003398 <main+0x2a0>)
 8003356:	a906      	add	r1, sp, #24
  sConfig.Channel = ADC_CHANNEL_4;
 8003358:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800335c:	f001 f8b0 	bl	80044c0 <HAL_ADC_ConfigChannel>
 8003360:	4604      	mov	r4, r0
 8003362:	b1e8      	cbz	r0, 80033a0 <main+0x2a8>
 8003364:	b672      	cpsid	i
  while (1)
 8003366:	e7fe      	b.n	8003366 <main+0x26e>
 8003368:	40021000 	.word	0x40021000
 800336c:	40010800 	.word	0x40010800
 8003370:	40010c00 	.word	0x40010c00
 8003374:	10210000 	.word	0x10210000
 8003378:	40011000 	.word	0x40011000
 800337c:	200016a0 	.word	0x200016a0
 8003380:	40005400 	.word	0x40005400
 8003384:	000186a0 	.word	0x000186a0
 8003388:	200017ec 	.word	0x200017ec
 800338c:	40012c00 	.word	0x40012c00
 8003390:	200016f4 	.word	0x200016f4
 8003394:	40000400 	.word	0x40000400
 8003398:	20001670 	.word	0x20001670
 800339c:	40012400 	.word	0x40012400
pid_intialize();
 80033a0:	f000 fc3a 	bl	8003c18 <pid_intialize>
  SW3516_init();
 80033a4:	f7fd fe94 	bl	80010d0 <SW3516_init>
  sw3516_read();
 80033a8:	f7fe f822 	bl	80013f0 <sw3516_read>
  Display_Init();
 80033ac:	f004 fca6 	bl	8007cfc <Display_Init>
  begin();
 80033b0:	f7fe f9e8 	bl	8001784 <begin>
  Page_3();
 80033b4:	f7fe f9c2 	bl	800173c <Page_3>
  HAL_TIM_Base_Start_IT(&htim1);
 80033b8:	4809      	ldr	r0, [pc, #36]	; (80033e0 <main+0x2e8>)
 80033ba:	f002 fdcd 	bl	8005f58 <HAL_TIM_Base_Start_IT>
  TIM3->CCR1=115;
 80033be:	2573      	movs	r5, #115	; 0x73
  TIM3->CCR2=500;
 80033c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  TIM3->CCR1=115;
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <main+0x2ec>)
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80033c6:	4621      	mov	r1, r4
  TIM3->CCR1=115;
 80033c8:	635d      	str	r5, [r3, #52]	; 0x34
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80033ca:	4807      	ldr	r0, [pc, #28]	; (80033e8 <main+0x2f0>)
  TIM3->CCR2=500;
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80033ce:	f002 fe77 	bl	80060c0 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80033d2:	2104      	movs	r1, #4
 80033d4:	4804      	ldr	r0, [pc, #16]	; (80033e8 <main+0x2f0>)
 80033d6:	f002 fe73 	bl	80060c0 <HAL_TIM_PWM_Start>
	  program_flow();
 80033da:	f000 fc53 	bl	8003c84 <program_flow>
  while (1)
 80033de:	e7fc      	b.n	80033da <main+0x2e2>
 80033e0:	200017ec 	.word	0x200017ec
 80033e4:	40000400 	.word	0x40000400
 80033e8:	200016f4 	.word	0x200016f4

080033ec <HAL_GPIO_EXTI_Callback>:
{
 80033ec:	b508      	push	{r3, lr}
	printf("break");
 80033ee:	4804      	ldr	r0, [pc, #16]	; (8003400 <HAL_GPIO_EXTI_Callback+0x14>)
 80033f0:	f006 f91a 	bl	8009628 <iprintf>
	counter++;
 80033f4:	4a03      	ldr	r2, [pc, #12]	; (8003404 <HAL_GPIO_EXTI_Callback+0x18>)
 80033f6:	6813      	ldr	r3, [r2, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	6013      	str	r3, [r2, #0]
}
 80033fc:	bd08      	pop	{r3, pc}
 80033fe:	bf00      	nop
 8003400:	0800d6f4 	.word	0x0800d6f4
 8003404:	2000166c 	.word	0x2000166c

08003408 <Error_Handler>:
 8003408:	b672      	cpsid	i
  while (1)
 800340a:	e7fe      	b.n	800340a <Error_Handler+0x2>

0800340c <window_page_3_callback>:

void window_page_3_callback(UG_MESSAGE *msg){



	if(msg->type==MSG_TYPE_OBJECT){
 800340c:	7803      	ldrb	r3, [r0, #0]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d000      	beq.n	8003414 <window_page_3_callback+0x8>
 8003412:	4770      	bx	lr

		if(msg->id==OBJ_TYPE_TEXTBOX){
 8003414:	7843      	ldrb	r3, [r0, #1]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d1fb      	bne.n	8003412 <window_page_3_callback+0x6>
void window_page_3_callback(UG_MESSAGE *msg){
 800341a:	b510      	push	{r4, lr}
		switch (msg->sub_id){
 800341c:	7883      	ldrb	r3, [r0, #2]
void window_page_3_callback(UG_MESSAGE *msg){
 800341e:	b082      	sub	sp, #8
		switch (msg->sub_id){
 8003420:	3b02      	subs	r3, #2
 8003422:	2b18      	cmp	r3, #24
 8003424:	d81a      	bhi.n	800345c <window_page_3_callback+0x50>
 8003426:	e8df f013 	tbh	[pc, r3, lsl #1]
 800342a:	014f      	.short	0x014f
 800342c:	011b0019 	.word	0x011b0019
 8003430:	00f70135 	.word	0x00f70135
 8003434:	013d0019 	.word	0x013d0019
 8003438:	01090019 	.word	0x01090019
 800343c:	01230019 	.word	0x01230019
 8003440:	00da0019 	.word	0x00da0019
 8003444:	00bd0019 	.word	0x00bd0019
 8003448:	00a80019 	.word	0x00a80019
 800344c:	009900b3 	.word	0x009900b3
 8003450:	00190085 	.word	0x00190085
 8003454:	00190071 	.word	0x00190071
 8003458:	001b0049 	.word	0x001b0049
   //
   //
   //
   //     }

   }
 800345c:	b002      	add	sp, #8
 800345e:	bd10      	pop	{r4, pc}
			mint=(int)((sw3516_current.time_in_secs_A%3600)/60);
 8003460:	f44f 6461 	mov.w	r4, #3600	; 0xe10
			hour_value=(int)(sw3516_current.time_in_secs_A)/3600;
 8003464:	4ab0      	ldr	r2, [pc, #704]	; (8003728 <window_page_3_callback+0x31c>)
 8003466:	4bb1      	ldr	r3, [pc, #708]	; (800372c <window_page_3_callback+0x320>)
 8003468:	6990      	ldr	r0, [r2, #24]
 800346a:	fb83 2100 	smull	r2, r1, r3, r0
			mint=(int)((sw3516_current.time_in_secs_A%3600)/60);
 800346e:	fba3 2300 	umull	r2, r3, r3, r0
			hour_value=(int)(sw3516_current.time_in_secs_A)/3600;
 8003472:	4401      	add	r1, r0
 8003474:	17c2      	asrs	r2, r0, #31
			mint=(int)((sw3516_current.time_in_secs_A%3600)/60);
 8003476:	0adb      	lsrs	r3, r3, #11
 8003478:	fb04 0313 	mls	r3, r4, r3, r0
			hour_value=(int)(sw3516_current.time_in_secs_A)/3600;
 800347c:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
 8003480:	49ab      	ldr	r1, [pc, #684]	; (8003730 <window_page_3_callback+0x324>)
			mint=(int)((sw3516_current.time_in_secs_A%3600)/60);
 8003482:	4cac      	ldr	r4, [pc, #688]	; (8003734 <window_page_3_callback+0x328>)
			hour_value=(int)(sw3516_current.time_in_secs_A)/3600;
 8003484:	600a      	str	r2, [r1, #0]
			mint=(int)((sw3516_current.time_in_secs_A%3600)/60);
 8003486:	49ac      	ldr	r1, [pc, #688]	; (8003738 <window_page_3_callback+0x32c>)
 8003488:	fba1 c303 	umull	ip, r3, r1, r3
			sec=(sw3516_current.time_in_secs_A)%60;
 800348c:	fba1 c100 	umull	ip, r1, r1, r0
 8003490:	0949      	lsrs	r1, r1, #5
 8003492:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8003496:	eba0 0181 	sub.w	r1, r0, r1, lsl #2
 800349a:	48a8      	ldr	r0, [pc, #672]	; (800373c <window_page_3_callback+0x330>)
			mint=(int)((sw3516_current.time_in_secs_A%3600)/60);
 800349c:	095b      	lsrs	r3, r3, #5
			sprintf(char_buffer,"%02d:%02d:%02d",hour_value,mint,sec);
 800349e:	9100      	str	r1, [sp, #0]
			sec=(sw3516_current.time_in_secs_A)%60;
 80034a0:	6001      	str	r1, [r0, #0]
			mint=(int)((sw3516_current.time_in_secs_A%3600)/60);
 80034a2:	6023      	str	r3, [r4, #0]
			sprintf(char_buffer,"%02d:%02d:%02d",hour_value,mint,sec);
 80034a4:	49a6      	ldr	r1, [pc, #664]	; (8003740 <window_page_3_callback+0x334>)
 80034a6:	48a7      	ldr	r0, [pc, #668]	; (8003744 <window_page_3_callback+0x338>)
 80034a8:	f006 f8d6 	bl	8009658 <siprintf>
			UG_TextboxSetText(&window_page_3, TXB_ID_26, char_buffer);
 80034ac:	211a      	movs	r1, #26
 80034ae:	4aa5      	ldr	r2, [pc, #660]	; (8003744 <window_page_3_callback+0x338>)
 80034b0:	48a5      	ldr	r0, [pc, #660]	; (8003748 <window_page_3_callback+0x33c>)
   }
 80034b2:	b002      	add	sp, #8
 80034b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			UG_TextboxSetText(&window_page_3, TXB_ID_26, char_buffer);
 80034b8:	f004 bb3c 	b.w	8007b34 <UG_TextboxSetText>
				mint=(int)((sw3516_current.time_in_secs_C%3600)/60);
 80034bc:	f44f 6461 	mov.w	r4, #3600	; 0xe10
				hour_value=(int)(sw3516_current.time_in_secs_C)/3600;
 80034c0:	4a99      	ldr	r2, [pc, #612]	; (8003728 <window_page_3_callback+0x31c>)
 80034c2:	4b9a      	ldr	r3, [pc, #616]	; (800372c <window_page_3_callback+0x320>)
 80034c4:	69d0      	ldr	r0, [r2, #28]
 80034c6:	fb83 2100 	smull	r2, r1, r3, r0
				mint=(int)((sw3516_current.time_in_secs_C%3600)/60);
 80034ca:	fba3 2300 	umull	r2, r3, r3, r0
				hour_value=(int)(sw3516_current.time_in_secs_C)/3600;
 80034ce:	4401      	add	r1, r0
 80034d0:	17c2      	asrs	r2, r0, #31
				mint=(int)((sw3516_current.time_in_secs_C%3600)/60);
 80034d2:	0adb      	lsrs	r3, r3, #11
 80034d4:	fb04 0313 	mls	r3, r4, r3, r0
				hour_value=(int)(sw3516_current.time_in_secs_C)/3600;
 80034d8:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
 80034dc:	4994      	ldr	r1, [pc, #592]	; (8003730 <window_page_3_callback+0x324>)
				mint=(int)((sw3516_current.time_in_secs_C%3600)/60);
 80034de:	4c95      	ldr	r4, [pc, #596]	; (8003734 <window_page_3_callback+0x328>)
				hour_value=(int)(sw3516_current.time_in_secs_C)/3600;
 80034e0:	600a      	str	r2, [r1, #0]
				mint=(int)((sw3516_current.time_in_secs_C%3600)/60);
 80034e2:	4995      	ldr	r1, [pc, #596]	; (8003738 <window_page_3_callback+0x32c>)
 80034e4:	fba1 c303 	umull	ip, r3, r1, r3
				sec=(sw3516_current.time_in_secs_C)%60;
 80034e8:	fba1 c100 	umull	ip, r1, r1, r0
 80034ec:	0949      	lsrs	r1, r1, #5
 80034ee:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80034f2:	eba0 0181 	sub.w	r1, r0, r1, lsl #2
 80034f6:	4891      	ldr	r0, [pc, #580]	; (800373c <window_page_3_callback+0x330>)
				mint=(int)((sw3516_current.time_in_secs_C%3600)/60);
 80034f8:	095b      	lsrs	r3, r3, #5
				sprintf(char_buffer,"%02d:%02d:%02d",hour_value,mint,sec);
 80034fa:	9100      	str	r1, [sp, #0]
				sec=(sw3516_current.time_in_secs_C)%60;
 80034fc:	6001      	str	r1, [r0, #0]
				mint=(int)((sw3516_current.time_in_secs_C%3600)/60);
 80034fe:	6023      	str	r3, [r4, #0]
				sprintf(char_buffer,"%02d:%02d:%02d",hour_value,mint,sec);
 8003500:	498f      	ldr	r1, [pc, #572]	; (8003740 <window_page_3_callback+0x334>)
 8003502:	4890      	ldr	r0, [pc, #576]	; (8003744 <window_page_3_callback+0x338>)
 8003504:	f006 f8a8 	bl	8009658 <siprintf>
			UG_TextboxSetText(&window_page_3, TXB_ID_25, char_buffer);
 8003508:	2119      	movs	r1, #25
 800350a:	e7d0      	b.n	80034ae <window_page_3_callback+0xa2>
					if(buck_convertor_current.buck_on_off){
 800350c:	4b8f      	ldr	r3, [pc, #572]	; (800374c <window_page_3_callback+0x340>)
 800350e:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8003512:	2a00      	cmp	r2, #0
 8003514:	f000 80e4 	beq.w	80036e0 <window_page_3_callback+0x2d4>
						sprintf(char_buffer,"%.02f",(buck_convertor_current.current_output/1000));
 8003518:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800351c:	2200      	movs	r2, #0
 800351e:	4b8c      	ldr	r3, [pc, #560]	; (8003750 <window_page_3_callback+0x344>)
 8003520:	f7fd f904 	bl	800072c <__aeabi_ddiv>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4886      	ldr	r0, [pc, #536]	; (8003744 <window_page_3_callback+0x338>)
 800352a:	498a      	ldr	r1, [pc, #552]	; (8003754 <window_page_3_callback+0x348>)
 800352c:	f006 f894 	bl	8009658 <siprintf>
						UG_TextboxSetText(&window_page_3, TXB_ID_23, char_buffer);
 8003530:	2117      	movs	r1, #23
 8003532:	e7bc      	b.n	80034ae <window_page_3_callback+0xa2>
					if(buck_convertor_current.buck_on_off){
 8003534:	4b85      	ldr	r3, [pc, #532]	; (800374c <window_page_3_callback+0x340>)
 8003536:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800353a:	2a00      	cmp	r2, #0
 800353c:	f000 80d3 	beq.w	80036e6 <window_page_3_callback+0x2da>
						sprintf(char_buffer,"%.02f",(buck_convertor_current.voltageout_output/1000));
 8003540:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003544:	2200      	movs	r2, #0
 8003546:	4b82      	ldr	r3, [pc, #520]	; (8003750 <window_page_3_callback+0x344>)
 8003548:	f7fd f8f0 	bl	800072c <__aeabi_ddiv>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	487c      	ldr	r0, [pc, #496]	; (8003744 <window_page_3_callback+0x338>)
 8003552:	4980      	ldr	r1, [pc, #512]	; (8003754 <window_page_3_callback+0x348>)
 8003554:	f006 f880 	bl	8009658 <siprintf>
						UG_TextboxSetText(&window_page_3, TXB_ID_21, char_buffer);
 8003558:	2115      	movs	r1, #21
 800355a:	e7a8      	b.n	80034ae <window_page_3_callback+0xa2>
					if(buck_convertor_current.status_cv ==1){
 800355c:	4b7b      	ldr	r3, [pc, #492]	; (800374c <window_page_3_callback+0x340>)
 800355e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80c2 	beq.w	80036ec <window_page_3_callback+0x2e0>
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_20, C_YELLOW);
 8003568:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800356c:	2114      	movs	r1, #20
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_4, C_LIGHT_GRAY);
 800356e:	4876      	ldr	r0, [pc, #472]	; (8003748 <window_page_3_callback+0x33c>)
   }
 8003570:	b002      	add	sp, #8
 8003572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_4, C_LIGHT_GRAY);
 8003576:	f004 bab7 	b.w	8007ae8 <UG_TextboxSetBackColor>
			if(buck_convertor_current.status_ok ==1){
 800357a:	4b74      	ldr	r3, [pc, #464]	; (800374c <window_page_3_callback+0x340>)
				UG_TextboxSetBackColor(&window_page_3, TXB_ID_18, C_RED);
 800357c:	2112      	movs	r1, #18
			if(buck_convertor_current.status_ok ==1){
 800357e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003582:	2b01      	cmp	r3, #1
				UG_TextboxSetBackColor(&window_page_3, TXB_ID_18, C_GREEN);
 8003584:	bf0c      	ite	eq
 8003586:	f44f 62fc 	moveq.w	r2, #2016	; 0x7e0
				UG_TextboxSetBackColor(&window_page_3, TXB_ID_18, C_RED);
 800358a:	f44f 4278 	movne.w	r2, #63488	; 0xf800
 800358e:	e7ee      	b.n	800356e <window_page_3_callback+0x162>
					if(buck_convertor_current.status_cv ==1){
 8003590:	4b6e      	ldr	r3, [pc, #440]	; (800374c <window_page_3_callback+0x340>)
 8003592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 80ac 	beq.w	80036f4 <window_page_3_callback+0x2e8>
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_19, C_YELLOW);
 800359c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80035a0:	2113      	movs	r1, #19
 80035a2:	e7e4      	b.n	800356e <window_page_3_callback+0x162>
					if(sw3516_current.status_USBA){
 80035a4:	4c60      	ldr	r4, [pc, #384]	; (8003728 <window_page_3_callback+0x31c>)
 80035a6:	7d23      	ldrb	r3, [r4, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80a7 	beq.w	80036fc <window_page_3_callback+0x2f0>
						sprintf(char_buffer,"%.02f",(sw3516_current.voltageout/1000)*(sw3516_current.currentA/1000));
 80035ae:	68e0      	ldr	r0, [r4, #12]
 80035b0:	4969      	ldr	r1, [pc, #420]	; (8003758 <window_page_3_callback+0x34c>)
 80035b2:	f7fd fc7b 	bl	8000eac <__aeabi_fdiv>
 80035b6:	4603      	mov	r3, r0
 80035b8:	4967      	ldr	r1, [pc, #412]	; (8003758 <window_page_3_callback+0x34c>)
 80035ba:	6820      	ldr	r0, [r4, #0]
 80035bc:	461c      	mov	r4, r3
 80035be:	f7fd fc75 	bl	8000eac <__aeabi_fdiv>
 80035c2:	4601      	mov	r1, r0
 80035c4:	4620      	mov	r0, r4
 80035c6:	f7fd fbbd 	bl	8000d44 <__aeabi_fmul>
 80035ca:	f7fc ff2d 	bl	8000428 <__aeabi_f2d>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	485c      	ldr	r0, [pc, #368]	; (8003744 <window_page_3_callback+0x338>)
 80035d4:	495f      	ldr	r1, [pc, #380]	; (8003754 <window_page_3_callback+0x348>)
 80035d6:	f006 f83f 	bl	8009658 <siprintf>
						UG_TextboxSetText(&window_page_3, TXB_ID_16, char_buffer);
 80035da:	2110      	movs	r1, #16
 80035dc:	e767      	b.n	80034ae <window_page_3_callback+0xa2>
					if(sw3516_current.status_USBC){
 80035de:	4c52      	ldr	r4, [pc, #328]	; (8003728 <window_page_3_callback+0x31c>)
 80035e0:	7d63      	ldrb	r3, [r4, #21]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8097 	beq.w	8003716 <window_page_3_callback+0x30a>
						sprintf(char_buffer,"%.02f",(sw3516_current.voltageout/1000)*(sw3516_current.currentC/1000));
 80035e8:	68e0      	ldr	r0, [r4, #12]
 80035ea:	495b      	ldr	r1, [pc, #364]	; (8003758 <window_page_3_callback+0x34c>)
 80035ec:	f7fd fc5e 	bl	8000eac <__aeabi_fdiv>
 80035f0:	4603      	mov	r3, r0
 80035f2:	4959      	ldr	r1, [pc, #356]	; (8003758 <window_page_3_callback+0x34c>)
 80035f4:	6860      	ldr	r0, [r4, #4]
 80035f6:	461c      	mov	r4, r3
 80035f8:	f7fd fc58 	bl	8000eac <__aeabi_fdiv>
 80035fc:	4601      	mov	r1, r0
 80035fe:	4620      	mov	r0, r4
 8003600:	f7fd fba0 	bl	8000d44 <__aeabi_fmul>
 8003604:	f7fc ff10 	bl	8000428 <__aeabi_f2d>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	484d      	ldr	r0, [pc, #308]	; (8003744 <window_page_3_callback+0x338>)
 800360e:	4951      	ldr	r1, [pc, #324]	; (8003754 <window_page_3_callback+0x348>)
 8003610:	f006 f822 	bl	8009658 <siprintf>
						UG_TextboxSetText(&window_page_3, TXB_ID_14, char_buffer);
 8003614:	210e      	movs	r1, #14
 8003616:	e74a      	b.n	80034ae <window_page_3_callback+0xa2>
			if(sw3516_current.status_USBC){
 8003618:	4b43      	ldr	r3, [pc, #268]	; (8003728 <window_page_3_callback+0x31c>)
 800361a:	7d5a      	ldrb	r2, [r3, #21]
 800361c:	2a00      	cmp	r2, #0
 800361e:	d073      	beq.n	8003708 <window_page_3_callback+0x2fc>
				sprintf(char_buffer,"%.02f",(sw3516_current.voltageout/1000));
 8003620:	68d8      	ldr	r0, [r3, #12]
 8003622:	494d      	ldr	r1, [pc, #308]	; (8003758 <window_page_3_callback+0x34c>)
 8003624:	f7fd fc42 	bl	8000eac <__aeabi_fdiv>
 8003628:	f7fc fefe 	bl	8000428 <__aeabi_f2d>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4844      	ldr	r0, [pc, #272]	; (8003744 <window_page_3_callback+0x338>)
 8003632:	4948      	ldr	r1, [pc, #288]	; (8003754 <window_page_3_callback+0x348>)
 8003634:	f006 f810 	bl	8009658 <siprintf>
				UG_TextboxSetText(&window_page_3, TXB_ID_6, char_buffer);
 8003638:	2106      	movs	r1, #6
 800363a:	e738      	b.n	80034ae <window_page_3_callback+0xa2>
					if(sw3516_current.status_USBC){
 800363c:	4b3a      	ldr	r3, [pc, #232]	; (8003728 <window_page_3_callback+0x31c>)
 800363e:	7d5a      	ldrb	r2, [r3, #21]
 8003640:	2a00      	cmp	r2, #0
 8003642:	d06e      	beq.n	8003722 <window_page_3_callback+0x316>
						sprintf(char_buffer,"%.02f",(sw3516_current.currentC/1000));
 8003644:	6858      	ldr	r0, [r3, #4]
 8003646:	4944      	ldr	r1, [pc, #272]	; (8003758 <window_page_3_callback+0x34c>)
 8003648:	f7fd fc30 	bl	8000eac <__aeabi_fdiv>
 800364c:	f7fc feec 	bl	8000428 <__aeabi_f2d>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	483b      	ldr	r0, [pc, #236]	; (8003744 <window_page_3_callback+0x338>)
 8003656:	493f      	ldr	r1, [pc, #252]	; (8003754 <window_page_3_callback+0x348>)
 8003658:	f005 fffe 	bl	8009658 <siprintf>
						UG_TextboxSetText(&window_page_3, TXB_ID_10, char_buffer);
 800365c:	210a      	movs	r1, #10
 800365e:	e726      	b.n	80034ae <window_page_3_callback+0xa2>
					if(sw3516_current.status_USBC){
 8003660:	4b31      	ldr	r3, [pc, #196]	; (8003728 <window_page_3_callback+0x31c>)
 8003662:	7d5b      	ldrb	r3, [r3, #21]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d04c      	beq.n	8003702 <window_page_3_callback+0x2f6>
					UG_TextboxSetBackColor(&window_page_3, TXB_ID_4, C_YELLOW);
 8003668:	f64f 72e0 	movw	r2, #65504	; 0xffe0
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_4, C_LIGHT_GRAY);
 800366c:	2104      	movs	r1, #4
 800366e:	e77e      	b.n	800356e <window_page_3_callback+0x162>
			if(sw3516_current.status_USBA){
 8003670:	4b2d      	ldr	r3, [pc, #180]	; (8003728 <window_page_3_callback+0x31c>)
 8003672:	7d1a      	ldrb	r2, [r3, #20]
 8003674:	2a00      	cmp	r2, #0
 8003676:	d051      	beq.n	800371c <window_page_3_callback+0x310>
				sprintf(char_buffer,"%.02f",(sw3516_current.currentA/1000));
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	4937      	ldr	r1, [pc, #220]	; (8003758 <window_page_3_callback+0x34c>)
 800367c:	f7fd fc16 	bl	8000eac <__aeabi_fdiv>
 8003680:	f7fc fed2 	bl	8000428 <__aeabi_f2d>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	482e      	ldr	r0, [pc, #184]	; (8003744 <window_page_3_callback+0x338>)
 800368a:	4932      	ldr	r1, [pc, #200]	; (8003754 <window_page_3_callback+0x348>)
 800368c:	f005 ffe4 	bl	8009658 <siprintf>
				UG_TextboxSetText(&window_page_3, TXB_ID_12, char_buffer);
 8003690:	210c      	movs	r1, #12
 8003692:	e70c      	b.n	80034ae <window_page_3_callback+0xa2>
					if(sw3516_current.status_USBA){
 8003694:	4b24      	ldr	r3, [pc, #144]	; (8003728 <window_page_3_callback+0x31c>)
 8003696:	7d1b      	ldrb	r3, [r3, #20]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d038      	beq.n	800370e <window_page_3_callback+0x302>
					   UG_TextboxSetBackColor(&window_page_3, TXB_ID_5, C_YELLOW);
 800369c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80036a0:	2105      	movs	r1, #5
 80036a2:	e764      	b.n	800356e <window_page_3_callback+0x162>
					if(sw3516_current.status_USBA){
 80036a4:	4b20      	ldr	r3, [pc, #128]	; (8003728 <window_page_3_callback+0x31c>)
 80036a6:	7d1a      	ldrb	r2, [r3, #20]
 80036a8:	2a00      	cmp	r2, #0
 80036aa:	d059      	beq.n	8003760 <window_page_3_callback+0x354>
						sprintf(char_buffer,"%.02f",(sw3516_current.voltageout/1000));
 80036ac:	68d8      	ldr	r0, [r3, #12]
 80036ae:	492a      	ldr	r1, [pc, #168]	; (8003758 <window_page_3_callback+0x34c>)
 80036b0:	f7fd fbfc 	bl	8000eac <__aeabi_fdiv>
 80036b4:	f7fc feb8 	bl	8000428 <__aeabi_f2d>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4821      	ldr	r0, [pc, #132]	; (8003744 <window_page_3_callback+0x338>)
 80036be:	4925      	ldr	r1, [pc, #148]	; (8003754 <window_page_3_callback+0x348>)
 80036c0:	f005 ffca 	bl	8009658 <siprintf>
						UG_TextboxSetText(&window_page_3, TXB_ID_8, char_buffer);
 80036c4:	2108      	movs	r1, #8
 80036c6:	e6f2      	b.n	80034ae <window_page_3_callback+0xa2>
					sprintf(char_buffer,"%.02f",sw3516_current.temperature);
 80036c8:	4b17      	ldr	r3, [pc, #92]	; (8003728 <window_page_3_callback+0x31c>)
 80036ca:	6918      	ldr	r0, [r3, #16]
 80036cc:	f7fc feac 	bl	8000428 <__aeabi_f2d>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	481b      	ldr	r0, [pc, #108]	; (8003744 <window_page_3_callback+0x338>)
 80036d6:	491f      	ldr	r1, [pc, #124]	; (8003754 <window_page_3_callback+0x348>)
 80036d8:	f005 ffbe 	bl	8009658 <siprintf>
												UG_TextboxSetText(&window_page_3, TXB_ID_2, char_buffer);
 80036dc:	2102      	movs	r1, #2
 80036de:	e6e6      	b.n	80034ae <window_page_3_callback+0xa2>
						UG_TextboxSetText(&window_page_3, TXB_ID_23, "00.00");
 80036e0:	2117      	movs	r1, #23
 80036e2:	4a1e      	ldr	r2, [pc, #120]	; (800375c <window_page_3_callback+0x350>)
 80036e4:	e6e4      	b.n	80034b0 <window_page_3_callback+0xa4>
						UG_TextboxSetText(&window_page_3, TXB_ID_21, "00.00");
 80036e6:	2115      	movs	r1, #21
 80036e8:	4a1c      	ldr	r2, [pc, #112]	; (800375c <window_page_3_callback+0x350>)
 80036ea:	e6e1      	b.n	80034b0 <window_page_3_callback+0xa4>
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_20, C_LIGHT_GRAY);
 80036ec:	f64c 6299 	movw	r2, #52889	; 0xce99
 80036f0:	2114      	movs	r1, #20
 80036f2:	e73c      	b.n	800356e <window_page_3_callback+0x162>
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_19, C_LIGHT_GRAY);
 80036f4:	f64c 6299 	movw	r2, #52889	; 0xce99
 80036f8:	2113      	movs	r1, #19
 80036fa:	e738      	b.n	800356e <window_page_3_callback+0x162>
						UG_TextboxSetText(&window_page_3, TXB_ID_16, "00.00");
 80036fc:	2110      	movs	r1, #16
 80036fe:	4a17      	ldr	r2, [pc, #92]	; (800375c <window_page_3_callback+0x350>)
 8003700:	e6d6      	b.n	80034b0 <window_page_3_callback+0xa4>
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_4, C_LIGHT_GRAY);
 8003702:	f64c 6299 	movw	r2, #52889	; 0xce99
 8003706:	e7b1      	b.n	800366c <window_page_3_callback+0x260>
				UG_TextboxSetText(&window_page_3, TXB_ID_6, "00.00");
 8003708:	2106      	movs	r1, #6
 800370a:	4a14      	ldr	r2, [pc, #80]	; (800375c <window_page_3_callback+0x350>)
 800370c:	e6d0      	b.n	80034b0 <window_page_3_callback+0xa4>
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_5, C_LIGHT_GRAY);
 800370e:	f64c 6299 	movw	r2, #52889	; 0xce99
 8003712:	2105      	movs	r1, #5
 8003714:	e72b      	b.n	800356e <window_page_3_callback+0x162>
						UG_TextboxSetText(&window_page_3, TXB_ID_14, "00.00");
 8003716:	210e      	movs	r1, #14
 8003718:	4a10      	ldr	r2, [pc, #64]	; (800375c <window_page_3_callback+0x350>)
 800371a:	e6c9      	b.n	80034b0 <window_page_3_callback+0xa4>
				UG_TextboxSetText(&window_page_3, TXB_ID_12, "00.00");
 800371c:	210c      	movs	r1, #12
 800371e:	4a0f      	ldr	r2, [pc, #60]	; (800375c <window_page_3_callback+0x350>)
 8003720:	e6c6      	b.n	80034b0 <window_page_3_callback+0xa4>
						UG_TextboxSetText(&window_page_3, TXB_ID_10, "00.00");
 8003722:	210a      	movs	r1, #10
 8003724:	4a0d      	ldr	r2, [pc, #52]	; (800375c <window_page_3_callback+0x350>)
 8003726:	e6c3      	b.n	80034b0 <window_page_3_callback+0xa4>
 8003728:	20000208 	.word	0x20000208
 800372c:	91a2b3c5 	.word	0x91a2b3c5
 8003730:	2000173c 	.word	0x2000173c
 8003734:	20001740 	.word	0x20001740
 8003738:	88888889 	.word	0x88888889
 800373c:	20001744 	.word	0x20001744
 8003740:	0800d704 	.word	0x0800d704
 8003744:	20000374 	.word	0x20000374
 8003748:	20001638 	.word	0x20001638
 800374c:	20000258 	.word	0x20000258
 8003750:	408f4000 	.word	0x408f4000
 8003754:	0800d6fc 	.word	0x0800d6fc
 8003758:	447a0000 	.word	0x447a0000
 800375c:	0800bbac 	.word	0x0800bbac
						UG_TextboxSetText(&window_page_3, TXB_ID_8, "00.00");
 8003760:	2108      	movs	r1, #8
 8003762:	4a01      	ldr	r2, [pc, #4]	; (8003768 <window_page_3_callback+0x35c>)
 8003764:	e6a4      	b.n	80034b0 <window_page_3_callback+0xa4>
 8003766:	bf00      	nop
 8003768:	0800bbac 	.word	0x0800bbac
 800376c:	00000000 	.word	0x00000000

08003770 <PID>:
	else { }

}

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8003770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	{
		return;
	}

	uPID->OutMin = Min;
	uPID->OutMax = Max;
 8003774:	a742      	add	r7, pc, #264	; (adr r7, 8003880 <PID+0x110>)
 8003776:	e9d7 6700 	ldrd	r6, r7, [r7]
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800377a:	2500      	movs	r5, #0
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 800377c:	2402      	movs	r4, #2
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800377e:	7045      	strb	r5, [r0, #1]
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003780:	6084      	str	r4, [r0, #8]
{
 8003782:	4682      	mov	sl, r0
	uPID->OutMin = Min;
 8003784:	2400      	movs	r4, #0
 8003786:	2500      	movs	r5, #0
{
 8003788:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
	uPID->MyInput    = Input;
 800378c:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8003790:	6483      	str	r3, [r0, #72]	; 0x48
	uPID->OutMin = Min;
 8003792:	e9c0 4518 	strd	r4, r5, [r0, #96]	; 0x60
		uPID->Ki = (0 - uPID->Ki);
		uPID->Kd = (0 - uPID->Kd);

	}

	uPID->ControllerDirection = Direction;
 8003796:	f880 b003 	strb.w	fp, [r0, #3]
	if (Kp < 0 || Ki < 0 || Kd < 0)
 800379a:	4622      	mov	r2, r4
 800379c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
	uPID->OutMax = Max;
 80037a0:	e9ca 671a 	strd	r6, r7, [sl, #104]	; 0x68
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80037a4:	462b      	mov	r3, r5
 80037a6:	f7fd f909 	bl	80009bc <__aeabi_dcmplt>
{
 80037aa:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 80037ae:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80037b2:	2800      	cmp	r0, #0
 80037b4:	d140      	bne.n	8003838 <PID+0xc8>
 80037b6:	4622      	mov	r2, r4
 80037b8:	462b      	mov	r3, r5
 80037ba:	4630      	mov	r0, r6
 80037bc:	4639      	mov	r1, r7
 80037be:	f7fd f8fd 	bl	80009bc <__aeabi_dcmplt>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d138      	bne.n	8003838 <PID+0xc8>
 80037c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80037ca:	4622      	mov	r2, r4
 80037cc:	462b      	mov	r3, r5
 80037ce:	f7fd f8f5 	bl	80009bc <__aeabi_dcmplt>
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d130      	bne.n	8003838 <PID+0xc8>
	uPID->DispKp = Kp;
 80037d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	uPID->POn    = POn;
 80037da:	f88a 8002 	strb.w	r8, [sl, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80037de:	f1a8 0801 	sub.w	r8, r8, #1
 80037e2:	fab8 f888 	clz	r8, r8
 80037e6:	ea4f 1858 	mov.w	r8, r8, lsr #5
	uPID->DispKi = Ki;
 80037ea:	e9ca 6706 	strd	r6, r7, [sl, #24]
	uPID->Ki = Ki * SampleTimeInSec;
 80037ee:	4630      	mov	r0, r6
 80037f0:	4639      	mov	r1, r7
	uPID->DispKp = Kp;
 80037f2:	e9ca 2304 	strd	r2, r3, [sl, #16]
	uPID->DispKd = Kd;
 80037f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80037fa:	f88a 8000 	strb.w	r8, [sl]
	uPID->DispKd = Kd;
 80037fe:	e9ca 2308 	strd	r2, r3, [sl, #32]
	uPID->Kp = Kp;
 8003802:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003806:	e9ca 230a 	strd	r2, r3, [sl, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 800380a:	a31f      	add	r3, pc, #124	; (adr r3, 8003888 <PID+0x118>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f7fc fe62 	bl	80004d8 <__aeabi_dmul>
	uPID->Kd = Kd / SampleTimeInSec;
 8003814:	a31c      	add	r3, pc, #112	; (adr r3, 8003888 <PID+0x118>)
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
	uPID->Ki = Ki * SampleTimeInSec;
 800381a:	4680      	mov	r8, r0
 800381c:	4689      	mov	r9, r1
	uPID->Kd = Kd / SampleTimeInSec;
 800381e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
	uPID->Ki = Ki * SampleTimeInSec;
 8003822:	e9ca 890c 	strd	r8, r9, [sl, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8003826:	f7fc ff81 	bl	800072c <__aeabi_ddiv>
 800382a:	4606      	mov	r6, r0
 800382c:	460f      	mov	r7, r1
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 800382e:	f1bb 0f01 	cmp.w	fp, #1
	uPID->Kd = Kd / SampleTimeInSec;
 8003832:	e9ca 670e 	strd	r6, r7, [sl, #56]	; 0x38
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8003836:	d008      	beq.n	800384a <PID+0xda>
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8003838:	f000 fc5c 	bl	80040f4 <HAL_GetTick>
 800383c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003840:	1ac0      	subs	r0, r0, r3
 8003842:	f8ca 0004 	str.w	r0, [sl, #4]
}
 8003846:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uPID->Kp = (0 - uPID->Kp);
 800384a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800384e:	4620      	mov	r0, r4
 8003850:	4629      	mov	r1, r5
 8003852:	f7fc fc89 	bl	8000168 <__aeabi_dsub>
		uPID->Ki = (0 - uPID->Ki);
 8003856:	4642      	mov	r2, r8
		uPID->Kp = (0 - uPID->Kp);
 8003858:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800385c:	464b      	mov	r3, r9
 800385e:	4620      	mov	r0, r4
 8003860:	4629      	mov	r1, r5
 8003862:	f7fc fc81 	bl	8000168 <__aeabi_dsub>
		uPID->Kd = (0 - uPID->Kd);
 8003866:	4632      	mov	r2, r6
		uPID->Ki = (0 - uPID->Ki);
 8003868:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800386c:	463b      	mov	r3, r7
 800386e:	4620      	mov	r0, r4
 8003870:	4629      	mov	r1, r5
 8003872:	f7fc fc79 	bl	8000168 <__aeabi_dsub>
 8003876:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
 800387a:	e7dd      	b.n	8003838 <PID+0xc8>
 800387c:	f3af 8000 	nop.w
 8003880:	00000000 	.word	0x00000000
 8003884:	406fe000 	.word	0x406fe000
 8003888:	d2f1a9fc 	.word	0xd2f1a9fc
 800388c:	3f60624d 	.word	0x3f60624d

08003890 <PID_Compute>:
	if (!uPID->InAuto)
 8003890:	7843      	ldrb	r3, [r0, #1]
 8003892:	b90b      	cbnz	r3, 8003898 <PID_Compute+0x8>
		return _FALSE;
 8003894:	2000      	movs	r0, #0
}
 8003896:	4770      	bx	lr
{
 8003898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800389c:	b089      	sub	sp, #36	; 0x24
 800389e:	4604      	mov	r4, r0
	now        = GetTime();
 80038a0:	f000 fc28 	bl	80040f4 <HAL_GetTick>
	if (timeChange >= uPID->SampleTime)
 80038a4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
	timeChange = (now - uPID->LastTime);
 80038a8:	1ac3      	subs	r3, r0, r3
	if (timeChange >= uPID->SampleTime)
 80038aa:	429a      	cmp	r2, r3
	now        = GetTime();
 80038ac:	4605      	mov	r5, r0
	if (timeChange >= uPID->SampleTime)
 80038ae:	f200 808b 	bhi.w	80039c8 <PID_Compute+0x138>
		input   = *uPID->MyInput;
 80038b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
		error   = *uPID->MySetpoint - input;
 80038b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		input   = *uPID->MyInput;
 80038b6:	e9d2 8900 	ldrd	r8, r9, [r2]
		error   = *uPID->MySetpoint - input;
 80038ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038be:	4642      	mov	r2, r8
 80038c0:	464b      	mov	r3, r9
 80038c2:	f7fc fc51 	bl	8000168 <__aeabi_dsub>
		dInput  = (input - uPID->LastInput);
 80038c6:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
		error   = *uPID->MySetpoint - input;
 80038ca:	4606      	mov	r6, r0
 80038cc:	460f      	mov	r7, r1
		dInput  = (input - uPID->LastInput);
 80038ce:	4640      	mov	r0, r8
 80038d0:	4649      	mov	r1, r9
		error   = *uPID->MySetpoint - input;
 80038d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
		dInput  = (input - uPID->LastInput);
 80038d6:	f7fc fc47 	bl	8000168 <__aeabi_dsub>
		uPID->OutputSum     += (uPID->Ki * error);
 80038da:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
		dInput  = (input - uPID->LastInput);
 80038de:	4682      	mov	sl, r0
 80038e0:	468b      	mov	fp, r1
		uPID->OutputSum     += (uPID->Ki * error);
 80038e2:	4630      	mov	r0, r6
 80038e4:	4639      	mov	r1, r7
		dInput  = (input - uPID->LastInput);
 80038e6:	e9cd ab02 	strd	sl, fp, [sp, #8]
		uPID->OutputSum     += (uPID->Ki * error);
 80038ea:	f7fc fdf5 	bl	80004d8 <__aeabi_dmul>
 80038ee:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 80038f2:	f7fc fc3b 	bl	800016c <__adddf3>
 80038f6:	4606      	mov	r6, r0
 80038f8:	460f      	mov	r7, r1
		if (!uPID->POnE)
 80038fa:	7823      	ldrb	r3, [r4, #0]
		uPID->OutputSum     += (uPID->Ki * error);
 80038fc:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (!uPID->POnE)
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	b97b      	cbnz	r3, 8003924 <PID_Compute+0x94>
			uPID->OutputSum -= uPID->Kp * dInput;
 8003904:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003908:	4650      	mov	r0, sl
 800390a:	4659      	mov	r1, fp
 800390c:	f7fc fde4 	bl	80004d8 <__aeabi_dmul>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4630      	mov	r0, r6
 8003916:	4639      	mov	r1, r7
 8003918:	f7fc fc26 	bl	8000168 <__aeabi_dsub>
 800391c:	4606      	mov	r6, r0
 800391e:	460f      	mov	r7, r1
 8003920:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (uPID->OutputSum > uPID->OutMax)
 8003924:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
 8003928:	4632      	mov	r2, r6
 800392a:	463b      	mov	r3, r7
 800392c:	4650      	mov	r0, sl
 800392e:	4659      	mov	r1, fp
 8003930:	f7fd f844 	bl	80009bc <__aeabi_dcmplt>
 8003934:	2800      	cmp	r0, #0
 8003936:	d14b      	bne.n	80039d0 <PID_Compute+0x140>
		else if (uPID->OutputSum < uPID->OutMin)
 8003938:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
 800393c:	4632      	mov	r2, r6
 800393e:	463b      	mov	r3, r7
 8003940:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003944:	f7fd f858 	bl	80009f8 <__aeabi_dcmpgt>
 8003948:	b128      	cbz	r0, 8003956 <PID_Compute+0xc6>
			uPID->OutputSum = uPID->OutMin;
 800394a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800394e:	4606      	mov	r6, r0
 8003950:	460f      	mov	r7, r1
 8003952:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
		if (uPID->POnE)
 8003956:	9b00      	ldr	r3, [sp, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d040      	beq.n	80039de <PID_Compute+0x14e>
			output = uPID->Kp * error;
 800395c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003960:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003964:	f7fc fdb8 	bl	80004d8 <__aeabi_dmul>
 8003968:	e9cd 0100 	strd	r0, r1, [sp]
		output += uPID->OutputSum - uPID->Kd * dInput;
 800396c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8003970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003974:	f7fc fdb0 	bl	80004d8 <__aeabi_dmul>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4630      	mov	r0, r6
 800397e:	4639      	mov	r1, r7
 8003980:	f7fc fbf2 	bl	8000168 <__aeabi_dsub>
 8003984:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003988:	f7fc fbf0 	bl	800016c <__adddf3>
 800398c:	4606      	mov	r6, r0
 800398e:	460f      	mov	r7, r1
		if (output > uPID->OutMax)
 8003990:	4650      	mov	r0, sl
 8003992:	4659      	mov	r1, fp
 8003994:	4632      	mov	r2, r6
 8003996:	463b      	mov	r3, r7
 8003998:	f7fd f810 	bl	80009bc <__aeabi_dcmplt>
 800399c:	b950      	cbnz	r0, 80039b4 <PID_Compute+0x124>
		else if (output < uPID->OutMin)
 800399e:	e9d4 ab18 	ldrd	sl, fp, [r4, #96]	; 0x60
 80039a2:	4632      	mov	r2, r6
 80039a4:	463b      	mov	r3, r7
 80039a6:	4650      	mov	r0, sl
 80039a8:	4659      	mov	r1, fp
 80039aa:	f7fd f825 	bl	80009f8 <__aeabi_dcmpgt>
 80039ae:	b908      	cbnz	r0, 80039b4 <PID_Compute+0x124>
		output += uPID->OutputSum - uPID->Kd * dInput;
 80039b0:	46b2      	mov	sl, r6
 80039b2:	46bb      	mov	fp, r7
		return _TRUE;
 80039b4:	2001      	movs	r0, #1
		*uPID->MyOutput = output;
 80039b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039b8:	e9c3 ab00 	strd	sl, fp, [r3]
		uPID->LastInput = input;
 80039bc:	e9c4 8916 	strd	r8, r9, [r4, #88]	; 0x58
		uPID->LastTime = now;
 80039c0:	6065      	str	r5, [r4, #4]
}
 80039c2:	b009      	add	sp, #36	; 0x24
 80039c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return _FALSE;
 80039c8:	2000      	movs	r0, #0
}
 80039ca:	b009      	add	sp, #36	; 0x24
 80039cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (uPID->POnE)
 80039d0:	9b00      	ldr	r3, [sp, #0]
 80039d2:	4656      	mov	r6, sl
 80039d4:	465f      	mov	r7, fp
			uPID->OutputSum = uPID->OutMax;
 80039d6:	e9c4 ab14 	strd	sl, fp, [r4, #80]	; 0x50
		if (uPID->POnE)
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1be      	bne.n	800395c <PID_Compute+0xcc>
			output = 0;
 80039de:	2200      	movs	r2, #0
 80039e0:	2300      	movs	r3, #0
 80039e2:	e9cd 2300 	strd	r2, r3, [sp]
 80039e6:	e7c1      	b.n	800396c <PID_Compute+0xdc>

080039e8 <PID_SetMode>:
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80039e8:	2901      	cmp	r1, #1
{
 80039ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039ee:	4604      	mov	r4, r0
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80039f0:	bf0c      	ite	eq
 80039f2:	2501      	moveq	r5, #1
 80039f4:	2500      	movne	r5, #0
	if (newAuto && !uPID->InAuto)
 80039f6:	d002      	beq.n	80039fe <PID_SetMode+0x16>
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80039f8:	7065      	strb	r5, [r4, #1]
}
 80039fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (newAuto && !uPID->InAuto)
 80039fe:	7843      	ldrb	r3, [r0, #1]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f9      	bne.n	80039f8 <PID_SetMode+0x10>
	uPID->LastInput = *uPID->MyInput;
 8003a04:	e9d0 3210 	ldrd	r3, r2, [r0, #64]	; 0x40
	uPID->OutputSum = *uPID->MyOutput;
 8003a08:	e9d2 6700 	ldrd	r6, r7, [r2]
	if (uPID->OutputSum > uPID->OutMax)
 8003a0c:	e9d0 891a 	ldrd	r8, r9, [r0, #104]	; 0x68
	uPID->OutputSum = *uPID->MyOutput;
 8003a10:	e9c0 6714 	strd	r6, r7, [r0, #80]	; 0x50
	if (uPID->OutputSum > uPID->OutMax)
 8003a14:	4639      	mov	r1, r7
	uPID->LastInput = *uPID->MyInput;
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
	if (uPID->OutputSum > uPID->OutMax)
 8003a1e:	4630      	mov	r0, r6
 8003a20:	4642      	mov	r2, r8
 8003a22:	464b      	mov	r3, r9
 8003a24:	f7fc ffe8 	bl	80009f8 <__aeabi_dcmpgt>
 8003a28:	b110      	cbz	r0, 8003a30 <PID_SetMode+0x48>
		uPID->OutputSum = uPID->OutMax;
 8003a2a:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
 8003a2e:	e7e3      	b.n	80039f8 <PID_SetMode+0x10>
	else if (uPID->OutputSum < uPID->OutMin)
 8003a30:	4630      	mov	r0, r6
 8003a32:	4639      	mov	r1, r7
 8003a34:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 8003a38:	4632      	mov	r2, r6
 8003a3a:	463b      	mov	r3, r7
 8003a3c:	f7fc ffbe 	bl	80009bc <__aeabi_dcmplt>
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d0d9      	beq.n	80039f8 <PID_SetMode+0x10>
		uPID->OutputSum = uPID->OutMin;
 8003a44:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
 8003a48:	e7d6      	b.n	80039f8 <PID_SetMode+0x10>
 8003a4a:	bf00      	nop

08003a4c <PID_SetOutputLimits>:
{
 8003a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a50:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003a54:	4614      	mov	r4, r2
 8003a56:	461d      	mov	r5, r3
 8003a58:	4682      	mov	sl, r0
	if (Min >= Max)
 8003a5a:	4632      	mov	r2, r6
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	4620      	mov	r0, r4
 8003a60:	4629      	mov	r1, r5
 8003a62:	f7fc ffbf 	bl	80009e4 <__aeabi_dcmpge>
 8003a66:	bb38      	cbnz	r0, 8003ab8 <PID_SetOutputLimits+0x6c>
	if (uPID->InAuto)
 8003a68:	f89a 3001 	ldrb.w	r3, [sl, #1]
	uPID->OutMin = Min;
 8003a6c:	e9ca 4518 	strd	r4, r5, [sl, #96]	; 0x60
	uPID->OutMax = Max;
 8003a70:	e9ca 671a 	strd	r6, r7, [sl, #104]	; 0x68
	if (uPID->InAuto)
 8003a74:	b303      	cbz	r3, 8003ab8 <PID_SetOutputLimits+0x6c>
		if (*uPID->MyOutput > uPID->OutMax)
 8003a76:	f8da b044 	ldr.w	fp, [sl, #68]	; 0x44
 8003a7a:	4632      	mov	r2, r6
 8003a7c:	e9db 8900 	ldrd	r8, r9, [fp]
 8003a80:	463b      	mov	r3, r7
 8003a82:	4640      	mov	r0, r8
 8003a84:	4649      	mov	r1, r9
 8003a86:	f7fc ffb7 	bl	80009f8 <__aeabi_dcmpgt>
 8003a8a:	b9b8      	cbnz	r0, 8003abc <PID_SetOutputLimits+0x70>
		else if (*uPID->MyOutput < uPID->OutMin)
 8003a8c:	4640      	mov	r0, r8
 8003a8e:	4649      	mov	r1, r9
 8003a90:	4622      	mov	r2, r4
 8003a92:	462b      	mov	r3, r5
 8003a94:	f7fc ff92 	bl	80009bc <__aeabi_dcmplt>
 8003a98:	b118      	cbz	r0, 8003aa2 <PID_SetOutputLimits+0x56>
			*uPID->MyOutput = uPID->OutMin;
 8003a9a:	e9cb 4500 	strd	r4, r5, [fp]
		if (uPID->OutputSum > uPID->OutMax)
 8003a9e:	e9da 671a 	ldrd	r6, r7, [sl, #104]	; 0x68
 8003aa2:	e9da 4514 	ldrd	r4, r5, [sl, #80]	; 0x50
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	463b      	mov	r3, r7
 8003aaa:	4620      	mov	r0, r4
 8003aac:	4629      	mov	r1, r5
 8003aae:	f7fc ffa3 	bl	80009f8 <__aeabi_dcmpgt>
 8003ab2:	b130      	cbz	r0, 8003ac2 <PID_SetOutputLimits+0x76>
			uPID->OutputSum = uPID->OutMax;
 8003ab4:	e9ca 6714 	strd	r6, r7, [sl, #80]	; 0x50
}
 8003ab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*uPID->MyOutput = uPID->OutMax;
 8003abc:	e9cb 6700 	strd	r6, r7, [fp]
 8003ac0:	e7ef      	b.n	8003aa2 <PID_SetOutputLimits+0x56>
		else if (uPID->OutputSum < uPID->OutMin)
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	e9da 4518 	ldrd	r4, r5, [sl, #96]	; 0x60
 8003aca:	4622      	mov	r2, r4
 8003acc:	462b      	mov	r3, r5
 8003ace:	f7fc ff75 	bl	80009bc <__aeabi_dcmplt>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <PID_SetOutputLimits+0x6c>
			uPID->OutputSum = uPID->OutMin;
 8003ad6:	e9ca 4514 	strd	r4, r5, [sl, #80]	; 0x50
		else { }
 8003ada:	e7ed      	b.n	8003ab8 <PID_SetOutputLimits+0x6c>
 8003adc:	0000      	movs	r0, r0
	...

08003ae0 <read_adc_value>:

struct buck_adc_para current_buck_adc_para,prev_buck_adc_para;
struct buck_cali_para calibrated_buck_para_value;
 PID_TypeDef TPID;

void read_adc_value(){
 8003ae0:	b530      	push	{r4, r5, lr}


	prev_buck_adc_para=current_buck_adc_para;
 8003ae2:	4b49      	ldr	r3, [pc, #292]	; (8003c08 <read_adc_value+0x128>)
 8003ae4:	4c49      	ldr	r4, [pc, #292]	; (8003c0c <read_adc_value+0x12c>)
	ADC_ChannelConfTypeDef sConfig = {0};
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003ae6:	2507      	movs	r5, #7
	prev_buck_adc_para=current_buck_adc_para;
 8003ae8:	e894 0003 	ldmia.w	r4, {r0, r1}
  sConfig.Channel = ADC_CHANNEL_2;
 8003aec:	2202      	movs	r2, #2
	prev_buck_adc_para=current_buck_adc_para;
 8003aee:	6018      	str	r0, [r3, #0]
 8003af0:	8099      	strh	r1, [r3, #4]
  sConfig.Channel = ADC_CHANNEL_2;
 8003af2:	2301      	movs	r3, #1
void read_adc_value(){
 8003af4:	b085      	sub	sp, #20
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003af6:	4669      	mov	r1, sp
 8003af8:	4845      	ldr	r0, [pc, #276]	; (8003c10 <read_adc_value+0x130>)
  sConfig.Channel = ADC_CHANNEL_2;
 8003afa:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003afe:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b00:	f000 fcde 	bl	80044c0 <HAL_ADC_ConfigChannel>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d16f      	bne.n	8003be8 <read_adc_value+0x108>
	 HAL_ADC_Start(&hadc1);
 8003b08:	4841      	ldr	r0, [pc, #260]	; (8003c10 <read_adc_value+0x130>)
 8003b0a:	f000 fdb7 	bl	800467c <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 1);
 8003b0e:	2101      	movs	r1, #1
 8003b10:	483f      	ldr	r0, [pc, #252]	; (8003c10 <read_adc_value+0x130>)
 8003b12:	f000 fc03 	bl	800431c <HAL_ADC_PollForConversion>
	 current_buck_adc_para.buck_current = HAL_ADC_GetValue(&hadc1);
 8003b16:	483e      	ldr	r0, [pc, #248]	; (8003c10 <read_adc_value+0x130>)
 8003b18:	f000 fcce 	bl	80044b8 <HAL_ADC_GetValue>
 8003b1c:	4603      	mov	r3, r0
	 HAL_ADC_Stop(&hadc1);
 8003b1e:	483c      	ldr	r0, [pc, #240]	; (8003c10 <read_adc_value+0x130>)
	 current_buck_adc_para.buck_current = HAL_ADC_GetValue(&hadc1);
 8003b20:	80a3      	strh	r3, [r4, #4]

}

void buck_voltage_adc(){

	ADC_ChannelConfTypeDef sConfig = {0};
 8003b22:	2500      	movs	r5, #0
	 HAL_ADC_Stop(&hadc1);
 8003b24:	f000 fbbc 	bl	80042a0 <HAL_ADC_Stop>
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003b28:	2203      	movs	r2, #3
 8003b2a:	2302      	movs	r3, #2
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b2c:	4669      	mov	r1, sp
 8003b2e:	4838      	ldr	r0, [pc, #224]	; (8003c10 <read_adc_value+0x130>)
  sConfig.Channel = ADC_CHANNEL_3;
 8003b30:	e9cd 2300 	strd	r2, r3, [sp]
	ADC_ChannelConfTypeDef sConfig = {0};
 8003b34:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b36:	f000 fcc3 	bl	80044c0 <HAL_ADC_ConfigChannel>
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	d15a      	bne.n	8003bf4 <read_adc_value+0x114>
	 HAL_ADC_Start(&hadc1);
 8003b3e:	4834      	ldr	r0, [pc, #208]	; (8003c10 <read_adc_value+0x130>)
 8003b40:	f000 fd9c 	bl	800467c <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 1);
 8003b44:	2101      	movs	r1, #1
 8003b46:	4832      	ldr	r0, [pc, #200]	; (8003c10 <read_adc_value+0x130>)
 8003b48:	f000 fbe8 	bl	800431c <HAL_ADC_PollForConversion>
	 current_buck_adc_para.buck_voltage = HAL_ADC_GetValue(&hadc1);
 8003b4c:	4830      	ldr	r0, [pc, #192]	; (8003c10 <read_adc_value+0x130>)
 8003b4e:	f000 fcb3 	bl	80044b8 <HAL_ADC_GetValue>
 8003b52:	4603      	mov	r3, r0
	 HAL_ADC_Stop(&hadc1);
 8003b54:	482e      	ldr	r0, [pc, #184]	; (8003c10 <read_adc_value+0x130>)
	 current_buck_adc_para.buck_voltage = HAL_ADC_GetValue(&hadc1);
 8003b56:	8063      	strh	r3, [r4, #2]
	ADC_ChannelConfTypeDef sConfig = {0};
 8003b58:	2500      	movs	r5, #0
	 HAL_ADC_Stop(&hadc1);
 8003b5a:	f000 fba1 	bl	80042a0 <HAL_ADC_Stop>
  sConfig.Channel = ADC_CHANNEL_3;
 8003b5e:	2203      	movs	r2, #3
 8003b60:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b62:	4669      	mov	r1, sp
 8003b64:	482a      	ldr	r0, [pc, #168]	; (8003c10 <read_adc_value+0x130>)
  sConfig.Channel = ADC_CHANNEL_3;
 8003b66:	e9cd 2300 	strd	r2, r3, [sp]
	ADC_ChannelConfTypeDef sConfig = {0};
 8003b6a:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b6c:	f000 fca8 	bl	80044c0 <HAL_ADC_ConfigChannel>
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d13c      	bne.n	8003bee <read_adc_value+0x10e>
	 HAL_ADC_Start(&hadc1);
 8003b74:	4826      	ldr	r0, [pc, #152]	; (8003c10 <read_adc_value+0x130>)
 8003b76:	f000 fd81 	bl	800467c <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 1);
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	4824      	ldr	r0, [pc, #144]	; (8003c10 <read_adc_value+0x130>)
 8003b7e:	f000 fbcd 	bl	800431c <HAL_ADC_PollForConversion>
	 current_buck_adc_para.buck_voltage = HAL_ADC_GetValue(&hadc1);
 8003b82:	4823      	ldr	r0, [pc, #140]	; (8003c10 <read_adc_value+0x130>)
 8003b84:	f000 fc98 	bl	80044b8 <HAL_ADC_GetValue>
 8003b88:	4603      	mov	r3, r0
	 HAL_ADC_Stop(&hadc1);
 8003b8a:	4821      	ldr	r0, [pc, #132]	; (8003c10 <read_adc_value+0x130>)
	 current_buck_adc_para.buck_voltage = HAL_ADC_GetValue(&hadc1);
 8003b8c:	8063      	strh	r3, [r4, #2]
	 HAL_ADC_Stop(&hadc1);
 8003b8e:	f000 fb87 	bl	80042a0 <HAL_ADC_Stop>
	calibrated_buck_para_value.calibrated_buck_current_output= (float)((current_buck_adc_para.buck_current)*(3.3))/(1024);
 8003b92:	88a0      	ldrh	r0, [r4, #4]
 8003b94:	f7fc fc36 	bl	8000404 <__aeabi_i2d>
 8003b98:	a319      	add	r3, pc, #100	; (adr r3, 8003c00 <read_adc_value+0x120>)
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	f7fc fc9b 	bl	80004d8 <__aeabi_dmul>
 8003ba2:	f7fc ff71 	bl	8000a88 <__aeabi_d2f>
 8003ba6:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8003baa:	f7fd f8cb 	bl	8000d44 <__aeabi_fmul>
 8003bae:	f7fc fc3b 	bl	8000428 <__aeabi_f2d>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4d17      	ldr	r5, [pc, #92]	; (8003c14 <read_adc_value+0x134>)
	calibrated_buck_para_value.calibrated_buck_voltage_output=(float)(31*(current_buck_adc_para.buck_voltage)*(3.3))/4096;
 8003bb8:	8860      	ldrh	r0, [r4, #2]
	calibrated_buck_para_value.calibrated_buck_current_output= (float)((current_buck_adc_para.buck_current)*(3.3))/(1024);
 8003bba:	e9c5 2306 	strd	r2, r3, [r5, #24]
	calibrated_buck_para_value.calibrated_buck_voltage_output=(float)(31*(current_buck_adc_para.buck_voltage)*(3.3))/4096;
 8003bbe:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8003bc2:	f7fc fc1f 	bl	8000404 <__aeabi_i2d>
 8003bc6:	a30e      	add	r3, pc, #56	; (adr r3, 8003c00 <read_adc_value+0x120>)
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f7fc fc84 	bl	80004d8 <__aeabi_dmul>
 8003bd0:	f7fc ff5a 	bl	8000a88 <__aeabi_d2f>
 8003bd4:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 8003bd8:	f7fd f8b4 	bl	8000d44 <__aeabi_fmul>
 8003bdc:	f7fc fc24 	bl	8000428 <__aeabi_f2d>
 8003be0:	e9c5 0104 	strd	r0, r1, [r5, #16]
}
 8003be4:	b005      	add	sp, #20
 8003be6:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003be8:	f7ff fc0e 	bl	8003408 <Error_Handler>
 8003bec:	e78c      	b.n	8003b08 <read_adc_value+0x28>
  {
    Error_Handler();
 8003bee:	f7ff fc0b 	bl	8003408 <Error_Handler>
 8003bf2:	e7bf      	b.n	8003b74 <read_adc_value+0x94>
 8003bf4:	f7ff fc08 	bl	8003408 <Error_Handler>
 8003bf8:	e7a1      	b.n	8003b3e <read_adc_value+0x5e>
 8003bfa:	bf00      	nop
 8003bfc:	f3af 8000 	nop.w
 8003c00:	66666666 	.word	0x66666666
 8003c04:	400a6666 	.word	0x400a6666
 8003c08:	200017e0 	.word	0x200017e0
 8003c0c:	200017d8 	.word	0x200017d8
 8003c10:	20001670 	.word	0x20001670
 8003c14:	200017b8 	.word	0x200017b8

08003c18 <pid_intialize>:





void pid_intialize(){
 8003c18:	b5f0      	push	{r4, r5, r6, r7, lr}

	 PID(&TPID, &(calibrated_buck_para_value.calibrated_buck_voltage_output), &(buck_convertor_current.pwm_out), &(buck_convertor_current.voltageout_set), 2, 5, 1, _PID_P_ON_E, _PID_CD_DIRECT);
 8003c1a:	2600      	movs	r6, #0
 8003c1c:	4f13      	ldr	r7, [pc, #76]	; (8003c6c <pid_intialize+0x54>)
void pid_intialize(){
 8003c1e:	b089      	sub	sp, #36	; 0x24
	 PID(&TPID, &(calibrated_buck_para_value.calibrated_buck_voltage_output), &(buck_convertor_current.pwm_out), &(buck_convertor_current.voltageout_set), 2, 5, 1, _PID_P_ON_E, _PID_CD_DIRECT);
 8003c20:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003c24:	2600      	movs	r6, #0
 8003c26:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8003c2a:	2501      	movs	r5, #1
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2000      	movs	r0, #0
 8003c30:	e9cd 6700 	strd	r6, r7, [sp]

	  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
	  //PID_SetSampleTime(&TPID, 2);
	  PID_SetOutputLimits(&TPID, 0, 1000);
 8003c34:	2600      	movs	r6, #0
	 PID(&TPID, &(calibrated_buck_para_value.calibrated_buck_voltage_output), &(buck_convertor_current.pwm_out), &(buck_convertor_current.voltageout_set), 2, 5, 1, _PID_P_ON_E, _PID_CD_DIRECT);
 8003c36:	4c0e      	ldr	r4, [pc, #56]	; (8003c70 <pid_intialize+0x58>)
 8003c38:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <pid_intialize+0x5c>)
 8003c3a:	490f      	ldr	r1, [pc, #60]	; (8003c78 <pid_intialize+0x60>)
 8003c3c:	9207      	str	r2, [sp, #28]
 8003c3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c42:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003c46:	4620      	mov	r0, r4
 8003c48:	490c      	ldr	r1, [pc, #48]	; (8003c7c <pid_intialize+0x64>)
	  PID_SetOutputLimits(&TPID, 0, 1000);
 8003c4a:	4f0d      	ldr	r7, [pc, #52]	; (8003c80 <pid_intialize+0x68>)
	 PID(&TPID, &(calibrated_buck_para_value.calibrated_buck_voltage_output), &(buck_convertor_current.pwm_out), &(buck_convertor_current.voltageout_set), 2, 5, 1, _PID_P_ON_E, _PID_CD_DIRECT);
 8003c4c:	9506      	str	r5, [sp, #24]
 8003c4e:	f7ff fd8f 	bl	8003770 <PID>
	  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8003c52:	4629      	mov	r1, r5
 8003c54:	4620      	mov	r0, r4
 8003c56:	f7ff fec7 	bl	80039e8 <PID_SetMode>
	  PID_SetOutputLimits(&TPID, 0, 1000);
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	4620      	mov	r0, r4
 8003c60:	e9cd 6700 	strd	r6, r7, [sp]
 8003c64:	f7ff fef2 	bl	8003a4c <PID_SetOutputLimits>



}
 8003c68:	b009      	add	sp, #36	; 0x24
 8003c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c6c:	40140000 	.word	0x40140000
 8003c70:	20001748 	.word	0x20001748
 8003c74:	20000260 	.word	0x20000260
 8003c78:	3ff00000 	.word	0x3ff00000
 8003c7c:	200017c8 	.word	0x200017c8
 8003c80:	408f4000 	.word	0x408f4000

08003c84 <program_flow>:
#include "pid.h"
struct _update_real   lcd_update_,sw3516_update_,adc_update_={0,0};

TIM_HandleTypeDef htim1;

void program_flow(){
 8003c84:	b538      	push	{r3, r4, r5, lr}

    if(adc_update_._flag || sw3516_update_._flag || lcd_update_._flag){
 8003c86:	4c17      	ldr	r4, [pc, #92]	; (8003ce4 <program_flow+0x60>)
 8003c88:	7823      	ldrb	r3, [r4, #0]
 8003c8a:	b973      	cbnz	r3, 8003caa <program_flow+0x26>
 8003c8c:	4d16      	ldr	r5, [pc, #88]	; (8003ce8 <program_flow+0x64>)
 8003c8e:	782b      	ldrb	r3, [r5, #0]
 8003c90:	b31b      	cbz	r3, 8003cda <program_flow+0x56>
	}

	if(sw3516_update_._flag==1){


		sw3516_read();
 8003c92:	f7fd fbad 	bl	80013f0 <sw3516_read>
		sw3516_update_._flag=0;
 8003c96:	2200      	movs	r2, #0
	}
	if(lcd_update_._flag==1){
 8003c98:	4c14      	ldr	r4, [pc, #80]	; (8003cec <program_flow+0x68>)
		sw3516_update_._flag=0;
 8003c9a:	702a      	strb	r2, [r5, #0]
	if(lcd_update_._flag==1){
 8003c9c:	7823      	ldrb	r3, [r4, #0]
 8003c9e:	b99b      	cbnz	r3, 8003cc8 <program_flow+0x44>

	}
	HAL_TIM_Base_Start_IT(&htim1);
    }

}
 8003ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_Base_Start_IT(&htim1);
 8003ca4:	4812      	ldr	r0, [pc, #72]	; (8003cf0 <program_flow+0x6c>)
 8003ca6:	f002 b957 	b.w	8005f58 <HAL_TIM_Base_Start_IT>
		read_adc_value();
 8003caa:	f7ff ff19 	bl	8003ae0 <read_adc_value>
		PID_Compute(&TPID);
 8003cae:	4811      	ldr	r0, [pc, #68]	; (8003cf4 <program_flow+0x70>)
 8003cb0:	f7ff fdee 	bl	8003890 <PID_Compute>
		adc_update_._flag=0;
 8003cb4:	2200      	movs	r2, #0
	if(sw3516_update_._flag==1){
 8003cb6:	4d0c      	ldr	r5, [pc, #48]	; (8003ce8 <program_flow+0x64>)
		adc_update_._flag=0;
 8003cb8:	7022      	strb	r2, [r4, #0]
	if(sw3516_update_._flag==1){
 8003cba:	782b      	ldrb	r3, [r5, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e8      	bne.n	8003c92 <program_flow+0xe>
	if(lcd_update_._flag==1){
 8003cc0:	4c0a      	ldr	r4, [pc, #40]	; (8003cec <program_flow+0x68>)
 8003cc2:	7823      	ldrb	r3, [r4, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0eb      	beq.n	8003ca0 <program_flow+0x1c>
		usb_charging_page_msg();
 8003cc8:	f7fd fba4 	bl	8001414 <usb_charging_page_msg>
		lcd_update_._flag=0;
 8003ccc:	2300      	movs	r3, #0
	HAL_TIM_Base_Start_IT(&htim1);
 8003cce:	4808      	ldr	r0, [pc, #32]	; (8003cf0 <program_flow+0x6c>)
		lcd_update_._flag=0;
 8003cd0:	7023      	strb	r3, [r4, #0]
}
 8003cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_Base_Start_IT(&htim1);
 8003cd6:	f002 b93f 	b.w	8005f58 <HAL_TIM_Base_Start_IT>
    if(adc_update_._flag || sw3516_update_._flag || lcd_update_._flag){
 8003cda:	4c04      	ldr	r4, [pc, #16]	; (8003cec <program_flow+0x68>)
 8003cdc:	7823      	ldrb	r3, [r4, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f2      	bne.n	8003cc8 <program_flow+0x44>
}
 8003ce2:	bd38      	pop	{r3, r4, r5, pc}
 8003ce4:	200017e8 	.word	0x200017e8
 8003ce8:	20001838 	.word	0x20001838
 8003cec:	20001834 	.word	0x20001834
 8003cf0:	200017ec 	.word	0x200017ec
 8003cf4:	20001748 	.word	0x20001748

08003cf8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{


 if(htim->Instance==TIM1){
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003cfa:	6802      	ldr	r2, [r0, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d000      	beq.n	8003d02 <HAL_TIM_PeriodElapsedCallback+0xa>
 8003d00:	4770      	bx	lr
{
 8003d02:	b430      	push	{r4, r5}
	lcd_update_._update_timer_counter++;
 8003d04:	4d19      	ldr	r5, [pc, #100]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x74>)

	sw3516_update_._update_timer_counter++;
 8003d06:	4c1a      	ldr	r4, [pc, #104]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x78>)
	adc_update_._update_timer_counter++;
 8003d08:	481a      	ldr	r0, [pc, #104]	; (8003d74 <HAL_TIM_PeriodElapsedCallback+0x7c>)
	lcd_update_._update_timer_counter++;
 8003d0a:	8869      	ldrh	r1, [r5, #2]
	sw3516_update_._update_timer_counter++;
 8003d0c:	8862      	ldrh	r2, [r4, #2]
	adc_update_._update_timer_counter++;
 8003d0e:	8843      	ldrh	r3, [r0, #2]
	lcd_update_._update_timer_counter++;
 8003d10:	3101      	adds	r1, #1
 8003d12:	b289      	uxth	r1, r1
	sw3516_update_._update_timer_counter++;
 8003d14:	3201      	adds	r2, #1
	adc_update_._update_timer_counter++;
 8003d16:	3301      	adds	r3, #1
	sw3516_update_._update_timer_counter++;
 8003d18:	b292      	uxth	r2, r2
	adc_update_._update_timer_counter++;
 8003d1a:	b29b      	uxth	r3, r3

	if(lcd_update_._update_timer_counter==lcd_update_timer_value){
 8003d1c:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
	lcd_update_._update_timer_counter++;
 8003d20:	8069      	strh	r1, [r5, #2]
	sw3516_update_._update_timer_counter++;
 8003d22:	8062      	strh	r2, [r4, #2]
	adc_update_._update_timer_counter++;
 8003d24:	8043      	strh	r3, [r0, #2]
	if(lcd_update_._update_timer_counter==lcd_update_timer_value){
 8003d26:	d016      	beq.n	8003d56 <HAL_TIM_PeriodElapsedCallback+0x5e>

		lcd_update_._update_timer_counter=0;
		lcd_update_._flag=1;
	}
	if(sw3516_update_._update_timer_counter == sw3516_update_timer_value){
 8003d28:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8003d2c:	d00c      	beq.n	8003d48 <HAL_TIM_PeriodElapsedCallback+0x50>

		sw3516_update_._update_timer_counter=0;
		sw3516_update_._flag=1;
		}

	if(adc_update_._update_timer_counter == adc_update_timer_value){
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d003      	beq.n	8003d3a <HAL_TIM_PeriodElapsedCallback+0x42>
		adc_update_._flag=1;
		}
	HAL_TIM_Base_Stop_IT(&htim1);
 }

}
 8003d32:	bc30      	pop	{r4, r5}
	HAL_TIM_Base_Stop_IT(&htim1);
 8003d34:	4810      	ldr	r0, [pc, #64]	; (8003d78 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003d36:	f002 b93b 	b.w	8005fb0 <HAL_TIM_Base_Stop_IT>
		adc_update_._update_timer_counter=0;
 8003d3a:	2200      	movs	r2, #0
}
 8003d3c:	bc30      	pop	{r4, r5}
		adc_update_._flag=1;
 8003d3e:	7003      	strb	r3, [r0, #0]
		adc_update_._update_timer_counter=0;
 8003d40:	8042      	strh	r2, [r0, #2]
	HAL_TIM_Base_Stop_IT(&htim1);
 8003d42:	480d      	ldr	r0, [pc, #52]	; (8003d78 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003d44:	f002 b934 	b.w	8005fb0 <HAL_TIM_Base_Stop_IT>
		sw3516_update_._update_timer_counter=0;
 8003d48:	2100      	movs	r1, #0
		sw3516_update_._flag=1;
 8003d4a:	2201      	movs	r2, #1
	if(adc_update_._update_timer_counter == adc_update_timer_value){
 8003d4c:	2b01      	cmp	r3, #1
		sw3516_update_._update_timer_counter=0;
 8003d4e:	8061      	strh	r1, [r4, #2]
		sw3516_update_._flag=1;
 8003d50:	7022      	strb	r2, [r4, #0]
	if(adc_update_._update_timer_counter == adc_update_timer_value){
 8003d52:	d1ee      	bne.n	8003d32 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8003d54:	e7f1      	b.n	8003d3a <HAL_TIM_PeriodElapsedCallback+0x42>
		lcd_update_._update_timer_counter=0;
 8003d56:	2100      	movs	r1, #0
 8003d58:	8069      	strh	r1, [r5, #2]
		lcd_update_._flag=1;
 8003d5a:	2101      	movs	r1, #1
	if(sw3516_update_._update_timer_counter == sw3516_update_timer_value){
 8003d5c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
		lcd_update_._flag=1;
 8003d60:	7029      	strb	r1, [r5, #0]
	if(sw3516_update_._update_timer_counter == sw3516_update_timer_value){
 8003d62:	d1e4      	bne.n	8003d2e <HAL_TIM_PeriodElapsedCallback+0x36>
 8003d64:	e7f0      	b.n	8003d48 <HAL_TIM_PeriodElapsedCallback+0x50>
 8003d66:	bf00      	nop
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	20001834 	.word	0x20001834
 8003d70:	20001838 	.word	0x20001838
 8003d74:	200017e8 	.word	0x200017e8
 8003d78:	200017ec 	.word	0x200017ec

08003d7c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_MspInit+0x2c>)
{
 8003d7e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	619a      	str	r2, [r3, #24]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	f002 0201 	and.w	r2, r2, #1
 8003d8e:	9200      	str	r2, [sp, #0]
 8003d90:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d98:	61da      	str	r2, [r3, #28]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003da4:	b002      	add	sp, #8
 8003da6:	4770      	bx	lr
 8003da8:	40021000 	.word	0x40021000

08003dac <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	2300      	movs	r3, #0
{
 8003dae:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC1)
 8003db0:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <HAL_ADC_MspInit+0x5c>)
 8003db2:	6801      	ldr	r1, [r0, #0]
{
 8003db4:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 8003db6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003dbc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hadc->Instance==ADC1)
 8003dc0:	d001      	beq.n	8003dc6 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003dc2:	b007      	add	sp, #28
 8003dc4:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = buck_current_sense_Pin|buck_voltage_sensor_Pin|buck_temperature_Pin;
 8003dc6:	241c      	movs	r4, #28
 8003dc8:	2503      	movs	r5, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003dca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dce:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003dd2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd4:	480d      	ldr	r0, [pc, #52]	; (8003e0c <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dda:	619a      	str	r2, [r3, #24]
 8003ddc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dde:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003de0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003de4:	9200      	str	r2, [sp, #0]
 8003de6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	f042 0204 	orr.w	r2, r2, #4
 8003dee:	619a      	str	r2, [r3, #24]
 8003df0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = buck_current_sense_Pin|buck_voltage_sensor_Pin|buck_temperature_Pin;
 8003df2:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfe:	f000 fd19 	bl	8004834 <HAL_GPIO_Init>
}
 8003e02:	b007      	add	sp, #28
 8003e04:	bd30      	pop	{r4, r5, pc}
 8003e06:	bf00      	nop
 8003e08:	40012400 	.word	0x40012400
 8003e0c:	40010800 	.word	0x40010800

08003e10 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e10:	2300      	movs	r3, #0
{
 8003e12:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8003e14:	4a14      	ldr	r2, [pc, #80]	; (8003e68 <HAL_I2C_MspInit+0x58>)
 8003e16:	6801      	ldr	r1, [r0, #0]
{
 8003e18:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C1)
 8003e1a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e1c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003e20:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e26:	b006      	add	sp, #24
 8003e28:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e2a:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e2c:	26c0      	movs	r6, #192	; 0xc0
 8003e2e:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e30:	4c0e      	ldr	r4, [pc, #56]	; (8003e6c <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e32:	480f      	ldr	r0, [pc, #60]	; (8003e70 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e34:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e36:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e38:	f043 0308 	orr.w	r3, r3, #8
 8003e3c:	61a3      	str	r3, [r4, #24]
 8003e3e:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e40:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e4c:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e4e:	f000 fcf1 	bl	8004834 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e52:	69e3      	ldr	r3, [r4, #28]
 8003e54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e58:	61e3      	str	r3, [r4, #28]
 8003e5a:	69e3      	ldr	r3, [r4, #28]
 8003e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	9b01      	ldr	r3, [sp, #4]
}
 8003e64:	b006      	add	sp, #24
 8003e66:	bdd0      	pop	{r4, r6, r7, pc}
 8003e68:	40005400 	.word	0x40005400
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40010c00 	.word	0x40010c00

08003e74 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003e74:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <HAL_TIM_Base_MspInit+0x3c>)
 8003e76:	6802      	ldr	r2, [r0, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d000      	beq.n	8003e7e <HAL_TIM_Base_MspInit+0xa>
 8003e7c:	4770      	bx	lr

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003e7e:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e80:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8003e84:	6999      	ldr	r1, [r3, #24]
{
 8003e86:	b500      	push	{lr}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e88:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003e8c:	6199      	str	r1, [r3, #24]
 8003e8e:	699b      	ldr	r3, [r3, #24]
{
 8003e90:	b083      	sub	sp, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e96:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003e98:	2019      	movs	r0, #25
 8003e9a:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e9c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003e9e:	f000 fc65 	bl	800476c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003ea2:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003ea4:	b003      	add	sp, #12
 8003ea6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003eaa:	f000 bc9d 	b.w	80047e8 <HAL_NVIC_EnableIRQ>
 8003eae:	bf00      	nop
 8003eb0:	40012c00 	.word	0x40012c00

08003eb4 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <HAL_TIM_PWM_MspInit+0x28>)
 8003eb6:	6802      	ldr	r2, [r0, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d000      	beq.n	8003ebe <HAL_TIM_PWM_MspInit+0xa>
 8003ebc:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ebe:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8003ec2:	69da      	ldr	r2, [r3, #28]
{
 8003ec4:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ec6:	f042 0202 	orr.w	r2, r2, #2
 8003eca:	61da      	str	r2, [r3, #28]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ed6:	b002      	add	sp, #8
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40000400 	.word	0x40000400

08003ee0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee0:	2300      	movs	r3, #0
{
 8003ee2:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM3)
 8003ee4:	4a11      	ldr	r2, [pc, #68]	; (8003f2c <HAL_TIM_MspPostInit+0x4c>)
 8003ee6:	6801      	ldr	r1, [r0, #0]
{
 8003ee8:	b086      	sub	sp, #24
  if(htim->Instance==TIM3)
 8003eea:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003ef0:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM3)
 8003ef4:	d001      	beq.n	8003efa <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ef6:	b006      	add	sp, #24
 8003ef8:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = pwm_1_Pin|pwm_2_Pin;
 8003efa:	24c0      	movs	r4, #192	; 0xc0
 8003efc:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efe:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f04:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003f08:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f0a:	4809      	ldr	r0, [pc, #36]	; (8003f30 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0c:	f042 0204 	orr.w	r2, r2, #4
 8003f10:	619a      	str	r2, [r3, #24]
 8003f12:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f14:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = pwm_1_Pin|pwm_2_Pin;
 8003f1c:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f20:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f22:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f24:	f000 fc86 	bl	8004834 <HAL_GPIO_Init>
}
 8003f28:	b006      	add	sp, #24
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40010800 	.word	0x40010800

08003f34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f34:	e7fe      	b.n	8003f34 <NMI_Handler>
 8003f36:	bf00      	nop

08003f38 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f38:	e7fe      	b.n	8003f38 <HardFault_Handler>
 8003f3a:	bf00      	nop

08003f3c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f3c:	e7fe      	b.n	8003f3c <MemManage_Handler>
 8003f3e:	bf00      	nop

08003f40 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f40:	e7fe      	b.n	8003f40 <BusFault_Handler>
 8003f42:	bf00      	nop

08003f44 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f44:	e7fe      	b.n	8003f44 <UsageFault_Handler>
 8003f46:	bf00      	nop

08003f48 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop

08003f4c <DebugMon_Handler>:
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop

08003f50 <PendSV_Handler>:
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop

08003f54 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f54:	f000 b8c2 	b.w	80040dc <HAL_IncTick>

08003f58 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f58:	4801      	ldr	r0, [pc, #4]	; (8003f60 <TIM1_UP_IRQHandler+0x8>)
 8003f5a:	f002 bab7 	b.w	80064cc <HAL_TIM_IRQHandler>
 8003f5e:	bf00      	nop
 8003f60:	200017ec 	.word	0x200017ec

08003f64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003f66:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003f6a:	f000 fd75 	bl	8004a58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_push_button_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(ENC_push_button_Pin);
 8003f72:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003f76:	f000 bd6f 	b.w	8004a58 <HAL_GPIO_EXTI_IRQHandler>
 8003f7a:	bf00      	nop

08003f7c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	4770      	bx	lr

08003f80 <_kill>:

int _kill(int pid, int sig)
{
 8003f80:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003f82:	f004 febf 	bl	8008d04 <__errno>
 8003f86:	2216      	movs	r2, #22
 8003f88:	4603      	mov	r3, r0
	return -1;
}
 8003f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	errno = EINVAL;
 8003f8e:	601a      	str	r2, [r3, #0]
}
 8003f90:	bd08      	pop	{r3, pc}
 8003f92:	bf00      	nop

08003f94 <_exit>:

void _exit (int status)
{
 8003f94:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003f96:	f004 feb5 	bl	8008d04 <__errno>
 8003f9a:	2316      	movs	r3, #22
 8003f9c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8003f9e:	e7fe      	b.n	8003f9e <_exit+0xa>

08003fa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fa0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fa2:	1e16      	subs	r6, r2, #0
 8003fa4:	dd07      	ble.n	8003fb6 <_read+0x16>
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8003faa:	f3af 8000 	nop.w
 8003fae:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fb2:	42a5      	cmp	r5, r4
 8003fb4:	d1f9      	bne.n	8003faa <_read+0xa>
	}

return len;
}
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	bd70      	pop	{r4, r5, r6, pc}
 8003fba:	bf00      	nop

08003fbc <_close>:
}

int _close(int file)
{
	return -1;
}
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop

08003fc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003fc8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003fca:	604b      	str	r3, [r1, #4]
}
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop

08003fd0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	4770      	bx	lr

08003fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	4770      	bx	lr

08003fd8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fd8:	490d      	ldr	r1, [pc, #52]	; (8004010 <_sbrk+0x38>)
{
 8003fda:	4603      	mov	r3, r0
 8003fdc:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fde:	4a0d      	ldr	r2, [pc, #52]	; (8004014 <_sbrk+0x3c>)
 8003fe0:	4c0d      	ldr	r4, [pc, #52]	; (8004018 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8003fe2:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fe4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8003fe6:	b120      	cbz	r0, 8003ff2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fe8:	4403      	add	r3, r0
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d807      	bhi.n	8003ffe <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003fee:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8003ff0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003ff2:	4c0a      	ldr	r4, [pc, #40]	; (800401c <_sbrk+0x44>)
 8003ff4:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8003ff6:	4403      	add	r3, r0
 8003ff8:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8003ffa:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003ffc:	d9f7      	bls.n	8003fee <_sbrk+0x16>
    errno = ENOMEM;
 8003ffe:	f004 fe81 	bl	8008d04 <__errno>
 8004002:	220c      	movs	r2, #12
 8004004:	4603      	mov	r3, r0
    return (void *)-1;
 8004006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = ENOMEM;
 800400a:	601a      	str	r2, [r3, #0]
}
 800400c:	bd10      	pop	{r4, pc}
 800400e:	bf00      	nop
 8004010:	2000183c 	.word	0x2000183c
 8004014:	20005000 	.word	0x20005000
 8004018:	00000400 	.word	0x00000400
 800401c:	200018d8 	.word	0x200018d8

08004020 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop

08004024 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004024:	480c      	ldr	r0, [pc, #48]	; (8004058 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004026:	490d      	ldr	r1, [pc, #52]	; (800405c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004028:	4a0d      	ldr	r2, [pc, #52]	; (8004060 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800402a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800402c:	e002      	b.n	8004034 <LoopCopyDataInit>

0800402e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800402e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004032:	3304      	adds	r3, #4

08004034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004038:	d3f9      	bcc.n	800402e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800403a:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800403c:	4c0a      	ldr	r4, [pc, #40]	; (8004068 <LoopFillZerobss+0x22>)
  movs r3, #0
 800403e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004040:	e001      	b.n	8004046 <LoopFillZerobss>

08004042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004044:	3204      	adds	r2, #4

08004046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004048:	d3fb      	bcc.n	8004042 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800404a:	f7ff ffe9 	bl	8004020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800404e:	f004 fe5f 	bl	8008d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004052:	f7ff f851 	bl	80030f8 <main>
  bx lr
 8004056:	4770      	bx	lr
  ldr r0, =_sdata
 8004058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800405c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004060:	08012a4c 	.word	0x08012a4c
  ldr r2, =_sbss
 8004064:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004068:	200018d8 	.word	0x200018d8

0800406c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800406c:	e7fe      	b.n	800406c <ADC1_2_IRQHandler>
	...

08004070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004070:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004076:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <HAL_InitTick+0x3c>)
{
 8004078:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800407a:	7811      	ldrb	r1, [r2, #0]
 800407c:	4a0c      	ldr	r2, [pc, #48]	; (80040b0 <HAL_InitTick+0x40>)
 800407e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	fbb2 f0f3 	udiv	r0, r2, r3
 8004088:	f000 fbbc 	bl	8004804 <HAL_SYSTICK_Config>
 800408c:	b908      	cbnz	r0, 8004092 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800408e:	2d0f      	cmp	r5, #15
 8004090:	d901      	bls.n	8004096 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8004092:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004094:	bd38      	pop	{r3, r4, r5, pc}
 8004096:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004098:	4602      	mov	r2, r0
 800409a:	4629      	mov	r1, r5
 800409c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040a0:	f000 fb64 	bl	800476c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <HAL_InitTick+0x44>)
 80040a6:	4620      	mov	r0, r4
 80040a8:	601d      	str	r5, [r3, #0]
}
 80040aa:	bd38      	pop	{r3, r4, r5, pc}
 80040ac:	2000000c 	.word	0x2000000c
 80040b0:	20000008 	.word	0x20000008
 80040b4:	20000010 	.word	0x20000010

080040b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040b8:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <HAL_Init+0x20>)
{
 80040ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040bc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040be:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040c0:	f043 0310 	orr.w	r3, r3, #16
 80040c4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040c6:	f000 fb3f 	bl	8004748 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80040ca:	200f      	movs	r0, #15
 80040cc:	f7ff ffd0 	bl	8004070 <HAL_InitTick>
  HAL_MspInit();
 80040d0:	f7ff fe54 	bl	8003d7c <HAL_MspInit>
}
 80040d4:	2000      	movs	r0, #0
 80040d6:	bd08      	pop	{r3, pc}
 80040d8:	40022000 	.word	0x40022000

080040dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80040dc:	4a03      	ldr	r2, [pc, #12]	; (80040ec <HAL_IncTick+0x10>)
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <HAL_IncTick+0x14>)
 80040e0:	6811      	ldr	r1, [r2, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	440b      	add	r3, r1
 80040e6:	6013      	str	r3, [r2, #0]
}
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20001840 	.word	0x20001840
 80040f0:	2000000c 	.word	0x2000000c

080040f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80040f4:	4b01      	ldr	r3, [pc, #4]	; (80040fc <HAL_GetTick+0x8>)
 80040f6:	6818      	ldr	r0, [r3, #0]
}
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20001840 	.word	0x20001840

08004100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004104:	f7ff fff6 	bl	80040f4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004108:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800410a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800410c:	d002      	beq.n	8004114 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800410e:	4b04      	ldr	r3, [pc, #16]	; (8004120 <HAL_Delay+0x20>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004114:	f7ff ffee 	bl	80040f4 <HAL_GetTick>
 8004118:	1b40      	subs	r0, r0, r5
 800411a:	42a0      	cmp	r0, r4
 800411c:	d3fa      	bcc.n	8004114 <HAL_Delay+0x14>
  {
  }
}
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	2000000c 	.word	0x2000000c

08004124 <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004124:	2800      	cmp	r0, #0
 8004126:	f000 8089 	beq.w	800423c <HAL_ADC_Init+0x118>
{
 800412a:	b538      	push	{r3, r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800412c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800412e:	4604      	mov	r4, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d06b      	beq.n	800420c <HAL_ADC_Init+0xe8>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	07d1      	lsls	r1, r2, #31
 800413a:	d440      	bmi.n	80041be <HAL_ADC_Init+0x9a>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800413c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800413e:	06d2      	lsls	r2, r2, #27
 8004140:	d45e      	bmi.n	8004200 <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 8004142:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004144:	6861      	ldr	r1, [r4, #4]
 8004146:	69e0      	ldr	r0, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8004148:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800414c:	7b25      	ldrb	r5, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800414e:	f022 0202 	bic.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004152:	4301      	orrs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 8004154:	f042 0202 	orr.w	r2, r2, #2
 8004158:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800415a:	ea41 0245 	orr.w	r2, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800415e:	68a1      	ldr	r1, [r4, #8]
 8004160:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004164:	d058      	beq.n	8004218 <HAL_ADC_Init+0xf4>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004166:	7d20      	ldrb	r0, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004168:	2901      	cmp	r1, #1
 800416a:	bf0c      	ite	eq
 800416c:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 8004170:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004174:	2801      	cmp	r0, #1
 8004176:	d06d      	beq.n	8004254 <HAL_ADC_Init+0x130>
      MODIFY_REG(hadc->Instance->CR1,
 8004178:	6858      	ldr	r0, [r3, #4]
 800417a:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 800417e:	ea40 000c 	orr.w	r0, r0, ip
 8004182:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8004184:	689d      	ldr	r5, [r3, #8]
 8004186:	4844      	ldr	r0, [pc, #272]	; (8004298 <HAL_ADC_Init+0x174>)
 8004188:	4028      	ands	r0, r5
 800418a:	4310      	orrs	r0, r2
 800418c:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800418e:	2901      	cmp	r1, #1
 8004190:	d050      	beq.n	8004234 <HAL_ADC_Init+0x110>
  uint32_t tmp_sqr1 = 0U;
 8004192:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 8004194:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004196:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800419a:	4301      	orrs	r1, r0
 800419c:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800419e:	6899      	ldr	r1, [r3, #8]
 80041a0:	4b3e      	ldr	r3, [pc, #248]	; (800429c <HAL_ADC_Init+0x178>)
 80041a2:	400b      	ands	r3, r1
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d04b      	beq.n	8004240 <HAL_ADC_Init+0x11c>
      tmp_hal_status = HAL_ERROR;
 80041a8:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80041aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041ac:	f023 0312 	bic.w	r3, r3, #18
 80041b0:	f043 0310 	orr.w	r3, r3, #16
 80041b4:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041b8:	4303      	orrs	r3, r0
 80041ba:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80041bc:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	f022 0201 	bic.w	r2, r2, #1
 80041c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041c6:	f7ff ff95 	bl	80040f4 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80041ca:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80041cc:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	07d2      	lsls	r2, r2, #31
 80041d2:	d5b3      	bpl.n	800413c <HAL_ADC_Init+0x18>
 80041d4:	e002      	b.n	80041dc <HAL_ADC_Init+0xb8>
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	07d1      	lsls	r1, r2, #31
 80041da:	d5af      	bpl.n	800413c <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041dc:	f7ff ff8a 	bl	80040f4 <HAL_GetTick>
 80041e0:	1b40      	subs	r0, r0, r5
 80041e2:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80041e4:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041e6:	d9f6      	bls.n	80041d6 <HAL_ADC_Init+0xb2>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	07d0      	lsls	r0, r2, #31
 80041ec:	d5f3      	bpl.n	80041d6 <HAL_ADC_Init+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041f0:	f043 0310 	orr.w	r3, r3, #16
 80041f4:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80041fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8004202:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004204:	f043 0310 	orr.w	r3, r3, #16
 8004208:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800420a:	bd38      	pop	{r3, r4, r5, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 800420c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800420e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8004212:	f7ff fdcb 	bl	8003dac <HAL_ADC_MspInit>
 8004216:	e78d      	b.n	8004134 <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004218:	7d20      	ldrb	r0, [r4, #20]
 800421a:	2801      	cmp	r0, #1
 800421c:	d019      	beq.n	8004252 <HAL_ADC_Init+0x12e>
      MODIFY_REG(hadc->Instance->CR1,
 800421e:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8004220:	491d      	ldr	r1, [pc, #116]	; (8004298 <HAL_ADC_Init+0x174>)
      MODIFY_REG(hadc->Instance->CR1,
 8004222:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 8004226:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800422a:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800422c:	6898      	ldr	r0, [r3, #8]
 800422e:	4001      	ands	r1, r0
 8004230:	4311      	orrs	r1, r2
 8004232:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004234:	6921      	ldr	r1, [r4, #16]
 8004236:	3901      	subs	r1, #1
 8004238:	0508      	lsls	r0, r1, #20
 800423a:	e7ab      	b.n	8004194 <HAL_ADC_Init+0x70>
    return HAL_ERROR;
 800423c:	2001      	movs	r0, #1
}
 800423e:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8004240:	2000      	movs	r0, #0
 8004242:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8004244:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8004250:	bd38      	pop	{r3, r4, r5, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004252:	468c      	mov	ip, r1
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004254:	b1c5      	cbz	r5, 8004288 <HAL_ADC_Init+0x164>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004256:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004258:	f040 0020 	orr.w	r0, r0, #32
 800425c:	62a0      	str	r0, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800425e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004260:	f040 0001 	orr.w	r0, r0, #1
 8004264:	62e0      	str	r0, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8004266:	6858      	ldr	r0, [r3, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004268:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800426c:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 8004270:	ea40 000c 	orr.w	r0, r0, ip
 8004274:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8004276:	689d      	ldr	r5, [r3, #8]
 8004278:	4807      	ldr	r0, [pc, #28]	; (8004298 <HAL_ADC_Init+0x174>)
 800427a:	ea00 0005 	and.w	r0, r0, r5
 800427e:	ea40 0002 	orr.w	r0, r0, r2
 8004282:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004284:	d183      	bne.n	800418e <HAL_ADC_Init+0x6a>
 8004286:	e7d5      	b.n	8004234 <HAL_ADC_Init+0x110>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004288:	69a0      	ldr	r0, [r4, #24]
 800428a:	3801      	subs	r0, #1
 800428c:	ea4c 3040 	orr.w	r0, ip, r0, lsl #13
 8004290:	f440 6c00 	orr.w	ip, r0, #2048	; 0x800
 8004294:	e7e7      	b.n	8004266 <HAL_ADC_Init+0x142>
 8004296:	bf00      	nop
 8004298:	ffe1f7fd 	.word	0xffe1f7fd
 800429c:	ff1f0efe 	.word	0xff1f0efe

080042a0 <HAL_ADC_Stop>:
{
 80042a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 80042a2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d035      	beq.n	8004316 <HAL_ADC_Stop+0x76>
 80042aa:	2201      	movs	r2, #1
  if (ADC_IS_ENABLE(hadc) != RESET)
 80042ac:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 80042ae:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (ADC_IS_ENABLE(hadc) != RESET)
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	4604      	mov	r4, r0
 80042b6:	07d0      	lsls	r0, r2, #31
 80042b8:	d40c      	bmi.n	80042d4 <HAL_ADC_Stop+0x34>
    ADC_STATE_CLR_SET(hadc->State,
 80042ba:	2000      	movs	r0, #0
 80042bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80042be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80042cc:	2300      	movs	r3, #0
 80042ce:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80042d2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80042dc:	f7ff ff0a 	bl	80040f4 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80042e0:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80042e2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	07d9      	lsls	r1, r3, #31
 80042e8:	d5e7      	bpl.n	80042ba <HAL_ADC_Stop+0x1a>
 80042ea:	e002      	b.n	80042f2 <HAL_ADC_Stop+0x52>
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	07db      	lsls	r3, r3, #31
 80042f0:	d5e3      	bpl.n	80042ba <HAL_ADC_Stop+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042f2:	f7ff feff 	bl	80040f4 <HAL_GetTick>
 80042f6:	1b43      	subs	r3, r0, r5
 80042f8:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 80042fa:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042fc:	d9f6      	bls.n	80042ec <HAL_ADC_Stop+0x4c>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	07d2      	lsls	r2, r2, #31
 8004302:	d5f3      	bpl.n	80042ec <HAL_ADC_Stop+0x4c>
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004304:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004306:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004308:	f043 0310 	orr.w	r3, r3, #16
 800430c:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800430e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004310:	4303      	orrs	r3, r0
 8004312:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (tmp_hal_status == HAL_OK)
 8004314:	e7da      	b.n	80042cc <HAL_ADC_Stop+0x2c>
  __HAL_LOCK(hadc);
 8004316:	2002      	movs	r0, #2
}
 8004318:	bd38      	pop	{r3, r4, r5, pc}
 800431a:	bf00      	nop

0800431c <HAL_ADC_PollForConversion>:
{
 800431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004320:	4605      	mov	r5, r0
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004322:	2400      	movs	r4, #0
{
 8004324:	b082      	sub	sp, #8
 8004326:	460e      	mov	r6, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004328:	9401      	str	r4, [sp, #4]
  tickstart = HAL_GetTick();
 800432a:	f7ff fee3 	bl	80040f4 <HAL_GetTick>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800432e:	682b      	ldr	r3, [r5, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	05d7      	lsls	r7, r2, #23
 8004334:	d46e      	bmi.n	8004414 <HAL_ADC_PollForConversion+0xf8>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	4607      	mov	r7, r0
 800433a:	05d1      	lsls	r1, r2, #23
 800433c:	d41a      	bmi.n	8004374 <HAL_ADC_PollForConversion+0x58>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800433e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004340:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8004344:	d116      	bne.n	8004374 <HAL_ADC_PollForConversion+0x58>
 8004346:	1c72      	adds	r2, r6, #1
 8004348:	d16e      	bne.n	8004428 <HAL_ADC_PollForConversion+0x10c>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	0794      	lsls	r4, r2, #30
 800434e:	d5fc      	bpl.n	800434a <HAL_ADC_PollForConversion+0x2e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004350:	f06f 0212 	mvn.w	r2, #18
 8004354:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004356:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8004358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435c:	62aa      	str	r2, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004364:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004368:	f000 808a 	beq.w	8004480 <HAL_ADC_PollForConversion+0x164>
  return HAL_OK;
 800436c:	2000      	movs	r0, #0
}
 800436e:	b002      	add	sp, #8
 8004370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004374:	4b4c      	ldr	r3, [pc, #304]	; (80044a8 <HAL_ADC_PollForConversion+0x18c>)
 8004376:	2002      	movs	r0, #2
 8004378:	f8d3 8000 	ldr.w	r8, [r3]
 800437c:	f001 fd04 	bl	8005d88 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004380:	682a      	ldr	r2, [r5, #0]
 8004382:	494a      	ldr	r1, [pc, #296]	; (80044ac <HAL_ADC_PollForConversion+0x190>)
 8004384:	6914      	ldr	r4, [r2, #16]
 8004386:	4613      	mov	r3, r2
 8004388:	420c      	tst	r4, r1
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800438a:	fbb8 f0f0 	udiv	r0, r8, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800438e:	d110      	bne.n	80043b2 <HAL_ADC_PollForConversion+0x96>
 8004390:	68d4      	ldr	r4, [r2, #12]
 8004392:	f101 415c 	add.w	r1, r1, #3690987520	; 0xdc000000
 8004396:	420c      	tst	r4, r1
 8004398:	d10b      	bne.n	80043b2 <HAL_ADC_PollForConversion+0x96>
 800439a:	6914      	ldr	r4, [r2, #16]
 800439c:	4944      	ldr	r1, [pc, #272]	; (80044b0 <HAL_ADC_PollForConversion+0x194>)
 800439e:	420c      	tst	r4, r1
 80043a0:	d17f      	bne.n	80044a2 <HAL_ADC_PollForConversion+0x186>
 80043a2:	68d4      	ldr	r4, [r2, #12]
 80043a4:	f101 416e 	add.w	r1, r1, #3992977408	; 0xee000000
 80043a8:	420c      	tst	r4, r1
 80043aa:	bf14      	ite	ne
 80043ac:	2429      	movne	r4, #41	; 0x29
 80043ae:	2414      	moveq	r4, #20
 80043b0:	e009      	b.n	80043c6 <HAL_ADC_PollForConversion+0xaa>
 80043b2:	6914      	ldr	r4, [r2, #16]
 80043b4:	493e      	ldr	r1, [pc, #248]	; (80044b0 <HAL_ADC_PollForConversion+0x194>)
 80043b6:	420c      	tst	r4, r1
 80043b8:	d122      	bne.n	8004400 <HAL_ADC_PollForConversion+0xe4>
 80043ba:	68d4      	ldr	r4, [r2, #12]
 80043bc:	f101 416e 	add.w	r1, r1, #3992977408	; 0xee000000
 80043c0:	420c      	tst	r4, r1
 80043c2:	d11d      	bne.n	8004400 <HAL_ADC_PollForConversion+0xe4>
 80043c4:	2454      	movs	r4, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80043c6:	fb00 f404 	mul.w	r4, r0, r4
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80043ca:	9901      	ldr	r1, [sp, #4]
 80043cc:	428c      	cmp	r4, r1
 80043ce:	d9bf      	bls.n	8004350 <HAL_ADC_PollForConversion+0x34>
 80043d0:	1c71      	adds	r1, r6, #1
 80043d2:	d032      	beq.n	800443a <HAL_ADC_PollForConversion+0x11e>
 80043d4:	b136      	cbz	r6, 80043e4 <HAL_ADC_PollForConversion+0xc8>
 80043d6:	e038      	b.n	800444a <HAL_ADC_PollForConversion+0x12e>
      Conversion_Timeout_CPU_cycles ++;
 80043d8:	9b01      	ldr	r3, [sp, #4]
 80043da:	3301      	adds	r3, #1
 80043dc:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80043de:	9b01      	ldr	r3, [sp, #4]
 80043e0:	42a3      	cmp	r3, r4
 80043e2:	d230      	bcs.n	8004446 <HAL_ADC_PollForConversion+0x12a>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80043e4:	9b01      	ldr	r3, [sp, #4]
 80043e6:	42a3      	cmp	r3, r4
 80043e8:	d2f6      	bcs.n	80043d8 <HAL_ADC_PollForConversion+0xbc>
            __HAL_UNLOCK(hadc);
 80043ea:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 80043ec:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 80043f0:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043f4:	f043 0304 	orr.w	r3, r3, #4
 80043f8:	62ab      	str	r3, [r5, #40]	; 0x28
}
 80043fa:	b002      	add	sp, #8
 80043fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004400:	6914      	ldr	r4, [r2, #16]
 8004402:	492c      	ldr	r1, [pc, #176]	; (80044b4 <HAL_ADC_PollForConversion+0x198>)
 8004404:	420c      	tst	r4, r1
 8004406:	d131      	bne.n	800446c <HAL_ADC_PollForConversion+0x150>
 8004408:	68d4      	ldr	r4, [r2, #12]
 800440a:	420c      	tst	r4, r1
 800440c:	bf14      	ite	ne
 800440e:	24fc      	movne	r4, #252	; 0xfc
 8004410:	2454      	moveq	r4, #84	; 0x54
 8004412:	e7d8      	b.n	80043c6 <HAL_ADC_PollForConversion+0xaa>
    return HAL_ERROR;
 8004414:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004416:	6aab      	ldr	r3, [r5, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8004418:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800441c:	f043 0320 	orr.w	r3, r3, #32
 8004420:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8004422:	b002      	add	sp, #8
 8004424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	0790      	lsls	r0, r2, #30
 800442c:	d490      	bmi.n	8004350 <HAL_ADC_PollForConversion+0x34>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800442e:	b9fe      	cbnz	r6, 8004470 <HAL_ADC_PollForConversion+0x154>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	f012 0202 	ands.w	r2, r2, #2
 8004436:	d186      	bne.n	8004346 <HAL_ADC_PollForConversion+0x2a>
 8004438:	e7d8      	b.n	80043ec <HAL_ADC_PollForConversion+0xd0>
      Conversion_Timeout_CPU_cycles ++;
 800443a:	9b01      	ldr	r3, [sp, #4]
 800443c:	3301      	adds	r3, #1
 800443e:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004440:	9b01      	ldr	r3, [sp, #4]
 8004442:	429c      	cmp	r4, r3
 8004444:	d8f9      	bhi.n	800443a <HAL_ADC_PollForConversion+0x11e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004446:	4613      	mov	r3, r2
 8004448:	e782      	b.n	8004350 <HAL_ADC_PollForConversion+0x34>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800444a:	f7ff fe53 	bl	80040f4 <HAL_GetTick>
 800444e:	1bc3      	subs	r3, r0, r7
 8004450:	429e      	cmp	r6, r3
 8004452:	d202      	bcs.n	800445a <HAL_ADC_PollForConversion+0x13e>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004454:	9b01      	ldr	r3, [sp, #4]
 8004456:	429c      	cmp	r4, r3
 8004458:	d8c7      	bhi.n	80043ea <HAL_ADC_PollForConversion+0xce>
      Conversion_Timeout_CPU_cycles ++;
 800445a:	9b01      	ldr	r3, [sp, #4]
 800445c:	3301      	adds	r3, #1
 800445e:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004460:	9b01      	ldr	r3, [sp, #4]
 8004462:	429c      	cmp	r4, r3
 8004464:	d8f1      	bhi.n	800444a <HAL_ADC_PollForConversion+0x12e>
 8004466:	682a      	ldr	r2, [r5, #0]
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004468:	4613      	mov	r3, r2
 800446a:	e771      	b.n	8004350 <HAL_ADC_PollForConversion+0x34>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800446c:	24fc      	movs	r4, #252	; 0xfc
 800446e:	e7aa      	b.n	80043c6 <HAL_ADC_PollForConversion+0xaa>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004470:	f7ff fe40 	bl	80040f4 <HAL_GetTick>
 8004474:	1bc3      	subs	r3, r0, r7
 8004476:	42b3      	cmp	r3, r6
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004478:	682b      	ldr	r3, [r5, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800447a:	f67f af64 	bls.w	8004346 <HAL_ADC_PollForConversion+0x2a>
 800447e:	e7d7      	b.n	8004430 <HAL_ADC_PollForConversion+0x114>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004480:	7b28      	ldrb	r0, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004482:	2800      	cmp	r0, #0
 8004484:	f47f af72 	bne.w	800436c <HAL_ADC_PollForConversion+0x50>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004488:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800448a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800448e:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004490:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004492:	04db      	lsls	r3, r3, #19
 8004494:	f53f af6a 	bmi.w	800436c <HAL_ADC_PollForConversion+0x50>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004498:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	62ab      	str	r3, [r5, #40]	; 0x28
 80044a0:	e765      	b.n	800436e <HAL_ADC_PollForConversion+0x52>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80044a2:	2429      	movs	r4, #41	; 0x29
 80044a4:	e78f      	b.n	80043c6 <HAL_ADC_PollForConversion+0xaa>
 80044a6:	bf00      	nop
 80044a8:	20000008 	.word	0x20000008
 80044ac:	24924924 	.word	0x24924924
 80044b0:	12492492 	.word	0x12492492
 80044b4:	00249249 	.word	0x00249249

080044b8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80044b8:	6803      	ldr	r3, [r0, #0]
 80044ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop

080044c0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80044c0:	2300      	movs	r3, #0
{ 
 80044c2:	b530      	push	{r4, r5, lr}
 80044c4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80044c6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80044c8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d074      	beq.n	80045ba <HAL_ADC_ConfigChannel+0xfa>
 80044d0:	2301      	movs	r3, #1
 80044d2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80044d6:	684b      	ldr	r3, [r1, #4]
 80044d8:	4602      	mov	r2, r0
 80044da:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80044dc:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 80044de:	d932      	bls.n	8004546 <HAL_ADC_ConfigChannel+0x86>
  else if (sConfig->Rank < 13U)
 80044e0:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80044e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 80044e6:	d84e      	bhi.n	8004586 <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80044e8:	f04f 0c1f 	mov.w	ip, #31
 80044ec:	6808      	ldr	r0, [r1, #0]
 80044ee:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80044f0:	3b23      	subs	r3, #35	; 0x23
 80044f2:	fa00 fe03 	lsl.w	lr, r0, r3
 80044f6:	fa0c f303 	lsl.w	r3, ip, r3
 80044fa:	ea25 0303 	bic.w	r3, r5, r3
 80044fe:	ea43 030e 	orr.w	r3, r3, lr
 8004502:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004504:	2809      	cmp	r0, #9
 8004506:	d930      	bls.n	800456a <HAL_ADC_ConfigChannel+0xaa>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004508:	f04f 0c07 	mov.w	ip, #7
 800450c:	688d      	ldr	r5, [r1, #8]
 800450e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8004512:	68e3      	ldr	r3, [r4, #12]
 8004514:	391e      	subs	r1, #30
 8004516:	408d      	lsls	r5, r1
 8004518:	fa0c f101 	lsl.w	r1, ip, r1
 800451c:	ea23 0301 	bic.w	r3, r3, r1
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004520:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004524:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004526:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004528:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800452a:	d844      	bhi.n	80045b6 <HAL_ADC_ConfigChannel+0xf6>
    if (hadc->Instance == ADC1)
 800452c:	4b2e      	ldr	r3, [pc, #184]	; (80045e8 <HAL_ADC_ConfigChannel+0x128>)
 800452e:	429c      	cmp	r4, r3
 8004530:	d038      	beq.n	80045a4 <HAL_ADC_ConfigChannel+0xe4>
      tmp_hal_status = HAL_ERROR;
 8004532:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004534:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004536:	f043 0320 	orr.w	r3, r3, #32
 800453a:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 800453c:	2300      	movs	r3, #0
 800453e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8004542:	b003      	add	sp, #12
 8004544:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004546:	f04f 0c1f 	mov.w	ip, #31
 800454a:	6808      	ldr	r0, [r1, #0]
 800454c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004550:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004552:	3b05      	subs	r3, #5
 8004554:	fa00 fe03 	lsl.w	lr, r0, r3
 8004558:	fa0c f303 	lsl.w	r3, ip, r3
 800455c:	ea25 0303 	bic.w	r3, r5, r3
 8004560:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004564:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004566:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004568:	d8ce      	bhi.n	8004508 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800456a:	2507      	movs	r5, #7
 800456c:	6889      	ldr	r1, [r1, #8]
 800456e:	6923      	ldr	r3, [r4, #16]
 8004570:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004574:	4081      	lsls	r1, r0
 8004576:	fa05 f000 	lsl.w	r0, r5, r0
 800457a:	ea23 0300 	bic.w	r3, r3, r0
 800457e:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004580:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004582:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004584:	e7da      	b.n	800453c <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004586:	f04f 0c1f 	mov.w	ip, #31
 800458a:	6808      	ldr	r0, [r1, #0]
 800458c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800458e:	3b41      	subs	r3, #65	; 0x41
 8004590:	fa00 fe03 	lsl.w	lr, r0, r3
 8004594:	fa0c f303 	lsl.w	r3, ip, r3
 8004598:	ea25 0303 	bic.w	r3, r5, r3
 800459c:	ea43 030e 	orr.w	r3, r3, lr
 80045a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045a2:	e7af      	b.n	8004504 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80045a4:	68a3      	ldr	r3, [r4, #8]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	d405      	bmi.n	80045b6 <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80045aa:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045ac:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80045ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045b2:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045b4:	d004      	beq.n	80045c0 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045b6:	2000      	movs	r0, #0
 80045b8:	e7c0      	b.n	800453c <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 80045ba:	2002      	movs	r0, #2
}
 80045bc:	b003      	add	sp, #12
 80045be:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <HAL_ADC_ConfigChannel+0x12c>)
 80045c2:	490b      	ldr	r1, [pc, #44]	; (80045f0 <HAL_ADC_ConfigChannel+0x130>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	fba1 1303 	umull	r1, r3, r1, r3
 80045ca:	0c9b      	lsrs	r3, r3, #18
 80045cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80045d4:	9b01      	ldr	r3, [sp, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0ed      	beq.n	80045b6 <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 80045da:	9b01      	ldr	r3, [sp, #4]
 80045dc:	3b01      	subs	r3, #1
 80045de:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80045e0:	9b01      	ldr	r3, [sp, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f9      	bne.n	80045da <HAL_ADC_ConfigChannel+0x11a>
 80045e6:	e7e6      	b.n	80045b6 <HAL_ADC_ConfigChannel+0xf6>
 80045e8:	40012400 	.word	0x40012400
 80045ec:	20000008 	.word	0x20000008
 80045f0:	431bde83 	.word	0x431bde83

080045f4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80045f4:	2300      	movs	r3, #0
{
 80045f6:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045f8:	6802      	ldr	r2, [r0, #0]
{
 80045fa:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80045fc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045fe:	6893      	ldr	r3, [r2, #8]
 8004600:	07d9      	lsls	r1, r3, #31
 8004602:	d427      	bmi.n	8004654 <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <ADC_Enable+0x80>)
 8004606:	4604      	mov	r4, r0
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	481b      	ldr	r0, [pc, #108]	; (8004678 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 800460c:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800460e:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8004612:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004616:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8004618:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800461a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800461c:	9b01      	ldr	r3, [sp, #4]
 800461e:	b12b      	cbz	r3, 800462c <ADC_Enable+0x38>
      wait_loop_index--;
 8004620:	9b01      	ldr	r3, [sp, #4]
 8004622:	3b01      	subs	r3, #1
 8004624:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8004626:	9b01      	ldr	r3, [sp, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f9      	bne.n	8004620 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 800462c:	f7ff fd62 	bl	80040f4 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004630:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004632:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	07da      	lsls	r2, r3, #31
 8004638:	d40c      	bmi.n	8004654 <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800463a:	f7ff fd5b 	bl	80040f4 <HAL_GetTick>
 800463e:	1b43      	subs	r3, r0, r5
 8004640:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004642:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004644:	d903      	bls.n	800464e <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	f012 0201 	ands.w	r2, r2, #1
 800464c:	d005      	beq.n	800465a <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	07db      	lsls	r3, r3, #31
 8004652:	d5f2      	bpl.n	800463a <ADC_Enable+0x46>
  return HAL_OK;
 8004654:	2000      	movs	r0, #0
}
 8004656:	b003      	add	sp, #12
 8004658:	bd30      	pop	{r4, r5, pc}
          __HAL_UNLOCK(hadc);
 800465a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800465c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800465e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004662:	f043 0310 	orr.w	r3, r3, #16
 8004666:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004668:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800466a:	4303      	orrs	r3, r0
 800466c:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800466e:	b003      	add	sp, #12
 8004670:	bd30      	pop	{r4, r5, pc}
 8004672:	bf00      	nop
 8004674:	20000008 	.word	0x20000008
 8004678:	431bde83 	.word	0x431bde83

0800467c <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 800467c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004680:	2b01      	cmp	r3, #1
 8004682:	d038      	beq.n	80046f6 <HAL_ADC_Start+0x7a>
 8004684:	2301      	movs	r3, #1
{
 8004686:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8004688:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800468c:	4604      	mov	r4, r0
 800468e:	f7ff ffb1 	bl	80045f4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8004692:	bb60      	cbnz	r0, 80046ee <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 8004694:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004696:	6822      	ldr	r2, [r4, #0]
 8004698:	4929      	ldr	r1, [pc, #164]	; (8004740 <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 800469a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80046a6:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 80046a8:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80046aa:	d026      	beq.n	80046fa <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80046b2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80046b4:	6853      	ldr	r3, [r2, #4]
 80046b6:	0559      	lsls	r1, r3, #21
 80046b8:	d42b      	bmi.n	8004712 <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80046bc:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046be:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80046c2:	bf18      	it	ne
 80046c4:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80046c6:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80046ca:	bf18      	it	ne
 80046cc:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80046d0:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80046d2:	f06f 0302 	mvn.w	r3, #2
 80046d6:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80046d8:	6893      	ldr	r3, [r2, #8]
 80046da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80046de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80046e2:	d01d      	beq.n	8004720 <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80046e4:	6893      	ldr	r3, [r2, #8]
 80046e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ea:	6093      	str	r3, [r2, #8]
}
 80046ec:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 80046ee:	2300      	movs	r3, #0
 80046f0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80046f4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80046f6:	2002      	movs	r0, #2
}
 80046f8:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <HAL_ADC_Start+0xc8>)
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8004702:	d0d3      	beq.n	80046ac <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004704:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004706:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800470a:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	055b      	lsls	r3, r3, #21
 8004710:	d5d3      	bpl.n	80046ba <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004712:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004714:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800471c:	62a3      	str	r3, [r4, #40]	; 0x28
 800471e:	e7cc      	b.n	80046ba <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004720:	4b07      	ldr	r3, [pc, #28]	; (8004740 <HAL_ADC_Start+0xc4>)
 8004722:	429a      	cmp	r2, r3
 8004724:	d004      	beq.n	8004730 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004726:	6893      	ldr	r3, [r2, #8]
 8004728:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800472c:	6093      	str	r3, [r2, #8]
}
 800472e:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004730:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004734:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004736:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800473a:	d1d3      	bne.n	80046e4 <HAL_ADC_Start+0x68>
 800473c:	e7f3      	b.n	8004726 <HAL_ADC_Start+0xaa>
 800473e:	bf00      	nop
 8004740:	40012800 	.word	0x40012800
 8004744:	40012400 	.word	0x40012400

08004748 <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004748:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800474c:	4906      	ldr	r1, [pc, #24]	; (8004768 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800474e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004750:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004752:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004756:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800475a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800475c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004764:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004766:	4770      	bx	lr
 8004768:	e000ed00 	.word	0xe000ed00

0800476c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800476c:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800476e:	b500      	push	{lr}
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004776:	f1c3 0e07 	rsb	lr, r3, #7
 800477a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800477e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004782:	bf28      	it	cs
 8004784:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004788:	f1bc 0f06 	cmp.w	ip, #6
 800478c:	d91b      	bls.n	80047c6 <HAL_NVIC_SetPriority+0x5a>
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800478e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004792:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004794:	fa0c fc03 	lsl.w	ip, ip, r3
 8004798:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800479c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80047a0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80047a4:	ea21 010c 	bic.w	r1, r1, ip
 80047a8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80047aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047ac:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80047b0:	db0c      	blt.n	80047cc <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b2:	0109      	lsls	r1, r1, #4
 80047b4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80047b8:	b2c9      	uxtb	r1, r1
 80047ba:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80047be:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80047c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80047c6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047c8:	4613      	mov	r3, r2
 80047ca:	e7e7      	b.n	800479c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HAL_NVIC_SetPriority+0x78>)
 80047ce:	f000 000f 	and.w	r0, r0, #15
 80047d2:	0109      	lsls	r1, r1, #4
 80047d4:	b2c9      	uxtb	r1, r1
 80047d6:	4403      	add	r3, r0
 80047d8:	7619      	strb	r1, [r3, #24]
 80047da:	f85d fb04 	ldr.w	pc, [sp], #4
 80047de:	bf00      	nop
 80047e0:	e000ed00 	.word	0xe000ed00
 80047e4:	e000ecfc 	.word	0xe000ecfc

080047e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80047e8:	2800      	cmp	r0, #0
 80047ea:	db07      	blt.n	80047fc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ec:	2301      	movs	r3, #1
 80047ee:	f000 011f 	and.w	r1, r0, #31
 80047f2:	4a03      	ldr	r2, [pc, #12]	; (8004800 <HAL_NVIC_EnableIRQ+0x18>)
 80047f4:	0940      	lsrs	r0, r0, #5
 80047f6:	408b      	lsls	r3, r1
 80047f8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	e000e100 	.word	0xe000e100

08004804 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004804:	3801      	subs	r0, #1
 8004806:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800480a:	d20f      	bcs.n	800482c <HAL_SYSTICK_Config+0x28>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800480c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004810:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004814:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004816:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004818:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800481a:	4c05      	ldr	r4, [pc, #20]	; (8004830 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800481c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800481e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  return (0UL);                                                     /* Function successful */
 8004822:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004824:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8004826:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004828:	6119      	str	r1, [r3, #16]
 800482a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800482c:	2001      	movs	r0, #1
 800482e:	4770      	bx	lr
 8004830:	e000ed00 	.word	0xe000ed00

08004834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004838:	680e      	ldr	r6, [r1, #0]
{
 800483a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800483c:	2e00      	cmp	r6, #0
 800483e:	f000 80b5 	beq.w	80049ac <HAL_GPIO_Init+0x178>
 8004842:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004844:	4f7a      	ldr	r7, [pc, #488]	; (8004a30 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 8004846:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8004848:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800484a:	4d7a      	ldr	r5, [pc, #488]	; (8004a34 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 800484c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8004a38 <HAL_GPIO_Init+0x204>
 8004850:	e006      	b.n	8004860 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8004852:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004854:	fa36 f403 	lsrs.w	r4, r6, r3
 8004858:	f102 0204 	add.w	r2, r2, #4
 800485c:	f000 80a6 	beq.w	80049ac <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 8004860:	2401      	movs	r4, #1
 8004862:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8004864:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004868:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 800486c:	d1f1      	bne.n	8004852 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 800486e:	684e      	ldr	r6, [r1, #4]
 8004870:	2e12      	cmp	r6, #18
 8004872:	f200 809e 	bhi.w	80049b2 <HAL_GPIO_Init+0x17e>
 8004876:	2e12      	cmp	r6, #18
 8004878:	d81a      	bhi.n	80048b0 <HAL_GPIO_Init+0x7c>
 800487a:	e8df f006 	tbb	[pc, r6]
 800487e:	b9a7      	.short	0xb9a7
 8004880:	1919ceb5 	.word	0x1919ceb5
 8004884:	19191919 	.word	0x19191919
 8004888:	19191919 	.word	0x19191919
 800488c:	b1191919 	.word	0xb1191919
 8004890:	bc          	.byte	0xbc
 8004891:	00          	.byte	0x00
 8004892:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8004a3c <HAL_GPIO_Init+0x208>
 8004896:	4576      	cmp	r6, lr
 8004898:	f000 8098 	beq.w	80049cc <HAL_GPIO_Init+0x198>
 800489c:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 80048a0:	4576      	cmp	r6, lr
 80048a2:	f000 8093 	beq.w	80049cc <HAL_GPIO_Init+0x198>
 80048a6:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 80048aa:	4576      	cmp	r6, lr
 80048ac:	f000 808e 	beq.w	80049cc <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048b0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80048b4:	bf9c      	itt	ls
 80048b6:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80048b8:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80048ba:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048be:	bf84      	itt	hi
 80048c0:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80048c4:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80048c8:	f8de 4000 	ldr.w	r4, [lr]
 80048cc:	fa0a f90b 	lsl.w	r9, sl, fp
 80048d0:	fa06 fb0b 	lsl.w	fp, r6, fp
 80048d4:	ea24 040b 	bic.w	r4, r4, fp
 80048d8:	ea44 0409 	orr.w	r4, r4, r9
 80048dc:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048e0:	684c      	ldr	r4, [r1, #4]
 80048e2:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80048e6:	d079      	beq.n	80049dc <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80048e8:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048ec:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80048f0:	f04e 0e01 	orr.w	lr, lr, #1
 80048f4:	f8c7 e018 	str.w	lr, [r7, #24]
 80048f8:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048fc:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004900:	f00e 0e01 	and.w	lr, lr, #1
 8004904:	f8cd e004 	str.w	lr, [sp, #4]
 8004908:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800490c:	f023 0e03 	bic.w	lr, r3, #3
 8004910:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8004914:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8004918:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800491c:	fa06 f609 	lsl.w	r6, r6, r9
 8004920:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004924:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004a40 <HAL_GPIO_Init+0x20c>
 8004928:	4558      	cmp	r0, fp
 800492a:	d013      	beq.n	8004954 <HAL_GPIO_Init+0x120>
 800492c:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8004930:	4558      	cmp	r0, fp
 8004932:	d06b      	beq.n	8004a0c <HAL_GPIO_Init+0x1d8>
 8004934:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8004a44 <HAL_GPIO_Init+0x210>
 8004938:	4558      	cmp	r0, fp
 800493a:	d060      	beq.n	80049fe <HAL_GPIO_Init+0x1ca>
 800493c:	f8df b108 	ldr.w	fp, [pc, #264]	; 8004a48 <HAL_GPIO_Init+0x214>
 8004940:	4558      	cmp	r0, fp
 8004942:	bf0c      	ite	eq
 8004944:	f04f 0b03 	moveq.w	fp, #3
 8004948:	f04f 0b04 	movne.w	fp, #4
 800494c:	fa0b f909 	lsl.w	r9, fp, r9
 8004950:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8004954:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8004958:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800495a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800495e:	bf14      	ite	ne
 8004960:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004964:	ea26 060c 	biceq.w	r6, r6, ip
 8004968:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800496a:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800496c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8004970:	bf14      	ite	ne
 8004972:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004976:	ea26 060c 	biceq.w	r6, r6, ip
 800497a:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800497c:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800497e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8004982:	bf14      	ite	ne
 8004984:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004988:	ea26 060c 	biceq.w	r6, r6, ip
 800498c:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800498e:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8004992:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004994:	d01f      	beq.n	80049d6 <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->FTSR, iocurrent);
 8004996:	ea44 040c 	orr.w	r4, r4, ip
 800499a:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800499c:	680e      	ldr	r6, [r1, #0]
	position++;
 800499e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049a0:	fa36 f403 	lsrs.w	r4, r6, r3
 80049a4:	f102 0204 	add.w	r2, r2, #4
 80049a8:	f47f af5a 	bne.w	8004860 <HAL_GPIO_Init+0x2c>
  }
}
 80049ac:	b003      	add	sp, #12
 80049ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80049b2:	4546      	cmp	r6, r8
 80049b4:	d00a      	beq.n	80049cc <HAL_GPIO_Init+0x198>
 80049b6:	f67f af6c 	bls.w	8004892 <HAL_GPIO_Init+0x5e>
 80049ba:	f8df e090 	ldr.w	lr, [pc, #144]	; 8004a4c <HAL_GPIO_Init+0x218>
 80049be:	4576      	cmp	r6, lr
 80049c0:	d004      	beq.n	80049cc <HAL_GPIO_Init+0x198>
 80049c2:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80049c6:	4576      	cmp	r6, lr
 80049c8:	f47f af72 	bne.w	80048b0 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80049cc:	688e      	ldr	r6, [r1, #8]
 80049ce:	bb3e      	cbnz	r6, 8004a20 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80049d0:	f04f 0a04 	mov.w	sl, #4
 80049d4:	e76c      	b.n	80048b0 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80049d6:	ea24 040c 	bic.w	r4, r4, ip
 80049da:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049dc:	680e      	ldr	r6, [r1, #0]
 80049de:	e738      	b.n	8004852 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80049e0:	68cc      	ldr	r4, [r1, #12]
 80049e2:	f104 0a04 	add.w	sl, r4, #4
          break;
 80049e6:	e763      	b.n	80048b0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80049e8:	68cc      	ldr	r4, [r1, #12]
 80049ea:	f104 0a08 	add.w	sl, r4, #8
          break;
 80049ee:	e75f      	b.n	80048b0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80049f0:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80049f4:	e75c      	b.n	80048b0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80049f6:	68cc      	ldr	r4, [r1, #12]
 80049f8:	f104 0a0c 	add.w	sl, r4, #12
          break;
 80049fc:	e758      	b.n	80048b0 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80049fe:	f04f 0b02 	mov.w	fp, #2
 8004a02:	fa0b f909 	lsl.w	r9, fp, r9
 8004a06:	ea46 0609 	orr.w	r6, r6, r9
 8004a0a:	e7a3      	b.n	8004954 <HAL_GPIO_Init+0x120>
 8004a0c:	f04f 0b01 	mov.w	fp, #1
 8004a10:	fa0b f909 	lsl.w	r9, fp, r9
 8004a14:	ea46 0609 	orr.w	r6, r6, r9
 8004a18:	e79c      	b.n	8004954 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 8004a1a:	f04f 0a00 	mov.w	sl, #0
 8004a1e:	e747      	b.n	80048b0 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a20:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a22:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8004a26:	bf0c      	ite	eq
 8004a28:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8004a2a:	6144      	strne	r4, [r0, #20]
 8004a2c:	e740      	b.n	80048b0 <HAL_GPIO_Init+0x7c>
 8004a2e:	bf00      	nop
 8004a30:	40021000 	.word	0x40021000
 8004a34:	40010400 	.word	0x40010400
 8004a38:	10220000 	.word	0x10220000
 8004a3c:	10120000 	.word	0x10120000
 8004a40:	40010800 	.word	0x40010800
 8004a44:	40011000 	.word	0x40011000
 8004a48:	40011400 	.word	0x40011400
 8004a4c:	10310000 	.word	0x10310000

08004a50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a50:	b902      	cbnz	r2, 8004a54 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a52:	0409      	lsls	r1, r1, #16
 8004a54:	6101      	str	r1, [r0, #16]
  }
}
 8004a56:	4770      	bx	lr

08004a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a58:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004a5a:	6951      	ldr	r1, [r2, #20]
 8004a5c:	4201      	tst	r1, r0
 8004a5e:	d100      	bne.n	8004a62 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004a60:	4770      	bx	lr
{
 8004a62:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a64:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a66:	f7fe fcc1 	bl	80033ec <HAL_GPIO_EXTI_Callback>
  }
}
 8004a6a:	bd08      	pop	{r3, pc}
 8004a6c:	40010400 	.word	0x40010400

08004a70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a74:	4606      	mov	r6, r0
 8004a76:	468a      	mov	sl, r1
 8004a78:	4617      	mov	r7, r2
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a7a:	6804      	ldr	r4, [r0, #0]
{
 8004a7c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a7e:	6823      	ldr	r3, [r4, #0]
{
 8004a80:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a86:	6023      	str	r3, [r4, #0]
{
 8004a88:	e9dd 9b0c 	ldrd	r9, fp, [sp, #48]	; 0x30
 8004a8c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004a90:	d136      	bne.n	8004b00 <I2C_RequestMemoryWrite+0x90>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a92:	6965      	ldr	r5, [r4, #20]
 8004a94:	07e8      	lsls	r0, r5, #31
 8004a96:	d5fc      	bpl.n	8004a92 <I2C_RequestMemoryWrite+0x22>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a98:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 8004a9c:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8004a9e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004aa2:	d003      	beq.n	8004aac <I2C_RequestMemoryWrite+0x3c>
 8004aa4:	e052      	b.n	8004b4c <I2C_RequestMemoryWrite+0xdc>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa6:	6961      	ldr	r1, [r4, #20]
 8004aa8:	054d      	lsls	r5, r1, #21
 8004aaa:	d460      	bmi.n	8004b6e <I2C_RequestMemoryWrite+0xfe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004aac:	6961      	ldr	r1, [r4, #20]
 8004aae:	078b      	lsls	r3, r1, #30
 8004ab0:	d5f9      	bpl.n	8004aa6 <I2C_RequestMemoryWrite+0x36>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	6963      	ldr	r3, [r4, #20]
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	69a3      	ldr	r3, [r4, #24]
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ac0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004ac4:	f040 80a4 	bne.w	8004c10 <I2C_RequestMemoryWrite+0x1a0>
 8004ac8:	6963      	ldr	r3, [r4, #20]
 8004aca:	061a      	lsls	r2, r3, #24
 8004acc:	d467      	bmi.n	8004b9e <I2C_RequestMemoryWrite+0x12e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ace:	6963      	ldr	r3, [r4, #20]
 8004ad0:	055b      	lsls	r3, r3, #21
 8004ad2:	d5f9      	bpl.n	8004ac8 <I2C_RequestMemoryWrite+0x58>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad4:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ad6:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad8:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8004adc:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ade:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ae0:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae4:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ae8:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aea:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aee:	f043 0304 	orr.w	r3, r3, #4
 8004af2:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	f000 8083 	beq.w	8004c02 <I2C_RequestMemoryWrite+0x192>
    return HAL_ERROR;
 8004afc:	2001      	movs	r0, #1
 8004afe:	e04b      	b.n	8004b98 <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b00:	6963      	ldr	r3, [r4, #20]
 8004b02:	07d9      	lsls	r1, r3, #31
 8004b04:	d4c8      	bmi.n	8004a98 <I2C_RequestMemoryWrite+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b06:	f7ff faf5 	bl	80040f4 <HAL_GetTick>
 8004b0a:	eba0 000b 	sub.w	r0, r0, fp
 8004b0e:	4581      	cmp	r9, r0
 8004b10:	d304      	bcc.n	8004b1c <I2C_RequestMemoryWrite+0xac>
 8004b12:	f1b9 0f00 	cmp.w	r9, #0
 8004b16:	d001      	beq.n	8004b1c <I2C_RequestMemoryWrite+0xac>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b18:	6834      	ldr	r4, [r6, #0]
 8004b1a:	e7b7      	b.n	8004a8c <I2C_RequestMemoryWrite+0x1c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b1c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b1e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b20:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b22:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b26:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b2a:	6c33      	ldr	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b2c:	6831      	ldr	r1, [r6, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b2e:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004b32:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b36:	6433      	str	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b38:	680b      	ldr	r3, [r1, #0]
 8004b3a:	05dc      	lsls	r4, r3, #23
 8004b3c:	d538      	bpl.n	8004bb0 <I2C_RequestMemoryWrite+0x140>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8004b42:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b44:	6433      	str	r3, [r6, #64]	; 0x40
}
 8004b46:	b003      	add	sp, #12
 8004b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b4c:	6963      	ldr	r3, [r4, #20]
 8004b4e:	0798      	lsls	r0, r3, #30
 8004b50:	d4af      	bmi.n	8004ab2 <I2C_RequestMemoryWrite+0x42>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b52:	6963      	ldr	r3, [r4, #20]
 8004b54:	055a      	lsls	r2, r3, #21
 8004b56:	d40a      	bmi.n	8004b6e <I2C_RequestMemoryWrite+0xfe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b58:	f7ff facc 	bl	80040f4 <HAL_GetTick>
 8004b5c:	eba0 000b 	sub.w	r0, r0, fp
 8004b60:	4581      	cmp	r9, r0
 8004b62:	d367      	bcc.n	8004c34 <I2C_RequestMemoryWrite+0x1c4>
 8004b64:	f1b9 0f00 	cmp.w	r9, #0
 8004b68:	d064      	beq.n	8004c34 <I2C_RequestMemoryWrite+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b6a:	6834      	ldr	r4, [r6, #0]
 8004b6c:	e797      	b.n	8004a9e <I2C_RequestMemoryWrite+0x2e>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6e:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b70:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b74:	2120      	movs	r1, #32
    return HAL_ERROR;
 8004b76:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b7e:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b80:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b82:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b84:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b88:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b8c:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004b8e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b92:	f043 0304 	orr.w	r3, r3, #4
 8004b96:	6433      	str	r3, [r6, #64]	; 0x40
}
 8004b98:	b003      	add	sp, #12
 8004b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b9e:	f1b8 0f01 	cmp.w	r8, #1
 8004ba2:	d109      	bne.n	8004bb8 <I2C_RequestMemoryWrite+0x148>
  return HAL_OK;
 8004ba4:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba6:	b2ff      	uxtb	r7, r7
 8004ba8:	6127      	str	r7, [r4, #16]
}
 8004baa:	b003      	add	sp, #12
 8004bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_TIMEOUT;
 8004bb0:	2003      	movs	r0, #3
}
 8004bb2:	b003      	add	sp, #12
 8004bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bb8:	0a3b      	lsrs	r3, r7, #8
 8004bba:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bbc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004bc0:	d147      	bne.n	8004c52 <I2C_RequestMemoryWrite+0x1e2>
 8004bc2:	6963      	ldr	r3, [r4, #20]
 8004bc4:	0619      	lsls	r1, r3, #24
 8004bc6:	d4ed      	bmi.n	8004ba4 <I2C_RequestMemoryWrite+0x134>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bc8:	6963      	ldr	r3, [r4, #20]
 8004bca:	055a      	lsls	r2, r3, #21
 8004bcc:	d5f9      	bpl.n	8004bc2 <I2C_RequestMemoryWrite+0x152>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bce:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bd0:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd2:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8004bd6:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd8:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bda:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bde:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be2:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004be4:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be8:	f043 0304 	orr.w	r3, r3, #4
 8004bec:	6433      	str	r3, [r6, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bee:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d183      	bne.n	8004afc <I2C_RequestMemoryWrite+0x8c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf4:	6832      	ldr	r2, [r6, #0]
      return HAL_ERROR;
 8004bf6:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf8:	6813      	ldr	r3, [r2, #0]
 8004bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	e7ca      	b.n	8004b98 <I2C_RequestMemoryWrite+0x128>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c02:	6832      	ldr	r2, [r6, #0]
    return HAL_ERROR;
 8004c04:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c06:	6813      	ldr	r3, [r2, #0]
 8004c08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	e7c3      	b.n	8004b98 <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c10:	6963      	ldr	r3, [r4, #20]
 8004c12:	061d      	lsls	r5, r3, #24
 8004c14:	d4c3      	bmi.n	8004b9e <I2C_RequestMemoryWrite+0x12e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c16:	6963      	ldr	r3, [r4, #20]
 8004c18:	0559      	lsls	r1, r3, #21
 8004c1a:	f53f af5b 	bmi.w	8004ad4 <I2C_RequestMemoryWrite+0x64>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7ff fa69 	bl	80040f4 <HAL_GetTick>
 8004c22:	eba0 030b 	sub.w	r3, r0, fp
 8004c26:	4599      	cmp	r9, r3
 8004c28:	d324      	bcc.n	8004c74 <I2C_RequestMemoryWrite+0x204>
 8004c2a:	f1b9 0f00 	cmp.w	r9, #0
 8004c2e:	d021      	beq.n	8004c74 <I2C_RequestMemoryWrite+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c30:	6834      	ldr	r4, [r6, #0]
 8004c32:	e745      	b.n	8004ac0 <I2C_RequestMemoryWrite+0x50>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c34:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c36:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c38:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c3a:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3e:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c42:	6c33      	ldr	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8004c44:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c46:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004c4a:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c4e:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004c50:	e7a2      	b.n	8004b98 <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c52:	6963      	ldr	r3, [r4, #20]
 8004c54:	061b      	lsls	r3, r3, #24
 8004c56:	d4a5      	bmi.n	8004ba4 <I2C_RequestMemoryWrite+0x134>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c58:	6963      	ldr	r3, [r4, #20]
 8004c5a:	0558      	lsls	r0, r3, #21
 8004c5c:	d4b7      	bmi.n	8004bce <I2C_RequestMemoryWrite+0x15e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5e:	f7ff fa49 	bl	80040f4 <HAL_GetTick>
 8004c62:	eba0 030b 	sub.w	r3, r0, fp
 8004c66:	4599      	cmp	r9, r3
 8004c68:	d312      	bcc.n	8004c90 <I2C_RequestMemoryWrite+0x220>
 8004c6a:	f1b9 0f00 	cmp.w	r9, #0
 8004c6e:	d00f      	beq.n	8004c90 <I2C_RequestMemoryWrite+0x220>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c70:	6834      	ldr	r4, [r6, #0]
 8004c72:	e7a3      	b.n	8004bbc <I2C_RequestMemoryWrite+0x14c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c74:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c76:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c78:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c7a:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c7e:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c82:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004c84:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c88:	f043 0320 	orr.w	r3, r3, #32
 8004c8c:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004c8e:	e731      	b.n	8004af4 <I2C_RequestMemoryWrite+0x84>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c90:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c92:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c94:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c96:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c9a:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c9e:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004ca0:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ca4:	f043 0320 	orr.w	r3, r3, #32
 8004ca8:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004caa:	e7a0      	b.n	8004bee <I2C_RequestMemoryWrite+0x17e>

08004cac <I2C_RequestMemoryRead>:
{
 8004cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb0:	4606      	mov	r6, r0
 8004cb2:	468b      	mov	fp, r1
 8004cb4:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb6:	6804      	ldr	r4, [r0, #0]
{
 8004cb8:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cba:	6823      	ldr	r3, [r4, #0]
{
 8004cbc:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cc2:	6023      	str	r3, [r4, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc4:	6823      	ldr	r3, [r4, #0]
{
 8004cc6:	e9dd a90c 	ldrd	sl, r9, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cce:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8004cd0:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004cd4:	d139      	bne.n	8004d4a <I2C_RequestMemoryRead+0x9e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd6:	6965      	ldr	r5, [r4, #20]
 8004cd8:	07eb      	lsls	r3, r5, #31
 8004cda:	d5fc      	bpl.n	8004cd6 <I2C_RequestMemoryRead+0x2a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cdc:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 8004ce0:	6123      	str	r3, [r4, #16]
 8004ce2:	fa5f fb8b 	uxtb.w	fp, fp
 8004ce6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004cea:	d003      	beq.n	8004cf4 <I2C_RequestMemoryRead+0x48>
 8004cec:	e06b      	b.n	8004dc6 <I2C_RequestMemoryRead+0x11a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cee:	6961      	ldr	r1, [r4, #20]
 8004cf0:	054a      	lsls	r2, r1, #21
 8004cf2:	d450      	bmi.n	8004d96 <I2C_RequestMemoryRead+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cf4:	6961      	ldr	r1, [r4, #20]
 8004cf6:	0789      	lsls	r1, r1, #30
 8004cf8:	d5f9      	bpl.n	8004cee <I2C_RequestMemoryRead+0x42>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	6963      	ldr	r3, [r4, #20]
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	69a3      	ldr	r3, [r4, #24]
 8004d04:	9301      	str	r3, [sp, #4]
 8004d06:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d08:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004d0c:	f040 80bf 	bne.w	8004e8e <I2C_RequestMemoryRead+0x1e2>
 8004d10:	6963      	ldr	r3, [r4, #20]
 8004d12:	0618      	lsls	r0, r3, #24
 8004d14:	d46a      	bmi.n	8004dec <I2C_RequestMemoryRead+0x140>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d16:	6963      	ldr	r3, [r4, #20]
 8004d18:	0559      	lsls	r1, r3, #21
 8004d1a:	d5f9      	bpl.n	8004d10 <I2C_RequestMemoryRead+0x64>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1c:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d1e:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d20:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8004d24:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d26:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d28:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d30:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004d32:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d36:	f043 0304 	orr.w	r3, r3, #4
 8004d3a:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d3c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d073      	beq.n	8004e2a <I2C_RequestMemoryRead+0x17e>
    return HAL_ERROR;
 8004d42:	2001      	movs	r0, #1
}
 8004d44:	b003      	add	sp, #12
 8004d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d4a:	6963      	ldr	r3, [r4, #20]
 8004d4c:	07dd      	lsls	r5, r3, #31
 8004d4e:	d4c5      	bmi.n	8004cdc <I2C_RequestMemoryRead+0x30>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d50:	f7ff f9d0 	bl	80040f4 <HAL_GetTick>
 8004d54:	eba0 0009 	sub.w	r0, r0, r9
 8004d58:	4582      	cmp	sl, r0
 8004d5a:	d304      	bcc.n	8004d66 <I2C_RequestMemoryRead+0xba>
 8004d5c:	f1ba 0f00 	cmp.w	sl, #0
 8004d60:	d001      	beq.n	8004d66 <I2C_RequestMemoryRead+0xba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d62:	6834      	ldr	r4, [r6, #0]
 8004d64:	e7b4      	b.n	8004cd0 <I2C_RequestMemoryRead+0x24>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d66:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d68:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d6a:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d6c:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d70:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d74:	6c33      	ldr	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d76:	6831      	ldr	r1, [r6, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d78:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004d7c:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d80:	6433      	str	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d82:	680b      	ldr	r3, [r1, #0]
 8004d84:	05da      	lsls	r2, r3, #23
 8004d86:	d540      	bpl.n	8004e0a <I2C_RequestMemoryRead+0x15e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d88:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8004d8c:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d8e:	6433      	str	r3, [r6, #64]	; 0x40
}
 8004d90:	b003      	add	sp, #12
 8004d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d96:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d98:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d9c:	2120      	movs	r1, #32
    return HAL_ERROR;
 8004d9e:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004da6:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da8:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004daa:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dac:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db0:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db4:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004db6:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dba:	f043 0304 	orr.w	r3, r3, #4
 8004dbe:	6433      	str	r3, [r6, #64]	; 0x40
}
 8004dc0:	b003      	add	sp, #12
 8004dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dc6:	6963      	ldr	r3, [r4, #20]
 8004dc8:	079b      	lsls	r3, r3, #30
 8004dca:	d496      	bmi.n	8004cfa <I2C_RequestMemoryRead+0x4e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dcc:	6963      	ldr	r3, [r4, #20]
 8004dce:	0558      	lsls	r0, r3, #21
 8004dd0:	d4e1      	bmi.n	8004d96 <I2C_RequestMemoryRead+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd2:	f7ff f98f 	bl	80040f4 <HAL_GetTick>
 8004dd6:	eba0 0009 	sub.w	r0, r0, r9
 8004dda:	4582      	cmp	sl, r0
 8004ddc:	f0c0 808f 	bcc.w	8004efe <I2C_RequestMemoryRead+0x252>
 8004de0:	f1ba 0f00 	cmp.w	sl, #0
 8004de4:	f000 808b 	beq.w	8004efe <I2C_RequestMemoryRead+0x252>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004de8:	6834      	ldr	r4, [r6, #0]
 8004dea:	e77c      	b.n	8004ce6 <I2C_RequestMemoryRead+0x3a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dec:	f1b8 0f01 	cmp.w	r8, #1
 8004df0:	d10f      	bne.n	8004e12 <I2C_RequestMemoryRead+0x166>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004df2:	b2ff      	uxtb	r7, r7
 8004df4:	6127      	str	r7, [r4, #16]
 8004df6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004dfa:	d16e      	bne.n	8004eda <I2C_RequestMemoryRead+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dfc:	6963      	ldr	r3, [r4, #20]
 8004dfe:	061b      	lsls	r3, r3, #24
 8004e00:	d41a      	bmi.n	8004e38 <I2C_RequestMemoryRead+0x18c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e02:	6963      	ldr	r3, [r4, #20]
 8004e04:	055f      	lsls	r7, r3, #21
 8004e06:	d5f9      	bpl.n	8004dfc <I2C_RequestMemoryRead+0x150>
 8004e08:	e788      	b.n	8004d1c <I2C_RequestMemoryRead+0x70>
    return HAL_TIMEOUT;
 8004e0a:	2003      	movs	r0, #3
}
 8004e0c:	b003      	add	sp, #12
 8004e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e12:	0a3b      	lsrs	r3, r7, #8
 8004e14:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e16:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004e1a:	d17f      	bne.n	8004f1c <I2C_RequestMemoryRead+0x270>
 8004e1c:	6963      	ldr	r3, [r4, #20]
 8004e1e:	061d      	lsls	r5, r3, #24
 8004e20:	d4e7      	bmi.n	8004df2 <I2C_RequestMemoryRead+0x146>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e22:	6963      	ldr	r3, [r4, #20]
 8004e24:	0558      	lsls	r0, r3, #21
 8004e26:	d5f9      	bpl.n	8004e1c <I2C_RequestMemoryRead+0x170>
 8004e28:	e778      	b.n	8004d1c <I2C_RequestMemoryRead+0x70>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2a:	6832      	ldr	r2, [r6, #0]
    return HAL_ERROR;
 8004e2c:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2e:	6813      	ldr	r3, [r2, #0]
 8004e30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e7c3      	b.n	8004dc0 <I2C_RequestMemoryRead+0x114>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3e:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8004e40:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004e44:	d113      	bne.n	8004e6e <I2C_RequestMemoryRead+0x1c2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e46:	6963      	ldr	r3, [r4, #20]
 8004e48:	07d8      	lsls	r0, r3, #31
 8004e4a:	d5fc      	bpl.n	8004e46 <I2C_RequestMemoryRead+0x19a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e4c:	f04b 0301 	orr.w	r3, fp, #1
 8004e50:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8004e52:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004e56:	d003      	beq.n	8004e60 <I2C_RequestMemoryRead+0x1b4>
 8004e58:	e02b      	b.n	8004eb2 <I2C_RequestMemoryRead+0x206>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e5a:	6963      	ldr	r3, [r4, #20]
 8004e5c:	055b      	lsls	r3, r3, #21
 8004e5e:	d49a      	bmi.n	8004d96 <I2C_RequestMemoryRead+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e60:	6963      	ldr	r3, [r4, #20]
 8004e62:	43db      	mvns	r3, r3
 8004e64:	f013 0302 	ands.w	r3, r3, #2
 8004e68:	d1f7      	bne.n	8004e5a <I2C_RequestMemoryRead+0x1ae>
  return HAL_OK;
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	e7a8      	b.n	8004dc0 <I2C_RequestMemoryRead+0x114>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e6e:	6963      	ldr	r3, [r4, #20]
 8004e70:	07d9      	lsls	r1, r3, #31
 8004e72:	d4eb      	bmi.n	8004e4c <I2C_RequestMemoryRead+0x1a0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e74:	f7ff f93e 	bl	80040f4 <HAL_GetTick>
 8004e78:	eba0 0309 	sub.w	r3, r0, r9
 8004e7c:	459a      	cmp	sl, r3
 8004e7e:	f4ff af72 	bcc.w	8004d66 <I2C_RequestMemoryRead+0xba>
 8004e82:	f1ba 0f00 	cmp.w	sl, #0
 8004e86:	f43f af6e 	beq.w	8004d66 <I2C_RequestMemoryRead+0xba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e8a:	6834      	ldr	r4, [r6, #0]
 8004e8c:	e7d8      	b.n	8004e40 <I2C_RequestMemoryRead+0x194>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e8e:	6963      	ldr	r3, [r4, #20]
 8004e90:	061a      	lsls	r2, r3, #24
 8004e92:	d4ab      	bmi.n	8004dec <I2C_RequestMemoryRead+0x140>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e94:	6963      	ldr	r3, [r4, #20]
 8004e96:	055d      	lsls	r5, r3, #21
 8004e98:	f53f af40 	bmi.w	8004d1c <I2C_RequestMemoryRead+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9c:	f7ff f92a 	bl	80040f4 <HAL_GetTick>
 8004ea0:	eba0 0309 	sub.w	r3, r0, r9
 8004ea4:	459a      	cmp	sl, r3
 8004ea6:	d34c      	bcc.n	8004f42 <I2C_RequestMemoryRead+0x296>
 8004ea8:	f1ba 0f00 	cmp.w	sl, #0
 8004eac:	d049      	beq.n	8004f42 <I2C_RequestMemoryRead+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eae:	6834      	ldr	r4, [r6, #0]
 8004eb0:	e72a      	b.n	8004d08 <I2C_RequestMemoryRead+0x5c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eb2:	6963      	ldr	r3, [r4, #20]
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	f013 0302 	ands.w	r3, r3, #2
 8004eba:	d0d6      	beq.n	8004e6a <I2C_RequestMemoryRead+0x1be>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ebc:	6963      	ldr	r3, [r4, #20]
 8004ebe:	055a      	lsls	r2, r3, #21
 8004ec0:	f53f af69 	bmi.w	8004d96 <I2C_RequestMemoryRead+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec4:	f7ff f916 	bl	80040f4 <HAL_GetTick>
 8004ec8:	eba0 0309 	sub.w	r3, r0, r9
 8004ecc:	459a      	cmp	sl, r3
 8004ece:	d316      	bcc.n	8004efe <I2C_RequestMemoryRead+0x252>
 8004ed0:	f1ba 0f00 	cmp.w	sl, #0
 8004ed4:	d013      	beq.n	8004efe <I2C_RequestMemoryRead+0x252>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ed6:	6834      	ldr	r4, [r6, #0]
 8004ed8:	e7bb      	b.n	8004e52 <I2C_RequestMemoryRead+0x1a6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eda:	6963      	ldr	r3, [r4, #20]
 8004edc:	061d      	lsls	r5, r3, #24
 8004ede:	d4ab      	bmi.n	8004e38 <I2C_RequestMemoryRead+0x18c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ee0:	6963      	ldr	r3, [r4, #20]
 8004ee2:	055a      	lsls	r2, r3, #21
 8004ee4:	f53f af1a 	bmi.w	8004d1c <I2C_RequestMemoryRead+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee8:	f7ff f904 	bl	80040f4 <HAL_GetTick>
 8004eec:	eba0 0309 	sub.w	r3, r0, r9
 8004ef0:	459a      	cmp	sl, r3
 8004ef2:	d326      	bcc.n	8004f42 <I2C_RequestMemoryRead+0x296>
 8004ef4:	f1ba 0f00 	cmp.w	sl, #0
 8004ef8:	d023      	beq.n	8004f42 <I2C_RequestMemoryRead+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004efa:	6834      	ldr	r4, [r6, #0]
 8004efc:	e77b      	b.n	8004df6 <I2C_RequestMemoryRead+0x14a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004efe:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f00:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f02:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f04:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f08:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f0c:	6c33      	ldr	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8004f0e:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f10:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004f14:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f18:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004f1a:	e751      	b.n	8004dc0 <I2C_RequestMemoryRead+0x114>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f1c:	6963      	ldr	r3, [r4, #20]
 8004f1e:	0619      	lsls	r1, r3, #24
 8004f20:	f53f af67 	bmi.w	8004df2 <I2C_RequestMemoryRead+0x146>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f24:	6963      	ldr	r3, [r4, #20]
 8004f26:	055b      	lsls	r3, r3, #21
 8004f28:	f53f aef8 	bmi.w	8004d1c <I2C_RequestMemoryRead+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2c:	f7ff f8e2 	bl	80040f4 <HAL_GetTick>
 8004f30:	eba0 0309 	sub.w	r3, r0, r9
 8004f34:	459a      	cmp	sl, r3
 8004f36:	d304      	bcc.n	8004f42 <I2C_RequestMemoryRead+0x296>
 8004f38:	f1ba 0f00 	cmp.w	sl, #0
 8004f3c:	d001      	beq.n	8004f42 <I2C_RequestMemoryRead+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f3e:	6834      	ldr	r4, [r6, #0]
 8004f40:	e769      	b.n	8004e16 <I2C_RequestMemoryRead+0x16a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f42:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f44:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f46:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f48:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f4c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f50:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004f52:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f56:	f043 0320 	orr.w	r3, r3, #32
 8004f5a:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004f5c:	e6ee      	b.n	8004d3c <I2C_RequestMemoryRead+0x90>
 8004f5e:	bf00      	nop

08004f60 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004f60:	2800      	cmp	r0, #0
 8004f62:	f000 80b9 	beq.w	80050d8 <HAL_I2C_Init+0x178>
{
 8004f66:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 8098 	beq.w	80050a8 <HAL_I2C_Init+0x148>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f78:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8004f7a:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f7c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f96:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f98:	f000 fe54 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f9c:	6863      	ldr	r3, [r4, #4]
 8004f9e:	494f      	ldr	r1, [pc, #316]	; (80050dc <HAL_I2C_Init+0x17c>)
 8004fa0:	428b      	cmp	r3, r1
 8004fa2:	d84f      	bhi.n	8005044 <HAL_I2C_Init+0xe4>
 8004fa4:	4a4e      	ldr	r2, [pc, #312]	; (80050e0 <HAL_I2C_Init+0x180>)
 8004fa6:	4290      	cmp	r0, r2
 8004fa8:	d97c      	bls.n	80050a4 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8004faa:	4d4e      	ldr	r5, [pc, #312]	; (80050e4 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fac:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8004fae:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fb2:	1e43      	subs	r3, r0, #1
 8004fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fb8:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fbc:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004fbe:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fc0:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fc2:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fc6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8004fca:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8004fce:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fd0:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fd2:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fd4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004fd8:	ea41 010c 	orr.w	r1, r1, ip
 8004fdc:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fde:	69d1      	ldr	r1, [r2, #28]
 8004fe0:	ea13 0f0e 	tst.w	r3, lr
 8004fe4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004fe8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004fec:	d161      	bne.n	80050b2 <HAL_I2C_Init+0x152>
 8004fee:	2304      	movs	r3, #4
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ff4:	6811      	ldr	r1, [r2, #0]
 8004ff6:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8004ffa:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004ffe:	4303      	orrs	r3, r0
 8005000:	430b      	orrs	r3, r1
 8005002:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005004:	6891      	ldr	r1, [r2, #8]
 8005006:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800500a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800500e:	4303      	orrs	r3, r0
 8005010:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005014:	430b      	orrs	r3, r1
 8005016:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005018:	68d0      	ldr	r0, [r2, #12]
 800501a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800501e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8005022:	430b      	orrs	r3, r1
 8005024:	4303      	orrs	r3, r0
 8005026:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005028:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800502a:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005032:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005034:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005036:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800503a:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800503c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8005040:	4608      	mov	r0, r1
}
 8005042:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005044:	4a28      	ldr	r2, [pc, #160]	; (80050e8 <HAL_I2C_Init+0x188>)
 8005046:	4290      	cmp	r0, r2
 8005048:	d92c      	bls.n	80050a4 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800504a:	4d26      	ldr	r5, [pc, #152]	; (80050e4 <HAL_I2C_Init+0x184>)
 800504c:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005050:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8005054:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005058:	fb02 f101 	mul.w	r1, r2, r1
 800505c:	4d23      	ldr	r5, [pc, #140]	; (80050ec <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800505e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005060:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005064:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005066:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005068:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800506c:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8005070:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005072:	6a15      	ldr	r5, [r2, #32]
 8005074:	3101      	adds	r1, #1
 8005076:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800507a:	4329      	orrs	r1, r5
 800507c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800507e:	69d1      	ldr	r1, [r2, #28]
 8005080:	68a5      	ldr	r5, [r4, #8]
 8005082:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005086:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800508a:	b9ad      	cbnz	r5, 80050b8 <HAL_I2C_Init+0x158>
 800508c:	3801      	subs	r0, #1
 800508e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005092:	fbb0 f3f3 	udiv	r3, r0, r3
 8005096:	3301      	adds	r3, #1
 8005098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800509c:	b1d3      	cbz	r3, 80050d4 <HAL_I2C_Init+0x174>
 800509e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a2:	e7a5      	b.n	8004ff0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80050a4:	2001      	movs	r0, #1
}
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80050a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80050ac:	f7fe feb0 	bl	8003e10 <HAL_I2C_MspInit>
 80050b0:	e762      	b.n	8004f78 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b6:	e79b      	b.n	8004ff0 <HAL_I2C_Init+0x90>
 80050b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80050bc:	3801      	subs	r0, #1
 80050be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80050c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80050c6:	3301      	adds	r3, #1
 80050c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050cc:	b113      	cbz	r3, 80050d4 <HAL_I2C_Init+0x174>
 80050ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050d2:	e78d      	b.n	8004ff0 <HAL_I2C_Init+0x90>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e78b      	b.n	8004ff0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80050d8:	2001      	movs	r0, #1
}
 80050da:	4770      	bx	lr
 80050dc:	000186a0 	.word	0x000186a0
 80050e0:	001e847f 	.word	0x001e847f
 80050e4:	431bde83 	.word	0x431bde83
 80050e8:	003d08ff 	.word	0x003d08ff
 80050ec:	10624dd3 	.word	0x10624dd3

080050f0 <HAL_I2C_Mem_Write>:
{
 80050f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f4:	4604      	mov	r4, r0
 80050f6:	b083      	sub	sp, #12
 80050f8:	4699      	mov	r9, r3
 80050fa:	460f      	mov	r7, r1
 80050fc:	4690      	mov	r8, r2
 80050fe:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005102:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8005104:	f7fe fff6 	bl	80040f4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005108:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800510c:	2b20      	cmp	r3, #32
 800510e:	d004      	beq.n	800511a <HAL_I2C_Mem_Write+0x2a>
    return HAL_BUSY;
 8005110:	2702      	movs	r7, #2
}
 8005112:	4638      	mov	r0, r7
 8005114:	b003      	add	sp, #12
 8005116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800511a:	4605      	mov	r5, r0
 800511c:	e005      	b.n	800512a <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511e:	f7fe ffe9 	bl	80040f4 <HAL_GetTick>
 8005122:	1b40      	subs	r0, r0, r5
 8005124:	2819      	cmp	r0, #25
 8005126:	f200 80c0 	bhi.w	80052aa <HAL_I2C_Mem_Write+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800512a:	6820      	ldr	r0, [r4, #0]
 800512c:	6983      	ldr	r3, [r0, #24]
 800512e:	ea6f 0c03 	mvn.w	ip, r3
 8005132:	f01c 0b02 	ands.w	fp, ip, #2
 8005136:	d0f2      	beq.n	800511e <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 8005138:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d0e7      	beq.n	8005110 <HAL_I2C_Mem_Write+0x20>
 8005140:	2301      	movs	r3, #1
 8005142:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005146:	6803      	ldr	r3, [r0, #0]
 8005148:	07db      	lsls	r3, r3, #31
 800514a:	f140 808e 	bpl.w	800526a <HAL_I2C_Mem_Write+0x17a>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800514e:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005150:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005154:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005158:	f04f 0821 	mov.w	r8, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800515c:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800515e:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005160:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005162:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8005166:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8005168:	980c      	ldr	r0, [sp, #48]	; 0x30
 800516a:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800516c:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005170:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005174:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005178:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800517c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005180:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8005182:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005184:	486a      	ldr	r0, [pc, #424]	; (8005330 <HAL_I2C_Mem_Write+0x240>)
 8005186:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005188:	4620      	mov	r0, r4
 800518a:	f7ff fc71 	bl	8004a70 <I2C_RequestMemoryWrite>
 800518e:	4607      	mov	r7, r0
 8005190:	bb00      	cbnz	r0, 80051d4 <HAL_I2C_Mem_Write+0xe4>
    while (hi2c->XferSize > 0U)
 8005192:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80ba 	beq.w	800530e <HAL_I2C_Mem_Write+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	1c71      	adds	r1, r6, #1
 800519e:	d169      	bne.n	8005274 <HAL_I2C_Mem_Write+0x184>
 80051a0:	695a      	ldr	r2, [r3, #20]
 80051a2:	0612      	lsls	r2, r2, #24
 80051a4:	d41b      	bmi.n	80051de <HAL_I2C_Mem_Write+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	0550      	lsls	r0, r2, #21
 80051aa:	d5f9      	bpl.n	80051a0 <HAL_I2C_Mem_Write+0xb0>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80051ac:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ae:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80051b2:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051b4:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80051b6:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051b8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051bc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80051c2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051c6:	f043 0304 	orr.w	r3, r3, #4
 80051ca:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	f000 808a 	beq.w	80052e8 <HAL_I2C_Mem_Write+0x1f8>
      return HAL_ERROR;
 80051d4:	2701      	movs	r7, #1
}
 80051d6:	4638      	mov	r0, r7
 80051d8:	b003      	add	sp, #12
 80051da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051de:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80051e0:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051e4:	4602      	mov	r2, r0
 80051e6:	f812 eb01 	ldrb.w	lr, [r2], #1
      hi2c->XferSize--;
 80051ea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ee:	f8c3 e010 	str.w	lr, [r3, #16]
      hi2c->pBuffPtr++;
 80051f2:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80051f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80051f6:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 80051f8:	3a01      	subs	r2, #1
 80051fa:	b292      	uxth	r2, r2
 80051fc:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051fe:	695a      	ldr	r2, [r3, #20]
      hi2c->XferSize--;
 8005200:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005202:	0752      	lsls	r2, r2, #29
 8005204:	d52e      	bpl.n	8005264 <HAL_I2C_Mem_Write+0x174>
 8005206:	bb09      	cbnz	r1, 800524c <HAL_I2C_Mem_Write+0x15c>
 8005208:	1c72      	adds	r2, r6, #1
 800520a:	d174      	bne.n	80052f6 <HAL_I2C_Mem_Write+0x206>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800520c:	695a      	ldr	r2, [r3, #20]
 800520e:	0750      	lsls	r0, r2, #29
 8005210:	d45d      	bmi.n	80052ce <HAL_I2C_Mem_Write+0x1de>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005212:	695a      	ldr	r2, [r3, #20]
 8005214:	0551      	lsls	r1, r2, #21
 8005216:	d5f9      	bpl.n	800520c <HAL_I2C_Mem_Write+0x11c>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005218:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800521a:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800521e:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005220:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005222:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005224:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005228:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800522c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800522e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005232:	f043 0304 	orr.w	r3, r3, #4
 8005236:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005238:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800523a:	2b04      	cmp	r3, #4
 800523c:	d1ca      	bne.n	80051d4 <HAL_I2C_Mem_Write+0xe4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523e:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 8005240:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005242:	6813      	ldr	r3, [r2, #0]
 8005244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	e762      	b.n	8005112 <HAL_I2C_Mem_Write+0x22>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800524c:	7842      	ldrb	r2, [r0, #1]
        hi2c->XferSize--;
 800524e:	f1ac 0102 	sub.w	r1, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005252:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8005254:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005256:	b289      	uxth	r1, r1
        hi2c->XferCount--;
 8005258:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 800525a:	3002      	adds	r0, #2
        hi2c->XferCount--;
 800525c:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 800525e:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005260:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005262:	8562      	strh	r2, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005264:	2900      	cmp	r1, #0
 8005266:	d199      	bne.n	800519c <HAL_I2C_Mem_Write+0xac>
 8005268:	e7ce      	b.n	8005208 <HAL_I2C_Mem_Write+0x118>
      __HAL_I2C_ENABLE(hi2c);
 800526a:	6803      	ldr	r3, [r0, #0]
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	6003      	str	r3, [r0, #0]
 8005272:	e76c      	b.n	800514e <HAL_I2C_Mem_Write+0x5e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	0611      	lsls	r1, r2, #24
 8005278:	d4b1      	bmi.n	80051de <HAL_I2C_Mem_Write+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800527a:	695a      	ldr	r2, [r3, #20]
 800527c:	0550      	lsls	r0, r2, #21
 800527e:	d495      	bmi.n	80051ac <HAL_I2C_Mem_Write+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005280:	f7fe ff38 	bl	80040f4 <HAL_GetTick>
 8005284:	1b40      	subs	r0, r0, r5
 8005286:	4286      	cmp	r6, r0
 8005288:	d301      	bcc.n	800528e <HAL_I2C_Mem_Write+0x19e>
 800528a:	2e00      	cmp	r6, #0
 800528c:	d185      	bne.n	800519a <HAL_I2C_Mem_Write+0xaa>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800528e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005290:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005292:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005294:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005298:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800529c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800529e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052a2:	f043 0320 	orr.w	r3, r3, #32
 80052a6:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80052a8:	e790      	b.n	80051cc <HAL_I2C_Mem_Write+0xdc>
      return HAL_BUSY;
 80052aa:	2702      	movs	r7, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 80052ac:	2320      	movs	r3, #32
}
 80052ae:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052b0:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052b8:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80052be:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052c2:	f043 0320 	orr.w	r3, r3, #32
 80052c6:	6423      	str	r3, [r4, #64]	; 0x40
}
 80052c8:	b003      	add	sp, #12
 80052ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ce:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80052d0:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80052da:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80052de:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 80052e6:	e714      	b.n	8005112 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e8:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 80052ea:	2701      	movs	r7, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ec:	6813      	ldr	r3, [r2, #0]
 80052ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	e70d      	b.n	8005112 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	0752      	lsls	r2, r2, #29
 80052fa:	d4e8      	bmi.n	80052ce <HAL_I2C_Mem_Write+0x1de>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	0551      	lsls	r1, r2, #21
 8005300:	d48a      	bmi.n	8005218 <HAL_I2C_Mem_Write+0x128>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005302:	f7fe fef7 	bl	80040f4 <HAL_GetTick>
 8005306:	1b43      	subs	r3, r0, r5
 8005308:	429e      	cmp	r6, r3
 800530a:	d302      	bcc.n	8005312 <HAL_I2C_Mem_Write+0x222>
 800530c:	b10e      	cbz	r6, 8005312 <HAL_I2C_Mem_Write+0x222>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	e77a      	b.n	8005208 <HAL_I2C_Mem_Write+0x118>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005312:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005314:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005316:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005318:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800531c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005320:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005322:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005326:	f043 0320 	orr.w	r3, r3, #32
 800532a:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800532c:	e784      	b.n	8005238 <HAL_I2C_Mem_Write+0x148>
 800532e:	bf00      	nop
 8005330:	ffff0000 	.word	0xffff0000

08005334 <HAL_I2C_Mem_Read>:
{
 8005334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint32_t count = 0U;
 8005338:	2400      	movs	r4, #0
{
 800533a:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 800533c:	9403      	str	r4, [sp, #12]
{
 800533e:	4604      	mov	r4, r0
 8005340:	4699      	mov	r9, r3
 8005342:	460f      	mov	r7, r1
 8005344:	4690      	mov	r8, r2
 8005346:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 800534a:	9e14      	ldr	r6, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 800534c:	f7fe fed2 	bl	80040f4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005350:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005354:	2b20      	cmp	r3, #32
 8005356:	d004      	beq.n	8005362 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8005358:	2702      	movs	r7, #2
}
 800535a:	4638      	mov	r0, r7
 800535c:	b009      	add	sp, #36	; 0x24
 800535e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005362:	4605      	mov	r5, r0
 8005364:	e005      	b.n	8005372 <HAL_I2C_Mem_Read+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005366:	f7fe fec5 	bl	80040f4 <HAL_GetTick>
 800536a:	1b40      	subs	r0, r0, r5
 800536c:	2819      	cmp	r0, #25
 800536e:	f200 80c1 	bhi.w	80054f4 <HAL_I2C_Mem_Read+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005372:	6820      	ldr	r0, [r4, #0]
 8005374:	6983      	ldr	r3, [r0, #24]
 8005376:	ea6f 0c03 	mvn.w	ip, r3
 800537a:	f01c 0b02 	ands.w	fp, ip, #2
 800537e:	d0f2      	beq.n	8005366 <HAL_I2C_Mem_Read+0x32>
    __HAL_LOCK(hi2c);
 8005380:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005384:	2b01      	cmp	r3, #1
 8005386:	d0e7      	beq.n	8005358 <HAL_I2C_Mem_Read+0x24>
 8005388:	2301      	movs	r3, #1
 800538a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800538e:	6803      	ldr	r3, [r0, #0]
 8005390:	07d9      	lsls	r1, r3, #31
 8005392:	d539      	bpl.n	8005408 <HAL_I2C_Mem_Read+0xd4>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005394:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005396:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800539a:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800539e:	f04f 0822 	mov.w	r8, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053a2:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053a4:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053a6:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053a8:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 80053ac:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 80053ae:	9812      	ldr	r0, [sp, #72]	; 0x48
 80053b0:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053b2:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053b6:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053ba:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053be:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80053c2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053c6:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80053c8:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053ca:	489c      	ldr	r0, [pc, #624]	; (800563c <HAL_I2C_Mem_Read+0x308>)
 80053cc:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053ce:	4620      	mov	r0, r4
 80053d0:	f7ff fc6c 	bl	8004cac <I2C_RequestMemoryRead>
 80053d4:	4607      	mov	r7, r0
 80053d6:	2800      	cmp	r0, #0
 80053d8:	f040 809e 	bne.w	8005518 <HAL_I2C_Mem_Read+0x1e4>
    if (hi2c->XferSize == 0U)
 80053dc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80053de:	b9c2      	cbnz	r2, 8005412 <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	9004      	str	r0, [sp, #16]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	9204      	str	r2, [sp, #16]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	9204      	str	r2, [sp, #16]
 80053ec:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f4:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80053f8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80053fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80053fe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005402:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8005406:	e7a8      	b.n	800535a <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8005408:	6803      	ldr	r3, [r0, #0]
 800540a:	f043 0301 	orr.w	r3, r3, #1
 800540e:	6003      	str	r3, [r0, #0]
 8005410:	e7c0      	b.n	8005394 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 8005412:	2a01      	cmp	r2, #1
 8005414:	f000 8143 	beq.w	800569e <HAL_I2C_Mem_Read+0x36a>
    else if (hi2c->XferSize == 2U)
 8005418:	2a02      	cmp	r2, #2
 800541a:	f000 80cd 	beq.w	80055b8 <HAL_I2C_Mem_Read+0x284>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	6819      	ldr	r1, [r3, #0]
 8005422:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8005426:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005428:	9007      	str	r0, [sp, #28]
 800542a:	6959      	ldr	r1, [r3, #20]
 800542c:	9107      	str	r1, [sp, #28]
 800542e:	6999      	ldr	r1, [r3, #24]
 8005430:	9107      	str	r1, [sp, #28]
 8005432:	9907      	ldr	r1, [sp, #28]
      if (hi2c->XferSize <= 3U)
 8005434:	2a03      	cmp	r2, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005436:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8005640 <HAL_I2C_Mem_Read+0x30c>
 800543a:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8005644 <HAL_I2C_Mem_Read+0x310>
      if (hi2c->XferSize <= 3U)
 800543e:	d832      	bhi.n	80054a6 <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferSize == 1U)
 8005440:	2a01      	cmp	r2, #1
 8005442:	f000 80f8 	beq.w	8005636 <HAL_I2C_Mem_Read+0x302>
        else if (hi2c->XferSize == 2U)
 8005446:	2a02      	cmp	r2, #2
 8005448:	d176      	bne.n	8005538 <HAL_I2C_Mem_Read+0x204>
 800544a:	1c71      	adds	r1, r6, #1
 800544c:	f040 80cc 	bne.w	80055e8 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005450:	695a      	ldr	r2, [r3, #20]
 8005452:	0752      	lsls	r2, r2, #29
 8005454:	d5fc      	bpl.n	8005450 <HAL_I2C_Mem_Read+0x11c>
 8005456:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005458:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800545a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005462:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8005468:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800546a:	3b01      	subs	r3, #1
 800546c:	b29b      	uxth	r3, r3
 800546e:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005472:	3301      	adds	r3, #1
 8005474:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005476:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005478:	3b01      	subs	r3, #1
 800547a:	8523      	strh	r3, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800547c:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005484:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8005486:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8005488:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800548a:	3b01      	subs	r3, #1
 800548c:	b29b      	uxth	r3, r3
 800548e:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005490:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005492:	3a01      	subs	r2, #1
 8005494:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8005496:	3301      	adds	r3, #1
          hi2c->XferSize--;
 8005498:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 800549a:	6263      	str	r3, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 800549c:	2a00      	cmp	r2, #0
 800549e:	d0aa      	beq.n	80053f6 <HAL_I2C_Mem_Read+0xc2>
      if (hi2c->XferSize <= 3U)
 80054a0:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054a2:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 80054a4:	d9cc      	bls.n	8005440 <HAL_I2C_Mem_Read+0x10c>
 80054a6:	b95e      	cbnz	r6, 80054c0 <HAL_I2C_Mem_Read+0x18c>
 80054a8:	e0aa      	b.n	8005600 <HAL_I2C_Mem_Read+0x2cc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	06d0      	lsls	r0, r2, #27
 80054ae:	f100 80d8 	bmi.w	8005662 <HAL_I2C_Mem_Read+0x32e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b2:	f7fe fe1f 	bl	80040f4 <HAL_GetTick>
 80054b6:	1b40      	subs	r0, r0, r5
 80054b8:	4286      	cmp	r6, r0
 80054ba:	f0c0 80aa 	bcc.w	8005612 <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	695a      	ldr	r2, [r3, #20]
 80054c2:	0652      	lsls	r2, r2, #25
 80054c4:	d5f1      	bpl.n	80054aa <HAL_I2C_Mem_Read+0x176>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054ca:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 80054cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054ce:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80054d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80054d6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054d8:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 80054da:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80054dc:	3a01      	subs	r2, #1
 80054de:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80054e0:	f103 0c01 	add.w	ip, r3, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054e4:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 80054e6:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80054e8:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054ec:	d5d6      	bpl.n	800549c <HAL_I2C_Mem_Read+0x168>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ee:	690a      	ldr	r2, [r1, #16]
 80054f0:	705a      	strb	r2, [r3, #1]
 80054f2:	e7c8      	b.n	8005486 <HAL_I2C_Mem_Read+0x152>
      return HAL_BUSY;
 80054f4:	2702      	movs	r7, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 80054f6:	2320      	movs	r3, #32
}
 80054f8:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054fa:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005502:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005506:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005508:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800550c:	f043 0320 	orr.w	r3, r3, #32
 8005510:	6423      	str	r3, [r4, #64]	; 0x40
}
 8005512:	b009      	add	sp, #36	; 0x24
 8005514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return HAL_ERROR;
 8005518:	2701      	movs	r7, #1
}
 800551a:	4638      	mov	r0, r7
 800551c:	b009      	add	sp, #36	; 0x24
 800551e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	0752      	lsls	r2, r2, #29
 8005526:	d40c      	bmi.n	8005542 <HAL_I2C_Mem_Read+0x20e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005528:	f7fe fde4 	bl	80040f4 <HAL_GetTick>
 800552c:	1b40      	subs	r0, r0, r5
 800552e:	4286      	cmp	r6, r0
 8005530:	d36f      	bcc.n	8005612 <HAL_I2C_Mem_Read+0x2de>
 8005532:	2e00      	cmp	r6, #0
 8005534:	d06d      	beq.n	8005612 <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	1c70      	adds	r0, r6, #1
 800553a:	d1f2      	bne.n	8005522 <HAL_I2C_Mem_Read+0x1ee>
 800553c:	695a      	ldr	r2, [r3, #20]
 800553e:	0751      	lsls	r1, r2, #29
 8005540:	d5fc      	bpl.n	800553c <HAL_I2C_Mem_Read+0x208>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005548:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800554a:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005552:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005554:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->pBuffPtr++;
 8005558:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800555a:	08db      	lsrs	r3, r3, #3
 800555c:	fba8 2303 	umull	r2, r3, r8, r3
          hi2c->XferCount--;
 8005560:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005562:	0a1b      	lsrs	r3, r3, #8
 8005564:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 8005568:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800556a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 800556e:	b292      	uxth	r2, r2
 8005570:	8562      	strh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005572:	9303      	str	r3, [sp, #12]
          hi2c->XferSize--;
 8005574:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005576:	3b01      	subs	r3, #1
 8005578:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 800557a:	1c4b      	adds	r3, r1, #1
 800557c:	6263      	str	r3, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800557e:	e003      	b.n	8005588 <HAL_I2C_Mem_Read+0x254>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	0750      	lsls	r0, r2, #29
 8005586:	d47f      	bmi.n	8005688 <HAL_I2C_Mem_Read+0x354>
            count--;
 8005588:	9b03      	ldr	r3, [sp, #12]
 800558a:	3b01      	subs	r3, #1
 800558c:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 800558e:	9b03      	ldr	r3, [sp, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f5      	bne.n	8005580 <HAL_I2C_Mem_Read+0x24c>
              hi2c->State               = HAL_I2C_STATE_READY;
 8005594:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005596:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005598:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800559c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80055a2:	f042 0220 	orr.w	r2, r2, #32
 80055a6:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80055a8:	b662      	cpsie	i
              return HAL_ERROR;
 80055aa:	2701      	movs	r7, #1
}
 80055ac:	4638      	mov	r0, r7
              __HAL_UNLOCK(hi2c);
 80055ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80055b2:	b009      	add	sp, #36	; 0x24
 80055b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055b8:	6822      	ldr	r2, [r4, #0]
 80055ba:	6813      	ldr	r3, [r2, #0]
 80055bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80055c2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	9006      	str	r0, [sp, #24]
 80055c8:	695a      	ldr	r2, [r3, #20]
 80055ca:	9206      	str	r2, [sp, #24]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	9206      	str	r2, [sp, #24]
 80055d0:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80055da:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 80055dc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80055de:	2a00      	cmp	r2, #0
 80055e0:	f43f af09 	beq.w	80053f6 <HAL_I2C_Mem_Read+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	e725      	b.n	8005434 <HAL_I2C_Mem_Read+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	075b      	lsls	r3, r3, #29
 80055ec:	f53f af33 	bmi.w	8005456 <HAL_I2C_Mem_Read+0x122>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f0:	f7fe fd80 	bl	80040f4 <HAL_GetTick>
 80055f4:	1b40      	subs	r0, r0, r5
 80055f6:	4286      	cmp	r6, r0
 80055f8:	d30b      	bcc.n	8005612 <HAL_I2C_Mem_Read+0x2de>
 80055fa:	b156      	cbz	r6, 8005612 <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	e724      	b.n	800544a <HAL_I2C_Mem_Read+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005600:	695a      	ldr	r2, [r3, #20]
 8005602:	0652      	lsls	r2, r2, #25
 8005604:	f53f af5f 	bmi.w	80054c6 <HAL_I2C_Mem_Read+0x192>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005608:	695a      	ldr	r2, [r3, #20]
 800560a:	06d1      	lsls	r1, r2, #27
 800560c:	d429      	bmi.n	8005662 <HAL_I2C_Mem_Read+0x32e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560e:	f7fe fd71 	bl	80040f4 <HAL_GetTick>
          return HAL_ERROR;
 8005612:	2701      	movs	r7, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005614:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005616:	2320      	movs	r3, #32
}
 8005618:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 800561a:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800561c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005620:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005624:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005626:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800562a:	f043 0320 	orr.w	r3, r3, #32
 800562e:	6423      	str	r3, [r4, #64]	; 0x40
}
 8005630:	b009      	add	sp, #36	; 0x24
 8005632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005636:	b96e      	cbnz	r6, 8005654 <HAL_I2C_Mem_Read+0x320>
 8005638:	e02d      	b.n	8005696 <HAL_I2C_Mem_Read+0x362>
 800563a:	bf00      	nop
 800563c:	ffff0000 	.word	0xffff0000
 8005640:	20000008 	.word	0x20000008
 8005644:	14f8b589 	.word	0x14f8b589
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005648:	f7fe fd54 	bl	80040f4 <HAL_GetTick>
 800564c:	1b40      	subs	r0, r0, r5
 800564e:	4286      	cmp	r6, r0
 8005650:	d3df      	bcc.n	8005612 <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	695a      	ldr	r2, [r3, #20]
 8005656:	0651      	lsls	r1, r2, #25
 8005658:	f53f af12 	bmi.w	8005480 <HAL_I2C_Mem_Read+0x14c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	06d2      	lsls	r2, r2, #27
 8005660:	d5f2      	bpl.n	8005648 <HAL_I2C_Mem_Read+0x314>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005662:	f06f 0010 	mvn.w	r0, #16
          return HAL_ERROR;
 8005666:	2701      	movs	r7, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005668:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800566a:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800566c:	6158      	str	r0, [r3, #20]
}
 800566e:	4638      	mov	r0, r7
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005670:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005672:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005676:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800567a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800567c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005680:	6423      	str	r3, [r4, #64]	; 0x40
}
 8005682:	b009      	add	sp, #36	; 0x24
 8005684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800568e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	704b      	strb	r3, [r1, #1]
 8005694:	e6e8      	b.n	8005468 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	0650      	lsls	r0, r2, #25
 800569a:	d5b5      	bpl.n	8005608 <HAL_I2C_Mem_Read+0x2d4>
 800569c:	e6f0      	b.n	8005480 <HAL_I2C_Mem_Read+0x14c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800569e:	6822      	ldr	r2, [r4, #0]
 80056a0:	6813      	ldr	r3, [r2, #0]
 80056a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056a6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056a8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	9005      	str	r0, [sp, #20]
 80056ae:	695a      	ldr	r2, [r3, #20]
 80056b0:	9205      	str	r2, [sp, #20]
 80056b2:	699a      	ldr	r2, [r3, #24]
 80056b4:	9205      	str	r2, [sp, #20]
 80056b6:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80056c0:	b662      	cpsie	i
}
 80056c2:	e78b      	b.n	80055dc <HAL_I2C_Mem_Read+0x2a8>

080056c4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056c4:	2800      	cmp	r0, #0
 80056c6:	f000 81b6 	beq.w	8005a36 <HAL_RCC_OscConfig+0x372>
{
 80056ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ce:	6803      	ldr	r3, [r0, #0]
 80056d0:	4604      	mov	r4, r0
 80056d2:	07dd      	lsls	r5, r3, #31
{
 80056d4:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056d6:	d535      	bpl.n	8005744 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056d8:	499a      	ldr	r1, [pc, #616]	; (8005944 <HAL_RCC_OscConfig+0x280>)
 80056da:	684a      	ldr	r2, [r1, #4]
 80056dc:	f002 020c 	and.w	r2, r2, #12
 80056e0:	2a04      	cmp	r2, #4
 80056e2:	f000 80ef 	beq.w	80058c4 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056e6:	684a      	ldr	r2, [r1, #4]
 80056e8:	f002 020c 	and.w	r2, r2, #12
 80056ec:	2a08      	cmp	r2, #8
 80056ee:	f000 80e5 	beq.w	80058bc <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056f2:	6863      	ldr	r3, [r4, #4]
 80056f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f8:	d010      	beq.n	800571c <HAL_RCC_OscConfig+0x58>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 810c 	beq.w	8005918 <HAL_RCC_OscConfig+0x254>
 8005700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005704:	f000 8182 	beq.w	8005a0c <HAL_RCC_OscConfig+0x348>
 8005708:	4b8e      	ldr	r3, [pc, #568]	; (8005944 <HAL_RCC_OscConfig+0x280>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	e004      	b.n	8005726 <HAL_RCC_OscConfig+0x62>
 800571c:	4a89      	ldr	r2, [pc, #548]	; (8005944 <HAL_RCC_OscConfig+0x280>)
 800571e:	6813      	ldr	r3, [r2, #0]
 8005720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005724:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005726:	f7fe fce5 	bl	80040f4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572a:	4e86      	ldr	r6, [pc, #536]	; (8005944 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 800572c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572e:	e005      	b.n	800573c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005730:	f7fe fce0 	bl	80040f4 <HAL_GetTick>
 8005734:	1b40      	subs	r0, r0, r5
 8005736:	2864      	cmp	r0, #100	; 0x64
 8005738:	f200 80ea 	bhi.w	8005910 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800573c:	6833      	ldr	r3, [r6, #0]
 800573e:	039a      	lsls	r2, r3, #14
 8005740:	d5f6      	bpl.n	8005730 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	079f      	lsls	r7, r3, #30
 8005746:	d528      	bpl.n	800579a <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005748:	4a7e      	ldr	r2, [pc, #504]	; (8005944 <HAL_RCC_OscConfig+0x280>)
 800574a:	6851      	ldr	r1, [r2, #4]
 800574c:	f011 0f0c 	tst.w	r1, #12
 8005750:	f000 808d 	beq.w	800586e <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005754:	6851      	ldr	r1, [r2, #4]
 8005756:	f001 010c 	and.w	r1, r1, #12
 800575a:	2908      	cmp	r1, #8
 800575c:	f000 8083 	beq.w	8005866 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 8118 	beq.w	8005998 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005768:	2201      	movs	r2, #1
 800576a:	4b77      	ldr	r3, [pc, #476]	; (8005948 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576c:	4e75      	ldr	r6, [pc, #468]	; (8005944 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 800576e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005770:	f7fe fcc0 	bl	80040f4 <HAL_GetTick>
 8005774:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005776:	e005      	b.n	8005784 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005778:	f7fe fcbc 	bl	80040f4 <HAL_GetTick>
 800577c:	1b40      	subs	r0, r0, r5
 800577e:	2802      	cmp	r0, #2
 8005780:	f200 80c6 	bhi.w	8005910 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005784:	6833      	ldr	r3, [r6, #0]
 8005786:	0798      	lsls	r0, r3, #30
 8005788:	d5f6      	bpl.n	8005778 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578a:	6833      	ldr	r3, [r6, #0]
 800578c:	6962      	ldr	r2, [r4, #20]
 800578e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005792:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005796:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	071a      	lsls	r2, r3, #28
 800579c:	d41f      	bmi.n	80057de <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800579e:	075d      	lsls	r5, r3, #29
 80057a0:	d542      	bpl.n	8005828 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057a2:	4b68      	ldr	r3, [pc, #416]	; (8005944 <HAL_RCC_OscConfig+0x280>)
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	00d0      	lsls	r0, r2, #3
 80057a8:	d57d      	bpl.n	80058a6 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80057aa:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ac:	4e67      	ldr	r6, [pc, #412]	; (800594c <HAL_RCC_OscConfig+0x288>)
 80057ae:	6833      	ldr	r3, [r6, #0]
 80057b0:	05d9      	lsls	r1, r3, #23
 80057b2:	f140 809d 	bpl.w	80058f0 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b6:	68e3      	ldr	r3, [r4, #12]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	f000 80fe 	beq.w	80059ba <HAL_RCC_OscConfig+0x2f6>
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 80ca 	beq.w	8005958 <HAL_RCC_OscConfig+0x294>
 80057c4:	2b05      	cmp	r3, #5
 80057c6:	4b5f      	ldr	r3, [pc, #380]	; (8005944 <HAL_RCC_OscConfig+0x280>)
 80057c8:	6a1a      	ldr	r2, [r3, #32]
 80057ca:	f000 812c 	beq.w	8005a26 <HAL_RCC_OscConfig+0x362>
 80057ce:	f022 0201 	bic.w	r2, r2, #1
 80057d2:	621a      	str	r2, [r3, #32]
 80057d4:	6a1a      	ldr	r2, [r3, #32]
 80057d6:	f022 0204 	bic.w	r2, r2, #4
 80057da:	621a      	str	r2, [r3, #32]
 80057dc:	e0f2      	b.n	80059c4 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057de:	69a3      	ldr	r3, [r4, #24]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d04f      	beq.n	8005884 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 80057e4:	2201      	movs	r2, #1
 80057e6:	4b58      	ldr	r3, [pc, #352]	; (8005948 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057e8:	4e56      	ldr	r6, [pc, #344]	; (8005944 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 80057ea:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80057ee:	f7fe fc81 	bl	80040f4 <HAL_GetTick>
 80057f2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057f4:	e005      	b.n	8005802 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f6:	f7fe fc7d 	bl	80040f4 <HAL_GetTick>
 80057fa:	1b40      	subs	r0, r0, r5
 80057fc:	2802      	cmp	r0, #2
 80057fe:	f200 8087 	bhi.w	8005910 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005802:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005804:	079b      	lsls	r3, r3, #30
 8005806:	d5f6      	bpl.n	80057f6 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005808:	4b51      	ldr	r3, [pc, #324]	; (8005950 <HAL_RCC_OscConfig+0x28c>)
 800580a:	4a52      	ldr	r2, [pc, #328]	; (8005954 <HAL_RCC_OscConfig+0x290>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	fba2 2303 	umull	r2, r3, r2, r3
 8005812:	0a5b      	lsrs	r3, r3, #9
 8005814:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8005816:	bf00      	nop
  }
  while (Delay --);
 8005818:	9b01      	ldr	r3, [sp, #4]
 800581a:	1e5a      	subs	r2, r3, #1
 800581c:	9201      	str	r2, [sp, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f9      	bne.n	8005816 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	075d      	lsls	r5, r3, #29
 8005826:	d4bc      	bmi.n	80057a2 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005828:	69e0      	ldr	r0, [r4, #28]
 800582a:	b1c0      	cbz	r0, 800585e <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800582c:	4d45      	ldr	r5, [pc, #276]	; (8005944 <HAL_RCC_OscConfig+0x280>)
 800582e:	686b      	ldr	r3, [r5, #4]
 8005830:	f003 030c 	and.w	r3, r3, #12
 8005834:	2b08      	cmp	r3, #8
 8005836:	f000 80d8 	beq.w	80059ea <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 800583a:	2200      	movs	r2, #0
 800583c:	4b42      	ldr	r3, [pc, #264]	; (8005948 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800583e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005840:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005842:	f000 80fa 	beq.w	8005a3a <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8005846:	f7fe fc55 	bl	80040f4 <HAL_GetTick>
 800584a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800584c:	e004      	b.n	8005858 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584e:	f7fe fc51 	bl	80040f4 <HAL_GetTick>
 8005852:	1b00      	subs	r0, r0, r4
 8005854:	2802      	cmp	r0, #2
 8005856:	d85b      	bhi.n	8005910 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	019b      	lsls	r3, r3, #6
 800585c:	d4f7      	bmi.n	800584e <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 800585e:	2000      	movs	r0, #0
}
 8005860:	b002      	add	sp, #8
 8005862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005866:	6852      	ldr	r2, [r2, #4]
 8005868:	03d6      	lsls	r6, r2, #15
 800586a:	f53f af79 	bmi.w	8005760 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800586e:	4a35      	ldr	r2, [pc, #212]	; (8005944 <HAL_RCC_OscConfig+0x280>)
 8005870:	6812      	ldr	r2, [r2, #0]
 8005872:	0795      	lsls	r5, r2, #30
 8005874:	d530      	bpl.n	80058d8 <HAL_RCC_OscConfig+0x214>
 8005876:	6922      	ldr	r2, [r4, #16]
 8005878:	2a01      	cmp	r2, #1
 800587a:	d02d      	beq.n	80058d8 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800587c:	2001      	movs	r0, #1
}
 800587e:	b002      	add	sp, #8
 8005880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005884:	4a30      	ldr	r2, [pc, #192]	; (8005948 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005886:	4e2f      	ldr	r6, [pc, #188]	; (8005944 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8005888:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800588c:	f7fe fc32 	bl	80040f4 <HAL_GetTick>
 8005890:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005892:	e004      	b.n	800589e <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005894:	f7fe fc2e 	bl	80040f4 <HAL_GetTick>
 8005898:	1b40      	subs	r0, r0, r5
 800589a:	2802      	cmp	r0, #2
 800589c:	d838      	bhi.n	8005910 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800589e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80058a0:	079f      	lsls	r7, r3, #30
 80058a2:	d4f7      	bmi.n	8005894 <HAL_RCC_OscConfig+0x1d0>
 80058a4:	e7bd      	b.n	8005822 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80058a8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80058aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80058ae:	61da      	str	r2, [r3, #28]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80058ba:	e777      	b.n	80057ac <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80058bc:	684a      	ldr	r2, [r1, #4]
 80058be:	03d0      	lsls	r0, r2, #15
 80058c0:	f57f af17 	bpl.w	80056f2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c4:	4a1f      	ldr	r2, [pc, #124]	; (8005944 <HAL_RCC_OscConfig+0x280>)
 80058c6:	6812      	ldr	r2, [r2, #0]
 80058c8:	0391      	lsls	r1, r2, #14
 80058ca:	f57f af3b 	bpl.w	8005744 <HAL_RCC_OscConfig+0x80>
 80058ce:	6862      	ldr	r2, [r4, #4]
 80058d0:	2a00      	cmp	r2, #0
 80058d2:	f47f af37 	bne.w	8005744 <HAL_RCC_OscConfig+0x80>
 80058d6:	e7d1      	b.n	800587c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d8:	491a      	ldr	r1, [pc, #104]	; (8005944 <HAL_RCC_OscConfig+0x280>)
 80058da:	6960      	ldr	r0, [r4, #20]
 80058dc:	680a      	ldr	r2, [r1, #0]
 80058de:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80058e2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80058e6:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058e8:	071a      	lsls	r2, r3, #28
 80058ea:	f57f af58 	bpl.w	800579e <HAL_RCC_OscConfig+0xda>
 80058ee:	e776      	b.n	80057de <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058f0:	6833      	ldr	r3, [r6, #0]
 80058f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80058f8:	f7fe fbfc 	bl	80040f4 <HAL_GetTick>
 80058fc:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058fe:	6833      	ldr	r3, [r6, #0]
 8005900:	05da      	lsls	r2, r3, #23
 8005902:	f53f af58 	bmi.w	80057b6 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005906:	f7fe fbf5 	bl	80040f4 <HAL_GetTick>
 800590a:	1bc0      	subs	r0, r0, r7
 800590c:	2864      	cmp	r0, #100	; 0x64
 800590e:	d9f6      	bls.n	80058fe <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8005910:	2003      	movs	r0, #3
}
 8005912:	b002      	add	sp, #8
 8005914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005918:	4d0a      	ldr	r5, [pc, #40]	; (8005944 <HAL_RCC_OscConfig+0x280>)
 800591a:	682b      	ldr	r3, [r5, #0]
 800591c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005920:	602b      	str	r3, [r5, #0]
 8005922:	682b      	ldr	r3, [r5, #0]
 8005924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005928:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800592a:	f7fe fbe3 	bl	80040f4 <HAL_GetTick>
 800592e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005930:	e004      	b.n	800593c <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005932:	f7fe fbdf 	bl	80040f4 <HAL_GetTick>
 8005936:	1b80      	subs	r0, r0, r6
 8005938:	2864      	cmp	r0, #100	; 0x64
 800593a:	d8e9      	bhi.n	8005910 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	039b      	lsls	r3, r3, #14
 8005940:	d4f7      	bmi.n	8005932 <HAL_RCC_OscConfig+0x26e>
 8005942:	e6fe      	b.n	8005742 <HAL_RCC_OscConfig+0x7e>
 8005944:	40021000 	.word	0x40021000
 8005948:	42420000 	.word	0x42420000
 800594c:	40007000 	.word	0x40007000
 8005950:	20000008 	.word	0x20000008
 8005954:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005958:	4e50      	ldr	r6, [pc, #320]	; (8005a9c <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800595e:	6a33      	ldr	r3, [r6, #32]
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	6233      	str	r3, [r6, #32]
 8005966:	6a33      	ldr	r3, [r6, #32]
 8005968:	f023 0304 	bic.w	r3, r3, #4
 800596c:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800596e:	f7fe fbc1 	bl	80040f4 <HAL_GetTick>
 8005972:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005974:	e004      	b.n	8005980 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005976:	f7fe fbbd 	bl	80040f4 <HAL_GetTick>
 800597a:	1bc0      	subs	r0, r0, r7
 800597c:	4540      	cmp	r0, r8
 800597e:	d8c7      	bhi.n	8005910 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005980:	6a33      	ldr	r3, [r6, #32]
 8005982:	0798      	lsls	r0, r3, #30
 8005984:	d4f7      	bmi.n	8005976 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8005986:	2d00      	cmp	r5, #0
 8005988:	f43f af4e 	beq.w	8005828 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 800598c:	4a43      	ldr	r2, [pc, #268]	; (8005a9c <HAL_RCC_OscConfig+0x3d8>)
 800598e:	69d3      	ldr	r3, [r2, #28]
 8005990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005994:	61d3      	str	r3, [r2, #28]
 8005996:	e747      	b.n	8005828 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8005998:	4a41      	ldr	r2, [pc, #260]	; (8005aa0 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800599a:	4e40      	ldr	r6, [pc, #256]	; (8005a9c <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 800599c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800599e:	f7fe fba9 	bl	80040f4 <HAL_GetTick>
 80059a2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059a4:	e004      	b.n	80059b0 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059a6:	f7fe fba5 	bl	80040f4 <HAL_GetTick>
 80059aa:	1b40      	subs	r0, r0, r5
 80059ac:	2802      	cmp	r0, #2
 80059ae:	d8af      	bhi.n	8005910 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059b0:	6833      	ldr	r3, [r6, #0]
 80059b2:	0799      	lsls	r1, r3, #30
 80059b4:	d4f7      	bmi.n	80059a6 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	e6ef      	b.n	800579a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ba:	4a38      	ldr	r2, [pc, #224]	; (8005a9c <HAL_RCC_OscConfig+0x3d8>)
 80059bc:	6a13      	ldr	r3, [r2, #32]
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80059c4:	f7fe fb96 	bl	80040f4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80059cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ce:	4f33      	ldr	r7, [pc, #204]	; (8005a9c <HAL_RCC_OscConfig+0x3d8>)
 80059d0:	e004      	b.n	80059dc <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059d2:	f7fe fb8f 	bl	80040f4 <HAL_GetTick>
 80059d6:	1b80      	subs	r0, r0, r6
 80059d8:	4540      	cmp	r0, r8
 80059da:	d899      	bhi.n	8005910 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	079b      	lsls	r3, r3, #30
 80059e0:	d5f7      	bpl.n	80059d2 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 80059e2:	2d00      	cmp	r5, #0
 80059e4:	f43f af20 	beq.w	8005828 <HAL_RCC_OscConfig+0x164>
 80059e8:	e7d0      	b.n	800598c <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059ea:	2801      	cmp	r0, #1
 80059ec:	f43f af38 	beq.w	8005860 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 80059f0:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f2:	6a22      	ldr	r2, [r4, #32]
 80059f4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80059f8:	4291      	cmp	r1, r2
 80059fa:	f47f af3f 	bne.w	800587c <HAL_RCC_OscConfig+0x1b8>
 80059fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8005a04:	1a18      	subs	r0, r3, r0
 8005a06:	bf18      	it	ne
 8005a08:	2001      	movne	r0, #1
 8005a0a:	e729      	b.n	8005860 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a10:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	e67f      	b.n	8005726 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a26:	f042 0204 	orr.w	r2, r2, #4
 8005a2a:	621a      	str	r2, [r3, #32]
 8005a2c:	6a1a      	ldr	r2, [r3, #32]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	621a      	str	r2, [r3, #32]
 8005a34:	e7c6      	b.n	80059c4 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8005a36:	2001      	movs	r0, #1
}
 8005a38:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8005a3a:	f7fe fb5b 	bl	80040f4 <HAL_GetTick>
 8005a3e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a40:	e005      	b.n	8005a4e <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a42:	f7fe fb57 	bl	80040f4 <HAL_GetTick>
 8005a46:	1b80      	subs	r0, r0, r6
 8005a48:	2802      	cmp	r0, #2
 8005a4a:	f63f af61 	bhi.w	8005910 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a4e:	682b      	ldr	r3, [r5, #0]
 8005a50:	0199      	lsls	r1, r3, #6
 8005a52:	d4f6      	bmi.n	8005a42 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a54:	6a23      	ldr	r3, [r4, #32]
 8005a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5a:	d105      	bne.n	8005a68 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a5c:	686a      	ldr	r2, [r5, #4]
 8005a5e:	68a1      	ldr	r1, [r4, #8]
 8005a60:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005a64:	430a      	orrs	r2, r1
 8005a66:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005a68:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a6a:	4d0c      	ldr	r5, [pc, #48]	; (8005a9c <HAL_RCC_OscConfig+0x3d8>)
 8005a6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005a6e:	686a      	ldr	r2, [r5, #4]
 8005a70:	430b      	orrs	r3, r1
 8005a72:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8005a76:	490a      	ldr	r1, [pc, #40]	; (8005aa0 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005a7c:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005a7e:	f7fe fb39 	bl	80040f4 <HAL_GetTick>
 8005a82:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a84:	e005      	b.n	8005a92 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a86:	f7fe fb35 	bl	80040f4 <HAL_GetTick>
 8005a8a:	1b00      	subs	r0, r0, r4
 8005a8c:	2802      	cmp	r0, #2
 8005a8e:	f63f af3f 	bhi.w	8005910 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a92:	682b      	ldr	r3, [r5, #0]
 8005a94:	019a      	lsls	r2, r3, #6
 8005a96:	d5f6      	bpl.n	8005a86 <HAL_RCC_OscConfig+0x3c2>
 8005a98:	e6e1      	b.n	800585e <HAL_RCC_OscConfig+0x19a>
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	42420000 	.word	0x42420000

08005aa4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	f000 80b1 	beq.w	8005c0c <HAL_RCC_ClockConfig+0x168>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005aaa:	4a5e      	ldr	r2, [pc, #376]	; (8005c24 <HAL_RCC_ClockConfig+0x180>)
{
 8005aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ab0:	6813      	ldr	r3, [r2, #0]
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	428b      	cmp	r3, r1
 8005aba:	460d      	mov	r5, r1
{
 8005abc:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005abe:	d20d      	bcs.n	8005adc <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac0:	6813      	ldr	r3, [r2, #0]
 8005ac2:	f023 0307 	bic.w	r3, r3, #7
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aca:	6813      	ldr	r3, [r2, #0]
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	428b      	cmp	r3, r1
 8005ad2:	d003      	beq.n	8005adc <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8005ad4:	2001      	movs	r0, #1
}
 8005ad6:	b006      	add	sp, #24
 8005ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	079e      	lsls	r6, r3, #30
 8005ae0:	d514      	bpl.n	8005b0c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae2:	0758      	lsls	r0, r3, #29
 8005ae4:	d504      	bpl.n	8005af0 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ae6:	4950      	ldr	r1, [pc, #320]	; (8005c28 <HAL_RCC_ClockConfig+0x184>)
 8005ae8:	684a      	ldr	r2, [r1, #4]
 8005aea:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005aee:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af0:	0719      	lsls	r1, r3, #28
 8005af2:	d504      	bpl.n	8005afe <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005af4:	494c      	ldr	r1, [pc, #304]	; (8005c28 <HAL_RCC_ClockConfig+0x184>)
 8005af6:	684a      	ldr	r2, [r1, #4]
 8005af8:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8005afc:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005afe:	494a      	ldr	r1, [pc, #296]	; (8005c28 <HAL_RCC_ClockConfig+0x184>)
 8005b00:	68a0      	ldr	r0, [r4, #8]
 8005b02:	684a      	ldr	r2, [r1, #4]
 8005b04:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005b08:	4302      	orrs	r2, r0
 8005b0a:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b0c:	07da      	lsls	r2, r3, #31
 8005b0e:	d520      	bpl.n	8005b52 <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b10:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b12:	4b45      	ldr	r3, [pc, #276]	; (8005c28 <HAL_RCC_ClockConfig+0x184>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b14:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b16:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b18:	d07a      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x16c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b1a:	2a02      	cmp	r2, #2
 8005b1c:	d073      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x162>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b1e:	079e      	lsls	r6, r3, #30
 8005b20:	d5d8      	bpl.n	8005ad4 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b22:	4e41      	ldr	r6, [pc, #260]	; (8005c28 <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b24:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b28:	6873      	ldr	r3, [r6, #4]
 8005b2a:	f023 0303 	bic.w	r3, r3, #3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005b32:	f7fe fadf 	bl	80040f4 <HAL_GetTick>
 8005b36:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b38:	e004      	b.n	8005b44 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b3a:	f7fe fadb 	bl	80040f4 <HAL_GetTick>
 8005b3e:	1bc0      	subs	r0, r0, r7
 8005b40:	4540      	cmp	r0, r8
 8005b42:	d868      	bhi.n	8005c16 <HAL_RCC_ClockConfig+0x172>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b44:	6873      	ldr	r3, [r6, #4]
 8005b46:	6862      	ldr	r2, [r4, #4]
 8005b48:	f003 030c 	and.w	r3, r3, #12
 8005b4c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005b50:	d1f3      	bne.n	8005b3a <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b52:	4a34      	ldr	r2, [pc, #208]	; (8005c24 <HAL_RCC_ClockConfig+0x180>)
 8005b54:	6813      	ldr	r3, [r2, #0]
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	42ab      	cmp	r3, r5
 8005b5c:	d909      	bls.n	8005b72 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5e:	6813      	ldr	r3, [r2, #0]
 8005b60:	f023 0307 	bic.w	r3, r3, #7
 8005b64:	432b      	orrs	r3, r5
 8005b66:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b68:	6813      	ldr	r3, [r2, #0]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	42ab      	cmp	r3, r5
 8005b70:	d1b0      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	0758      	lsls	r0, r3, #29
 8005b76:	d506      	bpl.n	8005b86 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b78:	492b      	ldr	r1, [pc, #172]	; (8005c28 <HAL_RCC_ClockConfig+0x184>)
 8005b7a:	68e0      	ldr	r0, [r4, #12]
 8005b7c:	684a      	ldr	r2, [r1, #4]
 8005b7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b82:	4302      	orrs	r2, r0
 8005b84:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b86:	0719      	lsls	r1, r3, #28
 8005b88:	d507      	bpl.n	8005b9a <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b8a:	4a27      	ldr	r2, [pc, #156]	; (8005c28 <HAL_RCC_ClockConfig+0x184>)
 8005b8c:	6921      	ldr	r1, [r4, #16]
 8005b8e:	6853      	ldr	r3, [r2, #4]
 8005b90:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005b94:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005b98:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005b9a:	f240 2401 	movw	r4, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005b9e:	4b23      	ldr	r3, [pc, #140]	; (8005c2c <HAL_RCC_ClockConfig+0x188>)
 8005ba0:	ad06      	add	r5, sp, #24
 8005ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ba4:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8005ba8:	491f      	ldr	r1, [pc, #124]	; (8005c28 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005baa:	f8ad 4004 	strh.w	r4, [sp, #4]
  tmpreg = RCC->CFGR;
 8005bae:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005bb0:	f002 030c 	and.w	r3, r2, #12
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d011      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8005bb8:	4b1d      	ldr	r3, [pc, #116]	; (8005c30 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bba:	4a1b      	ldr	r2, [pc, #108]	; (8005c28 <HAL_RCC_ClockConfig+0x184>)
 8005bbc:	481d      	ldr	r0, [pc, #116]	; (8005c34 <HAL_RCC_ClockConfig+0x190>)
 8005bbe:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8005bc0:	491d      	ldr	r1, [pc, #116]	; (8005c38 <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bc2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005bc6:	5c80      	ldrb	r0, [r0, r2]
 8005bc8:	4a1c      	ldr	r2, [pc, #112]	; (8005c3c <HAL_RCC_ClockConfig+0x198>)
 8005bca:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8005bcc:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bce:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8005bd0:	f7fe fa4e 	bl	8004070 <HAL_InitTick>
  return HAL_OK;
 8005bd4:	2000      	movs	r0, #0
}
 8005bd6:	b006      	add	sp, #24
 8005bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005bdc:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8005be0:	3318      	adds	r3, #24
 8005be2:	446b      	add	r3, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005be4:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005be6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005bea:	d516      	bpl.n	8005c1a <HAL_RCC_ClockConfig+0x176>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005bec:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005bee:	4910      	ldr	r1, [pc, #64]	; (8005c30 <HAL_RCC_ClockConfig+0x18c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005bf0:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005bf4:	fb01 f303 	mul.w	r3, r1, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005bf8:	3218      	adds	r2, #24
 8005bfa:	446a      	add	r2, sp
 8005bfc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c04:	e7d9      	b.n	8005bba <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c06:	019f      	lsls	r7, r3, #6
 8005c08:	d48b      	bmi.n	8005b22 <HAL_RCC_ClockConfig+0x7e>
 8005c0a:	e763      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8005c0c:	2001      	movs	r0, #1
}
 8005c0e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c10:	039b      	lsls	r3, r3, #14
 8005c12:	d486      	bmi.n	8005b22 <HAL_RCC_ClockConfig+0x7e>
 8005c14:	e75e      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8005c16:	2003      	movs	r0, #3
 8005c18:	e75d      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c1a:	4a09      	ldr	r2, [pc, #36]	; (8005c40 <HAL_RCC_ClockConfig+0x19c>)
 8005c1c:	fb02 f303 	mul.w	r3, r2, r3
 8005c20:	e7cb      	b.n	8005bba <HAL_RCC_ClockConfig+0x116>
 8005c22:	bf00      	nop
 8005c24:	40022000 	.word	0x40022000
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	0800d72c 	.word	0x0800d72c
 8005c30:	007a1200 	.word	0x007a1200
 8005c34:	0800d714 	.word	0x0800d714
 8005c38:	20000010 	.word	0x20000010
 8005c3c:	20000008 	.word	0x20000008
 8005c40:	003d0900 	.word	0x003d0900

08005c44 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c44:	4b04      	ldr	r3, [pc, #16]	; (8005c58 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8005c46:	4a05      	ldr	r2, [pc, #20]	; (8005c5c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	4905      	ldr	r1, [pc, #20]	; (8005c60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005c4c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005c50:	5ccb      	ldrb	r3, [r1, r3]
 8005c52:	6810      	ldr	r0, [r2, #0]
}
 8005c54:	40d8      	lsrs	r0, r3
 8005c56:	4770      	bx	lr
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	20000008 	.word	0x20000008
 8005c60:	0800d724 	.word	0x0800d724

08005c64 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c64:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8005c66:	4a05      	ldr	r2, [pc, #20]	; (8005c7c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	4905      	ldr	r1, [pc, #20]	; (8005c80 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005c6c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005c70:	5ccb      	ldrb	r3, [r1, r3]
 8005c72:	6810      	ldr	r0, [r2, #0]
}
 8005c74:	40d8      	lsrs	r0, r3
 8005c76:	4770      	bx	lr
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	20000008 	.word	0x20000008
 8005c80:	0800d724 	.word	0x0800d724

08005c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c88:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c8a:	6800      	ldr	r0, [r0, #0]
{
 8005c8c:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c8e:	07c1      	lsls	r1, r0, #31
 8005c90:	d52c      	bpl.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c92:	4b3a      	ldr	r3, [pc, #232]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005c94:	69da      	ldr	r2, [r3, #28]
 8005c96:	00d2      	lsls	r2, r2, #3
 8005c98:	d53f      	bpl.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9a:	4d39      	ldr	r5, [pc, #228]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8005c9c:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9e:	682b      	ldr	r3, [r5, #0]
 8005ca0:	05df      	lsls	r7, r3, #23
 8005ca2:	d548      	bpl.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ca4:	4d35      	ldr	r5, [pc, #212]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005ca6:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ca8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005cac:	d011      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005cae:	6861      	ldr	r1, [r4, #4]
 8005cb0:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d00d      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cb8:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cba:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cbc:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cbe:	4a31      	ldr	r2, [pc, #196]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cc0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cc4:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cc8:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ccc:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005cce:	07d9      	lsls	r1, r3, #31
 8005cd0:	d444      	bmi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cd2:	6861      	ldr	r1, [r4, #4]
 8005cd4:	4a29      	ldr	r2, [pc, #164]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005cd6:	6a13      	ldr	r3, [r2, #32]
 8005cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ce0:	b11e      	cbz	r6, 8005cea <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce2:	69d3      	ldr	r3, [r2, #28]
 8005ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ce8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cea:	6820      	ldr	r0, [r4, #0]
 8005cec:	0783      	lsls	r3, r0, #30
 8005cee:	d506      	bpl.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cf0:	4922      	ldr	r1, [pc, #136]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	684a      	ldr	r2, [r1, #4]
 8005cf6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cfe:	f010 0010 	ands.w	r0, r0, #16
 8005d02:	d007      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005d04:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d06:	4a1d      	ldr	r2, [pc, #116]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005d08:	68e1      	ldr	r1, [r4, #12]
 8005d0a:	6853      	ldr	r3, [r2, #4]
 8005d0c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005d10:	430b      	orrs	r3, r1
 8005d12:	6053      	str	r3, [r2, #4]
}
 8005d14:	b002      	add	sp, #8
 8005d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1a:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d1c:	4d18      	ldr	r5, [pc, #96]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d22:	61da      	str	r2, [r3, #28]
 8005d24:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8005d26:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	05df      	lsls	r7, r3, #23
 8005d34:	d4b6      	bmi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d36:	682b      	ldr	r3, [r5, #0]
 8005d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d3c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005d3e:	f7fe f9d9 	bl	80040f4 <HAL_GetTick>
 8005d42:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	05d8      	lsls	r0, r3, #23
 8005d48:	d4ac      	bmi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d4a:	f7fe f9d3 	bl	80040f4 <HAL_GetTick>
 8005d4e:	1bc3      	subs	r3, r0, r7
 8005d50:	2b64      	cmp	r3, #100	; 0x64
 8005d52:	d9f7      	bls.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8005d54:	2003      	movs	r0, #3
}
 8005d56:	b002      	add	sp, #8
 8005d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8005d5c:	f7fe f9ca 	bl	80040f4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d60:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005d64:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d66:	e004      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d68:	f7fe f9c4 	bl	80040f4 <HAL_GetTick>
 8005d6c:	1bc0      	subs	r0, r0, r7
 8005d6e:	4540      	cmp	r0, r8
 8005d70:	d8f0      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d72:	6a2b      	ldr	r3, [r5, #32]
 8005d74:	079a      	lsls	r2, r3, #30
 8005d76:	d5f7      	bpl.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8005d78:	e7ab      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005d7a:	bf00      	nop
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	40007000 	.word	0x40007000
 8005d84:	42420000 	.word	0x42420000

08005d88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d88:	4684      	mov	ip, r0
 8005d8a:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005d8c:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
{
 8005d8e:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005d90:	f10d 0e18 	add.w	lr, sp, #24
 8005d94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d96:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
{
 8005d9a:	4660      	mov	r0, ip
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005d9c:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005da0:	2802      	cmp	r0, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005da2:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8005da6:	d007      	beq.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
 8005da8:	2810      	cmp	r0, #16
 8005daa:	d02a      	beq.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005dac:	2801      	cmp	r0, #1
 8005dae:	d010      	beq.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
  uint32_t temp_reg = 0U, frequency = 0U;
 8005db0:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8005db2:	b007      	add	sp, #28
 8005db4:	f85d fb04 	ldr.w	pc, [sp], #4
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005db8:	f7ff ff54 	bl	8005c64 <HAL_RCC_GetPCLK2Freq>
 8005dbc:	4b2b      	ldr	r3, [pc, #172]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005dcc:	b007      	add	sp, #28
 8005dce:	f85d fb04 	ldr.w	pc, [sp], #4
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005dd2:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 8005dd6:	4925      	ldr	r1, [pc, #148]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8005dd8:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005dda:	401a      	ands	r2, r3
 8005ddc:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8005de0:	d033      	beq.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dea:	d031      	beq.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005df0:	d1de      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = HSE_VALUE / 128U;
 8005df2:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005df6:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8005df8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005dfc:	bf18      	it	ne
 8005dfe:	4618      	movne	r0, r3
 8005e00:	e7d7      	b.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
      temp_reg = RCC->CFGR;
 8005e02:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8005e04:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005e06:	6818      	ldr	r0, [r3, #0]
 8005e08:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8005e0c:	d0d1      	beq.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e0e:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8005e12:	3118      	adds	r1, #24
 8005e14:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e16:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e18:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e1c:	d520      	bpl.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e1e:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005e20:	4a13      	ldr	r2, [pc, #76]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e22:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8005e26:	3318      	adds	r3, #24
 8005e28:	446b      	add	r3, sp
 8005e2a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e32:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	025b      	lsls	r3, r3, #9
 8005e3c:	d4b9      	bmi.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          frequency = (pllclk * 2) / 3;
 8005e3e:	4b0d      	ldr	r3, [pc, #52]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8005e40:	0040      	lsls	r0, r0, #1
 8005e42:	fba3 3000 	umull	r3, r0, r3, r0
 8005e46:	0840      	lsrs	r0, r0, #1
 8005e48:	e7b3      	b.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSE_VALUE;
 8005e4a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005e4e:	e7b0      	b.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSI_VALUE;
 8005e50:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005e54:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8005e56:	f010 0002 	ands.w	r0, r0, #2
 8005e5a:	bf18      	it	ne
 8005e5c:	4618      	movne	r0, r3
 8005e5e:	e7a8      	b.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8005e62:	fb03 f000 	mul.w	r0, r3, r0
 8005e66:	e7e6      	b.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8005e68:	0800d72c 	.word	0x0800d72c
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	007a1200 	.word	0x007a1200
 8005e74:	aaaaaaab 	.word	0xaaaaaaab
 8005e78:	003d0900 	.word	0x003d0900

08005e7c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d066      	beq.n	8005f4e <HAL_TIM_Base_Init+0xd2>
{
 8005e80:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005e86:	4604      	mov	r4, r0
 8005e88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d045      	beq.n	8005f1c <HAL_TIM_Base_Init+0xa0>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e90:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e92:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e94:	492f      	ldr	r1, [pc, #188]	; (8005f54 <HAL_TIM_Base_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005e96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e9a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005e9c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e9e:	d042      	beq.n	8005f26 <HAL_TIM_Base_Init+0xaa>
 8005ea0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005ea4:	d011      	beq.n	8005eca <HAL_TIM_Base_Init+0x4e>
 8005ea6:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005eaa:	428a      	cmp	r2, r1
 8005eac:	d00d      	beq.n	8005eca <HAL_TIM_Base_Init+0x4e>
 8005eae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005eb2:	428a      	cmp	r2, r1
 8005eb4:	d009      	beq.n	8005eca <HAL_TIM_Base_Init+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb6:	69a0      	ldr	r0, [r4, #24]
 8005eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ebc:	4303      	orrs	r3, r0

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ebe:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8005ec0:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ec2:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec4:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ec6:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ec8:	e010      	b.n	8005eec <HAL_TIM_Base_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 8005eca:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ed0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8005ed2:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ed8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eda:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ee0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ee2:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005ee4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005ee6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ee8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005eea:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eec:	2301      	movs	r3, #1
 8005eee:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005ef8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005efc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005f00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005f10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005f14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005f18:	2000      	movs	r0, #0
}
 8005f1a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005f1c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005f20:	f7fd ffa8 	bl	8003e74 <HAL_TIM_Base_MspInit>
 8005f24:	e7b4      	b.n	8005e90 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005f26:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f2c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8005f2e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f34:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f36:	69a1      	ldr	r1, [r4, #24]
 8005f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f3c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005f3e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f40:	68e3      	ldr	r3, [r4, #12]
 8005f42:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f44:	6863      	ldr	r3, [r4, #4]
 8005f46:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005f48:	6963      	ldr	r3, [r4, #20]
 8005f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8005f4c:	e7ce      	b.n	8005eec <HAL_TIM_Base_Init+0x70>
    return HAL_ERROR;
 8005f4e:	2001      	movs	r0, #1
}
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40012c00 	.word	0x40012c00

08005f58 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005f58:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d11f      	bne.n	8005fa0 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8005f60:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f62:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f68:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f6a:	490f      	ldr	r1, [pc, #60]	; (8005fa8 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f6c:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f70:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f72:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f74:	d009      	beq.n	8005f8a <HAL_TIM_Base_Start_IT+0x32>
 8005f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7a:	d006      	beq.n	8005f8a <HAL_TIM_Base_Start_IT+0x32>
 8005f7c:	4a0b      	ldr	r2, [pc, #44]	; (8005fac <HAL_TIM_Base_Start_IT+0x54>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_Base_Start_IT+0x32>
 8005f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d104      	bne.n	8005f94 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f90:	2a06      	cmp	r2, #6
 8005f92:	d007      	beq.n	8005fa4 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 8005f94:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8005f96:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8005f98:	f042 0201 	orr.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	4770      	bx	lr
    return HAL_ERROR;
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	4770      	bx	lr
  return HAL_OK;
 8005fa4:	2000      	movs	r0, #0
}
 8005fa6:	4770      	bx	lr
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40000400 	.word	0x40000400

08005fb0 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE(htim);
 8005fb0:	f241 1c11 	movw	ip, #4369	; 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005fb4:	6802      	ldr	r2, [r0, #0]
{
 8005fb6:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005fb8:	68d1      	ldr	r1, [r2, #12]
 8005fba:	f021 0101 	bic.w	r1, r1, #1
 8005fbe:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8005fc0:	6a11      	ldr	r1, [r2, #32]
 8005fc2:	ea11 0f0c 	tst.w	r1, ip
 8005fc6:	d108      	bne.n	8005fda <HAL_TIM_Base_Stop_IT+0x2a>
 8005fc8:	f240 4144 	movw	r1, #1092	; 0x444
 8005fcc:	6a10      	ldr	r0, [r2, #32]
 8005fce:	4208      	tst	r0, r1
 8005fd0:	d103      	bne.n	8005fda <HAL_TIM_Base_Stop_IT+0x2a>
 8005fd2:	6811      	ldr	r1, [r2, #0]
 8005fd4:	f021 0101 	bic.w	r1, r1, #1
 8005fd8:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005fda:	2201      	movs	r2, #1
}
 8005fdc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d066      	beq.n	80060b6 <HAL_TIM_PWM_Init+0xd2>
{
 8005fe8:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005fea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005fee:	4604      	mov	r4, r0
 8005ff0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d045      	beq.n	8006084 <HAL_TIM_PWM_Init+0xa0>
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ffa:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ffc:	492f      	ldr	r1, [pc, #188]	; (80060bc <HAL_TIM_PWM_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005ffe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006002:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006004:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006006:	d042      	beq.n	800608e <HAL_TIM_PWM_Init+0xaa>
 8006008:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800600c:	d011      	beq.n	8006032 <HAL_TIM_PWM_Init+0x4e>
 800600e:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006012:	428a      	cmp	r2, r1
 8006014:	d00d      	beq.n	8006032 <HAL_TIM_PWM_Init+0x4e>
 8006016:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800601a:	428a      	cmp	r2, r1
 800601c:	d009      	beq.n	8006032 <HAL_TIM_PWM_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800601e:	69a0      	ldr	r0, [r4, #24]
 8006020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006024:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006026:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8006028:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800602a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800602c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800602e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006030:	e010      	b.n	8006054 <HAL_TIM_PWM_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 8006032:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006038:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800603a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800603c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006040:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006042:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006044:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006048:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800604a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800604c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800604e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006050:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006052:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006054:	2301      	movs	r3, #1
 8006056:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006058:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006060:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006064:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006068:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800606c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006074:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006078:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800607c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006080:	2000      	movs	r0, #0
}
 8006082:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006084:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006088:	f7fd ff14 	bl	8003eb4 <HAL_TIM_PWM_MspInit>
 800608c:	e7b4      	b.n	8005ff8 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800608e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006094:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8006096:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800609c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800609e:	69a1      	ldr	r1, [r4, #24]
 80060a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060a4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80060a6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a8:	68e3      	ldr	r3, [r4, #12]
 80060aa:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80060ac:	6863      	ldr	r3, [r4, #4]
 80060ae:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80060b0:	6963      	ldr	r3, [r4, #20]
 80060b2:	6313      	str	r3, [r2, #48]	; 0x30
 80060b4:	e7ce      	b.n	8006054 <HAL_TIM_PWM_Init+0x70>
    return HAL_ERROR;
 80060b6:	2001      	movs	r0, #1
}
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40012c00 	.word	0x40012c00

080060c0 <HAL_TIM_PWM_Start>:
 80060c0:	bb41      	cbnz	r1, 8006114 <HAL_TIM_PWM_Start+0x54>
 80060c2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d138      	bne.n	800613c <HAL_TIM_PWM_Start+0x7c>
 80060ca:	2302      	movs	r3, #2
 80060cc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80060d0:	2201      	movs	r2, #1
 80060d2:	6803      	ldr	r3, [r0, #0]
 80060d4:	f001 011f 	and.w	r1, r1, #31
 80060d8:	6a18      	ldr	r0, [r3, #32]
 80060da:	fa02 f101 	lsl.w	r1, r2, r1
 80060de:	ea20 0001 	bic.w	r0, r0, r1
 80060e2:	b410      	push	{r4}
 80060e4:	6218      	str	r0, [r3, #32]
 80060e6:	6a1a      	ldr	r2, [r3, #32]
 80060e8:	4c21      	ldr	r4, [pc, #132]	; (8006170 <HAL_TIM_PWM_Start+0xb0>)
 80060ea:	4311      	orrs	r1, r2
 80060ec:	42a3      	cmp	r3, r4
 80060ee:	6219      	str	r1, [r3, #32]
 80060f0:	d026      	beq.n	8006140 <HAL_TIM_PWM_Start+0x80>
 80060f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f6:	d027      	beq.n	8006148 <HAL_TIM_PWM_Start+0x88>
 80060f8:	4a1e      	ldr	r2, [pc, #120]	; (8006174 <HAL_TIM_PWM_Start+0xb4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d024      	beq.n	8006148 <HAL_TIM_PWM_Start+0x88>
 80060fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006102:	4293      	cmp	r3, r2
 8006104:	d020      	beq.n	8006148 <HAL_TIM_PWM_Start+0x88>
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	2000      	movs	r0, #0
 800610a:	f042 0201 	orr.w	r2, r2, #1
 800610e:	bc10      	pop	{r4}
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	4770      	bx	lr
 8006114:	2904      	cmp	r1, #4
 8006116:	d01f      	beq.n	8006158 <HAL_TIM_PWM_Start+0x98>
 8006118:	2908      	cmp	r1, #8
 800611a:	d00b      	beq.n	8006134 <HAL_TIM_PWM_Start+0x74>
 800611c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006120:	2b01      	cmp	r3, #1
 8006122:	d10b      	bne.n	800613c <HAL_TIM_PWM_Start+0x7c>
 8006124:	2904      	cmp	r1, #4
 8006126:	d01b      	beq.n	8006160 <HAL_TIM_PWM_Start+0xa0>
 8006128:	2908      	cmp	r1, #8
 800612a:	d01d      	beq.n	8006168 <HAL_TIM_PWM_Start+0xa8>
 800612c:	2302      	movs	r3, #2
 800612e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8006132:	e7cd      	b.n	80060d0 <HAL_TIM_PWM_Start+0x10>
 8006134:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006138:	2b01      	cmp	r3, #1
 800613a:	d015      	beq.n	8006168 <HAL_TIM_PWM_Start+0xa8>
 800613c:	2001      	movs	r0, #1
 800613e:	4770      	bx	lr
 8006140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006146:	645a      	str	r2, [r3, #68]	; 0x44
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	f002 0207 	and.w	r2, r2, #7
 800614e:	2a06      	cmp	r2, #6
 8006150:	d1d9      	bne.n	8006106 <HAL_TIM_PWM_Start+0x46>
 8006152:	2000      	movs	r0, #0
 8006154:	bc10      	pop	{r4}
 8006156:	4770      	bx	lr
 8006158:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800615c:	2b01      	cmp	r3, #1
 800615e:	d1ed      	bne.n	800613c <HAL_TIM_PWM_Start+0x7c>
 8006160:	2302      	movs	r3, #2
 8006162:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8006166:	e7b3      	b.n	80060d0 <HAL_TIM_PWM_Start+0x10>
 8006168:	2302      	movs	r3, #2
 800616a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800616e:	e7af      	b.n	80060d0 <HAL_TIM_PWM_Start+0x10>
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40000400 	.word	0x40000400

08006178 <HAL_TIM_PWM_ConfigChannel>:
{
 8006178:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800617a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800617e:	2801      	cmp	r0, #1
 8006180:	f000 80c0 	beq.w	8006304 <HAL_TIM_PWM_ConfigChannel+0x18c>
 8006184:	2001      	movs	r0, #1
{
 8006186:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8006188:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 800618c:	2a0c      	cmp	r2, #12
 800618e:	d82d      	bhi.n	80061ec <HAL_TIM_PWM_ConfigChannel+0x74>
 8006190:	e8df f002 	tbb	[pc, r2]
 8006194:	2c2c2c07 	.word	0x2c2c2c07
 8006198:	2c2c2c60 	.word	0x2c2c2c60
 800619c:	2c2c2c8d 	.word	0x2c2c2c8d
 80061a0:	32          	.byte	0x32
 80061a1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061a2:	681a      	ldr	r2, [r3, #0]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a4:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061a6:	6a10      	ldr	r0, [r2, #32]
 80061a8:	f020 0001 	bic.w	r0, r0, #1
 80061ac:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80061ae:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80061b0:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80061b2:	6994      	ldr	r4, [r2, #24]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061b4:	f020 0002 	bic.w	r0, r0, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061b8:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80061bc:	4334      	orrs	r4, r6
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061be:	688e      	ldr	r6, [r1, #8]
 80061c0:	4330      	orrs	r0, r6

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061c2:	4e6a      	ldr	r6, [pc, #424]	; (800636c <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 80061c4:	42b2      	cmp	r2, r6
 80061c6:	f000 809f 	beq.w	8006308 <HAL_TIM_PWM_ConfigChannel+0x190>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ca:	6055      	str	r5, [r2, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061cc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80061ce:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061d0:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 80061d2:	6355      	str	r5, [r2, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d4:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061d6:	6990      	ldr	r0, [r2, #24]
 80061d8:	f040 0008 	orr.w	r0, r0, #8
 80061dc:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061de:	6990      	ldr	r0, [r2, #24]
 80061e0:	f020 0004 	bic.w	r0, r0, #4
 80061e4:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061e6:	6991      	ldr	r1, [r2, #24]
 80061e8:	4321      	orrs	r1, r4
 80061ea:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 80061f2:	4610      	mov	r0, r2
}
 80061f4:	bcf0      	pop	{r4, r5, r6, r7}
 80061f6:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061f8:	681a      	ldr	r2, [r3, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061fa:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061fc:	6a10      	ldr	r0, [r2, #32]
 80061fe:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8006202:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8006204:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8006206:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8006208:	69d4      	ldr	r4, [r2, #28]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800620a:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800620e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006212:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006216:	688e      	ldr	r6, [r1, #8]
 8006218:	ea40 3006 	orr.w	r0, r0, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621c:	4e53      	ldr	r6, [pc, #332]	; (800636c <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 800621e:	42b2      	cmp	r2, r6
 8006220:	f000 808e 	beq.w	8006340 <HAL_TIM_PWM_ConfigChannel+0x1c8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006224:	6055      	str	r5, [r2, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006226:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006228:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800622a:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 800622c:	6415      	str	r5, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800622e:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006230:	69d0      	ldr	r0, [r2, #28]
 8006232:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8006236:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006238:	69d0      	ldr	r0, [r2, #28]
 800623a:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800623e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006240:	69d1      	ldr	r1, [r2, #28]
 8006242:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8006246:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 800624e:	4610      	mov	r0, r2
}
 8006250:	bcf0      	pop	{r4, r5, r6, r7}
 8006252:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006254:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006256:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006258:	6a10      	ldr	r0, [r2, #32]
 800625a:	f020 0010 	bic.w	r0, r0, #16
 800625e:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8006260:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8006262:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8006264:	6994      	ldr	r4, [r2, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8006266:	f020 0020 	bic.w	r0, r0, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800626a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800626e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006272:	688e      	ldr	r6, [r1, #8]
 8006274:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006278:	4e3c      	ldr	r6, [pc, #240]	; (800636c <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 800627a:	42b2      	cmp	r2, r6
 800627c:	d051      	beq.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x1aa>
  TIMx->CR2 = tmpcr2;
 800627e:	6055      	str	r5, [r2, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8006280:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006282:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006284:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR2 = OC_Config->Pulse;
 8006286:	6395      	str	r5, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006288:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800628a:	6990      	ldr	r0, [r2, #24]
 800628c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8006290:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006292:	6990      	ldr	r0, [r2, #24]
 8006294:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8006298:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800629a:	6991      	ldr	r1, [r2, #24]
 800629c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80062a0:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 80062a8:	4610      	mov	r0, r2
}
 80062aa:	bcf0      	pop	{r4, r5, r6, r7}
 80062ac:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062ae:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 80062b0:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062b2:	6a10      	ldr	r0, [r2, #32]
 80062b4:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80062b8:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80062ba:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80062bc:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80062be:	69d4      	ldr	r4, [r2, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80062c0:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062c4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80062c8:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062ca:	688e      	ldr	r6, [r1, #8]
 80062cc:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062d0:	4e26      	ldr	r6, [pc, #152]	; (800636c <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 80062d2:	42b2      	cmp	r2, r6
 80062d4:	d03a      	beq.n	800634c <HAL_TIM_PWM_ConfigChannel+0x1d4>
  TIMx->CR2 = tmpcr2;
 80062d6:	6055      	str	r5, [r2, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 80062d8:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80062da:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062dc:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR3 = OC_Config->Pulse;
 80062de:	63d5      	str	r5, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80062e0:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062e2:	69d0      	ldr	r0, [r2, #28]
 80062e4:	f040 0008 	orr.w	r0, r0, #8
 80062e8:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062ea:	69d0      	ldr	r0, [r2, #28]
 80062ec:	f020 0004 	bic.w	r0, r0, #4
 80062f0:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062f2:	69d1      	ldr	r1, [r2, #28]
 80062f4:	4321      	orrs	r1, r4
 80062f6:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 80062fe:	4610      	mov	r0, r2
}
 8006300:	bcf0      	pop	{r4, r5, r6, r7}
 8006302:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006304:	2002      	movs	r0, #2
}
 8006306:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8006308:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800630a:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 800630e:	4330      	orrs	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006310:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8006314:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8006318:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800631a:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800631e:	4335      	orrs	r5, r6
 8006320:	e753      	b.n	80061ca <HAL_TIM_PWM_ConfigChannel+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006322:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006324:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006328:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800632c:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006330:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8006334:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8006336:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800633a:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 800633e:	e79e      	b.n	800627e <HAL_TIM_PWM_ConfigChannel+0x106>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006340:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006342:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006346:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800634a:	e76b      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0xac>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800634c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800634e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006352:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006356:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800635a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 800635e:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8006360:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006364:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8006368:	e7b5      	b.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x15e>
 800636a:	bf00      	nop
 800636c:	40012c00 	.word	0x40012c00

08006370 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006370:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8006374:	2a01      	cmp	r2, #1
 8006376:	d075      	beq.n	8006464 <HAL_TIM_ConfigClockSource+0xf4>
{
 8006378:	b430      	push	{r4, r5}
 800637a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800637c:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800637e:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8006380:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8006382:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800638a:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800638c:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800638e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8006392:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8006396:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8006398:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800639a:	d065      	beq.n	8006468 <HAL_TIM_ConfigClockSource+0xf8>
 800639c:	d831      	bhi.n	8006402 <HAL_TIM_ConfigClockSource+0x92>
 800639e:	2a40      	cmp	r2, #64	; 0x40
 80063a0:	d048      	beq.n	8006434 <HAL_TIM_ConfigClockSource+0xc4>
 80063a2:	d921      	bls.n	80063e8 <HAL_TIM_ConfigClockSource+0x78>
 80063a4:	2a50      	cmp	r2, #80	; 0x50
 80063a6:	d116      	bne.n	80063d6 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a8:	684c      	ldr	r4, [r1, #4]
 80063aa:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063ac:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ae:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80063b2:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b4:	6a04      	ldr	r4, [r0, #32]
 80063b6:	f024 0401 	bic.w	r4, r4, #1
 80063ba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063bc:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063c2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063c6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80063c8:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063ca:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063d0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063d4:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 80063d6:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80063d8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80063de:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  return HAL_OK;
 80063e2:	4610      	mov	r0, r2
}
 80063e4:	bc30      	pop	{r4, r5}
 80063e6:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80063e8:	2a20      	cmp	r2, #32
 80063ea:	d002      	beq.n	80063f2 <HAL_TIM_ConfigClockSource+0x82>
 80063ec:	d91e      	bls.n	800642c <HAL_TIM_ConfigClockSource+0xbc>
 80063ee:	2a30      	cmp	r2, #48	; 0x30
 80063f0:	d1f1      	bne.n	80063d6 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 80063f2:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063f4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063f8:	430a      	orrs	r2, r1
 80063fa:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 80063fe:	6082      	str	r2, [r0, #8]
}
 8006400:	e7e9      	b.n	80063d6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8006402:	2a70      	cmp	r2, #112	; 0x70
 8006404:	d049      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x12a>
 8006406:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800640a:	d1e4      	bne.n	80063d6 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800640c:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006410:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006412:	432a      	orrs	r2, r5
 8006414:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006416:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800641a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800641e:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006420:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006422:	6882      	ldr	r2, [r0, #8]
 8006424:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006428:	6082      	str	r2, [r0, #8]
      break;
 800642a:	e7d4      	b.n	80063d6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800642c:	f032 0110 	bics.w	r1, r2, #16
 8006430:	d1d1      	bne.n	80063d6 <HAL_TIM_ConfigClockSource+0x66>
 8006432:	e7de      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006434:	684c      	ldr	r4, [r1, #4]
 8006436:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006438:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800643a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800643e:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006440:	6a04      	ldr	r4, [r0, #32]
 8006442:	f024 0401 	bic.w	r4, r4, #1
 8006446:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006448:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800644a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800644e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006452:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006454:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006456:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006458:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800645c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8006460:	6082      	str	r2, [r0, #8]
}
 8006462:	e7b8      	b.n	80063d6 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8006464:	2002      	movs	r0, #2
}
 8006466:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006468:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800646a:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800646c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006470:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006472:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006474:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006476:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800647a:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 800647e:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8006480:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006482:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006486:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 800648a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800648c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800648e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006492:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8006496:	6082      	str	r2, [r0, #8]
}
 8006498:	e79d      	b.n	80063d6 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800649a:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800649e:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064a0:	432a      	orrs	r2, r5
 80064a2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a4:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064a8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80064ac:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80064ae:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 80064b0:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064b2:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80064b6:	6082      	str	r2, [r0, #8]
      break;
 80064b8:	e78d      	b.n	80063d6 <HAL_TIM_ConfigClockSource+0x66>
 80064ba:	bf00      	nop

080064bc <HAL_TIM_OC_DelayElapsedCallback>:
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop

080064c0 <HAL_TIM_IC_CaptureCallback>:
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop

080064c4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop

080064c8 <HAL_TIM_TriggerCallback>:
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop

080064cc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064cc:	6803      	ldr	r3, [r0, #0]
{
 80064ce:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064d0:	691a      	ldr	r2, [r3, #16]
{
 80064d2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064d4:	0791      	lsls	r1, r2, #30
 80064d6:	d502      	bpl.n	80064de <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	0792      	lsls	r2, r2, #30
 80064dc:	d45f      	bmi.n	800659e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	0750      	lsls	r0, r2, #29
 80064e2:	d502      	bpl.n	80064ea <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	0751      	lsls	r1, r2, #29
 80064e8:	d446      	bmi.n	8006578 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	0712      	lsls	r2, r2, #28
 80064ee:	d502      	bpl.n	80064f6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	0710      	lsls	r0, r2, #28
 80064f4:	d42e      	bmi.n	8006554 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	06d2      	lsls	r2, r2, #27
 80064fa:	d502      	bpl.n	8006502 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	06d0      	lsls	r0, r2, #27
 8006500:	d418      	bmi.n	8006534 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	07d1      	lsls	r1, r2, #31
 8006506:	d502      	bpl.n	800650e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	07d2      	lsls	r2, r2, #31
 800650c:	d45d      	bmi.n	80065ca <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	0610      	lsls	r0, r2, #24
 8006512:	d502      	bpl.n	800651a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	0611      	lsls	r1, r2, #24
 8006518:	d45f      	bmi.n	80065da <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800651a:	691a      	ldr	r2, [r3, #16]
 800651c:	0652      	lsls	r2, r2, #25
 800651e:	d502      	bpl.n	8006526 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	0650      	lsls	r0, r2, #25
 8006524:	d461      	bmi.n	80065ea <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	0691      	lsls	r1, r2, #26
 800652a:	d502      	bpl.n	8006532 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	0692      	lsls	r2, r2, #26
 8006530:	d443      	bmi.n	80065ba <HAL_TIM_IRQHandler+0xee>
}
 8006532:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006534:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006538:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800653a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800653c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800653e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006540:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006542:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006546:	d064      	beq.n	8006612 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006548:	f7ff ffba 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800654e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006550:	7722      	strb	r2, [r4, #28]
 8006552:	e7d6      	b.n	8006502 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006554:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006558:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800655a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800655c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800655e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006560:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006562:	0799      	lsls	r1, r3, #30
 8006564:	d152      	bne.n	800660c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006566:	f7ff ffa9 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656a:	4620      	mov	r0, r4
 800656c:	f7ff ffaa 	bl	80064c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006570:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006572:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006574:	7722      	strb	r2, [r4, #28]
 8006576:	e7be      	b.n	80064f6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006578:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800657c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800657e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006580:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006582:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8006584:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006586:	f413 7f40 	tst.w	r3, #768	; 0x300
 800658a:	d13c      	bne.n	8006606 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658c:	f7ff ff96 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006590:	4620      	mov	r0, r4
 8006592:	f7ff ff97 	bl	80064c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006596:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006598:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659a:	7722      	strb	r2, [r4, #28]
 800659c:	e7a5      	b.n	80064ea <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800659e:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065a2:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065a4:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065a6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	079b      	lsls	r3, r3, #30
 80065ac:	d025      	beq.n	80065fa <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80065ae:	f7ff ff87 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065b4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	7722      	strb	r2, [r4, #28]
 80065b8:	e791      	b.n	80064de <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065ba:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80065be:	4620      	mov	r0, r4
}
 80065c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80065c6:	f000 b85d 	b.w	8006684 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065ca:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80065ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80065d2:	f7fd fb91 	bl	8003cf8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	e799      	b.n	800650e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065da:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80065de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80065e2:	f000 f851 	bl	8006688 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	e797      	b.n	800651a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80065ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80065f2:	f7ff ff69 	bl	80064c8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	e795      	b.n	8006526 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	f7ff ff5f 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fe:	4620      	mov	r0, r4
 8006600:	f7ff ff60 	bl	80064c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006604:	e7d5      	b.n	80065b2 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8006606:	f7ff ff5b 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
 800660a:	e7c4      	b.n	8006596 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800660c:	f7ff ff58 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
 8006610:	e7ae      	b.n	8006570 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006612:	f7ff ff53 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006616:	4620      	mov	r0, r4
 8006618:	f7ff ff54 	bl	80064c4 <HAL_TIM_PWM_PulseFinishedCallback>
 800661c:	e796      	b.n	800654c <HAL_TIM_IRQHandler+0x80>
 800661e:	bf00      	nop

08006620 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006620:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8006624:	2a01      	cmp	r2, #1
 8006626:	d027      	beq.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006628:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800662a:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800662c:	681a      	ldr	r2, [r3, #0]
{
 800662e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8006630:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8006634:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006636:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006638:	4d10      	ldr	r5, [pc, #64]	; (800667c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800663a:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800663e:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006640:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8006642:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8006644:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006646:	d009      	beq.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8006648:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800664c:	d006      	beq.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800664e:	480c      	ldr	r0, [pc, #48]	; (8006680 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8006650:	4282      	cmp	r2, r0
 8006652:	d003      	beq.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8006654:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006658:	4282      	cmp	r2, r0
 800665a:	d104      	bne.n	8006666 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800665c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800665e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006662:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006664:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006666:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8006668:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800666a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800666e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 8006672:	4610      	mov	r0, r2
}
 8006674:	bc30      	pop	{r4, r5}
 8006676:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006678:	2002      	movs	r0, #2
}
 800667a:	4770      	bx	lr
 800667c:	40012c00 	.word	0x40012c00
 8006680:	40000400 	.word	0x40000400

08006684 <HAL_TIMEx_CommutCallback>:
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop

08006688 <HAL_TIMEx_BreakCallback>:
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop

0800668c <_UG_ImageUpdate>:
   /* Image doesn't support touch */

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 800668c:	780b      	ldrb	r3, [r1, #0]
 800668e:	069a      	lsls	r2, r3, #26
 8006690:	d50e      	bpl.n	80066b0 <_UG_ImageUpdate+0x24>
{
 8006692:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006696:	4688      	mov	r8, r1
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 8006698:	0719      	lsls	r1, r3, #28
{
 800669a:	b083      	sub	sp, #12
      if ( obj->state & OBJ_STATE_VISIBLE )
 800669c:	d509      	bpl.n	80066b2 <_UG_ImageUpdate+0x26>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 800669e:	065a      	lsls	r2, r3, #25
 80066a0:	d440      	bmi.n	8006724 <_UG_ImageUpdate+0x98>
      }
      else
      {
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 80066a2:	f023 0320 	bic.w	r3, r3, #32
 80066a6:	f888 3000 	strb.w	r3, [r8]
   }
}
 80066aa:	b003      	add	sp, #12
 80066ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b0:	4770      	bx	lr
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 80066b2:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
 80066b6:	f9b8 500c 	ldrsh.w	r5, [r8, #12]
 80066ba:	f9b8 b00a 	ldrsh.w	fp, [r8, #10]
   if ( x2 < x1 )
 80066be:	45a9      	cmp	r9, r5
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 80066c0:	8987      	ldrh	r7, [r0, #12]
 80066c2:	f9b8 a00e 	ldrsh.w	sl, [r8, #14]
   if ( x2 < x1 )
 80066c6:	dd02      	ble.n	80066ce <_UG_ImageUpdate+0x42>
 80066c8:	464b      	mov	r3, r9
 80066ca:	46a9      	mov	r9, r5
 80066cc:	461d      	mov	r5, r3
   if ( y2 < y1 )
 80066ce:	45d3      	cmp	fp, sl
 80066d0:	dd02      	ble.n	80066d8 <_UG_ImageUpdate+0x4c>
 80066d2:	465b      	mov	r3, fp
 80066d4:	46d3      	mov	fp, sl
 80066d6:	469a      	mov	sl, r3
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80066d8:	4e48      	ldr	r6, [pc, #288]	; (80067fc <_UG_ImageUpdate+0x170>)
 80066da:	6833      	ldr	r3, [r6, #0]
 80066dc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80066e0:	0792      	lsls	r2, r2, #30
 80066e2:	d509      	bpl.n	80066f8 <_UG_ImageUpdate+0x6c>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80066e4:	9700      	str	r7, [sp, #0]
 80066e6:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80066e8:	462a      	mov	r2, r5
 80066ea:	4653      	mov	r3, sl
 80066ec:	4659      	mov	r1, fp
 80066ee:	4648      	mov	r0, r9
 80066f0:	47a0      	blx	r4
 80066f2:	b1a0      	cbz	r0, 800671e <_UG_ImageUpdate+0x92>
   for( m=y1; m<=y2; m++ )
 80066f4:	45da      	cmp	sl, fp
 80066f6:	db12      	blt.n	800671e <_UG_ImageUpdate+0x92>
 80066f8:	45a9      	cmp	r9, r5
 80066fa:	dc10      	bgt.n	800671e <_UG_ImageUpdate+0x92>
   if ( x2 < x1 )
 80066fc:	464c      	mov	r4, r9
         gui->pset(n,m,c);
 80066fe:	6833      	ldr	r3, [r6, #0]
 8006700:	4620      	mov	r0, r4
 8006702:	3401      	adds	r4, #1
 8006704:	463a      	mov	r2, r7
 8006706:	4659      	mov	r1, fp
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	b224      	sxth	r4, r4
 800670c:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800670e:	42ac      	cmp	r4, r5
 8006710:	ddf5      	ble.n	80066fe <_UG_ImageUpdate+0x72>
   for( m=y1; m<=y2; m++ )
 8006712:	f10b 0b01 	add.w	fp, fp, #1
 8006716:	fa0f fb8b 	sxth.w	fp, fp
 800671a:	45d3      	cmp	fp, sl
 800671c:	ddee      	ble.n	80066fc <_UG_ImageUpdate+0x70>
      obj->state &= ~OBJ_STATE_UPDATE;
 800671e:	f898 3000 	ldrb.w	r3, [r8]
 8006722:	e7be      	b.n	80066a2 <_UG_ImageUpdate+0x16>
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8006724:	2800      	cmp	r0, #0
 8006726:	d066      	beq.n	80067f6 <_UG_ImageUpdate+0x16a>
 8006728:	7a02      	ldrb	r2, [r0, #8]
 800672a:	0797      	lsls	r7, r2, #30
 800672c:	d563      	bpl.n	80067f6 <_UG_ImageUpdate+0x16a>
      if ( wnd->style & WND_STYLE_3D )
 800672e:	7d84      	ldrb	r4, [r0, #22]
      a->xs = wnd->xs;
 8006730:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
      if ( wnd->style & WND_STYLE_3D )
 8006734:	07e6      	lsls	r6, r4, #31
      a->ys = wnd->ys;
 8006736:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
      if ( wnd->style & WND_STYLE_3D )
 800673a:	d43a      	bmi.n	80067b2 <_UG_ImageUpdate+0x126>
         a->ys+= wnd->title.height+1;
 800673c:	b292      	uxth	r2, r2
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 800673e:	b289      	uxth	r1, r1
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8006740:	07a5      	lsls	r5, r4, #30
 8006742:	d504      	bpl.n	800674e <_UG_ImageUpdate+0xc2>
         a->ys+= wnd->title.height+1;
 8006744:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8006748:	3401      	adds	r4, #1
 800674a:	4422      	add	r2, r4
 800674c:	b292      	uxth	r2, r2
   img = (UG_IMAGE*)(obj->data);
 800674e:	f8d8 e01c 	ldr.w	lr, [r8, #28]
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8006752:	f8b8 5010 	ldrh.w	r5, [r8, #16]
            obj->a_abs.xe = obj->a_rel.xs + ((UG_BMP*)img->img)->width + a.xs;
 8006756:	f8de 7000 	ldr.w	r7, [lr]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 800675a:	f8b8 6012 	ldrh.w	r6, [r8, #18]
            obj->a_abs.xe = obj->a_rel.xs + ((UG_BMP*)img->img)->width + a.xs;
 800675e:	f8b7 9004 	ldrh.w	r9, [r7, #4]
            obj->a_abs.ye = obj->a_rel.ys + ((UG_BMP*)img->img)->height + a.ys;
 8006762:	f8b7 c006 	ldrh.w	ip, [r7, #6]
            obj->a_abs.xe = obj->a_rel.xs + ((UG_BMP*)img->img)->width + a.xs;
 8006766:	eb05 0409 	add.w	r4, r5, r9
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 800676a:	440d      	add	r5, r1
            obj->a_abs.xe = obj->a_rel.xs + ((UG_BMP*)img->img)->width + a.xs;
 800676c:	4421      	add	r1, r4
 800676e:	b20c      	sxth	r4, r1
            obj->a_abs.ye = obj->a_rel.ys + ((UG_BMP*)img->img)->height + a.ys;
 8006770:	eb06 010c 	add.w	r1, r6, ip
            if ( obj->a_abs.ye >= wnd->ye ) return;
 8006774:	f9b0 b014 	ldrsh.w	fp, [r0, #20]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8006778:	4416      	add	r6, r2
            obj->a_abs.ye = obj->a_rel.ys + ((UG_BMP*)img->img)->height + a.ys;
 800677a:	440a      	add	r2, r1
 800677c:	b212      	sxth	r2, r2
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 800677e:	fa0f fa85 	sxth.w	sl, r5
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8006782:	b231      	sxth	r1, r6
            if ( obj->a_abs.ye >= wnd->ye ) return;
 8006784:	4593      	cmp	fp, r2
            obj->a_abs.xe = obj->a_rel.xs + ((UG_BMP*)img->img)->width + a.xs;
 8006786:	f8a8 400c 	strh.w	r4, [r8, #12]
            obj->a_abs.ye = obj->a_rel.ys + ((UG_BMP*)img->img)->height + a.ys;
 800678a:	f8a8 200e 	strh.w	r2, [r8, #14]
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 800678e:	f8a8 a008 	strh.w	sl, [r8, #8]
 8006792:	b2ad      	uxth	r5, r5
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8006794:	f8a8 100a 	strh.w	r1, [r8, #10]
 8006798:	b2b6      	uxth	r6, r6
            if ( obj->a_abs.ye >= wnd->ye ) return;
 800679a:	dd86      	ble.n	80066aa <_UG_ImageUpdate+0x1e>
            if ( obj->a_abs.xe >= wnd->xe ) return;
 800679c:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 80067a0:	42a2      	cmp	r2, r4
 80067a2:	dd82      	ble.n	80066aa <_UG_ImageUpdate+0x1e>
            if ( (img->img != NULL) && (img->type & IMG_TYPE_BMP) )
 80067a4:	f89e 2004 	ldrb.w	r2, [lr, #4]
 80067a8:	07d4      	lsls	r4, r2, #31
 80067aa:	d407      	bmi.n	80067bc <_UG_ImageUpdate+0x130>
            obj->state &= ~OBJ_STATE_REDRAW;
 80067ac:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 80067b0:	e777      	b.n	80066a2 <_UG_ImageUpdate+0x16>
         a->xs+=3;
 80067b2:	3103      	adds	r1, #3
         a->ys+=3;
 80067b4:	3203      	adds	r2, #3
         a->xs+=3;
 80067b6:	b289      	uxth	r1, r1
         a->ys+=3;
 80067b8:	b292      	uxth	r2, r2
         a->ye-=3;
 80067ba:	e7c1      	b.n	8006740 <_UG_ImageUpdate+0xb4>
   if ( bmp->p == NULL ) return;
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	2a00      	cmp	r2, #0
 80067c0:	d0f4      	beq.n	80067ac <_UG_ImageUpdate+0x120>
   if ( gui->driver[DRIVER_DRAW_IMAGE].state & DRIVER_ENABLED )
 80067c2:	480e      	ldr	r0, [pc, #56]	; (80067fc <_UG_ImageUpdate+0x170>)
 80067c4:	6804      	ldr	r4, [r0, #0]
 80067c6:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
 80067ca:	0780      	lsls	r0, r0, #30
 80067cc:	d5ee      	bpl.n	80067ac <_UG_ImageUpdate+0x120>
    if( bmp->colors == BMP_RGB565 )       // This Hardware accelerator only works for 16BPP RGB565 BMP images
 80067ce:	7a78      	ldrb	r0, [r7, #9]
 80067d0:	2802      	cmp	r0, #2
 80067d2:	d1eb      	bne.n	80067ac <_UG_ImageUpdate+0x120>
           if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint16_t *image, uint16_t pSize))gui->driver[DRIVER_DRAW_IMAGE].driver)(xp, yp, xp + bmp->width, yp + bmp->height, bmp->p, bmp->width * bmp->height) == UG_RESULT_OK ) return;
 80067d4:	4466      	add	r6, ip
 80067d6:	fb0c fc09 	mul.w	ip, ip, r9
 80067da:	fa1f fc8c 	uxth.w	ip, ip
 80067de:	9200      	str	r2, [sp, #0]
 80067e0:	f8cd c004 	str.w	ip, [sp, #4]
 80067e4:	444d      	add	r5, r9
 80067e6:	b233      	sxth	r3, r6
 80067e8:	4650      	mov	r0, sl
 80067ea:	6e64      	ldr	r4, [r4, #100]	; 0x64
 80067ec:	b22a      	sxth	r2, r5
 80067ee:	47a0      	blx	r4
            obj->state &= ~OBJ_STATE_REDRAW;
 80067f0:	f898 3000 	ldrb.w	r3, [r8]
 80067f4:	e7da      	b.n	80067ac <_UG_ImageUpdate+0x120>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 80067f6:	2100      	movs	r1, #0
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 80067f8:	460a      	mov	r2, r1
 80067fa:	e7a8      	b.n	800674e <_UG_ImageUpdate+0xc2>
 80067fc:	20001844 	.word	0x20001844

08006800 <UG_Init>:
{
 8006800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006802:	4604      	mov	r4, r0
   g->font.p = NULL;
 8006804:	2500      	movs	r5, #0
   g->console.x_start = 4;
 8006806:	f04f 1604 	mov.w	r6, #262148	; 0x40004
   g->char_h_space = 1;
 800680a:	f8df e054 	ldr.w	lr, [pc, #84]	; 8006860 <UG_Init+0x60>
   g->back_color = C_BLACK;
 800680e:	f8df c054 	ldr.w	ip, [pc, #84]	; 8006864 <UG_Init+0x64>
   gui = g;
 8006812:	4f15      	ldr	r7, [pc, #84]	; (8006868 <UG_Init+0x68>)
   g->back_color = C_BLACK;
 8006814:	e9c4 ec10 	strd	lr, ip, [r4, #64]	; 0x40
   g->x_dim = x;
 8006818:	80a2      	strh	r2, [r4, #4]
   g->y_dim = y;
 800681a:	80e3      	strh	r3, [r4, #6]
   g->console.x_end = g->x_dim - g->console.x_start-1;
 800681c:	3a05      	subs	r2, #5
   g->console.y_end = g->y_dim - g->console.x_start-1;
 800681e:	3b05      	subs	r3, #5
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8006820:	b212      	sxth	r2, r2
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8006822:	b21b      	sxth	r3, r3
   g->font.char_height = 0;
 8006824:	6365      	str	r5, [r4, #52]	; 0x34
      g->driver[i].state = 0;
 8006826:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800682a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800682e:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
 8006832:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
}
 8006836:	2001      	movs	r0, #1
   g->active_window = NULL;
 8006838:	e9c4 5504 	strd	r5, r5, [r4, #16]
   gui = g;
 800683c:	603c      	str	r4, [r7, #0]
   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 800683e:	6021      	str	r1, [r4, #0]
   g->console.x_start = 4;
 8006840:	6226      	str	r6, [r4, #32]
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8006842:	84a2      	strh	r2, [r4, #36]	; 0x24
   g->console.x_pos = g->console.x_end;
 8006844:	83a2      	strh	r2, [r4, #28]
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8006846:	84e3      	strh	r3, [r4, #38]	; 0x26
   g->console.y_pos = g->console.y_end;
 8006848:	83e3      	strh	r3, [r4, #30]
   g->font.p = NULL;
 800684a:	62e5      	str	r5, [r4, #44]	; 0x2c
   g->font.char_width = 0;
 800684c:	8665      	strh	r5, [r4, #50]	; 0x32
   g->font.end_char = 0;
 800684e:	8725      	strh	r5, [r4, #56]	; 0x38
   g->font.widths = NULL;
 8006850:	63e5      	str	r5, [r4, #60]	; 0x3c
   g->last_window = NULL;
 8006852:	61a5      	str	r5, [r4, #24]
      g->driver[i].driver = NULL;
 8006854:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006856:	6565      	str	r5, [r4, #84]	; 0x54
 8006858:	65e5      	str	r5, [r4, #92]	; 0x5c
 800685a:	6665      	str	r5, [r4, #100]	; 0x64
}
 800685c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685e:	bf00      	nop
 8006860:	ffff0101 	.word	0xffff0101
 8006864:	5c5d0000 	.word	0x5c5d0000
 8006868:	20001844 	.word	0x20001844

0800686c <UG_DrawLine>:
{
 800686c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8006870:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80069a0 <UG_DrawLine+0x134>
{
 8006874:	b087      	sub	sp, #28
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8006876:	f8da e000 	ldr.w	lr, [sl]
{
 800687a:	4604      	mov	r4, r0
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800687c:	f89e 8050 	ldrb.w	r8, [lr, #80]	; 0x50
{
 8006880:	460d      	mov	r5, r1
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8006882:	f018 0f02 	tst.w	r8, #2
{
 8006886:	4616      	mov	r6, r2
 8006888:	461f      	mov	r7, r3
 800688a:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800688e:	d008      	beq.n	80068a2 <UG_DrawLine+0x36>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8006890:	f8cd 9000 	str.w	r9, [sp]
 8006894:	f8de 804c 	ldr.w	r8, [lr, #76]	; 0x4c
 8006898:	47c0      	blx	r8
 800689a:	2800      	cmp	r0, #0
 800689c:	d055      	beq.n	800694a <UG_DrawLine+0xde>
   gui->pset(drawx, drawy,c);
 800689e:	f8da e000 	ldr.w	lr, [sl]
   dx = x2 - x1;
 80068a2:	1b36      	subs	r6, r6, r4
 80068a4:	b233      	sxth	r3, r6
   sgndx = (dx>0)?1:-1;
 80068a6:	f64f 76ff 	movw	r6, #65535	; 0xffff
   dy = y2 - y1;
 80068aa:	eba7 0c05 	sub.w	ip, r7, r5
   dxabs = (dx>0)?dx:-dx;
 80068ae:	ea83 78e3 	eor.w	r8, r3, r3, asr #31
   dy = y2 - y1;
 80068b2:	fa0f fc8c 	sxth.w	ip, ip
   dxabs = (dx>0)?dx:-dx;
 80068b6:	eba8 78e3 	sub.w	r8, r8, r3, asr #31
   sgndx = (dx>0)?1:-1;
 80068ba:	2b00      	cmp	r3, #0
   gui->pset(drawx, drawy,c);
 80068bc:	f8de 7000 	ldr.w	r7, [lr]
   dxabs = (dx>0)?dx:-dx;
 80068c0:	fa0f f388 	sxth.w	r3, r8
   dyabs = (dy>0)?dy:-dy;
 80068c4:	ea8c 7eec 	eor.w	lr, ip, ip, asr #31
 80068c8:	ebae 7eec 	sub.w	lr, lr, ip, asr #31
   dxabs = (dx>0)?dx:-dx;
 80068cc:	9305      	str	r3, [sp, #20]
 80068ce:	fa1f f388 	uxth.w	r3, r8
 80068d2:	9302      	str	r3, [sp, #8]
   dyabs = (dy>0)?dy:-dy;
 80068d4:	fa1f f38e 	uxth.w	r3, lr
 80068d8:	9303      	str	r3, [sp, #12]
   sgndx = (dx>0)?1:-1;
 80068da:	bfcc      	ite	gt
 80068dc:	2301      	movgt	r3, #1
 80068de:	4633      	movle	r3, r6
   gui->pset(drawx, drawy,c);
 80068e0:	464a      	mov	r2, r9
   sgndy = (dy>0)?1:-1;
 80068e2:	f1bc 0f00 	cmp.w	ip, #0
   gui->pset(drawx, drawy,c);
 80068e6:	4629      	mov	r1, r5
 80068e8:	4620      	mov	r0, r4
   sgndy = (dy>0)?1:-1;
 80068ea:	bfc8      	it	gt
 80068ec:	2601      	movgt	r6, #1
   dyabs = (dy>0)?dy:-dy;
 80068ee:	fa0f fb8e 	sxth.w	fp, lr
   sgndx = (dx>0)?1:-1;
 80068f2:	9304      	str	r3, [sp, #16]
   gui->pset(drawx, drawy,c);
 80068f4:	47b8      	blx	r7
   if( dxabs >= dyabs )
 80068f6:	9b05      	ldr	r3, [sp, #20]
 80068f8:	455b      	cmp	r3, fp
 80068fa:	db29      	blt.n	8006950 <UG_DrawLine+0xe4>
      for( n=0; n<dxabs; n++ )
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	dd24      	ble.n	800694a <UG_DrawLine+0xde>
   y = dxabs >> 1;
 8006900:	f04f 0800 	mov.w	r8, #0
 8006904:	469b      	mov	fp, r3
 8006906:	105f      	asrs	r7, r3, #1
 8006908:	e00f      	b.n	800692a <UG_DrawLine+0xbe>
            drawy += sgndy;
 800690a:	b20d      	sxth	r5, r1
 800690c:	b214      	sxth	r4, r2
      for( n=0; n<dxabs; n++ )
 800690e:	f108 0801 	add.w	r8, r8, #1
            y -= dxabs;
 8006912:	b21f      	sxth	r7, r3
         gui->pset(drawx, drawy,c);
 8006914:	f8da 3000 	ldr.w	r3, [sl]
 8006918:	464a      	mov	r2, r9
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4629      	mov	r1, r5
 800691e:	4620      	mov	r0, r4
 8006920:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8006922:	fa0f f388 	sxth.w	r3, r8
 8006926:	459b      	cmp	fp, r3
 8006928:	dd0f      	ble.n	800694a <UG_DrawLine+0xde>
            y -= dxabs;
 800692a:	9b04      	ldr	r3, [sp, #16]
 800692c:	9802      	ldr	r0, [sp, #8]
 800692e:	191a      	adds	r2, r3, r4
         y += dyabs;
 8006930:	9b03      	ldr	r3, [sp, #12]
            drawy += sgndy;
 8006932:	1971      	adds	r1, r6, r5
         y += dyabs;
 8006934:	443b      	add	r3, r7
 8006936:	b21f      	sxth	r7, r3
         if( y >= dxabs )
 8006938:	45bb      	cmp	fp, r7
         y += dyabs;
 800693a:	b29b      	uxth	r3, r3
            y -= dxabs;
 800693c:	eba3 0300 	sub.w	r3, r3, r0
         if( y >= dxabs )
 8006940:	dde3      	ble.n	800690a <UG_DrawLine+0x9e>
 8006942:	b214      	sxth	r4, r2
      for( n=0; n<dxabs; n++ )
 8006944:	f108 0801 	add.w	r8, r8, #1
 8006948:	e7e4      	b.n	8006914 <UG_DrawLine+0xa8>
}
 800694a:	b007      	add	sp, #28
 800694c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for( n=0; n<dyabs; n++ )
 8006950:	f1bb 0f00 	cmp.w	fp, #0
 8006954:	ddf9      	ble.n	800694a <UG_DrawLine+0xde>
   x = dyabs >> 1;
 8006956:	f04f 0800 	mov.w	r8, #0
 800695a:	ea4f 076b 	mov.w	r7, fp, asr #1
 800695e:	e00f      	b.n	8006980 <UG_DrawLine+0x114>
            drawx += sgndx;
 8006960:	b20c      	sxth	r4, r1
 8006962:	b215      	sxth	r5, r2
      for( n=0; n<dyabs; n++ )
 8006964:	f108 0801 	add.w	r8, r8, #1
            x -= dyabs;
 8006968:	b21f      	sxth	r7, r3
         gui->pset(drawx, drawy,c);
 800696a:	f8da 3000 	ldr.w	r3, [sl]
 800696e:	464a      	mov	r2, r9
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4629      	mov	r1, r5
 8006974:	4620      	mov	r0, r4
 8006976:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8006978:	fa0f f388 	sxth.w	r3, r8
 800697c:	459b      	cmp	fp, r3
 800697e:	dde4      	ble.n	800694a <UG_DrawLine+0xde>
            drawx += sgndx;
 8006980:	9b04      	ldr	r3, [sp, #16]
            x -= dyabs;
 8006982:	9803      	ldr	r0, [sp, #12]
            drawx += sgndx;
 8006984:	1919      	adds	r1, r3, r4
         x += dxabs;
 8006986:	9b02      	ldr	r3, [sp, #8]
 8006988:	1972      	adds	r2, r6, r5
 800698a:	443b      	add	r3, r7
 800698c:	b21f      	sxth	r7, r3
         if( x >= dyabs )
 800698e:	45bb      	cmp	fp, r7
         x += dxabs;
 8006990:	b29b      	uxth	r3, r3
            x -= dyabs;
 8006992:	eba3 0300 	sub.w	r3, r3, r0
         if( x >= dyabs )
 8006996:	dde3      	ble.n	8006960 <UG_DrawLine+0xf4>
 8006998:	b215      	sxth	r5, r2
      for( n=0; n<dyabs; n++ )
 800699a:	f108 0801 	add.w	r8, r8, #1
 800699e:	e7e4      	b.n	800696a <UG_DrawLine+0xfe>
 80069a0:	20001844 	.word	0x20001844

080069a4 <_UG_PutChar>:
{
 80069a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a8:	4604      	mov	r4, r0
 80069aa:	b089      	sub	sp, #36	; 0x24
   switch ( bt )
 80069ac:	2cfc      	cmp	r4, #252	; 0xfc
{
 80069ae:	4608      	mov	r0, r1
 80069b0:	461f      	mov	r7, r3
 80069b2:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
   switch ( bt )
 80069b6:	f200 80c6 	bhi.w	8006b46 <_UG_PutChar+0x1a2>
 80069ba:	2cd5      	cmp	r4, #213	; 0xd5
 80069bc:	d92d      	bls.n	8006a1a <_UG_PutChar+0x76>
 80069be:	f1a4 03d6 	sub.w	r3, r4, #214	; 0xd6
 80069c2:	2b26      	cmp	r3, #38	; 0x26
 80069c4:	f200 80bf 	bhi.w	8006b46 <_UG_PutChar+0x1a2>
 80069c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80069cc:	00bd01df 	.word	0x00bd01df
 80069d0:	00bd00bd 	.word	0x00bd00bd
 80069d4:	00bd00bd 	.word	0x00bd00bd
 80069d8:	00bd011c 	.word	0x00bd011c
 80069dc:	00bd00bd 	.word	0x00bd00bd
 80069e0:	00bd00bd 	.word	0x00bd00bd
 80069e4:	00bd00bd 	.word	0x00bd00bd
 80069e8:	00bd011f 	.word	0x00bd011f
 80069ec:	00bd00bd 	.word	0x00bd00bd
 80069f0:	00bd00bd 	.word	0x00bd00bd
 80069f4:	00bd00bd 	.word	0x00bd00bd
 80069f8:	00bd00bd 	.word	0x00bd00bd
 80069fc:	00bd00bd 	.word	0x00bd00bd
 8006a00:	00bd00bd 	.word	0x00bd00bd
 8006a04:	00bd00bd 	.word	0x00bd00bd
 8006a08:	00bd00bd 	.word	0x00bd00bd
 8006a0c:	00bd01e2 	.word	0x00bd01e2
 8006a10:	00bd00bd 	.word	0x00bd00bd
 8006a14:	00bd00bd 	.word	0x00bd00bd
 8006a18:	0122      	.short	0x0122
 8006a1a:	2cb5      	cmp	r4, #181	; 0xb5
 8006a1c:	f000 8090 	beq.w	8006b40 <_UG_PutChar+0x19c>
 8006a20:	2cc4      	cmp	r4, #196	; 0xc4
 8006a22:	f040 8088 	bne.w	8006b36 <_UG_PutChar+0x192>
 8006a26:	238e      	movs	r3, #142	; 0x8e
      case 0xC4: bt = 0x8E; break; // �
 8006a28:	461c      	mov	r4, r3
   if (bt < font->start_char || bt > font->end_char) return;
 8006a2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006a2c:	894e      	ldrh	r6, [r1, #10]
 8006a2e:	429e      	cmp	r6, r3
 8006a30:	d87e      	bhi.n	8006b30 <_UG_PutChar+0x18c>
 8006a32:	8989      	ldrh	r1, [r1, #12]
 8006a34:	4299      	cmp	r1, r3
 8006a36:	d37b      	bcc.n	8006b30 <_UG_PutChar+0x18c>
   bn = font->char_width;
 8006a38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a3a:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8006a3e:	b2ab      	uxth	r3, r5
 8006a40:	9302      	str	r3, [sp, #8]
   if ( !bn ) return;
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d074      	beq.n	8006b30 <_UG_PutChar+0x18c>
   bn >>= 3;
 8006a46:	08d9      	lsrs	r1, r3, #3
   if ( font->char_width % 8 ) bn++;
 8006a48:	075b      	lsls	r3, r3, #29
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 8006a4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bn >>= 3;
 8006a4c:	9104      	str	r1, [sp, #16]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 8006a4e:	691b      	ldr	r3, [r3, #16]
   if ( font->char_width % 8 ) bn++;
 8006a50:	bf1c      	itt	ne
 8006a52:	3101      	addne	r1, #1
 8006a54:	9104      	strne	r1, [sp, #16]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 8006a56:	b113      	cbz	r3, 8006a5e <_UG_PutChar+0xba>
 8006a58:	1ba1      	subs	r1, r4, r6
 8006a5a:	5c5b      	ldrb	r3, [r3, r1]
 8006a5c:	9302      	str	r3, [sp, #8]
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 8006a5e:	f8df b260 	ldr.w	fp, [pc, #608]	; 8006cc0 <_UG_PutChar+0x31c>
   yo = y;
 8006a62:	fa1f fc82 	uxth.w	ip, r2
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 8006a66:	f8db 3000 	ldr.w	r3, [fp]
   yo = y;
 8006a6a:	f8cd c00c 	str.w	ip, [sp, #12]
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 8006a6e:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8006a72:	f011 0102 	ands.w	r1, r1, #2
 8006a76:	d168      	bne.n	8006b4a <_UG_PutChar+0x1a6>
	   if (font->font_type == FONT_TYPE_1BPP)
 8006a78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a7a:	791a      	ldrb	r2, [r3, #4]
 8006a7c:	2a00      	cmp	r2, #0
 8006a7e:	f040 8121 	bne.w	8006cc4 <_UG_PutChar+0x320>
 8006a82:	4619      	mov	r1, r3
         index = (bt - font->start_char)* font->char_height * bn;
 8006a84:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8006a88:	1ba3      	subs	r3, r4, r6
 8006a8a:	fb01 f303 	mul.w	r3, r1, r3
 8006a8e:	9c04      	ldr	r4, [sp, #16]
         for( j=0;j<font->char_height;j++ )
 8006a90:	2900      	cmp	r1, #0
         index = (bt - font->start_char)* font->char_height * bn;
 8006a92:	fb04 f303 	mul.w	r3, r4, r3
         for( j=0;j<font->char_height;j++ )
 8006a96:	dd4b      	ble.n	8006b30 <_UG_PutChar+0x18c>
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 8006a98:	b281      	uxth	r1, r0
 8006a9a:	9106      	str	r1, [sp, #24]
 8006a9c:	2c00      	cmp	r4, #0
 8006a9e:	d047      	beq.n	8006b30 <_UG_PutChar+0x18c>
 8006aa0:	4423      	add	r3, r4
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	4263      	negs	r3, r4
 8006aa6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8006aaa:	ea6f 4313 	mvn.w	r3, r3, lsr #16
         for( j=0;j<font->char_height;j++ )
 8006aae:	9205      	str	r2, [sp, #20]
 8006ab0:	9307      	str	r3, [sp, #28]
 8006ab2:	9a01      	ldr	r2, [sp, #4]
 8006ab4:	e9dd 4306 	ldrd	r4, r3, [sp, #24]
 8006ab8:	9d02      	ldr	r5, [sp, #8]
 8006aba:	4413      	add	r3, r2
                  gui->pset(xo,yo,bc);
 8006abc:	f9bd a00c 	ldrsh.w	sl, [sp, #12]
 8006ac0:	9300      	str	r3, [sp, #0]
             b = font->p[index++];
 8006ac2:	9900      	ldr	r1, [sp, #0]
 8006ac4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	6812      	ldr	r2, [r2, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	f104 0608 	add.w	r6, r4, #8
 8006ad0:	f812 9001 	ldrb.w	r9, [r2, r1]
 8006ad4:	9300      	str	r3, [sp, #0]
             for( k=0;(k<8) && c;k++ )
 8006ad6:	b2b6      	uxth	r6, r6
                  gui->pset(xo,yo,fc);
 8006ad8:	b220      	sxth	r0, r4
             for( k=0;(k<8) && c;k++ )
 8006ada:	b1a5      	cbz	r5, 8006b06 <_UG_PutChar+0x162>
               if( b & 0x01 )
 8006adc:	f019 0f01 	tst.w	r9, #1
                  gui->pset(xo,yo,fc);
 8006ae0:	f8db 3000 	ldr.w	r3, [fp]
                  gui->pset(xo,yo,bc);
 8006ae4:	bf08      	it	eq
 8006ae6:	b220      	sxtheq	r0, r4
               xo++;
 8006ae8:	f104 0401 	add.w	r4, r4, #1
                  gui->pset(xo,yo,fc);
 8006aec:	bf14      	ite	ne
 8006aee:	463a      	movne	r2, r7
                  gui->pset(xo,yo,bc);
 8006af0:	4642      	moveq	r2, r8
 8006af2:	4651      	mov	r1, sl
 8006af4:	681b      	ldr	r3, [r3, #0]
               xo++;
 8006af6:	b2a4      	uxth	r4, r4
                  gui->pset(xo,yo,bc);
 8006af8:	4798      	blx	r3
               c--;
 8006afa:	3d01      	subs	r5, #1
             for( k=0;(k<8) && c;k++ )
 8006afc:	42b4      	cmp	r4, r6
               b >>= 1;
 8006afe:	ea4f 0959 	mov.w	r9, r9, lsr #1
               c--;
 8006b02:	b2ad      	uxth	r5, r5
             for( k=0;(k<8) && c;k++ )
 8006b04:	d1e8      	bne.n	8006ad8 <_UG_PutChar+0x134>
           for( i=0;i<bn;i++ )
 8006b06:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d1d9      	bne.n	8006ac2 <_UG_PutChar+0x11e>
           yo++;
 8006b0e:	9b03      	ldr	r3, [sp, #12]
         for( j=0;j<font->char_height;j++ )
 8006b10:	9904      	ldr	r1, [sp, #16]
           yo++;
 8006b12:	3301      	adds	r3, #1
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	9303      	str	r3, [sp, #12]
         for( j=0;j<font->char_height;j++ )
 8006b18:	9b01      	ldr	r3, [sp, #4]
 8006b1a:	9a05      	ldr	r2, [sp, #20]
 8006b1c:	440b      	add	r3, r1
 8006b1e:	9301      	str	r3, [sp, #4]
 8006b20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b22:	3201      	adds	r2, #1
 8006b24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b28:	b292      	uxth	r2, r2
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	9205      	str	r2, [sp, #20]
 8006b2e:	dbc0      	blt.n	8006ab2 <_UG_PutChar+0x10e>
}
 8006b30:	b009      	add	sp, #36	; 0x24
 8006b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   switch ( bt )
 8006b36:	2cb0      	cmp	r4, #176	; 0xb0
 8006b38:	d105      	bne.n	8006b46 <_UG_PutChar+0x1a2>
 8006b3a:	23f8      	movs	r3, #248	; 0xf8
      case 0xB0: bt = 0xF8; break; // �
 8006b3c:	461c      	mov	r4, r3
 8006b3e:	e774      	b.n	8006a2a <_UG_PutChar+0x86>
   switch ( bt )
 8006b40:	23e6      	movs	r3, #230	; 0xe6
      case 0xB5: bt = 0xE6; break; // �
 8006b42:	461c      	mov	r4, r3
 8006b44:	e771      	b.n	8006a2a <_UG_PutChar+0x86>
   if (bt < font->start_char || bt > font->end_char) return;
 8006b46:	b2a3      	uxth	r3, r4
 8006b48:	e76f      	b.n	8006a2a <_UG_PutChar+0x86>
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 8006b4a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006b4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b4e:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 8006b52:	891b      	ldrh	r3, [r3, #8]
 8006b54:	4611      	mov	r1, r2
 8006b56:	4433      	add	r3, r6
 8006b58:	9e02      	ldr	r6, [sp, #8]
 8006b5a:	1e42      	subs	r2, r0, #1
 8006b5c:	4432      	add	r2, r6
 8006b5e:	b21b      	sxth	r3, r3
 8006b60:	b212      	sxth	r2, r2
 8006b62:	47a8      	blx	r5
      if (font->font_type == FONT_TYPE_1BPP)
 8006b64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 8006b66:	4605      	mov	r5, r0
      if (font->font_type == FONT_TYPE_1BPP)
 8006b68:	791b      	ldrb	r3, [r3, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d153      	bne.n	8006c16 <_UG_PutChar+0x272>
	      index = (bt - font->start_char)* font->char_height * bn;
 8006b6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b70:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006b72:	8952      	ldrh	r2, [r2, #10]
 8006b74:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8006b78:	1aa2      	subs	r2, r4, r2
 8006b7a:	fb01 f202 	mul.w	r2, r1, r2
 8006b7e:	9804      	ldr	r0, [sp, #16]
		  for( j=0;j<font->char_height;j++ )
 8006b80:	2900      	cmp	r1, #0
	      index = (bt - font->start_char)* font->char_height * bn;
 8006b82:	fb00 f202 	mul.w	r2, r0, r2
		  for( j=0;j<font->char_height;j++ )
 8006b86:	ddd3      	ble.n	8006b30 <_UG_PutChar+0x18c>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	d0d1      	beq.n	8006b30 <_UG_PutChar+0x18c>
 8006b8c:	f1c0 0b00 	rsb	fp, r0, #0
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	ea6f 430b 	mvn.w	r3, fp, lsl #16
 8006b96:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8006b9a:	eb02 0900 	add.w	r9, r2, r0
 8006b9e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006ba2:	9303      	str	r3, [sp, #12]
 8006ba4:	f8cd 9000 	str.w	r9, [sp]
 8006ba8:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006bac:	465c      	mov	r4, fp
 8006bae:	9a00      	ldr	r2, [sp, #0]
 8006bb0:	189e      	adds	r6, r3, r2
				b = font->p[index++];
 8006bb2:	f8da 2000 	ldr.w	r2, [sl]
 8006bb6:	f1a4 0908 	sub.w	r9, r4, #8
 8006bba:	f812 b006 	ldrb.w	fp, [r2, r6]
 8006bbe:	fa1f f989 	uxth.w	r9, r9
 8006bc2:	3601      	adds	r6, #1
				for( k=0;(k<8) && c;k++ )
 8006bc4:	b164      	cbz	r4, 8006be0 <_UG_PutChar+0x23c>
				   if( b & 0x01 )
 8006bc6:	f01b 0f01 	tst.w	fp, #1
				   c--;
 8006bca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
					  push_pixel(fc);
 8006bce:	bf14      	ite	ne
 8006bd0:	4638      	movne	r0, r7
					  push_pixel(bc);
 8006bd2:	4640      	moveq	r0, r8
				   c--;
 8006bd4:	b2a4      	uxth	r4, r4
					  push_pixel(bc);
 8006bd6:	47a8      	blx	r5
				for( k=0;(k<8) && c;k++ )
 8006bd8:	454c      	cmp	r4, r9
				   b >>= 1;
 8006bda:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
				for( k=0;(k<8) && c;k++ )
 8006bde:	d1f1      	bne.n	8006bc4 <_UG_PutChar+0x220>
			 for( i=0;i<bn;i++ )
 8006be0:	9b00      	ldr	r3, [sp, #0]
 8006be2:	429e      	cmp	r6, r3
 8006be4:	d1e5      	bne.n	8006bb2 <_UG_PutChar+0x20e>
		  for( j=0;j<font->char_height;j++ )
 8006be6:	9b01      	ldr	r3, [sp, #4]
 8006be8:	9904      	ldr	r1, [sp, #16]
 8006bea:	f103 0b01 	add.w	fp, r3, #1
 8006bee:	9b00      	ldr	r3, [sp, #0]
 8006bf0:	fa1f f28b 	uxth.w	r2, fp
 8006bf4:	440b      	add	r3, r1
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
 8006bfc:	9201      	str	r2, [sp, #4]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	dbd2      	blt.n	8006ba8 <_UG_PutChar+0x204>
 8006c02:	e795      	b.n	8006b30 <_UG_PutChar+0x18c>
      case 0xDC: bt = 0x9A; break; // �
 8006c04:	239a      	movs	r3, #154	; 0x9a
 8006c06:	461c      	mov	r4, r3
 8006c08:	e70f      	b.n	8006a2a <_UG_PutChar+0x86>
      case 0xE4: bt = 0x84; break; // �
 8006c0a:	2384      	movs	r3, #132	; 0x84
 8006c0c:	461c      	mov	r4, r3
 8006c0e:	e70c      	b.n	8006a2a <_UG_PutChar+0x86>
      case 0xFC: bt = 0x81; break; // �
 8006c10:	2381      	movs	r3, #129	; 0x81
 8006c12:	461c      	mov	r4, r3
 8006c14:	e709      	b.n	8006a2a <_UG_PutChar+0x86>
	  else if (font->font_type == FONT_TYPE_8BPP)
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d18a      	bne.n	8006b30 <_UG_PutChar+0x18c>
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 8006c1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006c1e:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
 8006c22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c26:	eba4 0a0a 	sub.w	sl, r4, sl
 8006c2a:	fb03 fa0a 	mul.w	sl, r3, sl
 8006c2e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
		   for( j=0;j<font->char_height;j++ )
 8006c32:	2b00      	cmp	r3, #0
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 8006c34:	fb02 fa0a 	mul.w	sl, r2, sl
		   for( j=0;j<font->char_height;j++ )
 8006c38:	f77f af7a 	ble.w	8006b30 <_UG_PutChar+0x18c>
 8006c3c:	9b02      	ldr	r3, [sp, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f43f af76 	beq.w	8006b30 <_UG_PutChar+0x18c>
 8006c44:	2300      	movs	r3, #0
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);  
 8006c46:	f8cd a000 	str.w	sl, [sp]
		   for( j=0;j<font->char_height;j++ )
 8006c4a:	9301      	str	r3, [sp, #4]
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);  
 8006c4c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006c50:	f028 03ff 	bic.w	r3, r8, #255	; 0xff
 8006c54:	fa5f f987 	uxtb.w	r9, r7
 8006c58:	9305      	str	r3, [sp, #20]
 8006c5a:	fa5f f888 	uxtb.w	r8, r8
 8006c5e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8006c62:	9b00      	ldr	r3, [sp, #0]
 8006c64:	9a02      	ldr	r2, [sp, #8]
 8006c66:	469b      	mov	fp, r3
 8006c68:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8006c6c:	189c      	adds	r4, r3, r2
				 b = font->p[index++];
 8006c6e:	465b      	mov	r3, fp
 8006c70:	f8da 2000 	ldr.w	r2, [sl]
 8006c74:	f10b 0b01 	add.w	fp, fp, #1
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);  
 8006c78:	5cd2      	ldrb	r2, [r2, r3]
 8006c7a:	f5c2 7380 	rsb	r3, r2, #256	; 0x100
 8006c7e:	fb06 f003 	mul.w	r0, r6, r3
 8006c82:	fb08 f303 	mul.w	r3, r8, r3
 8006c86:	fb07 0002 	mla	r0, r7, r2, r0
 8006c8a:	fb09 3302 	mla	r3, r9, r2, r3
 8006c8e:	1200      	asrs	r0, r0, #8
 8006c90:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006c94:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
				 push_pixel(color);
 8006c98:	4318      	orrs	r0, r3
 8006c9a:	47a8      	blx	r5
			  for( i=0;i<actual_char_width;i++ )
 8006c9c:	45a3      	cmp	fp, r4
 8006c9e:	d1e6      	bne.n	8006c6e <_UG_PutChar+0x2ca>
		   for( j=0;j<font->char_height;j++ )
 8006ca0:	9b01      	ldr	r3, [sp, #4]
			  index += font->char_width - actual_char_width;
 8006ca2:	9900      	ldr	r1, [sp, #0]
		   for( j=0;j<font->char_height;j++ )
 8006ca4:	f103 0b01 	add.w	fp, r3, #1
			  index += font->char_width - actual_char_width;
 8006ca8:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
		   for( j=0;j<font->char_height;j++ )
 8006cac:	fa1f f28b 	uxth.w	r2, fp
			  index += font->char_width - actual_char_width;
 8006cb0:	4419      	add	r1, r3
		   for( j=0;j<font->char_height;j++ )
 8006cb2:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
 8006cb6:	9201      	str	r2, [sp, #4]
 8006cb8:	429a      	cmp	r2, r3
			  index += font->char_width - actual_char_width;
 8006cba:	9100      	str	r1, [sp, #0]
		   for( j=0;j<font->char_height;j++ )
 8006cbc:	dbd1      	blt.n	8006c62 <_UG_PutChar+0x2be>
 8006cbe:	e737      	b.n	8006b30 <_UG_PutChar+0x18c>
 8006cc0:	20001844 	.word	0x20001844
      else if (font->font_type == FONT_TYPE_8BPP)
 8006cc4:	2a01      	cmp	r2, #1
 8006cc6:	f47f af33 	bne.w	8006b30 <_UG_PutChar+0x18c>
 8006cca:	461a      	mov	r2, r3
         index = (bt - font->start_char)* font->char_height * font->char_width;
 8006ccc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8006cd0:	1ba3      	subs	r3, r4, r6
 8006cd2:	fb02 f303 	mul.w	r3, r2, r3
 8006cd6:	fb05 f303 	mul.w	r3, r5, r3
         for( j=0;j<font->char_height;j++ )
 8006cda:	2a00      	cmp	r2, #0
         index = (bt - font->start_char)* font->char_height * font->char_width;
 8006cdc:	9304      	str	r3, [sp, #16]
         for( j=0;j<font->char_height;j++ )
 8006cde:	f77f af27 	ble.w	8006b30 <_UG_PutChar+0x18c>
 8006ce2:	9b02      	ldr	r3, [sp, #8]
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 8006ce4:	b282      	uxth	r2, r0
 8006ce6:	9206      	str	r2, [sp, #24]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f43f af21 	beq.w	8006b30 <_UG_PutChar+0x18c>
 8006cee:	4413      	add	r3, r2
 8006cf0:	9307      	str	r3, [sp, #28]
 8006cf2:	f028 03ff 	bic.w	r3, r8, #255	; 0xff
 8006cf6:	9305      	str	r3, [sp, #20]
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);  
 8006cf8:	fa5f f888 	uxtb.w	r8, r8
 8006cfc:	b2fb      	uxtb	r3, r7
 8006cfe:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
         for( j=0;j<font->char_height;j++ )
 8006d02:	9102      	str	r1, [sp, #8]
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);  
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	f407 4a7f 	and.w	sl, r7, #65280	; 0xff00
 8006d0a:	f8cd 8004 	str.w	r8, [sp, #4]
 8006d0e:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 8006d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d16:	1899      	adds	r1, r3, r2
 8006d18:	463b      	mov	r3, r7
 8006d1a:	fa0f f881 	sxth.w	r8, r1
 8006d1e:	4647      	mov	r7, r8
 8006d20:	4698      	mov	r8, r3
 8006d22:	9d04      	ldr	r5, [sp, #16]
            xo = x;
 8006d24:	9c06      	ldr	r4, [sp, #24]
 8006d26:	f8bd 601c 	ldrh.w	r6, [sp, #28]
               b = font->p[index++];
 8006d2a:	f8d9 2000 	ldr.w	r2, [r9]
			   color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);  
 8006d2e:	9901      	ldr	r1, [sp, #4]
 8006d30:	f812 c005 	ldrb.w	ip, [r2, r5]
               gui->pset(xo,yo,color);
 8006d34:	f8db 3000 	ldr.w	r3, [fp]
			   color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);  
 8006d38:	f5cc 7280 	rsb	r2, ip, #256	; 0x100
 8006d3c:	fb08 f002 	mul.w	r0, r8, r2
 8006d40:	fb01 f202 	mul.w	r2, r1, r2
 8006d44:	9900      	ldr	r1, [sp, #0]
 8006d46:	fb0a 000c 	mla	r0, sl, ip, r0
 8006d4a:	fb01 220c 	mla	r2, r1, ip, r2
 8006d4e:	1200      	asrs	r0, r0, #8
 8006d50:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8006d54:	f3c2 2207 	ubfx	r2, r2, #8, #8
               gui->pset(xo,yo,color);
 8006d58:	4302      	orrs	r2, r0
 8006d5a:	b220      	sxth	r0, r4
               xo++;
 8006d5c:	3401      	adds	r4, #1
               gui->pset(xo,yo,color);
 8006d5e:	4639      	mov	r1, r7
 8006d60:	681b      	ldr	r3, [r3, #0]
               xo++;
 8006d62:	b2a4      	uxth	r4, r4
               gui->pset(xo,yo,color);
 8006d64:	4798      	blx	r3
            for( i=0;i<actual_char_width;i++ )
 8006d66:	42b4      	cmp	r4, r6
			   color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);  
 8006d68:	f105 0501 	add.w	r5, r5, #1
            for( i=0;i<actual_char_width;i++ )
 8006d6c:	d1dd      	bne.n	8006d2a <_UG_PutChar+0x386>
         for( j=0;j<font->char_height;j++ )
 8006d6e:	9b02      	ldr	r3, [sp, #8]
            index += font->char_width - actual_char_width;
 8006d70:	9904      	ldr	r1, [sp, #16]
         for( j=0;j<font->char_height;j++ )
 8006d72:	3301      	adds	r3, #1
 8006d74:	b29a      	uxth	r2, r3
            index += font->char_width - actual_char_width;
 8006d76:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
         for( j=0;j<font->char_height;j++ )
 8006d7a:	9202      	str	r2, [sp, #8]
            index += font->char_width - actual_char_width;
 8006d7c:	4419      	add	r1, r3
         for( j=0;j<font->char_height;j++ )
 8006d7e:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
            index += font->char_width - actual_char_width;
 8006d82:	9104      	str	r1, [sp, #16]
         for( j=0;j<font->char_height;j++ )
 8006d84:	429a      	cmp	r2, r3
 8006d86:	dbc2      	blt.n	8006d0e <_UG_PutChar+0x36a>
 8006d88:	e6d2      	b.n	8006b30 <_UG_PutChar+0x18c>
   switch ( bt )
 8006d8a:	2399      	movs	r3, #153	; 0x99
 8006d8c:	461c      	mov	r4, r3
 8006d8e:	e64c      	b.n	8006a2a <_UG_PutChar+0x86>
 8006d90:	2394      	movs	r3, #148	; 0x94
      case 0xF6: bt = 0x94; break; // �
 8006d92:	461c      	mov	r4, r3
 8006d94:	e649      	b.n	8006a2a <_UG_PutChar+0x86>
 8006d96:	bf00      	nop

08006d98 <_UG_PutText>:
   UG_S16 char_width=txt->font->char_width;
 8006d98:	6842      	ldr	r2, [r0, #4]
   if ( txt->font->p == NULL ) return;
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 80c8 	beq.w	8006f32 <_UG_PutText+0x19a>
{
 8006da2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   char* str = txt->str;
 8006da6:	6805      	ldr	r5, [r0, #0]
   if ( str == NULL ) return;
 8006da8:	4607      	mov	r7, r0
{
 8006daa:	b08b      	sub	sp, #44	; 0x2c
   if ( str == NULL ) return;
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	d071      	beq.n	8006e94 <_UG_PutText+0xfc>
   UG_S16 char_height=txt->font->char_height;
 8006db0:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
   UG_S16 ys=txt->a.ys;
 8006db4:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
   UG_S16 char_height=txt->font->char_height;
 8006db8:	4619      	mov	r1, r3
   UG_S16 ye=txt->a.ye;
 8006dba:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
   UG_S16 char_height=txt->font->char_height;
 8006dbe:	9302      	str	r3, [sp, #8]
   if ( (ye - ys) < txt->font->char_height ) return;
 8006dc0:	eba6 030c 	sub.w	r3, r6, ip
 8006dc4:	428b      	cmp	r3, r1
 8006dc6:	db65      	blt.n	8006e94 <_UG_PutText+0xfc>
   while ( *c != 0 )
 8006dc8:	782c      	ldrb	r4, [r5, #0]
 8006dca:	2c00      	cmp	r4, #0
 8006dcc:	f000 80b2 	beq.w	8006f34 <_UG_PutText+0x19c>
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4623      	mov	r3, r4
   rc=1;
 8006dd4:	2001      	movs	r0, #1
      if ( *c == '\n' ) rc++;
 8006dd6:	2b0a      	cmp	r3, #10
   while ( *c != 0 )
 8006dd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
      if ( *c == '\n' ) rc++;
 8006ddc:	bf04      	itt	eq
 8006dde:	3001      	addeq	r0, #1
 8006de0:	b280      	uxtheq	r0, r0
   while ( *c != 0 )
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f7      	bne.n	8006dd6 <_UG_PutText+0x3e>
   UG_U8  align=txt->align;
 8006de6:	7d3b      	ldrb	r3, [r7, #20]
   UG_S16 char_v_space=txt->v_space;
 8006de8:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8006dec:	f013 0b30 	ands.w	fp, r3, #48	; 0x30
   UG_S16 char_v_space=txt->v_space;
 8006df0:	9106      	str	r1, [sp, #24]
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8006df2:	d13f      	bne.n	8006e74 <_UG_PutText+0xdc>
      yp = ye - ys + 1;
 8006df4:	4658      	mov	r0, fp
   yp = 0;
 8006df6:	4601      	mov	r1, r0
      yp = ye - ys + 1;
 8006df8:	fa1f fb8c 	uxth.w	fp, ip
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8006dfc:	06de      	lsls	r6, r3, #27
   yp += ys;
 8006dfe:	bf48      	it	mi
 8006e00:	f3c1 004f 	ubfxmi	r0, r1, #1, #16
 8006e04:	4458      	add	r0, fp
      wl -= char_h_space;
 8006e06:	f8b7 8016 	ldrh.w	r8, [r7, #22]
 8006e0a:	89b9      	ldrh	r1, [r7, #12]
   yp += ys;
 8006e0c:	fa0f fb80 	sxth.w	fp, r0
   UG_S16 xs=txt->a.xs;
 8006e10:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8006e14:	4441      	add	r1, r8
 8006e16:	3101      	adds	r1, #1
 8006e18:	9007      	str	r0, [sp, #28]
      xp = xe - xs + 1;
 8006e1a:	b280      	uxth	r0, r0
 8006e1c:	1a09      	subs	r1, r1, r0
 8006e1e:	b289      	uxth	r1, r1
   UG_S16 char_width=txt->font->char_width;
 8006e20:	f9b2 9006 	ldrsh.w	r9, [r2, #6]
   yp += ys;
 8006e24:	9104      	str	r1, [sp, #16]
 8006e26:	f003 0101 	and.w	r1, r3, #1
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	9308      	str	r3, [sp, #32]
         wl += (txt->font->widths ? txt->font->widths[*c - txt->font->start_char] : char_width) + char_h_space;
 8006e30:	fa1f f389 	uxth.w	r3, r9
      xp = xe - xs + 1;
 8006e34:	9009      	str	r0, [sp, #36]	; 0x24
 8006e36:	9105      	str	r1, [sp, #20]
         wl += (txt->font->widths ? txt->font->widths[*c - txt->font->start_char] : char_width) + char_h_space;
 8006e38:	9303      	str	r3, [sp, #12]
      while( (*c != 0) && (*c != '\n') )
 8006e3a:	b374      	cbz	r4, 8006e9a <_UG_PutText+0x102>
 8006e3c:	4623      	mov	r3, r4
      wl = 0;
 8006e3e:	2000      	movs	r0, #0
 8006e40:	f105 0e01 	add.w	lr, r5, #1
 8006e44:	e006      	b.n	8006e54 <_UG_PutText+0xbc>
         wl += (txt->font->widths ? txt->font->widths[*c - txt->font->start_char] : char_width) + char_h_space;
 8006e46:	5ccb      	ldrb	r3, [r1, r3]
 8006e48:	4440      	add	r0, r8
 8006e4a:	4418      	add	r0, r3
 8006e4c:	b280      	uxth	r0, r0
      while( (*c != 0) && (*c != '\n') )
 8006e4e:	f81e 3b01 	ldrb.w	r3, [lr], #1
 8006e52:	b31b      	cbz	r3, 8006e9c <_UG_PutText+0x104>
 8006e54:	2b0a      	cmp	r3, #10
         if (*c < txt->font->start_char || *c > txt->font->end_char) {c++; continue;}
 8006e56:	b299      	uxth	r1, r3
      while( (*c != 0) && (*c != '\n') )
 8006e58:	d020      	beq.n	8006e9c <_UG_PutText+0x104>
         if (*c < txt->font->start_char || *c > txt->font->end_char) {c++; continue;}
 8006e5a:	8956      	ldrh	r6, [r2, #10]
 8006e5c:	42b1      	cmp	r1, r6
 8006e5e:	d3f6      	bcc.n	8006e4e <_UG_PutText+0xb6>
 8006e60:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
         wl += (txt->font->widths ? txt->font->widths[*c - txt->font->start_char] : char_width) + char_h_space;
 8006e64:	1b9b      	subs	r3, r3, r6
         if (*c < txt->font->start_char || *c > txt->font->end_char) {c++; continue;}
 8006e66:	458c      	cmp	ip, r1
 8006e68:	d3f1      	bcc.n	8006e4e <_UG_PutText+0xb6>
         wl += (txt->font->widths ? txt->font->widths[*c - txt->font->start_char] : char_width) + char_h_space;
 8006e6a:	6911      	ldr	r1, [r2, #16]
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	d1ea      	bne.n	8006e46 <_UG_PutText+0xae>
 8006e70:	9b03      	ldr	r3, [sp, #12]
 8006e72:	e7e9      	b.n	8006e48 <_UG_PutText+0xb0>
      yp = ye - ys + 1;
 8006e74:	1c71      	adds	r1, r6, #1
 8006e76:	fa1f fb8c 	uxth.w	fp, ip
      yp -= char_height*rc;
 8006e7a:	9e02      	ldr	r6, [sp, #8]
      yp = ye - ys + 1;
 8006e7c:	eba1 010b 	sub.w	r1, r1, fp
      yp -= char_height*rc;
 8006e80:	fb06 1110 	mls	r1, r6, r0, r1
      yp -= char_v_space*(rc-1);
 8006e84:	9e06      	ldr	r6, [sp, #24]
 8006e86:	3801      	subs	r0, #1
 8006e88:	fb00 1016 	mls	r0, r0, r6, r1
 8006e8c:	b201      	sxth	r1, r0
      if ( yp < 0 ) return;
 8006e8e:	2900      	cmp	r1, #0
      yp -= char_v_space*(rc-1);
 8006e90:	b280      	uxth	r0, r0
      if ( yp < 0 ) return;
 8006e92:	dab3      	bge.n	8006dfc <_UG_PutText+0x64>
}
 8006e94:	b00b      	add	sp, #44	; 0x2c
 8006e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      wl = 0;
 8006e9a:	4620      	mov	r0, r4
      xp -= wl;
 8006e9c:	9b04      	ldr	r3, [sp, #16]
 8006e9e:	1a18      	subs	r0, r3, r0
 8006ea0:	b201      	sxth	r1, r0
      if ( xp < 0 ) return;
 8006ea2:	2900      	cmp	r1, #0
      xp -= wl;
 8006ea4:	b280      	uxth	r0, r0
      if ( xp < 0 ) return;
 8006ea6:	dbf5      	blt.n	8006e94 <_UG_PutText+0xfc>
      if ( align & ALIGN_H_LEFT ) xp = 0;
 8006ea8:	9b05      	ldr	r3, [sp, #20]
 8006eaa:	b943      	cbnz	r3, 8006ebe <_UG_PutText+0x126>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8006eac:	9b08      	ldr	r3, [sp, #32]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d03a      	beq.n	8006f28 <_UG_PutText+0x190>
      xp += xs;
 8006eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb4:	eb03 0161 	add.w	r1, r3, r1, asr #1
 8006eb8:	fa0f fa81 	sxth.w	sl, r1
 8006ebc:	e001      	b.n	8006ec2 <_UG_PutText+0x12a>
 8006ebe:	f8dd a01c 	ldr.w	sl, [sp, #28]
      while( (*str != '\n') )
 8006ec2:	2c0a      	cmp	r4, #10
 8006ec4:	d038      	beq.n	8006f38 <_UG_PutText+0x1a0>
 8006ec6:	3501      	adds	r5, #1
         chr = *str++;
 8006ec8:	462e      	mov	r6, r5
         if ( chr == 0 ) return;
 8006eca:	2c00      	cmp	r4, #0
 8006ecc:	d0e2      	beq.n	8006e94 <_UG_PutText+0xfc>
         _UG_PutChar(chr,xp,yp,txt->fc,txt->bc,txt->font);
 8006ece:	f8b7 c012 	ldrh.w	ip, [r7, #18]
 8006ed2:	9201      	str	r2, [sp, #4]
 8006ed4:	4651      	mov	r1, sl
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	465a      	mov	r2, fp
 8006eda:	8a3b      	ldrh	r3, [r7, #16]
 8006edc:	f8cd c000 	str.w	ip, [sp]
 8006ee0:	f7ff fd60 	bl	80069a4 <_UG_PutChar>
         xp += (txt->font->widths ? txt->font->widths[chr - txt->font->start_char] : char_width) + char_h_space;
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	eb08 010a 	add.w	r1, r8, sl
 8006eea:	6910      	ldr	r0, [r2, #16]
 8006eec:	b198      	cbz	r0, 8006f16 <_UG_PutText+0x17e>
 8006eee:	8953      	ldrh	r3, [r2, #10]
 8006ef0:	1ae3      	subs	r3, r4, r3
 8006ef2:	f810 a003 	ldrb.w	sl, [r0, r3]
      while( (*str != '\n') )
 8006ef6:	f815 4b01 	ldrb.w	r4, [r5], #1
         xp += (txt->font->widths ? txt->font->widths[chr - txt->font->start_char] : char_width) + char_h_space;
 8006efa:	448a      	add	sl, r1
      while( (*str != '\n') )
 8006efc:	2c0a      	cmp	r4, #10
         xp += (txt->font->widths ? txt->font->widths[chr - txt->font->start_char] : char_width) + char_h_space;
 8006efe:	fa0f fa8a 	sxth.w	sl, sl
      while( (*str != '\n') )
 8006f02:	d1e1      	bne.n	8006ec8 <_UG_PutText+0x130>
      yp += char_height + char_v_space;
 8006f04:	9b02      	ldr	r3, [sp, #8]
 8006f06:	9906      	ldr	r1, [sp, #24]
      while( (*c != 0) && (*c != '\n') )
 8006f08:	7874      	ldrb	r4, [r6, #1]
      yp += char_height + char_v_space;
 8006f0a:	440b      	add	r3, r1
 8006f0c:	449b      	add	fp, r3
 8006f0e:	fa0f fb8b 	sxth.w	fp, fp
      str++;
 8006f12:	1c75      	adds	r5, r6, #1
      sl=0;
 8006f14:	e791      	b.n	8006e3a <_UG_PutText+0xa2>
      while( (*str != '\n') )
 8006f16:	f815 4b01 	ldrb.w	r4, [r5], #1
         xp += (txt->font->widths ? txt->font->widths[chr - txt->font->start_char] : char_width) + char_h_space;
 8006f1a:	44c2      	add	sl, r8
 8006f1c:	44ca      	add	sl, r9
      while( (*str != '\n') )
 8006f1e:	2c0a      	cmp	r4, #10
         xp += (txt->font->widths ? txt->font->widths[chr - txt->font->start_char] : char_width) + char_h_space;
 8006f20:	fa0f fa8a 	sxth.w	sl, sl
      while( (*str != '\n') )
 8006f24:	d1d0      	bne.n	8006ec8 <_UG_PutText+0x130>
 8006f26:	e7ed      	b.n	8006f04 <_UG_PutText+0x16c>
      xp += xs;
 8006f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f2a:	4418      	add	r0, r3
 8006f2c:	fa0f fa80 	sxth.w	sl, r0
 8006f30:	e7c7      	b.n	8006ec2 <_UG_PutText+0x12a>
 8006f32:	4770      	bx	lr
   rc=1;
 8006f34:	2001      	movs	r0, #1
 8006f36:	e756      	b.n	8006de6 <_UG_PutText+0x4e>
      while( (*str != '\n') )
 8006f38:	462e      	mov	r6, r5
 8006f3a:	e7e3      	b.n	8006f04 <_UG_PutText+0x16c>

08006f3c <_UG_TextboxUpdate>:
   if ( obj->state & OBJ_STATE_UPDATE )
 8006f3c:	780b      	ldrb	r3, [r1, #0]
 8006f3e:	069a      	lsls	r2, r3, #26
 8006f40:	d50e      	bpl.n	8006f60 <_UG_TextboxUpdate+0x24>
{
 8006f42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f46:	460d      	mov	r5, r1
      if ( obj->state & OBJ_STATE_VISIBLE )
 8006f48:	0719      	lsls	r1, r3, #28
 8006f4a:	4606      	mov	r6, r0
{
 8006f4c:	b08f      	sub	sp, #60	; 0x3c
      if ( obj->state & OBJ_STATE_VISIBLE )
 8006f4e:	d508      	bpl.n	8006f62 <_UG_TextboxUpdate+0x26>
         if ( obj->state & OBJ_STATE_REDRAW )
 8006f50:	065a      	lsls	r2, r3, #25
 8006f52:	d440      	bmi.n	8006fd6 <_UG_TextboxUpdate+0x9a>
      obj->state &= ~OBJ_STATE_UPDATE;
 8006f54:	f023 0320 	bic.w	r3, r3, #32
 8006f58:	702b      	strb	r3, [r5, #0]
}
 8006f5a:	b00f      	add	sp, #60	; 0x3c
 8006f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f60:	4770      	bx	lr
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 8006f62:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8006f66:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8006f6a:	f9b5 b00a 	ldrsh.w	fp, [r5, #10]
   if ( x2 < x1 )
 8006f6e:	45b9      	cmp	r9, r7
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 8006f70:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 8006f74:	f9b5 a00e 	ldrsh.w	sl, [r5, #14]
   if ( x2 < x1 )
 8006f78:	dd02      	ble.n	8006f80 <_UG_TextboxUpdate+0x44>
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	46b9      	mov	r9, r7
 8006f7e:	461f      	mov	r7, r3
   if ( y2 < y1 )
 8006f80:	45d3      	cmp	fp, sl
 8006f82:	dd02      	ble.n	8006f8a <_UG_TextboxUpdate+0x4e>
 8006f84:	465b      	mov	r3, fp
 8006f86:	46d3      	mov	fp, sl
 8006f88:	469a      	mov	sl, r3
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8006f8a:	4c70      	ldr	r4, [pc, #448]	; (800714c <_UG_TextboxUpdate+0x210>)
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006f92:	0792      	lsls	r2, r2, #30
 8006f94:	d50a      	bpl.n	8006fac <_UG_TextboxUpdate+0x70>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8006f96:	f8cd 8000 	str.w	r8, [sp]
 8006f9a:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8006f9c:	463a      	mov	r2, r7
 8006f9e:	4653      	mov	r3, sl
 8006fa0:	4659      	mov	r1, fp
 8006fa2:	4648      	mov	r0, r9
 8006fa4:	47b0      	blx	r6
 8006fa6:	b1a0      	cbz	r0, 8006fd2 <_UG_TextboxUpdate+0x96>
   for( m=y1; m<=y2; m++ )
 8006fa8:	45d3      	cmp	fp, sl
 8006faa:	dc12      	bgt.n	8006fd2 <_UG_TextboxUpdate+0x96>
 8006fac:	45b9      	cmp	r9, r7
 8006fae:	dc10      	bgt.n	8006fd2 <_UG_TextboxUpdate+0x96>
   if ( x2 < x1 )
 8006fb0:	464e      	mov	r6, r9
         gui->pset(n,m,c);
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	3601      	adds	r6, #1
 8006fb8:	4642      	mov	r2, r8
 8006fba:	4659      	mov	r1, fp
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	b236      	sxth	r6, r6
 8006fc0:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8006fc2:	42be      	cmp	r6, r7
 8006fc4:	ddf5      	ble.n	8006fb2 <_UG_TextboxUpdate+0x76>
   for( m=y1; m<=y2; m++ )
 8006fc6:	f10b 0b01 	add.w	fp, fp, #1
 8006fca:	fa0f fb8b 	sxth.w	fp, fp
 8006fce:	45da      	cmp	sl, fp
 8006fd0:	daee      	bge.n	8006fb0 <_UG_TextboxUpdate+0x74>
      obj->state &= ~OBJ_STATE_UPDATE;
 8006fd2:	782b      	ldrb	r3, [r5, #0]
 8006fd4:	e7be      	b.n	8006f54 <_UG_TextboxUpdate+0x18>
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	f000 80b5 	beq.w	8007146 <_UG_TextboxUpdate+0x20a>
 8006fdc:	7a03      	ldrb	r3, [r0, #8]
 8006fde:	079b      	lsls	r3, r3, #30
 8006fe0:	f140 80b1 	bpl.w	8007146 <_UG_TextboxUpdate+0x20a>
      if ( wnd->style & WND_STYLE_3D )
 8006fe4:	7d82      	ldrb	r2, [r0, #22]
      a->ys = wnd->ys;
 8006fe6:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
      if ( wnd->style & WND_STYLE_3D )
 8006fea:	07d7      	lsls	r7, r2, #31
      a->xs = wnd->xs;
 8006fec:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
      if ( wnd->style & WND_STYLE_3D )
 8006ff0:	f100 80a4 	bmi.w	800713c <_UG_TextboxUpdate+0x200>
         a->ys+= wnd->title.height+1;
 8006ff4:	b29b      	uxth	r3, r3
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8006ff6:	b280      	uxth	r0, r0
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8006ff8:	0794      	lsls	r4, r2, #30
 8006ffa:	d504      	bpl.n	8007006 <_UG_TextboxUpdate+0xca>
         a->ys+= wnd->title.height+1;
 8006ffc:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8007000:	3201      	adds	r2, #1
 8007002:	4413      	add	r3, r2
 8007004:	b29b      	uxth	r3, r3
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8007006:	8aa9      	ldrh	r1, [r5, #20]
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8007008:	8a2c      	ldrh	r4, [r5, #16]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 800700a:	4401      	add	r1, r0
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 800700c:	4420      	add	r0, r4
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 800700e:	8aea      	ldrh	r2, [r5, #22]
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8007010:	8128      	strh	r0, [r5, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8007012:	8a68      	ldrh	r0, [r5, #18]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 8007014:	441a      	add	r2, r3
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8007016:	4403      	add	r3, r0
 8007018:	816b      	strh	r3, [r5, #10]
            if ( obj->a_abs.ye >= wnd->ye ) return;
 800701a:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 800701e:	b212      	sxth	r2, r2
   txb = (UG_TEXTBOX*)(obj->data);
 8007020:	69ef      	ldr	r7, [r5, #28]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8007022:	b209      	sxth	r1, r1
            if ( obj->a_abs.ye >= wnd->ye ) return;
 8007024:	4293      	cmp	r3, r2
   txb = (UG_TEXTBOX*)(obj->data);
 8007026:	9703      	str	r7, [sp, #12]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8007028:	81a9      	strh	r1, [r5, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 800702a:	81ea      	strh	r2, [r5, #14]
            if ( obj->a_abs.ye >= wnd->ye ) return;
 800702c:	dd95      	ble.n	8006f5a <_UG_TextboxUpdate+0x1e>
            if ( obj->a_abs.xe >= wnd->xe ) return;
 800702e:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 8007032:	428b      	cmp	r3, r1
 8007034:	dd91      	ble.n	8006f5a <_UG_TextboxUpdate+0x1e>
	msg.event = OBJ_EVENT_PRERENDER;
 8007036:	2302      	movs	r3, #2
	msg.id = obj->type;
 8007038:	7e2a      	ldrb	r2, [r5, #24]
	msg.event = OBJ_EVENT_PRERENDER;
 800703a:	f88d 301f 	strb.w	r3, [sp, #31]
	msg.id = obj->type;
 800703e:	f88d 201d 	strb.w	r2, [sp, #29]
	msg.sub_id = obj->id;
 8007042:	7e6a      	ldrb	r2, [r5, #25]
	msg.type = MSG_TYPE_OBJECT;
 8007044:	f88d 301c 	strb.w	r3, [sp, #28]
	msg.sub_id = obj->id;
 8007048:	f88d 201e 	strb.w	r2, [sp, #30]
	msg.src = obj;
 800704c:	9508      	str	r5, [sp, #32]
	wnd->cb(&msg);
 800704e:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8007050:	a807      	add	r0, sp, #28
 8007052:	4790      	blx	r2
            txt.fc = txb->fc;
 8007054:	f8d7 300a 	ldr.w	r3, [r7, #10]
            txt.bc = txb->bc;
 8007058:	f8b7 800c 	ldrh.w	r8, [r7, #12]
            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, txt.bc);
 800705c:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8007060:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
            txt.fc = txb->fc;
 8007064:	930b      	str	r3, [sp, #44]	; 0x2c
            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, txt.bc);
 8007066:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   if ( x2 < x1 )
 800706a:	45b9      	cmp	r9, r7
            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, txt.bc);
 800706c:	f9b5 a00a 	ldrsh.w	sl, [r5, #10]
 8007070:	9302      	str	r3, [sp, #8]
   if ( x2 < x1 )
 8007072:	dd02      	ble.n	800707a <_UG_TextboxUpdate+0x13e>
 8007074:	464b      	mov	r3, r9
 8007076:	46b9      	mov	r9, r7
 8007078:	461f      	mov	r7, r3
   if ( y2 < y1 )
 800707a:	9b02      	ldr	r3, [sp, #8]
 800707c:	459a      	cmp	sl, r3
 800707e:	dd03      	ble.n	8007088 <_UG_TextboxUpdate+0x14c>
 8007080:	4653      	mov	r3, sl
 8007082:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007086:	9302      	str	r3, [sp, #8]
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8007088:	4c30      	ldr	r4, [pc, #192]	; (800714c <_UG_TextboxUpdate+0x210>)
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007090:	0791      	lsls	r1, r2, #30
 8007092:	d50c      	bpl.n	80070ae <_UG_TextboxUpdate+0x172>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8007094:	f8cd 8000 	str.w	r8, [sp]
 8007098:	f8d3 b054 	ldr.w	fp, [r3, #84]	; 0x54
 800709c:	463a      	mov	r2, r7
 800709e:	4651      	mov	r1, sl
 80070a0:	4648      	mov	r0, r9
 80070a2:	9b02      	ldr	r3, [sp, #8]
 80070a4:	47d8      	blx	fp
 80070a6:	b1c8      	cbz	r0, 80070dc <_UG_TextboxUpdate+0x1a0>
   for( m=y1; m<=y2; m++ )
 80070a8:	9b02      	ldr	r3, [sp, #8]
 80070aa:	4553      	cmp	r3, sl
 80070ac:	db16      	blt.n	80070dc <_UG_TextboxUpdate+0x1a0>
 80070ae:	45b9      	cmp	r9, r7
 80070b0:	dc14      	bgt.n	80070dc <_UG_TextboxUpdate+0x1a0>
 80070b2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80070b6:	9602      	str	r6, [sp, #8]
   if ( x2 < x1 )
 80070b8:	464e      	mov	r6, r9
         gui->pset(n,m,c);
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	4630      	mov	r0, r6
 80070be:	3601      	adds	r6, #1
 80070c0:	4642      	mov	r2, r8
 80070c2:	4651      	mov	r1, sl
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	b236      	sxth	r6, r6
 80070c8:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 80070ca:	42be      	cmp	r6, r7
 80070cc:	ddf5      	ble.n	80070ba <_UG_TextboxUpdate+0x17e>
   for( m=y1; m<=y2; m++ )
 80070ce:	f10a 0a01 	add.w	sl, sl, #1
 80070d2:	fa0f fa8a 	sxth.w	sl, sl
 80070d6:	45da      	cmp	sl, fp
 80070d8:	ddee      	ble.n	80070b8 <_UG_TextboxUpdate+0x17c>
 80070da:	9e02      	ldr	r6, [sp, #8]
            txt.a.xs = obj->a_abs.xs;
 80070dc:	68eb      	ldr	r3, [r5, #12]
 80070de:	68aa      	ldr	r2, [r5, #8]
 80070e0:	930a      	str	r3, [sp, #40]	; 0x28
            txt.h_space = txb->h_space;
 80070e2:	2300      	movs	r3, #0
            txt.align = txb->align;
 80070e4:	9903      	ldr	r1, [sp, #12]
            txt.a.xs = obj->a_abs.xs;
 80070e6:	9209      	str	r2, [sp, #36]	; 0x24
            txt.align = txb->align;
 80070e8:	7b8a      	ldrb	r2, [r1, #14]
            _UG_PutText( &txt );
 80070ea:	a807      	add	r0, sp, #28
            txt.align = txb->align;
 80070ec:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
            txt.font = txb->font;
 80070f0:	684a      	ldr	r2, [r1, #4]
 80070f2:	9208      	str	r2, [sp, #32]
            txt.h_space = txb->h_space;
 80070f4:	f991 200f 	ldrsb.w	r2, [r1, #15]
 80070f8:	f362 030f 	bfi	r3, r2, #0, #16
            txt.v_space = txb->v_space;
 80070fc:	f991 2010 	ldrsb.w	r2, [r1, #16]
            txt.h_space = txb->h_space;
 8007100:	f362 431f 	bfi	r3, r2, #16, #16
            txt.str = txb->str;
 8007104:	680a      	ldr	r2, [r1, #0]
            txt.h_space = txb->h_space;
 8007106:	f8cd 3032 	str.w	r3, [sp, #50]	; 0x32
            txt.str = txb->str;
 800710a:	9207      	str	r2, [sp, #28]
            _UG_PutText( &txt );
 800710c:	f7ff fe44 	bl	8006d98 <_UG_PutText>
	msg.event = OBJ_EVENT_POSTRENDER;
 8007110:	2103      	movs	r1, #3
	msg.type = MSG_TYPE_OBJECT;
 8007112:	2202      	movs	r2, #2
            obj->state &= ~OBJ_STATE_REDRAW;
 8007114:	782b      	ldrb	r3, [r5, #0]
	msg.id = obj->type;
 8007116:	7e28      	ldrb	r0, [r5, #24]
            obj->state &= ~OBJ_STATE_REDRAW;
 8007118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	msg.id = obj->type;
 800711c:	f88d 0015 	strb.w	r0, [sp, #21]
	msg.sub_id = obj->id;
 8007120:	7e68      	ldrb	r0, [r5, #25]
            obj->state &= ~OBJ_STATE_REDRAW;
 8007122:	702b      	strb	r3, [r5, #0]
	wnd->cb(&msg);
 8007124:	6b33      	ldr	r3, [r6, #48]	; 0x30
	msg.sub_id = obj->id;
 8007126:	f88d 0016 	strb.w	r0, [sp, #22]
	msg.src = obj;
 800712a:	9506      	str	r5, [sp, #24]
	wnd->cb(&msg);
 800712c:	a805      	add	r0, sp, #20
	msg.event = OBJ_EVENT_POSTRENDER;
 800712e:	f88d 1017 	strb.w	r1, [sp, #23]
	msg.type = MSG_TYPE_OBJECT;
 8007132:	f88d 2014 	strb.w	r2, [sp, #20]
	wnd->cb(&msg);
 8007136:	4798      	blx	r3
      obj->state &= ~OBJ_STATE_UPDATE;
 8007138:	782b      	ldrb	r3, [r5, #0]
}
 800713a:	e70b      	b.n	8006f54 <_UG_TextboxUpdate+0x18>
         a->xs+=3;
 800713c:	3003      	adds	r0, #3
         a->ys+=3;
 800713e:	3303      	adds	r3, #3
         a->xs+=3;
 8007140:	b280      	uxth	r0, r0
         a->ys+=3;
 8007142:	b29b      	uxth	r3, r3
         a->ye-=3;
 8007144:	e758      	b.n	8006ff8 <_UG_TextboxUpdate+0xbc>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8007146:	2000      	movs	r0, #0
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8007148:	4603      	mov	r3, r0
 800714a:	e75c      	b.n	8007006 <_UG_TextboxUpdate+0xca>
 800714c:	20001844 	.word	0x20001844

08007150 <_UG_ProcessTouchData>:
{
 8007150:	b5f0      	push	{r4, r5, r6, r7, lr}
   xp = gui->touch.xp;
 8007152:	4b30      	ldr	r3, [pc, #192]	; (8007214 <_UG_ProcessTouchData+0xc4>)
   objcnt = wnd->objcnt;
 8007154:	7802      	ldrb	r2, [r0, #0]
   xp = gui->touch.xp;
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f9b3 c00a 	ldrsh.w	ip, [r3, #10]
   yp = gui->touch.yp;
 800715c:	f9b3 e00c 	ldrsh.w	lr, [r3, #12]
   tchstate = gui->touch.state;
 8007160:	7a1c      	ldrb	r4, [r3, #8]
   for(i=0; i<objcnt; i++)
 8007162:	b3d2      	cbz	r2, 80071da <_UG_ProcessTouchData+0x8a>
 8007164:	6843      	ldr	r3, [r0, #4]
 8007166:	3a01      	subs	r2, #1
 8007168:	b292      	uxth	r2, r2
 800716a:	f103 0120 	add.w	r1, r3, #32
 800716e:	eb01 1542 	add.w	r5, r1, r2, lsl #5
 8007172:	e004      	b.n	800717e <_UG_ProcessTouchData+0x2e>
 8007174:	428d      	cmp	r5, r1
      obj->touch_state = objtouch;
 8007176:	7058      	strb	r0, [r3, #1]
   for(i=0; i<objcnt; i++)
 8007178:	460b      	mov	r3, r1
 800717a:	d02e      	beq.n	80071da <_UG_ProcessTouchData+0x8a>
 800717c:	3120      	adds	r1, #32
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 800717e:	781a      	ldrb	r2, [r3, #0]
      objtouch = obj->touch_state;
 8007180:	7858      	ldrb	r0, [r3, #1]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8007182:	f002 024b 	and.w	r2, r2, #75	; 0x4b
 8007186:	2a0a      	cmp	r2, #10
 8007188:	d1f4      	bne.n	8007174 <_UG_ProcessTouchData+0x24>
         if ( (tchstate) && xp != -1 )
 800718a:	b33c      	cbz	r4, 80071dc <_UG_ProcessTouchData+0x8c>
 800718c:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 8007190:	d024      	beq.n	80071dc <_UG_ProcessTouchData+0x8c>
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8007192:	f010 0740 	ands.w	r7, r0, #64	; 0x40
            if ( xp >= obj->a_abs.xs )
 8007196:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 800719a:	bf04      	itt	eq
 800719c:	f000 0067 	andeq.w	r0, r0, #103	; 0x67
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CLICK_ON_OBJECT);
 80071a0:	f040 0005 	orreq.w	r0, r0, #5
            if ( xp >= obj->a_abs.xs )
 80071a4:	4566      	cmp	r6, ip
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80071a6:	f000 02df 	and.w	r2, r0, #223	; 0xdf
            if ( xp >= obj->a_abs.xs )
 80071aa:	dc10      	bgt.n	80071ce <_UG_ProcessTouchData+0x7e>
               if ( xp <= obj->a_abs.xe )
 80071ac:	f9b3 600c 	ldrsh.w	r6, [r3, #12]
 80071b0:	4566      	cmp	r6, ip
 80071b2:	db0c      	blt.n	80071ce <_UG_ProcessTouchData+0x7e>
                  if ( yp >= obj->a_abs.ys )
 80071b4:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80071b8:	4576      	cmp	r6, lr
 80071ba:	dc08      	bgt.n	80071ce <_UG_ProcessTouchData+0x7e>
                     if ( yp <= obj->a_abs.ye )
 80071bc:	f9b3 600e 	ldrsh.w	r6, [r3, #14]
 80071c0:	4576      	cmp	r6, lr
 80071c2:	db04      	blt.n	80071ce <_UG_ProcessTouchData+0x7e>
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80071c4:	bb17      	cbnz	r7, 800720c <_UG_ProcessTouchData+0xbc>
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 80071c6:	f000 02db 	and.w	r2, r0, #219	; 0xdb
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 80071ca:	f042 0222 	orr.w	r2, r2, #34	; 0x22
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 80071ce:	f042 0040 	orr.w	r0, r2, #64	; 0x40
   for(i=0; i<objcnt; i++)
 80071d2:	428d      	cmp	r5, r1
      obj->touch_state = objtouch;
 80071d4:	7058      	strb	r0, [r3, #1]
   for(i=0; i<objcnt; i++)
 80071d6:	460b      	mov	r3, r1
 80071d8:	d1d0      	bne.n	800717c <_UG_ProcessTouchData+0x2c>
}
 80071da:	bdf0      	pop	{r4, r5, r6, r7, pc}
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80071dc:	0646      	lsls	r6, r0, #25
 80071de:	f000 0240 	and.w	r2, r0, #64	; 0x40
 80071e2:	d5c7      	bpl.n	8007174 <_UG_ProcessTouchData+0x24>
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 80071e4:	0687      	lsls	r7, r0, #26
 80071e6:	d406      	bmi.n	80071f6 <_UG_ProcessTouchData+0xa6>
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 80071e8:	f040 0010 	orr.w	r0, r0, #16
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 80071ec:	f040 0001 	orr.w	r0, r0, #1
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 80071f0:	f000 00b9 	and.w	r0, r0, #185	; 0xb9
 80071f4:	e7be      	b.n	8007174 <_UG_ProcessTouchData+0x24>
               if ( objtouch & OBJ_TOUCH_STATE_PRESSED_ON_OBJECT ) objtouch |= OBJ_TOUCH_STATE_CLICK_ON_OBJECT;
 80071f6:	0786      	lsls	r6, r0, #30
 80071f8:	bf44      	itt	mi
 80071fa:	f040 0080 	orrmi.w	r0, r0, #128	; 0x80
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 80071fe:	f000 0240 	andmi.w	r2, r0, #64	; 0x40
 8007202:	f040 0008 	orr.w	r0, r0, #8
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8007206:	2a00      	cmp	r2, #0
 8007208:	d0f2      	beq.n	80071f0 <_UG_ProcessTouchData+0xa0>
 800720a:	e7ef      	b.n	80071ec <_UG_ProcessTouchData+0x9c>
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800720c:	f042 0220 	orr.w	r2, r2, #32
 8007210:	e7dd      	b.n	80071ce <_UG_ProcessTouchData+0x7e>
 8007212:	bf00      	nop
 8007214:	20001844 	.word	0x20001844

08007218 <_UG_UpdateObjects>:
{
 8007218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   objcnt = wnd->objcnt;
 800721c:	7803      	ldrb	r3, [r0, #0]
   for(i=0; i<objcnt; i++)
 800721e:	b323      	cbz	r3, 800726a <_UG_UpdateObjects+0x52>
 8007220:	4607      	mov	r7, r0
 8007222:	2400      	movs	r4, #0
 8007224:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8007228:	e001      	b.n	800722e <_UG_UpdateObjects+0x16>
 800722a:	45a0      	cmp	r8, r4
 800722c:	d01d      	beq.n	800726a <_UG_UpdateObjects+0x52>
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800722e:	687d      	ldr	r5, [r7, #4]
      objstate = obj->state;
 8007230:	5d2e      	ldrb	r6, [r5, r4]
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8007232:	4425      	add	r5, r4
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8007234:	f006 0303 	and.w	r3, r6, #3
 8007238:	2b02      	cmp	r3, #2
   for(i=0; i<objcnt; i++)
 800723a:	f104 0420 	add.w	r4, r4, #32
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800723e:	d1f4      	bne.n	800722a <_UG_UpdateObjects+0x12>
         if ( objstate & OBJ_STATE_UPDATE )
 8007240:	06b1      	lsls	r1, r6, #26
      objtouch = obj->touch_state;
 8007242:	f895 9001 	ldrb.w	r9, [r5, #1]
         if ( objstate & OBJ_STATE_UPDATE )
 8007246:	d503      	bpl.n	8007250 <_UG_UpdateObjects+0x38>
            obj->update(wnd,obj);
 8007248:	4629      	mov	r1, r5
 800724a:	4638      	mov	r0, r7
 800724c:	686b      	ldr	r3, [r5, #4]
 800724e:	4798      	blx	r3
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8007250:	0732      	lsls	r2, r6, #28
 8007252:	d5ea      	bpl.n	800722a <_UG_UpdateObjects+0x12>
 8007254:	0633      	lsls	r3, r6, #24
 8007256:	d5e8      	bpl.n	800722a <_UG_UpdateObjects+0x12>
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8007258:	f019 0f41 	tst.w	r9, #65	; 0x41
 800725c:	d0e5      	beq.n	800722a <_UG_UpdateObjects+0x12>
               obj->update(wnd,obj);
 800725e:	4629      	mov	r1, r5
 8007260:	4638      	mov	r0, r7
 8007262:	686b      	ldr	r3, [r5, #4]
 8007264:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8007266:	45a0      	cmp	r8, r4
 8007268:	d1e1      	bne.n	800722e <_UG_UpdateObjects+0x16>
}
 800726a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800726e:	bf00      	nop

08007270 <_UG_DrawObjectFrame>:
{
 8007270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007274:	b087      	sub	sp, #28
 8007276:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007278:	461d      	mov	r5, r3
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 800727a:	8834      	ldrh	r4, [r6, #0]
{
 800727c:	4690      	mov	r8, r2
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 800727e:	9400      	str	r4, [sp, #0]
{
 8007280:	4604      	mov	r4, r0
 8007282:	468b      	mov	fp, r1
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8007284:	b293      	uxth	r3, r2
 8007286:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800728a:	fa0f f989 	sxth.w	r9, r9
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 800728e:	b28f      	uxth	r7, r1
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8007290:	464a      	mov	r2, r9
 8007292:	9302      	str	r3, [sp, #8]
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8007294:	fa1f fa85 	uxth.w	sl, r5
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8007298:	460b      	mov	r3, r1
 800729a:	f7ff fae7 	bl	800686c <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 800729e:	8873      	ldrh	r3, [r6, #2]
 80072a0:	9703      	str	r7, [sp, #12]
 80072a2:	f8cd a010 	str.w	sl, [sp, #16]
 80072a6:	3701      	adds	r7, #1
 80072a8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80072ac:	b23f      	sxth	r7, r7
 80072ae:	fa0f fa8a 	sxth.w	sl, sl
 80072b2:	4622      	mov	r2, r4
 80072b4:	4639      	mov	r1, r7
 80072b6:	4620      	mov	r0, r4
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	4653      	mov	r3, sl
 80072bc:	f7ff fad6 	bl	800686c <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 80072c0:	88b3      	ldrh	r3, [r6, #4]
 80072c2:	4629      	mov	r1, r5
 80072c4:	4642      	mov	r2, r8
 80072c6:	4620      	mov	r0, r4
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	462b      	mov	r3, r5
 80072cc:	f7ff face 	bl	800686c <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 80072d0:	88f3      	ldrh	r3, [r6, #6]
 80072d2:	4659      	mov	r1, fp
 80072d4:	4642      	mov	r2, r8
 80072d6:	4640      	mov	r0, r8
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	4653      	mov	r3, sl
 80072dc:	f7ff fac6 	bl	800686c <UG_DrawLine>
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 80072e0:	9902      	ldr	r1, [sp, #8]
 80072e2:	b2a4      	uxth	r4, r4
 80072e4:	8933      	ldrh	r3, [r6, #8]
 80072e6:	1c60      	adds	r0, r4, #1
 80072e8:	f1a1 0802 	sub.w	r8, r1, #2
 80072ec:	b205      	sxth	r5, r0
 80072ee:	fa0f f888 	sxth.w	r8, r8
 80072f2:	4642      	mov	r2, r8
 80072f4:	4639      	mov	r1, r7
 80072f6:	4628      	mov	r0, r5
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	463b      	mov	r3, r7
 80072fc:	9405      	str	r4, [sp, #20]
 80072fe:	f7ff fab5 	bl	800686c <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8007302:	8973      	ldrh	r3, [r6, #10]
 8007304:	9804      	ldr	r0, [sp, #16]
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	9b03      	ldr	r3, [sp, #12]
 800730a:	f1a0 0b02 	sub.w	fp, r0, #2
 800730e:	1c9c      	adds	r4, r3, #2
 8007310:	b224      	sxth	r4, r4
 8007312:	fa0f fb8b 	sxth.w	fp, fp
 8007316:	465b      	mov	r3, fp
 8007318:	462a      	mov	r2, r5
 800731a:	4621      	mov	r1, r4
 800731c:	4628      	mov	r0, r5
 800731e:	f7ff faa5 	bl	800686c <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8007322:	89b3      	ldrh	r3, [r6, #12]
 8007324:	4628      	mov	r0, r5
 8007326:	4651      	mov	r1, sl
 8007328:	464a      	mov	r2, r9
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	4653      	mov	r3, sl
 800732e:	f7ff fa9d 	bl	800686c <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8007332:	89f3      	ldrh	r3, [r6, #14]
 8007334:	4639      	mov	r1, r7
 8007336:	464a      	mov	r2, r9
 8007338:	4648      	mov	r0, r9
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	465b      	mov	r3, fp
 800733e:	f7ff fa95 	bl	800686c <UG_DrawLine>
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8007342:	9a05      	ldr	r2, [sp, #20]
 8007344:	9902      	ldr	r1, [sp, #8]
 8007346:	8a33      	ldrh	r3, [r6, #16]
 8007348:	1c95      	adds	r5, r2, #2
 800734a:	b22d      	sxth	r5, r5
 800734c:	1eca      	subs	r2, r1, #3
 800734e:	4628      	mov	r0, r5
 8007350:	4621      	mov	r1, r4
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	b212      	sxth	r2, r2
 8007356:	4623      	mov	r3, r4
 8007358:	f7ff fa88 	bl	800686c <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 800735c:	9804      	ldr	r0, [sp, #16]
 800735e:	9b03      	ldr	r3, [sp, #12]
 8007360:	1ec7      	subs	r7, r0, #3
 8007362:	1cd9      	adds	r1, r3, #3
 8007364:	8a73      	ldrh	r3, [r6, #18]
 8007366:	b23f      	sxth	r7, r7
 8007368:	462a      	mov	r2, r5
 800736a:	4628      	mov	r0, r5
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	b209      	sxth	r1, r1
 8007370:	463b      	mov	r3, r7
 8007372:	f7ff fa7b 	bl	800686c <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8007376:	8ab3      	ldrh	r3, [r6, #20]
 8007378:	4628      	mov	r0, r5
 800737a:	4659      	mov	r1, fp
 800737c:	4642      	mov	r2, r8
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	465b      	mov	r3, fp
 8007382:	f7ff fa73 	bl	800686c <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8007386:	463b      	mov	r3, r7
 8007388:	4642      	mov	r2, r8
 800738a:	4621      	mov	r1, r4
 800738c:	4640      	mov	r0, r8
 800738e:	8af5      	ldrh	r5, [r6, #22]
 8007390:	9510      	str	r5, [sp, #64]	; 0x40
}
 8007392:	b007      	add	sp, #28
 8007394:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8007398:	f7ff ba68 	b.w	800686c <UG_DrawLine>

0800739c <UG_DriverRegister>:
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800739c:	2803      	cmp	r0, #3
 800739e:	d807      	bhi.n	80073b0 <UG_DriverRegister+0x14>
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80073a0:	2203      	movs	r2, #3
   gui->driver[type].driver = driver;
 80073a2:	4b04      	ldr	r3, [pc, #16]	; (80073b4 <UG_DriverRegister+0x18>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80073aa:	64c1      	str	r1, [r0, #76]	; 0x4c
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80073ac:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
}
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20001844 	.word	0x20001844

080073b8 <UG_WindowCreate>:
   if ( (wnd == NULL) || (objlst == NULL) || (objcnt == 0) ) return UG_RESULT_FAIL;
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d04a      	beq.n	8007452 <UG_WindowCreate+0x9a>
 80073bc:	2900      	cmp	r1, #0
 80073be:	d048      	beq.n	8007452 <UG_WindowCreate+0x9a>
 80073c0:	2a00      	cmp	r2, #0
 80073c2:	d046      	beq.n	8007452 <UG_WindowCreate+0x9a>
{
 80073c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073c6:	468c      	mov	ip, r1
 80073c8:	4686      	mov	lr, r0
      obj->state = OBJ_STATE_INIT;
 80073ca:	2503      	movs	r5, #3
      obj->data = NULL;
 80073cc:	2000      	movs	r0, #0
 80073ce:	1e54      	subs	r4, r2, #1
 80073d0:	b2e6      	uxtb	r6, r4
 80073d2:	f101 0420 	add.w	r4, r1, #32
 80073d6:	eb04 1446 	add.w	r4, r4, r6, lsl #5
      obj->state = OBJ_STATE_INIT;
 80073da:	f88c 5000 	strb.w	r5, [ip]
      obj->data = NULL;
 80073de:	f8cc 001c 	str.w	r0, [ip, #28]
   for(i=0; i<objcnt; i++)
 80073e2:	f10c 0c20 	add.w	ip, ip, #32
 80073e6:	45a4      	cmp	ip, r4
 80073e8:	d1f7      	bne.n	80073da <UG_WindowCreate+0x22>
   wnd->objlst = objlst;
 80073ea:	f8ce 1004 	str.w	r1, [lr, #4]
   wnd->state = WND_STATE_VALID;
 80073ee:	2102      	movs	r1, #2
   wnd->title.h_space = 2;
 80073f0:	f240 2702 	movw	r7, #514	; 0x202
   wnd->title.align = ALIGN_CENTER_LEFT;
 80073f4:	f04f 0c11 	mov.w	ip, #17
   wnd->title.height = 15;
 80073f8:	240f      	movs	r4, #15
   wnd->objcnt = objcnt;
 80073fa:	f88e 2000 	strb.w	r2, [lr]
   return gui->x_dim;
 80073fe:	4a16      	ldr	r2, [pc, #88]	; (8007458 <UG_WindowCreate+0xa0>)
   wnd->fc = 0x0000;
 8007400:	4e16      	ldr	r6, [pc, #88]	; (800745c <UG_WindowCreate+0xa4>)
   return gui->x_dim;
 8007402:	6812      	ldr	r2, [r2, #0]
   wnd->fc = 0x0000;
 8007404:	f8ce 600a 	str.w	r6, [lr, #10]
   wnd->state = WND_STATE_VALID;
 8007408:	f88e 1008 	strb.w	r1, [lr, #8]
   wnd->xe = UG_GetXDim()-1;
 800740c:	8891      	ldrh	r1, [r2, #4]
   wnd->title.fc = C_WHITE;
 800740e:	4e14      	ldr	r6, [pc, #80]	; (8007460 <UG_WindowCreate+0xa8>)
   wnd->xe = UG_GetXDim()-1;
 8007410:	3901      	subs	r1, #1
 8007412:	f8ae 1012 	strh.w	r1, [lr, #18]
   wnd->ye = UG_GetYDim()-1;
 8007416:	88d1      	ldrh	r1, [r2, #6]
   wnd->cb = cb;
 8007418:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
   wnd->ye = UG_GetYDim()-1;
 800741c:	1e4b      	subs	r3, r1, #1
 800741e:	f8ae 3014 	strh.w	r3, [lr, #20]
   wnd->title.ifc = C_WHITE;
 8007422:	4b10      	ldr	r3, [pc, #64]	; (8007464 <UG_WindowCreate+0xac>)
   if (gui != NULL) wnd->title.font = &gui->font;
 8007424:	322c      	adds	r2, #44	; 0x2c
   wnd->style = WND_STYLE_3D | WND_STYLE_SHOW_TITLE;
 8007426:	f88e 5016 	strb.w	r5, [lr, #22]
   wnd->title.h_space = 2;
 800742a:	f8ae 7020 	strh.w	r7, [lr, #32]
   wnd->title.align = ALIGN_CENTER_LEFT;
 800742e:	f88e c022 	strb.w	ip, [lr, #34]	; 0x22
   wnd->title.height = 15;
 8007432:	f88e 402c 	strb.w	r4, [lr, #44]	; 0x2c
   wnd->xs = 0;
 8007436:	f8ae 000e 	strh.w	r0, [lr, #14]
   wnd->ys = 0;
 800743a:	f8ae 0010 	strh.w	r0, [lr, #16]
   wnd->title.str = NULL;
 800743e:	f8ce 0018 	str.w	r0, [lr, #24]
   if (gui != NULL) wnd->title.font = &gui->font;
 8007442:	f8ce 201c 	str.w	r2, [lr, #28]
   return UG_RESULT_OK;
 8007446:	2000      	movs	r0, #0
   wnd->title.fc = C_WHITE;
 8007448:	f8ce 6024 	str.w	r6, [lr, #36]	; 0x24
   wnd->title.ifc = C_WHITE;
 800744c:	f8ce 3028 	str.w	r3, [lr, #40]	; 0x28
}
 8007450:	bdf0      	pop	{r4, r5, r6, r7, pc}
   if ( (wnd == NULL) || (objlst == NULL) || (objcnt == 0) ) return UG_RESULT_FAIL;
 8007452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007456:	4770      	bx	lr
 8007458:	20001844 	.word	0x20001844
 800745c:	ef7d0000 	.word	0xef7d0000
 8007460:	001fffff 	.word	0x001fffff
 8007464:	7befffff 	.word	0x7befffff

08007468 <UG_WindowShow>:
   if ( wnd != NULL )
 8007468:	4603      	mov	r3, r0
 800746a:	b150      	cbz	r0, 8007482 <UG_WindowShow+0x1a>
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 800746c:	7a02      	ldrb	r2, [r0, #8]
      gui->next_window = wnd;
 800746e:	4906      	ldr	r1, [pc, #24]	; (8007488 <UG_WindowShow+0x20>)
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      gui->next_window = wnd;
 8007474:	6809      	ldr	r1, [r1, #0]
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007476:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800747a:	7202      	strb	r2, [r0, #8]
      return UG_RESULT_OK;
 800747c:	2000      	movs	r0, #0
      gui->next_window = wnd;
 800747e:	610b      	str	r3, [r1, #16]
      return UG_RESULT_OK;
 8007480:	4770      	bx	lr
   return UG_RESULT_FAIL;
 8007482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007486:	4770      	bx	lr
 8007488:	20001844 	.word	0x20001844

0800748c <UG_WindowSetBackColor>:
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800748c:	4603      	mov	r3, r0
 800748e:	b140      	cbz	r0, 80074a2 <UG_WindowSetBackColor+0x16>
 8007490:	7a02      	ldrb	r2, [r0, #8]
 8007492:	0790      	lsls	r0, r2, #30
 8007494:	d505      	bpl.n	80074a2 <UG_WindowSetBackColor+0x16>
      wnd->state |= WND_STATE_UPDATE;
 8007496:	f042 0220 	orr.w	r2, r2, #32
      return UG_RESULT_OK;
 800749a:	2000      	movs	r0, #0
      wnd->bc = bc;
 800749c:	8199      	strh	r1, [r3, #12]
      wnd->state |= WND_STATE_UPDATE;
 800749e:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 80074a0:	4770      	bx	lr
   return UG_RESULT_FAIL;
 80074a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80074a6:	4770      	bx	lr

080074a8 <UG_WindowSetTitleTextColor>:
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80074a8:	4603      	mov	r3, r0
 80074aa:	b140      	cbz	r0, 80074be <UG_WindowSetTitleTextColor+0x16>
 80074ac:	7a02      	ldrb	r2, [r0, #8]
 80074ae:	0790      	lsls	r0, r2, #30
 80074b0:	d505      	bpl.n	80074be <UG_WindowSetTitleTextColor+0x16>
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 80074b2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
      return UG_RESULT_OK;
 80074b6:	2000      	movs	r0, #0
      wnd->title.fc = c;
 80074b8:	8499      	strh	r1, [r3, #36]	; 0x24
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 80074ba:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 80074bc:	4770      	bx	lr
   return UG_RESULT_FAIL;
 80074be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80074c2:	4770      	bx	lr

080074c4 <UG_WindowSetTitleColor>:
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80074c4:	4603      	mov	r3, r0
 80074c6:	b140      	cbz	r0, 80074da <UG_WindowSetTitleColor+0x16>
 80074c8:	7a02      	ldrb	r2, [r0, #8]
 80074ca:	0790      	lsls	r0, r2, #30
 80074cc:	d505      	bpl.n	80074da <UG_WindowSetTitleColor+0x16>
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 80074ce:	f042 0260 	orr.w	r2, r2, #96	; 0x60
      return UG_RESULT_OK;
 80074d2:	2000      	movs	r0, #0
      wnd->title.bc = c;
 80074d4:	84d9      	strh	r1, [r3, #38]	; 0x26
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 80074d6:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 80074d8:	4770      	bx	lr
   return UG_RESULT_FAIL;
 80074da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80074de:	4770      	bx	lr

080074e0 <UG_WindowSetTitleText>:
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80074e0:	4603      	mov	r3, r0
 80074e2:	b140      	cbz	r0, 80074f6 <UG_WindowSetTitleText+0x16>
 80074e4:	7a02      	ldrb	r2, [r0, #8]
 80074e6:	0790      	lsls	r0, r2, #30
 80074e8:	d505      	bpl.n	80074f6 <UG_WindowSetTitleText+0x16>
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 80074ea:	f042 0260 	orr.w	r2, r2, #96	; 0x60
      return UG_RESULT_OK;
 80074ee:	2000      	movs	r0, #0
      wnd->title.str = str;
 80074f0:	6199      	str	r1, [r3, #24]
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 80074f2:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 80074f4:	4770      	bx	lr
   return UG_RESULT_FAIL;
 80074f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80074fa:	4770      	bx	lr

080074fc <UG_WindowSetTitleTextFont>:
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80074fc:	4603      	mov	r3, r0
 80074fe:	b1c8      	cbz	r0, 8007534 <UG_WindowSetTitleTextFont+0x38>
 8007500:	7a02      	ldrb	r2, [r0, #8]
 8007502:	0790      	lsls	r0, r2, #30
 8007504:	d516      	bpl.n	8007534 <UG_WindowSetTitleTextFont+0x38>
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007506:	f042 0060 	orr.w	r0, r2, #96	; 0x60
 800750a:	7218      	strb	r0, [r3, #8]
      if ( wnd->title.height <= (font->char_height + 1) )
 800750c:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 8007510:	f893 c02c 	ldrb.w	ip, [r3, #44]	; 0x2c
      wnd->title.font = font;
 8007514:	61d9      	str	r1, [r3, #28]
      if ( wnd->title.height <= (font->char_height + 1) )
 8007516:	1c41      	adds	r1, r0, #1
 8007518:	458c      	cmp	ip, r1
 800751a:	dc09      	bgt.n	8007530 <UG_WindowSetTitleTextFont+0x34>
         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 800751c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
         wnd->title.height = font->char_height + 2;
 8007520:	1c81      	adds	r1, r0, #2
         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007522:	f042 0220 	orr.w	r2, r2, #32
      return UG_RESULT_OK;
 8007526:	2000      	movs	r0, #0
         wnd->title.height = font->char_height + 2;
 8007528:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 800752c:	721a      	strb	r2, [r3, #8]
 800752e:	4770      	bx	lr
      return UG_RESULT_OK;
 8007530:	2000      	movs	r0, #0
}
 8007532:	4770      	bx	lr
   return UG_RESULT_FAIL;
 8007534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop

0800753c <UG_WindowSetTitleTextAlignment>:
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800753c:	4603      	mov	r3, r0
 800753e:	b148      	cbz	r0, 8007554 <UG_WindowSetTitleTextAlignment+0x18>
 8007540:	7a02      	ldrb	r2, [r0, #8]
 8007542:	0790      	lsls	r0, r2, #30
 8007544:	d506      	bpl.n	8007554 <UG_WindowSetTitleTextAlignment+0x18>
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007546:	f042 0260 	orr.w	r2, r2, #96	; 0x60
      return UG_RESULT_OK;
 800754a:	2000      	movs	r0, #0
      wnd->title.align = align;
 800754c:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007550:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007552:	4770      	bx	lr
   return UG_RESULT_FAIL;
 8007554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop

0800755c <UG_WindowSetStyle>:
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800755c:	4603      	mov	r3, r0
 800755e:	b1b8      	cbz	r0, 8007590 <UG_WindowSetStyle+0x34>
 8007560:	7a00      	ldrb	r0, [r0, #8]
 8007562:	0782      	lsls	r2, r0, #30
 8007564:	d514      	bpl.n	8007590 <UG_WindowSetStyle+0x34>
         wnd->style |= WND_STYLE_3D;
 8007566:	7d9a      	ldrb	r2, [r3, #22]
      if ( style & WND_STYLE_3D )
 8007568:	f011 0f01 	tst.w	r1, #1
         wnd->style |= WND_STYLE_3D;
 800756c:	bf14      	ite	ne
 800756e:	f042 0201 	orrne.w	r2, r2, #1
         wnd->style &= ~WND_STYLE_3D;
 8007572:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
      if ( style & WND_STYLE_SHOW_TITLE )
 8007576:	0789      	lsls	r1, r1, #30
         wnd->style |= WND_STYLE_SHOW_TITLE;
 8007578:	bf48      	it	mi
 800757a:	f042 0202 	orrmi.w	r2, r2, #2
      wnd->state |= WND_STATE_UPDATE;
 800757e:	f040 0120 	orr.w	r1, r0, #32
         wnd->style &= ~WND_STYLE_SHOW_TITLE;
 8007582:	bf58      	it	pl
 8007584:	f002 02fd 	andpl.w	r2, r2, #253	; 0xfd
      return UG_RESULT_OK;
 8007588:	2000      	movs	r0, #0
 800758a:	759a      	strb	r2, [r3, #22]
      wnd->state |= WND_STATE_UPDATE;
 800758c:	7219      	strb	r1, [r3, #8]
      return UG_RESULT_OK;
 800758e:	4770      	bx	lr
   return UG_RESULT_FAIL;
 8007590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop

08007598 <_UG_WindowDrawTitle>:
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007598:	2800      	cmp	r0, #0
 800759a:	f000 80ab 	beq.w	80076f4 <_UG_WindowDrawTitle+0x15c>
{
 800759e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80075a2:	7a03      	ldrb	r3, [r0, #8]
 80075a4:	4607      	mov	r7, r0
 80075a6:	079c      	lsls	r4, r3, #30
{
 80075a8:	b091      	sub	sp, #68	; 0x44
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80075aa:	f140 80a0 	bpl.w	80076ee <_UG_WindowDrawTitle+0x156>
      if ( wnd->style & WND_STYLE_3D )
 80075ae:	7d83      	ldrb	r3, [r0, #22]
      xs = wnd->xs;
 80075b0:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
      ys = wnd->ys;
 80075b4:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
      xe = wnd->xe;
 80075b8:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
      xs = wnd->xs;
 80075bc:	9203      	str	r2, [sp, #12]
      xe = wnd->xe;
 80075be:	9005      	str	r0, [sp, #20]
      if ( wnd->style & WND_STYLE_3D )
 80075c0:	07d8      	lsls	r0, r3, #31
      ys = wnd->ys;
 80075c2:	9104      	str	r1, [sp, #16]
      if ( wnd->style & WND_STYLE_3D )
 80075c4:	f100 8081 	bmi.w	80076ca <_UG_WindowDrawTitle+0x132>
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80075c8:	b28b      	uxth	r3, r1
 80075ca:	9306      	str	r3, [sp, #24]
      txt.a.xs = xs+3;
 80075cc:	b293      	uxth	r3, r2
 80075ce:	9307      	str	r3, [sp, #28]
      if ( wnd == gui->active_window )
 80075d0:	4e4a      	ldr	r6, [pc, #296]	; (80076fc <_UG_WindowDrawTitle+0x164>)
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80075d2:	f897 802c 	ldrb.w	r8, [r7, #44]	; 0x2c
      if ( wnd == gui->active_window )
 80075d6:	6833      	ldr	r3, [r6, #0]
   if ( x2 < x1 )
 80075d8:	f8dd 9014 	ldr.w	r9, [sp, #20]
      if ( wnd == gui->active_window )
 80075dc:	695a      	ldr	r2, [r3, #20]
   if ( x2 < x1 )
 80075de:	9d03      	ldr	r5, [sp, #12]
      if ( wnd == gui->active_window )
 80075e0:	42ba      	cmp	r2, r7
         txt.fc = wnd->title.fc;
 80075e2:	bf0c      	ite	eq
 80075e4:	8cba      	ldrheq	r2, [r7, #36]	; 0x24
         txt.fc = wnd->title.ifc;
 80075e6:	8d3a      	ldrhne	r2, [r7, #40]	; 0x28
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80075e8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80075ec:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80075f0:	9a06      	ldr	r2, [sp, #24]
   if ( y2 < y1 )
 80075f2:	f8dd a010 	ldr.w	sl, [sp, #16]
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80075f6:	4490      	add	r8, r2
         txt.bc = wnd->title.bc;
 80075f8:	bf0c      	ite	eq
 80075fa:	8cfc      	ldrheq	r4, [r7, #38]	; 0x26
         txt.bc = wnd->title.ibc;
 80075fc:	8d7c      	ldrhne	r4, [r7, #42]	; 0x2a
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80075fe:	fa0f f888 	sxth.w	r8, r8
   if ( x2 < x1 )
 8007602:	454d      	cmp	r5, r9
 8007604:	bfdc      	itt	le
 8007606:	464d      	movle	r5, r9
 8007608:	f8dd 900c 	ldrle.w	r9, [sp, #12]
   if ( y2 < y1 )
 800760c:	45d0      	cmp	r8, sl
 800760e:	f8ad 4036 	strh.w	r4, [sp, #54]	; 0x36
 8007612:	da02      	bge.n	800761a <_UG_WindowDrawTitle+0x82>
 8007614:	46c2      	mov	sl, r8
 8007616:	f8dd 8010 	ldr.w	r8, [sp, #16]
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800761a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800761e:	0792      	lsls	r2, r2, #30
 8007620:	d50a      	bpl.n	8007638 <_UG_WindowDrawTitle+0xa0>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8007622:	9400      	str	r4, [sp, #0]
 8007624:	f8d3 b054 	ldr.w	fp, [r3, #84]	; 0x54
 8007628:	462a      	mov	r2, r5
 800762a:	4643      	mov	r3, r8
 800762c:	4651      	mov	r1, sl
 800762e:	4648      	mov	r0, r9
 8007630:	47d8      	blx	fp
 8007632:	b1b0      	cbz	r0, 8007662 <_UG_WindowDrawTitle+0xca>
   for( m=y1; m<=y2; m++ )
 8007634:	45d0      	cmp	r8, sl
 8007636:	db14      	blt.n	8007662 <_UG_WindowDrawTitle+0xca>
 8007638:	45a9      	cmp	r9, r5
 800763a:	dc12      	bgt.n	8007662 <_UG_WindowDrawTitle+0xca>
   if ( x2 < x1 )
 800763c:	46cb      	mov	fp, r9
         gui->pset(n,m,c);
 800763e:	6833      	ldr	r3, [r6, #0]
 8007640:	4658      	mov	r0, fp
 8007642:	f10b 0b01 	add.w	fp, fp, #1
 8007646:	4622      	mov	r2, r4
 8007648:	4651      	mov	r1, sl
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	fa0f fb8b 	sxth.w	fp, fp
 8007650:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8007652:	455d      	cmp	r5, fp
 8007654:	daf3      	bge.n	800763e <_UG_WindowDrawTitle+0xa6>
   for( m=y1; m<=y2; m++ )
 8007656:	f10a 0a01 	add.w	sl, sl, #1
 800765a:	fa0f fa8a 	sxth.w	sl, sl
 800765e:	45d0      	cmp	r8, sl
 8007660:	daec      	bge.n	800763c <_UG_WindowDrawTitle+0xa4>
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8007662:	f649 5413 	movw	r4, #40211	; 0x9d13
      txt.a.ys = ys;
 8007666:	9b04      	ldr	r3, [sp, #16]
      txt.a.ye = ys+wnd->title.height-1;
 8007668:	9e06      	ldr	r6, [sp, #24]
      txt.a.ys = ys;
 800766a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
      txt.a.xs = xs+3;
 800766e:	9b07      	ldr	r3, [sp, #28]
      txt.a.xe = xe;
 8007670:	9d05      	ldr	r5, [sp, #20]
      txt.a.xs = xs+3;
 8007672:	3303      	adds	r3, #3
 8007674:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
      txt.a.ye = ys+wnd->title.height-1;
 8007678:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
      _UG_PutText( &txt );
 800767c:	a809      	add	r0, sp, #36	; 0x24
      txt.a.ye = ys+wnd->title.height-1;
 800767e:	3b01      	subs	r3, #1
 8007680:	4433      	add	r3, r6
 8007682:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
      txt.align = wnd->title.align;
 8007686:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
      txt.a.xe = xe;
 800768a:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
      txt.align = wnd->title.align;
 800768e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
      txt.h_space = wnd->title.h_space;
 8007692:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8007696:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
      txt.v_space = wnd->title.v_space;
 800769a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800769e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
      txt.str = wnd->title.str;
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	9309      	str	r3, [sp, #36]	; 0x24
      txt.font = wnd->title.font;
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	930a      	str	r3, [sp, #40]	; 0x28
      _UG_PutText( &txt );
 80076aa:	f7ff fb75 	bl	8006d98 <_UG_PutText>
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 80076ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076b2:	9803      	ldr	r0, [sp, #12]
 80076b4:	4433      	add	r3, r6
 80076b6:	b21b      	sxth	r3, r3
 80076b8:	462a      	mov	r2, r5
 80076ba:	4619      	mov	r1, r3
 80076bc:	9400      	str	r4, [sp, #0]
 80076be:	f7ff f8d5 	bl	800686c <UG_DrawLine>
      return UG_RESULT_OK;
 80076c2:	2000      	movs	r0, #0
}
 80076c4:	b011      	add	sp, #68	; 0x44
 80076c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         xs+=3;
 80076ca:	460b      	mov	r3, r1
         xe-=3;
 80076cc:	9905      	ldr	r1, [sp, #20]
         xs+=3;
 80076ce:	3203      	adds	r2, #3
         xe-=3;
 80076d0:	f1a1 0a03 	sub.w	sl, r1, #3
         xs+=3;
 80076d4:	b291      	uxth	r1, r2
 80076d6:	b212      	sxth	r2, r2
         ys+=3;
 80076d8:	3303      	adds	r3, #3
         xs+=3;
 80076da:	9203      	str	r2, [sp, #12]
         xe-=3;
 80076dc:	fa0f f28a 	sxth.w	r2, sl
 80076e0:	9205      	str	r2, [sp, #20]
         ys+=3;
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	b21b      	sxth	r3, r3
         xs+=3;
 80076e6:	9107      	str	r1, [sp, #28]
         ys+=3;
 80076e8:	9206      	str	r2, [sp, #24]
 80076ea:	9304      	str	r3, [sp, #16]
         ye-=3;
 80076ec:	e770      	b.n	80075d0 <_UG_WindowDrawTitle+0x38>
   return UG_RESULT_FAIL;
 80076ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076f2:	e7e7      	b.n	80076c4 <_UG_WindowDrawTitle+0x12c>
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	20001844 	.word	0x20001844

08007700 <_UG_WindowUpdate>:
{
 8007700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   wnd->state &= ~WND_STATE_UPDATE;
 8007704:	7a03      	ldrb	r3, [r0, #8]
   xs = wnd->xs;
 8007706:	f9b0 700e 	ldrsh.w	r7, [r0, #14]
   wnd->state &= ~WND_STATE_UPDATE;
 800770a:	f023 0220 	bic.w	r2, r3, #32
   if ( wnd->state & WND_STATE_VISIBLE )
 800770e:	071c      	lsls	r4, r3, #28
   ys = wnd->ys;
 8007710:	f9b0 b010 	ldrsh.w	fp, [r0, #16]
   xe = wnd->xe;
 8007714:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
   ye = wnd->ye;
 8007718:	f9b0 a014 	ldrsh.w	sl, [r0, #20]
{
 800771c:	b083      	sub	sp, #12
   wnd->state &= ~WND_STATE_UPDATE;
 800771e:	7202      	strb	r2, [r0, #8]
   if ( wnd->state & WND_STATE_VISIBLE )
 8007720:	d563      	bpl.n	80077ea <_UG_WindowUpdate+0xea>
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8007722:	7d82      	ldrb	r2, [r0, #22]
 8007724:	4681      	mov	r9, r0
 8007726:	07d1      	lsls	r1, r2, #31
 8007728:	d502      	bpl.n	8007730 <_UG_WindowUpdate+0x30>
 800772a:	065b      	lsls	r3, r3, #25
 800772c:	f140 808f 	bpl.w	800784e <_UG_WindowUpdate+0x14e>
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8007730:	0796      	lsls	r6, r2, #30
 8007732:	d50d      	bpl.n	8007750 <_UG_WindowUpdate+0x50>
         _UG_WindowDrawTitle( wnd );
 8007734:	4648      	mov	r0, r9
 8007736:	f7ff ff2f 	bl	8007598 <_UG_WindowDrawTitle>
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 800773a:	f899 3008 	ldrb.w	r3, [r9, #8]
 800773e:	065c      	lsls	r4, r3, #25
 8007740:	f100 809f 	bmi.w	8007882 <_UG_WindowUpdate+0x182>
         ys += wnd->title.height+1;
 8007744:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 8007748:	3301      	adds	r3, #1
 800774a:	449b      	add	fp, r3
 800774c:	fa0f fb8b 	sxth.w	fp, fp
   if ( x2 < x1 )
 8007750:	42af      	cmp	r7, r5
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8007752:	f8b9 800c 	ldrh.w	r8, [r9, #12]
   if ( x2 < x1 )
 8007756:	dd02      	ble.n	800775e <_UG_WindowUpdate+0x5e>
 8007758:	463b      	mov	r3, r7
 800775a:	462f      	mov	r7, r5
 800775c:	461d      	mov	r5, r3
   if ( y2 < y1 )
 800775e:	45d3      	cmp	fp, sl
 8007760:	dd02      	ble.n	8007768 <_UG_WindowUpdate+0x68>
 8007762:	465b      	mov	r3, fp
 8007764:	46d3      	mov	fp, sl
 8007766:	469a      	mov	sl, r3
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8007768:	4e49      	ldr	r6, [pc, #292]	; (8007890 <_UG_WindowUpdate+0x190>)
 800776a:	6833      	ldr	r3, [r6, #0]
 800776c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007770:	0791      	lsls	r1, r2, #30
 8007772:	d50a      	bpl.n	800778a <_UG_WindowUpdate+0x8a>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8007774:	f8cd 8000 	str.w	r8, [sp]
 8007778:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800777a:	462a      	mov	r2, r5
 800777c:	4653      	mov	r3, sl
 800777e:	4659      	mov	r1, fp
 8007780:	4638      	mov	r0, r7
 8007782:	47a0      	blx	r4
 8007784:	b1a0      	cbz	r0, 80077b0 <_UG_WindowUpdate+0xb0>
   for( m=y1; m<=y2; m++ )
 8007786:	45d3      	cmp	fp, sl
 8007788:	dc12      	bgt.n	80077b0 <_UG_WindowUpdate+0xb0>
 800778a:	42af      	cmp	r7, r5
 800778c:	dc10      	bgt.n	80077b0 <_UG_WindowUpdate+0xb0>
   if ( x2 < x1 )
 800778e:	463c      	mov	r4, r7
         gui->pset(n,m,c);
 8007790:	6833      	ldr	r3, [r6, #0]
 8007792:	4620      	mov	r0, r4
 8007794:	3401      	adds	r4, #1
 8007796:	4642      	mov	r2, r8
 8007798:	4659      	mov	r1, fp
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	b224      	sxth	r4, r4
 800779e:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 80077a0:	42a5      	cmp	r5, r4
 80077a2:	daf5      	bge.n	8007790 <_UG_WindowUpdate+0x90>
   for( m=y1; m<=y2; m++ )
 80077a4:	f10b 0b01 	add.w	fp, fp, #1
 80077a8:	fa0f fb8b 	sxth.w	fp, fp
 80077ac:	45da      	cmp	sl, fp
 80077ae:	daee      	bge.n	800778e <_UG_WindowUpdate+0x8e>
      objcnt = wnd->objcnt;
 80077b0:	f899 4000 	ldrb.w	r4, [r9]
      for(i=0; i<objcnt; i++)
 80077b4:	b1b4      	cbz	r4, 80077e4 <_UG_WindowUpdate+0xe4>
 80077b6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80077ba:	3c01      	subs	r4, #1
 80077bc:	b2a4      	uxth	r4, r4
 80077be:	f101 0320 	add.w	r3, r1, #32
 80077c2:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 80077c6:	e000      	b.n	80077ca <_UG_WindowUpdate+0xca>
 80077c8:	3320      	adds	r3, #32
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 80077ca:	780a      	ldrb	r2, [r1, #0]
 80077cc:	f002 0003 	and.w	r0, r2, #3
 80077d0:	2802      	cmp	r0, #2
 80077d2:	d104      	bne.n	80077de <_UG_WindowUpdate+0xde>
 80077d4:	0710      	lsls	r0, r2, #28
 80077d6:	bf44      	itt	mi
 80077d8:	f042 0260 	orrmi.w	r2, r2, #96	; 0x60
 80077dc:	700a      	strbmi	r2, [r1, #0]
      for(i=0; i<objcnt; i++)
 80077de:	429c      	cmp	r4, r3
 80077e0:	4619      	mov	r1, r3
 80077e2:	d1f1      	bne.n	80077c8 <_UG_WindowUpdate+0xc8>
}
 80077e4:	b003      	add	sp, #12
 80077e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80077ea:	4e29      	ldr	r6, [pc, #164]	; (8007890 <_UG_WindowUpdate+0x190>)
   if ( x2 < x1 )
 80077ec:	42af      	cmp	r7, r5
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80077ee:	6833      	ldr	r3, [r6, #0]
   if ( x2 < x1 )
 80077f0:	bfca      	itet	gt
 80077f2:	46a9      	movgt	r9, r5
 80077f4:	46b9      	movle	r9, r7
 80077f6:	463d      	movgt	r5, r7
   if ( y2 < y1 )
 80077f8:	4557      	cmp	r7, sl
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80077fa:	f8b3 8046 	ldrh.w	r8, [r3, #70]	; 0x46
   if ( y2 < y1 )
 80077fe:	dd02      	ble.n	8007806 <_UG_WindowUpdate+0x106>
 8007800:	463a      	mov	r2, r7
 8007802:	4657      	mov	r7, sl
 8007804:	4692      	mov	sl, r2
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8007806:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800780a:	0792      	lsls	r2, r2, #30
 800780c:	d50b      	bpl.n	8007826 <_UG_WindowUpdate+0x126>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800780e:	f8cd 8000 	str.w	r8, [sp]
 8007812:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8007814:	462a      	mov	r2, r5
 8007816:	4653      	mov	r3, sl
 8007818:	4639      	mov	r1, r7
 800781a:	4648      	mov	r0, r9
 800781c:	47a0      	blx	r4
 800781e:	2800      	cmp	r0, #0
 8007820:	d0e0      	beq.n	80077e4 <_UG_WindowUpdate+0xe4>
   for( m=y1; m<=y2; m++ )
 8007822:	45ba      	cmp	sl, r7
 8007824:	dbde      	blt.n	80077e4 <_UG_WindowUpdate+0xe4>
 8007826:	45a9      	cmp	r9, r5
 8007828:	dcdc      	bgt.n	80077e4 <_UG_WindowUpdate+0xe4>
   if ( x2 < x1 )
 800782a:	464c      	mov	r4, r9
         gui->pset(n,m,c);
 800782c:	6833      	ldr	r3, [r6, #0]
 800782e:	4620      	mov	r0, r4
 8007830:	3401      	adds	r4, #1
 8007832:	4642      	mov	r2, r8
 8007834:	4639      	mov	r1, r7
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	b224      	sxth	r4, r4
 800783a:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800783c:	42a5      	cmp	r5, r4
 800783e:	daf5      	bge.n	800782c <_UG_WindowUpdate+0x12c>
   for( m=y1; m<=y2; m++ )
 8007840:	3701      	adds	r7, #1
 8007842:	b23f      	sxth	r7, r7
 8007844:	45ba      	cmp	sl, r7
 8007846:	daf0      	bge.n	800782a <_UG_WindowUpdate+0x12a>
}
 8007848:	b003      	add	sp, #12
 800784a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 800784e:	4b11      	ldr	r3, [pc, #68]	; (8007894 <_UG_WindowUpdate+0x194>)
 8007850:	462a      	mov	r2, r5
 8007852:	4659      	mov	r1, fp
 8007854:	4638      	mov	r0, r7
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	4653      	mov	r3, sl
 800785a:	f7ff fd09 	bl	8007270 <_UG_DrawObjectFrame>
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 800785e:	f899 2016 	ldrb.w	r2, [r9, #22]
         xs+=3;
 8007862:	3703      	adds	r7, #3
         ys+=3;
 8007864:	f10b 0b03 	add.w	fp, fp, #3
         xe-=3;
 8007868:	3d03      	subs	r5, #3
         ye-=3;
 800786a:	f1aa 0a03 	sub.w	sl, sl, #3
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 800786e:	0796      	lsls	r6, r2, #30
         xs+=3;
 8007870:	b23f      	sxth	r7, r7
         ys+=3;
 8007872:	fa0f fb8b 	sxth.w	fp, fp
         xe-=3;
 8007876:	b22d      	sxth	r5, r5
         ye-=3;
 8007878:	fa0f fa8a 	sxth.w	sl, sl
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 800787c:	f57f af68 	bpl.w	8007750 <_UG_WindowUpdate+0x50>
 8007880:	e758      	b.n	8007734 <_UG_WindowUpdate+0x34>
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007886:	f889 3008 	strb.w	r3, [r9, #8]
}
 800788a:	b003      	add	sp, #12
 800788c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007890:	20001844 	.word	0x20001844
 8007894:	08012654 	.word	0x08012654

08007898 <UG_Update>:
{
 8007898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   if ( gui->state & UG_SATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_SATUS_WAIT_FOR_UPDATE;
 800789c:	4c3b      	ldr	r4, [pc, #236]	; (800798c <UG_Update+0xf4>)
{
 800789e:	b083      	sub	sp, #12
   if ( gui->state & UG_SATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_SATUS_WAIT_FOR_UPDATE;
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   if ( gui->next_window != gui->active_window )
 80078a6:	e9d3 5004 	ldrd	r5, r0, [r3, #16]
   if ( gui->state & UG_SATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_SATUS_WAIT_FOR_UPDATE;
 80078aa:	07d7      	lsls	r7, r2, #31
 80078ac:	bf44      	itt	mi
 80078ae:	f022 0201 	bicmi.w	r2, r2, #1
 80078b2:	f883 2048 	strbmi.w	r2, [r3, #72]	; 0x48
   if ( gui->next_window != gui->active_window )
 80078b6:	4285      	cmp	r5, r0
 80078b8:	d02e      	beq.n	8007918 <UG_Update+0x80>
      if ( gui->next_window != NULL )
 80078ba:	b36d      	cbz	r5, 8007918 <UG_Update+0x80>
         gui->active_window = gui->next_window;
 80078bc:	e9c3 5005 	strd	r5, r0, [r3, #20]
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80078c0:	b1c8      	cbz	r0, 80078f6 <UG_Update+0x5e>
 80078c2:	7d83      	ldrb	r3, [r0, #22]
 80078c4:	079e      	lsls	r6, r3, #30
 80078c6:	d516      	bpl.n	80078f6 <UG_Update+0x5e>
 80078c8:	7a03      	ldrb	r3, [r0, #8]
 80078ca:	0719      	lsls	r1, r3, #28
 80078cc:	d513      	bpl.n	80078f6 <UG_Update+0x5e>
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80078ce:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80078d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d109      	bne.n	80078ee <UG_Update+0x56>
 80078da:	6902      	ldr	r2, [r0, #16]
 80078dc:	692b      	ldr	r3, [r5, #16]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d105      	bne.n	80078ee <UG_Update+0x56>
 80078e2:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
 80078e6:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d003      	beq.n	80078f6 <UG_Update+0x5e>
               _UG_WindowDrawTitle( gui->last_window );
 80078ee:	f7ff fe53 	bl	8007598 <_UG_WindowDrawTitle>
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	695d      	ldr	r5, [r3, #20]
 80078f6:	7a2b      	ldrb	r3, [r5, #8]
 80078f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 80078fc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      if ( wnd->state & WND_STATE_UPDATE )
 8007900:	069a      	lsls	r2, r3, #26
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8007902:	722b      	strb	r3, [r5, #8]
      if ( wnd->state & WND_STATE_UPDATE )
 8007904:	d50e      	bpl.n	8007924 <UG_Update+0x8c>
         _UG_WindowUpdate( wnd );
 8007906:	4628      	mov	r0, r5
 8007908:	f7ff fefa 	bl	8007700 <_UG_WindowUpdate>
      if ( wnd->state & WND_STATE_VISIBLE )
 800790c:	7a2b      	ldrb	r3, [r5, #8]
 800790e:	071b      	lsls	r3, r3, #28
 8007910:	d40a      	bmi.n	8007928 <UG_Update+0x90>
}
 8007912:	b003      	add	sp, #12
 8007914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   if ( gui->active_window != NULL )
 8007918:	2800      	cmp	r0, #0
 800791a:	d0fa      	beq.n	8007912 <UG_Update+0x7a>
      if ( wnd->state & WND_STATE_UPDATE )
 800791c:	7a03      	ldrb	r3, [r0, #8]
 800791e:	4605      	mov	r5, r0
 8007920:	069a      	lsls	r2, r3, #26
 8007922:	d4f0      	bmi.n	8007906 <UG_Update+0x6e>
      if ( wnd->state & WND_STATE_VISIBLE )
 8007924:	071b      	lsls	r3, r3, #28
 8007926:	d5f4      	bpl.n	8007912 <UG_Update+0x7a>
         _UG_ProcessTouchData( wnd );
 8007928:	4628      	mov	r0, r5
 800792a:	f7ff fc11 	bl	8007150 <_UG_ProcessTouchData>
         _UG_UpdateObjects( wnd );
 800792e:	4628      	mov	r0, r5
 8007930:	f7ff fc72 	bl	8007218 <_UG_UpdateObjects>
   msg.src = NULL;
 8007934:	2400      	movs	r4, #0
   msg.type = MSG_TYPE_OBJECT;
 8007936:	2302      	movs	r3, #2
   msg.src = NULL;
 8007938:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8007990 <UG_Update+0xf8>
 800793c:	f8c9 4004 	str.w	r4, [r9, #4]
   msg.type = MSG_TYPE_OBJECT;
 8007940:	f889 3000 	strb.w	r3, [r9]
   objcnt = wnd->objcnt;
 8007944:	782b      	ldrb	r3, [r5, #0]
   for(i=0; i<objcnt; i++)
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0e3      	beq.n	8007912 <UG_Update+0x7a>
            obj->event = OBJ_EVENT_NONE;
 800794a:	4627      	mov	r7, r4
 800794c:	ea4f 1843 	mov.w	r8, r3, lsl #5
            msg.src = &obj;
 8007950:	ae01      	add	r6, sp, #4
 8007952:	e001      	b.n	8007958 <UG_Update+0xc0>
   for(i=0; i<objcnt; i++)
 8007954:	4544      	cmp	r4, r8
 8007956:	d0dc      	beq.n	8007912 <UG_Update+0x7a>
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8007958:	686b      	ldr	r3, [r5, #4]
 800795a:	191a      	adds	r2, r3, r4
 800795c:	9201      	str	r2, [sp, #4]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800795e:	5d1b      	ldrb	r3, [r3, r4]
   for(i=0; i<objcnt; i++)
 8007960:	3420      	adds	r4, #32
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	2b02      	cmp	r3, #2
 8007968:	d1f4      	bne.n	8007954 <UG_Update+0xbc>
         if ( obj->event != OBJ_EVENT_NONE )
 800796a:	7e93      	ldrb	r3, [r2, #26]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d0f1      	beq.n	8007954 <UG_Update+0xbc>
            msg.event = obj->event;
 8007970:	f889 3003 	strb.w	r3, [r9, #3]
            msg.id = obj->type;
 8007974:	8b13      	ldrh	r3, [r2, #24]
            wnd->cb( &msg );
 8007976:	4648      	mov	r0, r9
            msg.id = obj->type;
 8007978:	f8a9 3001 	strh.w	r3, [r9, #1]
            msg.src = &obj;
 800797c:	f8c9 6004 	str.w	r6, [r9, #4]
            wnd->cb( &msg );
 8007980:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007982:	4798      	blx	r3
            obj->event = OBJ_EVENT_NONE;
 8007984:	9b01      	ldr	r3, [sp, #4]
 8007986:	769f      	strb	r7, [r3, #26]
 8007988:	e7e4      	b.n	8007954 <UG_Update+0xbc>
 800798a:	bf00      	nop
 800798c:	20001844 	.word	0x20001844
 8007990:	20001848 	.word	0x20001848

08007994 <UG_TextboxCreate>:
{
 8007994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   for(i=0;i<wnd->objcnt;i++)
 8007998:	7805      	ldrb	r5, [r0, #0]
{
 800799a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 800799e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80079a2:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 80079a6:	6844      	ldr	r4, [r0, #4]
   for(i=0;i<wnd->objcnt;i++)
 80079a8:	2d00      	cmp	r5, #0
 80079aa:	d04e      	beq.n	8007a4a <UG_TextboxCreate+0xb6>
 80079ac:	46a4      	mov	ip, r4
 80079ae:	3d01      	subs	r5, #1
 80079b0:	b2ec      	uxtb	r4, r5
 80079b2:	f10c 0520 	add.w	r5, ip, #32
 80079b6:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 80079ba:	e003      	b.n	80079c4 <UG_TextboxCreate+0x30>
 80079bc:	f10c 0c20 	add.w	ip, ip, #32
 80079c0:	4565      	cmp	r5, ip
 80079c2:	d042      	beq.n	8007a4a <UG_TextboxCreate+0xb6>
      if ( (obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 80079c4:	f89c e000 	ldrb.w	lr, [ip]
 80079c8:	f00e 0403 	and.w	r4, lr, #3
 80079cc:	2c03      	cmp	r4, #3
 80079ce:	d1f5      	bne.n	80079bc <UG_TextboxCreate+0x28>
   txb->str = NULL;
 80079d0:	2400      	movs	r4, #0
 80079d2:	600c      	str	r4, [r1, #0]
   if (gui != NULL) txb->font = &gui->font;
 80079d4:	4c1f      	ldr	r4, [pc, #124]	; (8007a54 <UG_TextboxCreate+0xc0>)
 80079d6:	6824      	ldr	r4, [r4, #0]
 80079d8:	b104      	cbz	r4, 80079dc <UG_TextboxCreate+0x48>
 80079da:	342c      	adds	r4, #44	; 0x2c
 80079dc:	604c      	str	r4, [r1, #4]
   txb->style = 0; /* reserved */
 80079de:	2400      	movs	r4, #0
   txb->align = ALIGN_CENTER;
 80079e0:	f04f 0b12 	mov.w	fp, #18
   txb->style = 0; /* reserved */
 80079e4:	720c      	strb	r4, [r1, #8]
   txb->fc = wnd->fc;
 80079e6:	f8d0 000a 	ldr.w	r0, [r0, #10]
   txb->h_space = 0;
 80079ea:	f8a1 400f 	strh.w	r4, [r1, #15]
   txb->fc = wnd->fc;
 80079ee:	f8c1 000a 	str.w	r0, [r1, #10]
   txb->align = ALIGN_CENTER;
 80079f2:	f881 b00e 	strb.w	fp, [r1, #14]
   obj->id = id;
 80079f6:	f88c 2019 	strb.w	r2, [ip, #25]
   obj->a_rel.xs = xs;
 80079fa:	4622      	mov	r2, r4
   obj->type = OBJ_TYPE_TEXTBOX;
 80079fc:	f04f 0902 	mov.w	r9, #2
   obj->a_abs.xs = -1;
 8007a00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   obj->state &= ~OBJ_STATE_FREE;
 8007a04:	f02e 0e01 	bic.w	lr, lr, #1
   return UG_RESULT_OK;
 8007a08:	4620      	mov	r0, r4
   obj->update = _UG_TextboxUpdate;
 8007a0a:	f8df a04c 	ldr.w	sl, [pc, #76]	; 8007a58 <UG_TextboxCreate+0xc4>
   obj->state &= ~OBJ_STATE_FREE;
 8007a0e:	f04e 0e4a 	orr.w	lr, lr, #74	; 0x4a
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
 8007a12:	f88c 4001 	strb.w	r4, [ip, #1]
   obj->event = OBJ_EVENT_NONE;
 8007a16:	f88c 401a 	strb.w	r4, [ip, #26]
   obj->a_rel.xs = xs;
 8007a1a:	f363 020f 	bfi	r2, r3, #0, #16
 8007a1e:	f366 040f 	bfi	r4, r6, #0, #16
 8007a22:	f368 421f 	bfi	r2, r8, #16, #16
 8007a26:	f367 441f 	bfi	r4, r7, #16, #16
   obj->type = OBJ_TYPE_TEXTBOX;
 8007a2a:	f88c 9018 	strb.w	r9, [ip, #24]
   obj->state &= ~OBJ_STATE_FREE;
 8007a2e:	f88c e000 	strb.w	lr, [ip]
   obj->a_abs.xs = -1;
 8007a32:	e9cc 5502 	strd	r5, r5, [ip, #8]
   obj->update = _UG_TextboxUpdate;
 8007a36:	f8cc a004 	str.w	sl, [ip, #4]
   obj->data = (void*)txb;
 8007a3a:	f8cc 101c 	str.w	r1, [ip, #28]
   obj->a_rel.xs = xs;
 8007a3e:	f8cc 2010 	str.w	r2, [ip, #16]
 8007a42:	f8cc 4014 	str.w	r4, [ip, #20]
}
 8007a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8007a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a52:	bf00      	nop
 8007a54:	20001844 	.word	0x20001844
 8007a58:	08006f3d 	.word	0x08006f3d

08007a5c <UG_TextboxShow>:
   for(i=0;i<wnd->objcnt;i++)
 8007a5c:	7802      	ldrb	r2, [r0, #0]
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8007a5e:	6843      	ldr	r3, [r0, #4]
   for(i=0;i<wnd->objcnt;i++)
 8007a60:	b1ca      	cbz	r2, 8007a96 <UG_TextboxShow+0x3a>
 8007a62:	3a01      	subs	r2, #1
 8007a64:	b2d2      	uxtb	r2, r2
 8007a66:	f103 0c20 	add.w	ip, r3, #32
 8007a6a:	eb0c 1c42 	add.w	ip, ip, r2, lsl #5
 8007a6e:	e002      	b.n	8007a76 <UG_TextboxShow+0x1a>
 8007a70:	3320      	adds	r3, #32
 8007a72:	4563      	cmp	r3, ip
 8007a74:	d00f      	beq.n	8007a96 <UG_TextboxShow+0x3a>
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8007a76:	781a      	ldrb	r2, [r3, #0]
 8007a78:	f002 0003 	and.w	r0, r2, #3
 8007a7c:	2802      	cmp	r0, #2
 8007a7e:	d1f7      	bne.n	8007a70 <UG_TextboxShow+0x14>
         if ( (obj->type == type) && (obj->id == id) )
 8007a80:	7e18      	ldrb	r0, [r3, #24]
 8007a82:	2802      	cmp	r0, #2
 8007a84:	d1f4      	bne.n	8007a70 <UG_TextboxShow+0x14>
 8007a86:	7e58      	ldrb	r0, [r3, #25]
 8007a88:	4288      	cmp	r0, r1
 8007a8a:	d1f1      	bne.n	8007a70 <UG_TextboxShow+0x14>
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007a8c:	f042 0268 	orr.w	r2, r2, #104	; 0x68
   return UG_RESULT_OK;
 8007a90:	2000      	movs	r0, #0
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007a92:	701a      	strb	r2, [r3, #0]
}
 8007a94:	4770      	bx	lr
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8007a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a9a:	4770      	bx	lr

08007a9c <UG_TextboxSetForeColor>:
{
 8007a9c:	b510      	push	{r4, lr}
   for(i=0;i<wnd->objcnt;i++)
 8007a9e:	7804      	ldrb	r4, [r0, #0]
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8007aa0:	6843      	ldr	r3, [r0, #4]
   for(i=0;i<wnd->objcnt;i++)
 8007aa2:	b1ec      	cbz	r4, 8007ae0 <UG_TextboxSetForeColor+0x44>
 8007aa4:	3c01      	subs	r4, #1
 8007aa6:	b2e4      	uxtb	r4, r4
 8007aa8:	f103 0e20 	add.w	lr, r3, #32
 8007aac:	eb0e 1e44 	add.w	lr, lr, r4, lsl #5
 8007ab0:	e002      	b.n	8007ab8 <UG_TextboxSetForeColor+0x1c>
 8007ab2:	3320      	adds	r3, #32
 8007ab4:	4573      	cmp	r3, lr
 8007ab6:	d013      	beq.n	8007ae0 <UG_TextboxSetForeColor+0x44>
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8007ab8:	f893 c000 	ldrb.w	ip, [r3]
 8007abc:	f00c 0003 	and.w	r0, ip, #3
 8007ac0:	2802      	cmp	r0, #2
 8007ac2:	d1f6      	bne.n	8007ab2 <UG_TextboxSetForeColor+0x16>
         if ( (obj->type == type) && (obj->id == id) )
 8007ac4:	7e18      	ldrb	r0, [r3, #24]
 8007ac6:	2802      	cmp	r0, #2
 8007ac8:	d1f3      	bne.n	8007ab2 <UG_TextboxSetForeColor+0x16>
 8007aca:	7e58      	ldrb	r0, [r3, #25]
 8007acc:	4288      	cmp	r0, r1
 8007ace:	d1f0      	bne.n	8007ab2 <UG_TextboxSetForeColor+0x16>
   txb->fc = fc;
 8007ad0:	69d9      	ldr	r1, [r3, #28]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007ad2:	f04c 0c60 	orr.w	ip, ip, #96	; 0x60
   txb->fc = fc;
 8007ad6:	814a      	strh	r2, [r1, #10]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007ad8:	f883 c000 	strb.w	ip, [r3]
   return UG_RESULT_OK;
 8007adc:	2000      	movs	r0, #0
}
 8007ade:	bd10      	pop	{r4, pc}
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8007ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007ae4:	bd10      	pop	{r4, pc}
 8007ae6:	bf00      	nop

08007ae8 <UG_TextboxSetBackColor>:
{
 8007ae8:	b510      	push	{r4, lr}
   for(i=0;i<wnd->objcnt;i++)
 8007aea:	7804      	ldrb	r4, [r0, #0]
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8007aec:	6843      	ldr	r3, [r0, #4]
   for(i=0;i<wnd->objcnt;i++)
 8007aee:	b1ec      	cbz	r4, 8007b2c <UG_TextboxSetBackColor+0x44>
 8007af0:	3c01      	subs	r4, #1
 8007af2:	b2e4      	uxtb	r4, r4
 8007af4:	f103 0e20 	add.w	lr, r3, #32
 8007af8:	eb0e 1e44 	add.w	lr, lr, r4, lsl #5
 8007afc:	e002      	b.n	8007b04 <UG_TextboxSetBackColor+0x1c>
 8007afe:	3320      	adds	r3, #32
 8007b00:	4573      	cmp	r3, lr
 8007b02:	d013      	beq.n	8007b2c <UG_TextboxSetBackColor+0x44>
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8007b04:	f893 c000 	ldrb.w	ip, [r3]
 8007b08:	f00c 0003 	and.w	r0, ip, #3
 8007b0c:	2802      	cmp	r0, #2
 8007b0e:	d1f6      	bne.n	8007afe <UG_TextboxSetBackColor+0x16>
         if ( (obj->type == type) && (obj->id == id) )
 8007b10:	7e18      	ldrb	r0, [r3, #24]
 8007b12:	2802      	cmp	r0, #2
 8007b14:	d1f3      	bne.n	8007afe <UG_TextboxSetBackColor+0x16>
 8007b16:	7e58      	ldrb	r0, [r3, #25]
 8007b18:	4288      	cmp	r0, r1
 8007b1a:	d1f0      	bne.n	8007afe <UG_TextboxSetBackColor+0x16>
   txb->bc = bc;
 8007b1c:	69d9      	ldr	r1, [r3, #28]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007b1e:	f04c 0c60 	orr.w	ip, ip, #96	; 0x60
   txb->bc = bc;
 8007b22:	818a      	strh	r2, [r1, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007b24:	f883 c000 	strb.w	ip, [r3]
   return UG_RESULT_OK;
 8007b28:	2000      	movs	r0, #0
}
 8007b2a:	bd10      	pop	{r4, pc}
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007b30:	bd10      	pop	{r4, pc}
 8007b32:	bf00      	nop

08007b34 <UG_TextboxSetText>:
{
 8007b34:	b510      	push	{r4, lr}
   for(i=0;i<wnd->objcnt;i++)
 8007b36:	7804      	ldrb	r4, [r0, #0]
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8007b38:	6843      	ldr	r3, [r0, #4]
   for(i=0;i<wnd->objcnt;i++)
 8007b3a:	b1ec      	cbz	r4, 8007b78 <UG_TextboxSetText+0x44>
 8007b3c:	3c01      	subs	r4, #1
 8007b3e:	b2e4      	uxtb	r4, r4
 8007b40:	f103 0e20 	add.w	lr, r3, #32
 8007b44:	eb0e 1e44 	add.w	lr, lr, r4, lsl #5
 8007b48:	e002      	b.n	8007b50 <UG_TextboxSetText+0x1c>
 8007b4a:	3320      	adds	r3, #32
 8007b4c:	4573      	cmp	r3, lr
 8007b4e:	d013      	beq.n	8007b78 <UG_TextboxSetText+0x44>
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8007b50:	f893 c000 	ldrb.w	ip, [r3]
 8007b54:	f00c 0003 	and.w	r0, ip, #3
 8007b58:	2802      	cmp	r0, #2
 8007b5a:	d1f6      	bne.n	8007b4a <UG_TextboxSetText+0x16>
         if ( (obj->type == type) && (obj->id == id) )
 8007b5c:	7e18      	ldrb	r0, [r3, #24]
 8007b5e:	2802      	cmp	r0, #2
 8007b60:	d1f3      	bne.n	8007b4a <UG_TextboxSetText+0x16>
 8007b62:	7e58      	ldrb	r0, [r3, #25]
 8007b64:	4288      	cmp	r0, r1
 8007b66:	d1f0      	bne.n	8007b4a <UG_TextboxSetText+0x16>
   txb->str = str;
 8007b68:	69d9      	ldr	r1, [r3, #28]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007b6a:	f04c 0c60 	orr.w	ip, ip, #96	; 0x60
   txb->str = str;
 8007b6e:	600a      	str	r2, [r1, #0]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007b70:	f883 c000 	strb.w	ip, [r3]
   return UG_RESULT_OK;
 8007b74:	2000      	movs	r0, #0
}
 8007b76:	bd10      	pop	{r4, pc}
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007b7c:	bd10      	pop	{r4, pc}
 8007b7e:	bf00      	nop

08007b80 <UG_TextboxSetFont>:
{
 8007b80:	b510      	push	{r4, lr}
   for(i=0;i<wnd->objcnt;i++)
 8007b82:	7804      	ldrb	r4, [r0, #0]
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8007b84:	6843      	ldr	r3, [r0, #4]
   for(i=0;i<wnd->objcnt;i++)
 8007b86:	b1ec      	cbz	r4, 8007bc4 <UG_TextboxSetFont+0x44>
 8007b88:	3c01      	subs	r4, #1
 8007b8a:	b2e4      	uxtb	r4, r4
 8007b8c:	f103 0e20 	add.w	lr, r3, #32
 8007b90:	eb0e 1e44 	add.w	lr, lr, r4, lsl #5
 8007b94:	e002      	b.n	8007b9c <UG_TextboxSetFont+0x1c>
 8007b96:	3320      	adds	r3, #32
 8007b98:	4573      	cmp	r3, lr
 8007b9a:	d013      	beq.n	8007bc4 <UG_TextboxSetFont+0x44>
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8007b9c:	f893 c000 	ldrb.w	ip, [r3]
 8007ba0:	f00c 0003 	and.w	r0, ip, #3
 8007ba4:	2802      	cmp	r0, #2
 8007ba6:	d1f6      	bne.n	8007b96 <UG_TextboxSetFont+0x16>
         if ( (obj->type == type) && (obj->id == id) )
 8007ba8:	7e18      	ldrb	r0, [r3, #24]
 8007baa:	2802      	cmp	r0, #2
 8007bac:	d1f3      	bne.n	8007b96 <UG_TextboxSetFont+0x16>
 8007bae:	7e58      	ldrb	r0, [r3, #25]
 8007bb0:	4288      	cmp	r0, r1
 8007bb2:	d1f0      	bne.n	8007b96 <UG_TextboxSetFont+0x16>
   txb->font = font;
 8007bb4:	69d9      	ldr	r1, [r3, #28]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007bb6:	f04c 0c60 	orr.w	ip, ip, #96	; 0x60
   txb->font = font;
 8007bba:	604a      	str	r2, [r1, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007bbc:	f883 c000 	strb.w	ip, [r3]
   return UG_RESULT_OK;
 8007bc0:	2000      	movs	r0, #0
}
 8007bc2:	bd10      	pop	{r4, pc}
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007bc8:	bd10      	pop	{r4, pc}
 8007bca:	bf00      	nop

08007bcc <UG_TextboxSetAlignment>:
{
 8007bcc:	b510      	push	{r4, lr}
   for(i=0;i<wnd->objcnt;i++)
 8007bce:	7804      	ldrb	r4, [r0, #0]
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8007bd0:	6843      	ldr	r3, [r0, #4]
   for(i=0;i<wnd->objcnt;i++)
 8007bd2:	b1ec      	cbz	r4, 8007c10 <UG_TextboxSetAlignment+0x44>
 8007bd4:	3c01      	subs	r4, #1
 8007bd6:	b2e4      	uxtb	r4, r4
 8007bd8:	f103 0e20 	add.w	lr, r3, #32
 8007bdc:	eb0e 1e44 	add.w	lr, lr, r4, lsl #5
 8007be0:	e002      	b.n	8007be8 <UG_TextboxSetAlignment+0x1c>
 8007be2:	3320      	adds	r3, #32
 8007be4:	4573      	cmp	r3, lr
 8007be6:	d013      	beq.n	8007c10 <UG_TextboxSetAlignment+0x44>
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8007be8:	f893 c000 	ldrb.w	ip, [r3]
 8007bec:	f00c 0003 	and.w	r0, ip, #3
 8007bf0:	2802      	cmp	r0, #2
 8007bf2:	d1f6      	bne.n	8007be2 <UG_TextboxSetAlignment+0x16>
         if ( (obj->type == type) && (obj->id == id) )
 8007bf4:	7e18      	ldrb	r0, [r3, #24]
 8007bf6:	2802      	cmp	r0, #2
 8007bf8:	d1f3      	bne.n	8007be2 <UG_TextboxSetAlignment+0x16>
 8007bfa:	7e58      	ldrb	r0, [r3, #25]
 8007bfc:	4288      	cmp	r0, r1
 8007bfe:	d1f0      	bne.n	8007be2 <UG_TextboxSetAlignment+0x16>
   txb->align = align;
 8007c00:	69d9      	ldr	r1, [r3, #28]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007c02:	f04c 0c60 	orr.w	ip, ip, #96	; 0x60
   txb->align = align;
 8007c06:	738a      	strb	r2, [r1, #14]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007c08:	f883 c000 	strb.w	ip, [r3]
   return UG_RESULT_OK;
 8007c0c:	2000      	movs	r0, #0
}
 8007c0e:	bd10      	pop	{r4, pc}
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8007c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007c14:	bd10      	pop	{r4, pc}
 8007c16:	bf00      	nop

08007c18 <UG_ImageCreate>:
{
 8007c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   for(i=0;i<wnd->objcnt;i++)
 8007c1c:	7804      	ldrb	r4, [r0, #0]
{
 8007c1e:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8007c22:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8007c26:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8007c2a:	6840      	ldr	r0, [r0, #4]
   for(i=0;i<wnd->objcnt;i++)
 8007c2c:	b3c4      	cbz	r4, 8007ca0 <UG_ImageCreate+0x88>
 8007c2e:	3c01      	subs	r4, #1
 8007c30:	b2e4      	uxtb	r4, r4
 8007c32:	f100 0e20 	add.w	lr, r0, #32
 8007c36:	4684      	mov	ip, r0
 8007c38:	eb0e 1e44 	add.w	lr, lr, r4, lsl #5
 8007c3c:	e003      	b.n	8007c46 <UG_ImageCreate+0x2e>
 8007c3e:	f10c 0c20 	add.w	ip, ip, #32
 8007c42:	45f4      	cmp	ip, lr
 8007c44:	d02c      	beq.n	8007ca0 <UG_ImageCreate+0x88>
      if ( (obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8007c46:	f89c 0000 	ldrb.w	r0, [ip]
 8007c4a:	f000 0403 	and.w	r4, r0, #3
 8007c4e:	2c03      	cmp	r4, #3
 8007c50:	d1f5      	bne.n	8007c3e <UG_ImageCreate+0x26>
   obj->state &= ~OBJ_STATE_FREE;
 8007c52:	f020 0001 	bic.w	r0, r0, #1
 8007c56:	f040 0e4a 	orr.w	lr, r0, #74	; 0x4a
   img->type = IMG_TYPE_BMP;
 8007c5a:	f04f 0901 	mov.w	r9, #1
   img->img = NULL;
 8007c5e:	2000      	movs	r0, #0
   obj->a_abs.xs = -1;
 8007c60:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   img->type = IMG_TYPE_BMP;
 8007c64:	f881 9004 	strb.w	r9, [r1, #4]
   img->img = NULL;
 8007c68:	6008      	str	r0, [r1, #0]
   obj->a_rel.xs = xs;
 8007c6a:	f8ac 3010 	strh.w	r3, [ip, #16]
   obj->update = _UG_ImageUpdate;
 8007c6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <UG_ImageCreate+0x90>)
   obj->type = OBJ_TYPE_IMAGE;
 8007c70:	f88c 4018 	strb.w	r4, [ip, #24]
   obj->id = id;
 8007c74:	f88c 2019 	strb.w	r2, [ip, #25]
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
 8007c78:	f88c 0001 	strb.w	r0, [ip, #1]
   obj->event = OBJ_EVENT_NONE;
 8007c7c:	f88c 001a 	strb.w	r0, [ip, #26]
   obj->state &= ~OBJ_STATE_FREE;
 8007c80:	f88c e000 	strb.w	lr, [ip]
   obj->a_abs.xe = -1;
 8007c84:	e9cc 8802 	strd	r8, r8, [ip, #8]
   obj->a_rel.ys = ys;
 8007c88:	f8ac 7012 	strh.w	r7, [ip, #18]
   obj->a_rel.xe = xe;
 8007c8c:	f8ac 6014 	strh.w	r6, [ip, #20]
   obj->a_rel.ye = ye;
 8007c90:	f8ac 5016 	strh.w	r5, [ip, #22]
   obj->data = (void*)img;
 8007c94:	f8cc 101c 	str.w	r1, [ip, #28]
   obj->update = _UG_ImageUpdate;
 8007c98:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8007c9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ca8:	0800668d 	.word	0x0800668d

08007cac <UG_ImageSetBMP>:
{
 8007cac:	b510      	push	{r4, lr}
   for(i=0;i<wnd->objcnt;i++)
 8007cae:	7804      	ldrb	r4, [r0, #0]
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8007cb0:	6843      	ldr	r3, [r0, #4]
   for(i=0;i<wnd->objcnt;i++)
 8007cb2:	b1fc      	cbz	r4, 8007cf4 <UG_ImageSetBMP+0x48>
 8007cb4:	3c01      	subs	r4, #1
 8007cb6:	b2e4      	uxtb	r4, r4
 8007cb8:	f103 0e20 	add.w	lr, r3, #32
 8007cbc:	eb0e 1e44 	add.w	lr, lr, r4, lsl #5
 8007cc0:	e002      	b.n	8007cc8 <UG_ImageSetBMP+0x1c>
 8007cc2:	3320      	adds	r3, #32
 8007cc4:	4573      	cmp	r3, lr
 8007cc6:	d015      	beq.n	8007cf4 <UG_ImageSetBMP+0x48>
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8007cc8:	f893 c000 	ldrb.w	ip, [r3]
 8007ccc:	f00c 0003 	and.w	r0, ip, #3
 8007cd0:	2802      	cmp	r0, #2
 8007cd2:	d1f6      	bne.n	8007cc2 <UG_ImageSetBMP+0x16>
         if ( (obj->type == type) && (obj->id == id) )
 8007cd4:	7e18      	ldrb	r0, [r3, #24]
 8007cd6:	2803      	cmp	r0, #3
 8007cd8:	d1f3      	bne.n	8007cc2 <UG_ImageSetBMP+0x16>
 8007cda:	7e58      	ldrb	r0, [r3, #25]
 8007cdc:	4288      	cmp	r0, r1
 8007cde:	d1f0      	bne.n	8007cc2 <UG_ImageSetBMP+0x16>
   img->type = IMG_TYPE_BMP;
 8007ce0:	2401      	movs	r4, #1
   img = (UG_IMAGE*)(obj->data);
 8007ce2:	69d9      	ldr	r1, [r3, #28]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007ce4:	f04c 0c60 	orr.w	ip, ip, #96	; 0x60
   img->img = (void*)bmp;
 8007ce8:	600a      	str	r2, [r1, #0]
   img->type = IMG_TYPE_BMP;
 8007cea:	710c      	strb	r4, [r1, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007cec:	f883 c000 	strb.w	ip, [r3]
   return UG_RESULT_OK;
 8007cf0:	2000      	movs	r0, #0
}
 8007cf2:	bd10      	pop	{r4, pc}
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8007cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007cf8:	bd10      	pop	{r4, pc}
 8007cfa:	bf00      	nop

08007cfc <Display_Init>:
    parallelWriteDC0(0x01);         //Software reset
    HAL_Delay(10);
}

void Display_Init()
{
 8007cfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
//	HAL_Delay(5);
//	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
//	HAL_Delay(15);
//	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8007d00:	4cb1      	ldr	r4, [pc, #708]	; (8007fc8 <Display_Init+0x2cc>)
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8007d02:	4db2      	ldr	r5, [pc, #712]	; (8007fcc <Display_Init+0x2d0>)
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8007d04:	4620      	mov	r0, r4
 8007d06:	2200      	movs	r2, #0
 8007d08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d0c:	f7fc fea0 	bl	8004a50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8007d10:	4628      	mov	r0, r5
 8007d12:	2201      	movs	r2, #1
 8007d14:	2102      	movs	r1, #2
 8007d16:	f7fc fe9b 	bl	8004a50 <HAL_GPIO_WritePin>
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007d1a:	f44f 7280 	mov.w	r2, #256	; 0x100
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007d1e:	f04f 417e 	mov.w	r1, #4261412864	; 0xfe000000
 ivert_eightbit = ~(eightbit);
 8007d22:	20fe      	movs	r0, #254	; 0xfe
GPIOA->BSRR |= 0x08000000;
 8007d24:	6923      	ldr	r3, [r4, #16]
 ivert_eightbit = ~(eightbit);
 8007d26:	4eaa      	ldr	r6, [pc, #680]	; (8007fd0 <Display_Init+0x2d4>)
GPIOA->BSRR |= 0x08000000;
 8007d28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d2c:	6123      	str	r3, [r4, #16]
 ivert_eightbit = ~(eightbit);
 8007d2e:	7030      	strb	r0, [r6, #0]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007d30:	6129      	str	r1, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007d32:	612a      	str	r2, [r5, #16]
GPIOA->BSRR |= 0x01000000;
 8007d34:	6923      	ldr	r3, [r4, #16]


    parallelWriteDC0(0x01);   //Software Reset
    HAL_Delay(100);
 8007d36:	2064      	movs	r0, #100	; 0x64
GPIOA->BSRR |= 0x01000000;
 8007d38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d3c:	6123      	str	r3, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007d3e:	6923      	ldr	r3, [r4, #16]
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);

    // Initialize global structure and set PSET to this.PSET.
    UG_Init(&guiST7735, Display_PSet, DISPLAY_WIDTH, DISPLAY_HEIGHT);
    //
    guiST7735.desktop_color= C_BLACK;
 8007d40:	2700      	movs	r7, #0
GPIOA->BSRR |= 0x00000100;
 8007d42:	4313      	orrs	r3, r2
 8007d44:	6123      	str	r3, [r4, #16]
    HAL_Delay(100);
 8007d46:	f7fc f9db 	bl	8004100 <HAL_Delay>
GPIOA->BSRR |= 0x08000000;
 8007d4a:	6923      	ldr	r3, [r4, #16]
 ivert_eightbit = ~(eightbit);
 8007d4c:	21ee      	movs	r1, #238	; 0xee
GPIOA->BSRR |= 0x08000000;
 8007d4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d52:	6123      	str	r3, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007d54:	f04f 426e 	mov.w	r2, #3992977408	; 0xee000000
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007d58:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 ivert_eightbit = ~(eightbit);
 8007d5c:	7031      	strb	r1, [r6, #0]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007d5e:	612a      	str	r2, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007d60:	612b      	str	r3, [r5, #16]
GPIOA->BSRR |= 0x01000000;
 8007d62:	6923      	ldr	r3, [r4, #16]
    HAL_Delay(100);
 8007d64:	2064      	movs	r0, #100	; 0x64
GPIOA->BSRR |= 0x01000000;
 8007d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d6a:	6123      	str	r3, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007d6c:	6923      	ldr	r3, [r4, #16]
    UG_Init(&guiST7735, Display_PSet, DISPLAY_WIDTH, DISPLAY_HEIGHT);
 8007d6e:	f8df 8264 	ldr.w	r8, [pc, #612]	; 8007fd4 <Display_Init+0x2d8>
GPIOA->BSRR |= 0x00000100;
 8007d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d76:	6123      	str	r3, [r4, #16]
    HAL_Delay(100);
 8007d78:	f7fc f9c2 	bl	8004100 <HAL_Delay>
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007d7c:	f04f 4049 	mov.w	r0, #3372220416	; 0xc9000000
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007d80:	f44f 5158 	mov.w	r1, #13824	; 0x3600
y.v8[1]=eightbit;
 8007d84:	2260      	movs	r2, #96	; 0x60
GPIOA->BSRR |= 0x08000000;
 8007d86:	6923      	ldr	r3, [r4, #16]
 ivert_eightbit = ~(eightbit);
 8007d88:	f04f 0ec5 	mov.w	lr, #197	; 0xc5
GPIOA->BSRR |= 0x08000000;
 8007d8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d90:	6123      	str	r3, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007d92:	6128      	str	r0, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007d94:	6129      	str	r1, [r5, #16]
GPIOA->BSRR |= 0x01000000;
 8007d96:	6923      	ldr	r3, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007d98:	f04f 4c45 	mov.w	ip, #3305111552	; 0xc5000000
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007d9c:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
GPIOA->BSRR |= 0x01000000;
 8007da0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007da4:	6123      	str	r3, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007da6:	6923      	ldr	r3, [r4, #16]
y.v8[1]=eightbit;
 8007da8:	2105      	movs	r1, #5
GPIOA->BSRR |= 0x00000100;
 8007daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dae:	6123      	str	r3, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8007db0:	6923      	ldr	r3, [r4, #16]
 8007db2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007db6:	6123      	str	r3, [r4, #16]
y.v8[1]=eightbit;
 8007db8:	4b87      	ldr	r3, [pc, #540]	; (8007fd8 <Display_Init+0x2dc>)
 8007dba:	705a      	strb	r2, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8007dbc:	68ea      	ldr	r2, [r5, #12]
 8007dbe:	b2d2      	uxtb	r2, r2
 8007dc0:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 8007dc2:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8007dc6:	881a      	ldrh	r2, [r3, #0]
 8007dc8:	ea42 0209 	orr.w	r2, r2, r9
 8007dcc:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8007dce:	6922      	ldr	r2, [r4, #16]
 8007dd0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007dd4:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007dd6:	6922      	ldr	r2, [r4, #16]
 8007dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ddc:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x08000000;
 8007dde:	6922      	ldr	r2, [r4, #16]
 8007de0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007de4:	6122      	str	r2, [r4, #16]
 ivert_eightbit = ~(eightbit);
 8007de6:	f886 e000 	strb.w	lr, [r6]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007dea:	f8c5 c010 	str.w	ip, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007dee:	6128      	str	r0, [r5, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007df0:	f04f 4c9a 	mov.w	ip, #1291845632	; 0x4d000000
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007df4:	f44f 4032 	mov.w	r0, #45568	; 0xb200
GPIOA->BSRR |= 0x01000000;
 8007df8:	6922      	ldr	r2, [r4, #16]
 8007dfa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007dfe:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007e00:	6922      	ldr	r2, [r4, #16]
 8007e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e06:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8007e08:	6922      	ldr	r2, [r4, #16]
 8007e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e0e:	6122      	str	r2, [r4, #16]
y.v8[1]=eightbit;
 8007e10:	7059      	strb	r1, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8007e12:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 8007e14:	210c      	movs	r1, #12
GPIOB->ODR &=0x000000ff;
 8007e16:	b2d2      	uxtb	r2, r2
 8007e18:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 8007e1a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8007e1e:	881a      	ldrh	r2, [r3, #0]
 8007e20:	ea42 020e 	orr.w	r2, r2, lr
 8007e24:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8007e26:	6922      	ldr	r2, [r4, #16]
 8007e28:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007e2c:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007e2e:	6922      	ldr	r2, [r4, #16]
 8007e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e34:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x08000000;
 8007e36:	6922      	ldr	r2, [r4, #16]
 8007e38:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007e3c:	6122      	str	r2, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007e3e:	f8c5 c010 	str.w	ip, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007e42:	6128      	str	r0, [r5, #16]
GPIOA->BSRR |= 0x01000000;
 8007e44:	6922      	ldr	r2, [r4, #16]
 8007e46:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007e4a:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007e4c:	6922      	ldr	r2, [r4, #16]
 8007e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e52:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8007e54:	6922      	ldr	r2, [r4, #16]
 8007e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e5a:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8007e5c:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 8007e5e:	7059      	strb	r1, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8007e60:	b2d2      	uxtb	r2, r2
 8007e62:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 8007e64:	68ea      	ldr	r2, [r5, #12]
 8007e66:	f8b3 c000 	ldrh.w	ip, [r3]
 8007e6a:	ea42 020c 	orr.w	r2, r2, ip
 8007e6e:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8007e70:	6922      	ldr	r2, [r4, #16]
 8007e72:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007e76:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007e78:	6921      	ldr	r1, [r4, #16]
 8007e7a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007e7e:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8007e80:	6921      	ldr	r1, [r4, #16]
 8007e82:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007e86:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8007e88:	68e9      	ldr	r1, [r5, #12]
 8007e8a:	b2c9      	uxtb	r1, r1
 8007e8c:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 8007e8e:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 8007e90:	2133      	movs	r1, #51	; 0x33
GPIOB->ODR |=(y.v32);
 8007e92:	ea42 020c 	orr.w	r2, r2, ip
 8007e96:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8007e98:	6922      	ldr	r2, [r4, #16]
y.v8[1]=eightbit;
 8007e9a:	f04f 0c35 	mov.w	ip, #53	; 0x35
GPIOA->BSRR |= 0x01000000;
 8007e9e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007ea2:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007ea4:	6922      	ldr	r2, [r4, #16]
 8007ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eaa:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8007eac:	6922      	ldr	r2, [r4, #16]
 8007eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eb2:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8007eb4:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 8007eb6:	705f      	strb	r7, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8007eb8:	b2d2      	uxtb	r2, r2
 8007eba:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 8007ebc:	68e8      	ldr	r0, [r5, #12]
 8007ebe:	881a      	ldrh	r2, [r3, #0]
 8007ec0:	4302      	orrs	r2, r0
 8007ec2:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8007ec4:	6922      	ldr	r2, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
GPIOA->BSRR |= 0x01000000;
 8007eca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007ece:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007ed0:	6922      	ldr	r2, [r4, #16]
 8007ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ed6:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8007ed8:	6922      	ldr	r2, [r4, #16]
 8007eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ede:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8007ee0:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 8007ee2:	7059      	strb	r1, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8007ee4:	b2d2      	uxtb	r2, r2
 8007ee6:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 8007ee8:	68ea      	ldr	r2, [r5, #12]
 8007eea:	f8b3 e000 	ldrh.w	lr, [r3]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007eee:	f44f 4137 	mov.w	r1, #46848	; 0xb700
GPIOB->ODR |=(y.v32);
 8007ef2:	ea42 020e 	orr.w	r2, r2, lr
 8007ef6:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8007ef8:	6922      	ldr	r2, [r4, #16]
 8007efa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007efe:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007f00:	6922      	ldr	r2, [r4, #16]
 8007f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f06:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8007f08:	6922      	ldr	r2, [r4, #16]
 8007f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f0e:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8007f10:	68ea      	ldr	r2, [r5, #12]
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 8007f16:	68ea      	ldr	r2, [r5, #12]
 8007f18:	ea42 020e 	orr.w	r2, r2, lr
 8007f1c:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8007f1e:	6922      	ldr	r2, [r4, #16]
 8007f20:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007f24:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007f26:	6922      	ldr	r2, [r4, #16]
 8007f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f2c:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x08000000;
 8007f2e:	6922      	ldr	r2, [r4, #16]
 8007f30:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007f34:	6122      	str	r2, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007f36:	6128      	str	r0, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007f38:	6129      	str	r1, [r5, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007f3a:	f04f 4088 	mov.w	r0, #1140850688	; 0x44000000
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007f3e:	f44f 413b 	mov.w	r1, #47872	; 0xbb00
GPIOA->BSRR |= 0x01000000;
 8007f42:	6922      	ldr	r2, [r4, #16]
 8007f44:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007f48:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007f4a:	6922      	ldr	r2, [r4, #16]
 8007f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f50:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8007f52:	6922      	ldr	r2, [r4, #16]
 8007f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f58:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8007f5a:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 8007f5c:	f883 c001 	strb.w	ip, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8007f60:	b2d2      	uxtb	r2, r2
 8007f62:	60ea      	str	r2, [r5, #12]
y.v8[1]=eightbit;
 8007f64:	f04f 0c28 	mov.w	ip, #40	; 0x28
GPIOB->ODR |=(y.v32);
 8007f68:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8007f6c:	881a      	ldrh	r2, [r3, #0]
 8007f6e:	ea42 020e 	orr.w	r2, r2, lr
 8007f72:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8007f74:	6922      	ldr	r2, [r4, #16]
 8007f76:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007f7a:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007f7c:	6922      	ldr	r2, [r4, #16]
 8007f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f82:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x08000000;
 8007f84:	6922      	ldr	r2, [r4, #16]
 8007f86:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007f8a:	6122      	str	r2, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007f8c:	6128      	str	r0, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007f8e:	6129      	str	r1, [r5, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007f90:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007f94:	f44f 4140 	mov.w	r1, #49152	; 0xc000
GPIOA->BSRR |= 0x01000000;
 8007f98:	6922      	ldr	r2, [r4, #16]
 8007f9a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007f9e:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007fa0:	6922      	ldr	r2, [r4, #16]
 8007fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fa6:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8007fa8:	6922      	ldr	r2, [r4, #16]
 8007faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fae:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8007fb0:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 8007fb2:	f883 c001 	strb.w	ip, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	60ea      	str	r2, [r5, #12]
y.v8[1]=eightbit;
 8007fba:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
GPIOB->ODR |=(y.v32);
 8007fbe:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8007fc2:	881a      	ldrh	r2, [r3, #0]
 8007fc4:	e00a      	b.n	8007fdc <Display_Init+0x2e0>
 8007fc6:	bf00      	nop
 8007fc8:	40010800 	.word	0x40010800
 8007fcc:	40010c00 	.word	0x40010c00
 8007fd0:	200018bc 	.word	0x200018bc
 8007fd4:	20001850 	.word	0x20001850
 8007fd8:	20000014 	.word	0x20000014
 8007fdc:	ea42 020e 	orr.w	r2, r2, lr
 8007fe0:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8007fe2:	6922      	ldr	r2, [r4, #16]
 8007fe4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007fe8:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8007fea:	6922      	ldr	r2, [r4, #16]
 8007fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ff0:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x08000000;
 8007ff2:	6922      	ldr	r2, [r4, #16]
 8007ff4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007ff8:	6122      	str	r2, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007ffa:	6128      	str	r0, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8007ffc:	6129      	str	r1, [r5, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8007ffe:	f04f 5074 	mov.w	r0, #1023410176	; 0x3d000000
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008002:	f44f 4142 	mov.w	r1, #49664	; 0xc200
GPIOA->BSRR |= 0x01000000;
 8008006:	6922      	ldr	r2, [r4, #16]
 8008008:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800800c:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 800800e:	6922      	ldr	r2, [r4, #16]
 8008010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008014:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008016:	6922      	ldr	r2, [r4, #16]
 8008018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800801c:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 800801e:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 8008020:	f883 c001 	strb.w	ip, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008024:	b2d2      	uxtb	r2, r2
 8008026:	60ea      	str	r2, [r5, #12]
y.v8[1]=eightbit;
 8008028:	f04f 0c01 	mov.w	ip, #1
GPIOB->ODR |=(y.v32);
 800802c:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8008030:	881a      	ldrh	r2, [r3, #0]
 8008032:	ea42 020e 	orr.w	r2, r2, lr
 8008036:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008038:	6922      	ldr	r2, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 800803a:	f04f 5e70 	mov.w	lr, #1006632960	; 0x3c000000
GPIOA->BSRR |= 0x01000000;
 800803e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008042:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008044:	6922      	ldr	r2, [r4, #16]
 8008046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800804a:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x08000000;
 800804c:	6922      	ldr	r2, [r4, #16]
 800804e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8008052:	6122      	str	r2, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008054:	6128      	str	r0, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008056:	6129      	str	r1, [r5, #16]
GPIOA->BSRR |= 0x01000000;
 8008058:	6922      	ldr	r2, [r4, #16]
y.v8[1]=eightbit;
 800805a:	21ff      	movs	r1, #255	; 0xff
GPIOA->BSRR |= 0x01000000;
 800805c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008060:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008062:	6922      	ldr	r2, [r4, #16]
 8008064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008068:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 800806a:	6922      	ldr	r2, [r4, #16]
 800806c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008070:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8008072:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 8008074:	f883 c001 	strb.w	ip, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 800807c:	68e8      	ldr	r0, [r5, #12]
 800807e:	881a      	ldrh	r2, [r3, #0]
 8008080:	4302      	orrs	r2, r0
 8008082:	60ea      	str	r2, [r5, #12]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008084:	f44f 4043 	mov.w	r0, #49920	; 0xc300
GPIOA->BSRR |= 0x01000000;
 8008088:	6922      	ldr	r2, [r4, #16]
 800808a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800808e:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008090:	6922      	ldr	r2, [r4, #16]
 8008092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008096:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008098:	6922      	ldr	r2, [r4, #16]
 800809a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800809e:	6122      	str	r2, [r4, #16]
y.v8[1]=eightbit;
 80080a0:	7059      	strb	r1, [r3, #1]
GPIOB->ODR &=0x000000ff;
 80080a2:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 80080a4:	220b      	movs	r2, #11
GPIOB->ODR &=0x000000ff;
 80080a6:	b2c9      	uxtb	r1, r1
 80080a8:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 80080aa:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80080ae:	8819      	ldrh	r1, [r3, #0]
 80080b0:	ea41 0109 	orr.w	r1, r1, r9
 80080b4:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80080b6:	6921      	ldr	r1, [r4, #16]
 80080b8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80080bc:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80080be:	6921      	ldr	r1, [r4, #16]
 80080c0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80080c4:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x08000000;
 80080c6:	6921      	ldr	r1, [r4, #16]
 80080c8:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80080cc:	6121      	str	r1, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 80080ce:	f8c5 e010 	str.w	lr, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 80080d2:	6128      	str	r0, [r5, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 80080d4:	f04f 5e6c 	mov.w	lr, #989855744	; 0x3b000000
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 80080d8:	f44f 4044 	mov.w	r0, #50176	; 0xc400
GPIOA->BSRR |= 0x01000000;
 80080dc:	6921      	ldr	r1, [r4, #16]
 80080de:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80080e2:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80080e4:	6921      	ldr	r1, [r4, #16]
 80080e6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80080ea:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80080ec:	6921      	ldr	r1, [r4, #16]
 80080ee:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80080f2:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 80080f4:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 80080f6:	705a      	strb	r2, [r3, #1]
GPIOB->ODR &=0x000000ff;
 80080f8:	b2c9      	uxtb	r1, r1
 80080fa:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 80080fc:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8008100:	8819      	ldrh	r1, [r3, #0]
 8008102:	ea41 0109 	orr.w	r1, r1, r9
 8008106:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008108:	6921      	ldr	r1, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 800810a:	f04f 5964 	mov.w	r9, #956301312	; 0x39000000
GPIOA->BSRR |= 0x01000000;
 800810e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008112:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008114:	6921      	ldr	r1, [r4, #16]
 8008116:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800811a:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x08000000;
 800811c:	6921      	ldr	r1, [r4, #16]
 800811e:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8008122:	6121      	str	r1, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008124:	f8c5 e010 	str.w	lr, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008128:	6128      	str	r0, [r5, #16]
GPIOA->BSRR |= 0x01000000;
 800812a:	6921      	ldr	r1, [r4, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 800812c:	f44f 4e46 	mov.w	lr, #50688	; 0xc600
GPIOA->BSRR |= 0x01000000;
 8008130:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008134:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008136:	6921      	ldr	r1, [r4, #16]
y.v8[1]=eightbit;
 8008138:	200f      	movs	r0, #15
GPIOA->BSRR |= 0x00000100;
 800813a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800813e:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008140:	6921      	ldr	r1, [r4, #16]
 8008142:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008146:	6121      	str	r1, [r4, #16]
y.v8[1]=eightbit;
 8008148:	f04f 0120 	mov.w	r1, #32
 800814c:	7059      	strb	r1, [r3, #1]
GPIOB->ODR &=0x000000ff;
 800814e:	68e9      	ldr	r1, [r5, #12]
 8008150:	b2c9      	uxtb	r1, r1
 8008152:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008154:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008158:	8819      	ldrh	r1, [r3, #0]
 800815a:	ea41 010a 	orr.w	r1, r1, sl
 800815e:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008160:	6921      	ldr	r1, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008162:	f04f 5a3c 	mov.w	sl, #788529152	; 0x2f000000
GPIOA->BSRR |= 0x01000000;
 8008166:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800816a:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 800816c:	6921      	ldr	r1, [r4, #16]
 800816e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008172:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x08000000;
 8008174:	6921      	ldr	r1, [r4, #16]
 8008176:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800817a:	6121      	str	r1, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 800817c:	f8c5 9010 	str.w	r9, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008180:	f8c5 e010 	str.w	lr, [r5, #16]
 8008184:	f44f 4950 	mov.w	r9, #53248	; 0xd000
GPIOA->BSRR |= 0x01000000;
 8008188:	6921      	ldr	r1, [r4, #16]
y.v8[1]=eightbit;
 800818a:	f04f 0ea4 	mov.w	lr, #164	; 0xa4
GPIOA->BSRR |= 0x01000000;
 800818e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008192:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008194:	6921      	ldr	r1, [r4, #16]
 8008196:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800819a:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 800819c:	6921      	ldr	r1, [r4, #16]
 800819e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80081a2:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 80081a4:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 80081a6:	7058      	strb	r0, [r3, #1]
GPIOB->ODR &=0x000000ff;
 80081a8:	b2c9      	uxtb	r1, r1
 80081aa:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 80081ac:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 80081b0:	8819      	ldrh	r1, [r3, #0]
 80081b2:	ea41 010b 	orr.w	r1, r1, fp
 80081b6:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80081b8:	6921      	ldr	r1, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 80081ba:	f04f 5bf8 	mov.w	fp, #520093696	; 0x1f000000
GPIOA->BSRR |= 0x01000000;
 80081be:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80081c2:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80081c4:	6921      	ldr	r1, [r4, #16]
 80081c6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80081ca:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x08000000;
 80081cc:	6921      	ldr	r1, [r4, #16]
 80081ce:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80081d2:	6121      	str	r1, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 80081d4:	f8c5 a010 	str.w	sl, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 80081d8:	f8c5 9010 	str.w	r9, [r5, #16]
GPIOA->BSRR |= 0x01000000;
 80081dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
y.v8[1]=eightbit;
 80081e0:	21a1      	movs	r1, #161	; 0xa1
GPIOA->BSRR |= 0x01000000;
 80081e2:	f049 7980 	orr.w	r9, r9, #16777216	; 0x1000000
 80081e6:	f8c4 9010 	str.w	r9, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80081ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80081ee:	f449 7980 	orr.w	r9, r9, #256	; 0x100
 80081f2:	f8c4 9010 	str.w	r9, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80081f6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80081fa:	f449 6900 	orr.w	r9, r9, #2048	; 0x800
 80081fe:	f8c4 9010 	str.w	r9, [r4, #16]
y.v8[1]=eightbit;
 8008202:	f883 e001 	strb.w	lr, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008206:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800820a:	fa5f fe8e 	uxtb.w	lr, lr
 800820e:	f8c5 e00c 	str.w	lr, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008212:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8008216:	f8b3 e000 	ldrh.w	lr, [r3]
 800821a:	ea4e 0e09 	orr.w	lr, lr, r9
 800821e:	f8c5 e00c 	str.w	lr, [r5, #12]
 ivert_eightbit = ~(eightbit);
 8008222:	f04f 091f 	mov.w	r9, #31
GPIOA->BSRR |= 0x01000000;
 8008226:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800822a:	f04e 7e80 	orr.w	lr, lr, #16777216	; 0x1000000
 800822e:	f8c4 e010 	str.w	lr, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008232:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8008236:	f44e 7e80 	orr.w	lr, lr, #256	; 0x100
 800823a:	f8c4 e010 	str.w	lr, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 800823e:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8008242:	f44e 6e00 	orr.w	lr, lr, #2048	; 0x800
 8008246:	f8c4 e010 	str.w	lr, [r4, #16]
y.v8[1]=eightbit;
 800824a:	7059      	strb	r1, [r3, #1]
GPIOB->ODR &=0x000000ff;
 800824c:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 800824e:	f04f 0ed0 	mov.w	lr, #208	; 0xd0
GPIOB->ODR &=0x000000ff;
 8008252:	b2c9      	uxtb	r1, r1
 8008254:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008256:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800825a:	8819      	ldrh	r1, [r3, #0]
 800825c:	ea41 010a 	orr.w	r1, r1, sl
 8008260:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008262:	6921      	ldr	r1, [r4, #16]
 8008264:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008268:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 800826a:	6921      	ldr	r1, [r4, #16]
 800826c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008270:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x08000000;
 8008272:	6921      	ldr	r1, [r4, #16]
 8008274:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8008278:	6121      	str	r1, [r4, #16]
 ivert_eightbit = ~(eightbit);
 800827a:	f886 9000 	strb.w	r9, [r6]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 800827e:	f44f 4660 	mov.w	r6, #57344	; 0xe000
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008282:	f8c5 b010 	str.w	fp, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008286:	612e      	str	r6, [r5, #16]
GPIOA->BSRR |= 0x01000000;
 8008288:	6921      	ldr	r1, [r4, #16]
 800828a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800828e:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008290:	6921      	ldr	r1, [r4, #16]
 8008292:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008296:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008298:	6921      	ldr	r1, [r4, #16]
 800829a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800829e:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 80082a0:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 80082a2:	f883 e001 	strb.w	lr, [r3, #1]
GPIOB->ODR &=0x000000ff;
 80082a6:	b2c9      	uxtb	r1, r1
 80082a8:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 80082aa:	68ee      	ldr	r6, [r5, #12]
 80082ac:	8819      	ldrh	r1, [r3, #0]
 80082ae:	4331      	orrs	r1, r6
 80082b0:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80082b2:	6921      	ldr	r1, [r4, #16]
y.v8[1]=eightbit;
 80082b4:	2608      	movs	r6, #8
GPIOA->BSRR |= 0x01000000;
 80082b6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80082ba:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80082bc:	6921      	ldr	r1, [r4, #16]
 80082be:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80082c2:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80082c4:	6921      	ldr	r1, [r4, #16]
 80082c6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80082ca:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 80082cc:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 80082ce:	f883 c001 	strb.w	ip, [r3, #1]
GPIOB->ODR &=0x000000ff;
 80082d2:	b2c9      	uxtb	r1, r1
 80082d4:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 80082d6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80082da:	8819      	ldrh	r1, [r3, #0]
 80082dc:	ea41 010c 	orr.w	r1, r1, ip
 80082e0:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80082e2:	6921      	ldr	r1, [r4, #16]
 80082e4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80082e8:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80082ea:	6921      	ldr	r1, [r4, #16]
 80082ec:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80082f0:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80082f2:	6921      	ldr	r1, [r4, #16]
 80082f4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80082f8:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 80082fa:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 80082fc:	705e      	strb	r6, [r3, #1]
GPIOB->ODR &=0x000000ff;
 80082fe:	b2c9      	uxtb	r1, r1
 8008300:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008302:	68ee      	ldr	r6, [r5, #12]
 8008304:	8819      	ldrh	r1, [r3, #0]
 8008306:	4331      	orrs	r1, r6
 8008308:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 800830a:	6921      	ldr	r1, [r4, #16]
y.v8[1]=eightbit;
 800830c:	2611      	movs	r6, #17
GPIOA->BSRR |= 0x01000000;
 800830e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008312:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008314:	6921      	ldr	r1, [r4, #16]
 8008316:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800831a:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 800831c:	6921      	ldr	r1, [r4, #16]
 800831e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008322:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8008324:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 8008326:	7058      	strb	r0, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008328:	b2c9      	uxtb	r1, r1
 800832a:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 800832c:	68e8      	ldr	r0, [r5, #12]
 800832e:	8819      	ldrh	r1, [r3, #0]
 8008330:	4301      	orrs	r1, r0
 8008332:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008334:	6921      	ldr	r1, [r4, #16]
y.v8[1]=eightbit;
 8008336:	202a      	movs	r0, #42	; 0x2a
GPIOA->BSRR |= 0x01000000;
 8008338:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800833c:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 800833e:	6921      	ldr	r1, [r4, #16]
 8008340:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008344:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008346:	6921      	ldr	r1, [r4, #16]
 8008348:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800834c:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 800834e:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 8008350:	705e      	strb	r6, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008352:	b2c9      	uxtb	r1, r1
 8008354:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008356:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800835a:	8819      	ldrh	r1, [r3, #0]
 800835c:	ea41 010c 	orr.w	r1, r1, ip
 8008360:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008362:	6921      	ldr	r1, [r4, #16]
y.v8[1]=eightbit;
 8008364:	f04f 0c36 	mov.w	ip, #54	; 0x36
GPIOA->BSRR |= 0x01000000;
 8008368:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800836c:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 800836e:	6921      	ldr	r1, [r4, #16]
 8008370:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008374:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008376:	6921      	ldr	r1, [r4, #16]
 8008378:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800837c:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 800837e:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 8008380:	7058      	strb	r0, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008382:	b2c9      	uxtb	r1, r1
 8008384:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008386:	68e8      	ldr	r0, [r5, #12]
 8008388:	8819      	ldrh	r1, [r3, #0]
 800838a:	4301      	orrs	r1, r0
 800838c:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 800838e:	6921      	ldr	r1, [r4, #16]
y.v8[1]=eightbit;
 8008390:	2055      	movs	r0, #85	; 0x55
GPIOA->BSRR |= 0x01000000;
 8008392:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008396:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008398:	6921      	ldr	r1, [r4, #16]
 800839a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800839e:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80083a0:	6921      	ldr	r1, [r4, #16]
 80083a2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80083a6:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 80083a8:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 80083aa:	f883 c001 	strb.w	ip, [r3, #1]
GPIOB->ODR &=0x000000ff;
 80083ae:	b2c9      	uxtb	r1, r1
 80083b0:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 80083b2:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80083b6:	8819      	ldrh	r1, [r3, #0]
 80083b8:	ea41 010c 	orr.w	r1, r1, ip
 80083bc:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80083be:	6921      	ldr	r1, [r4, #16]
y.v8[1]=eightbit;
 80083c0:	f04f 0c44 	mov.w	ip, #68	; 0x44
GPIOA->BSRR |= 0x01000000;
 80083c4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80083c8:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80083ca:	6921      	ldr	r1, [r4, #16]
 80083cc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80083d0:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80083d2:	6921      	ldr	r1, [r4, #16]
 80083d4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80083d8:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 80083da:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 80083dc:	7058      	strb	r0, [r3, #1]
GPIOB->ODR &=0x000000ff;
 80083de:	b2c9      	uxtb	r1, r1
 80083e0:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 80083e2:	68e8      	ldr	r0, [r5, #12]
 80083e4:	8819      	ldrh	r1, [r3, #0]
 80083e6:	4301      	orrs	r1, r0
 80083e8:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80083ea:	6921      	ldr	r1, [r4, #16]
y.v8[1]=eightbit;
 80083ec:	203a      	movs	r0, #58	; 0x3a
GPIOA->BSRR |= 0x01000000;
 80083ee:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80083f2:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80083f4:	6921      	ldr	r1, [r4, #16]
 80083f6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80083fa:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80083fc:	6921      	ldr	r1, [r4, #16]
 80083fe:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008402:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8008404:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 8008406:	f883 c001 	strb.w	ip, [r3, #1]
GPIOB->ODR &=0x000000ff;
 800840a:	b2c9      	uxtb	r1, r1
 800840c:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 800840e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8008412:	8819      	ldrh	r1, [r3, #0]
 8008414:	ea41 010c 	orr.w	r1, r1, ip
 8008418:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 800841a:	6921      	ldr	r1, [r4, #16]
 800841c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008420:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008422:	6921      	ldr	r1, [r4, #16]
 8008424:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008428:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 800842a:	6921      	ldr	r1, [r4, #16]
 800842c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008430:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8008432:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 8008434:	7058      	strb	r0, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008436:	b2c9      	uxtb	r1, r1
 8008438:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 800843a:	68e8      	ldr	r0, [r5, #12]
 800843c:	8819      	ldrh	r1, [r3, #0]
 800843e:	4301      	orrs	r1, r0
 8008440:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008442:	6921      	ldr	r1, [r4, #16]
y.v8[1]=eightbit;
 8008444:	2006      	movs	r0, #6
GPIOA->BSRR |= 0x01000000;
 8008446:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800844a:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 800844c:	6921      	ldr	r1, [r4, #16]
 800844e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008452:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008454:	6921      	ldr	r1, [r4, #16]
 8008456:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800845a:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 800845c:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 800845e:	705a      	strb	r2, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008460:	b2c9      	uxtb	r1, r1
 8008462:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008464:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8008468:	8819      	ldrh	r1, [r3, #0]
 800846a:	ea41 010c 	orr.w	r1, r1, ip
 800846e:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008470:	6921      	ldr	r1, [r4, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008472:	f44f 5c24 	mov.w	ip, #10496	; 0x2900
GPIOA->BSRR |= 0x01000000;
 8008476:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800847a:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 800847c:	6921      	ldr	r1, [r4, #16]
 800847e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008482:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008484:	6921      	ldr	r1, [r4, #16]
 8008486:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800848a:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 800848c:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 800848e:	7058      	strb	r0, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008490:	b2c9      	uxtb	r1, r1
 8008492:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008494:	68e8      	ldr	r0, [r5, #12]
 8008496:	8819      	ldrh	r1, [r3, #0]
 8008498:	4301      	orrs	r1, r0
 800849a:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 800849c:	6921      	ldr	r1, [r4, #16]
 800849e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80084a2:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80084a4:	6921      	ldr	r1, [r4, #16]
 80084a6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80084aa:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80084ac:	6921      	ldr	r1, [r4, #16]
 80084ae:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80084b2:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 80084b4:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 80084b6:	705e      	strb	r6, [r3, #1]
GPIOB->ODR &=0x000000ff;
 80084b8:	b2c9      	uxtb	r1, r1
 80084ba:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 80084bc:	68e8      	ldr	r0, [r5, #12]
 80084be:	8819      	ldrh	r1, [r3, #0]
 80084c0:	4301      	orrs	r1, r0
 80084c2:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80084c4:	6921      	ldr	r1, [r4, #16]
y.v8[1]=eightbit;
 80084c6:	20e1      	movs	r0, #225	; 0xe1
GPIOA->BSRR |= 0x01000000;
 80084c8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80084cc:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80084ce:	6921      	ldr	r1, [r4, #16]
 80084d0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80084d4:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80084d6:	6921      	ldr	r1, [r4, #16]
 80084d8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80084dc:	6121      	str	r1, [r4, #16]
y.v8[1]=eightbit;
 80084de:	f04f 0120 	mov.w	r1, #32
 80084e2:	7059      	strb	r1, [r3, #1]
GPIOB->ODR &=0x000000ff;
 80084e4:	68e9      	ldr	r1, [r5, #12]
 80084e6:	b2c9      	uxtb	r1, r1
 80084e8:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 80084ea:	68ee      	ldr	r6, [r5, #12]
 80084ec:	8819      	ldrh	r1, [r3, #0]
 80084ee:	4331      	orrs	r1, r6
 80084f0:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80084f2:	6921      	ldr	r1, [r4, #16]
 80084f4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80084f8:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80084fa:	6921      	ldr	r1, [r4, #16]
 80084fc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008500:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008502:	6921      	ldr	r1, [r4, #16]
 8008504:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008508:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 800850a:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 800850c:	7058      	strb	r0, [r3, #1]
GPIOB->ODR &=0x000000ff;
 800850e:	b2c9      	uxtb	r1, r1
 8008510:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008512:	68e8      	ldr	r0, [r5, #12]
 8008514:	8819      	ldrh	r1, [r3, #0]
 8008516:	4301      	orrs	r1, r0
 8008518:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 800851a:	6921      	ldr	r1, [r4, #16]
y.v8[1]=eightbit;
 800851c:	2002      	movs	r0, #2
GPIOA->BSRR |= 0x01000000;
 800851e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008522:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008524:	6921      	ldr	r1, [r4, #16]
 8008526:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800852a:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 800852c:	6921      	ldr	r1, [r4, #16]
 800852e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008532:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8008534:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 8008536:	f883 e001 	strb.w	lr, [r3, #1]
GPIOB->ODR &=0x000000ff;
 800853a:	b2c9      	uxtb	r1, r1
 800853c:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 800853e:	68ee      	ldr	r6, [r5, #12]
 8008540:	8819      	ldrh	r1, [r3, #0]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008542:	f04f 4e56 	mov.w	lr, #3590324224	; 0xd6000000
GPIOB->ODR |=(y.v32);
 8008546:	4331      	orrs	r1, r6
 8008548:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 800854a:	6921      	ldr	r1, [r4, #16]
y.v8[1]=eightbit;
 800854c:	2607      	movs	r6, #7
GPIOA->BSRR |= 0x01000000;
 800854e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008552:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008554:	6921      	ldr	r1, [r4, #16]
 8008556:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800855a:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 800855c:	6921      	ldr	r1, [r4, #16]
 800855e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008562:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8008564:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 8008566:	7058      	strb	r0, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008568:	b2c9      	uxtb	r1, r1
 800856a:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 800856c:	68e8      	ldr	r0, [r5, #12]
 800856e:	8819      	ldrh	r1, [r3, #0]
 8008570:	4301      	orrs	r1, r0
 8008572:	60e9      	str	r1, [r5, #12]
y.v8[1]=eightbit;
 8008574:	200a      	movs	r0, #10
GPIOA->BSRR |= 0x01000000;
 8008576:	6921      	ldr	r1, [r4, #16]
 8008578:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800857c:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 800857e:	6921      	ldr	r1, [r4, #16]
 8008580:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008584:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008586:	6921      	ldr	r1, [r4, #16]
 8008588:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800858c:	6121      	str	r1, [r4, #16]
GPIOB->ODR &=0x000000ff;
 800858e:	68e9      	ldr	r1, [r5, #12]
y.v8[1]=eightbit;
 8008590:	705e      	strb	r6, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008592:	b2c9      	uxtb	r1, r1
 8008594:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008596:	68ee      	ldr	r6, [r5, #12]
 8008598:	8819      	ldrh	r1, [r3, #0]
 800859a:	4331      	orrs	r1, r6
 800859c:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 800859e:	6921      	ldr	r1, [r4, #16]
 ivert_eightbit = ~(eightbit);
 80085a0:	26d3      	movs	r6, #211	; 0xd3
GPIOA->BSRR |= 0x01000000;
 80085a2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80085a6:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80085a8:	6921      	ldr	r1, [r4, #16]
 80085aa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80085ae:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80085b0:	6921      	ldr	r1, [r4, #16]
 80085b2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80085b6:	6121      	str	r1, [r4, #16]
y.v8[1]=eightbit;
 80085b8:	7058      	strb	r0, [r3, #1]
GPIOB->ODR &=0x000000ff;
 80085ba:	68e9      	ldr	r1, [r5, #12]
 80085bc:	b2c9      	uxtb	r1, r1
 80085be:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 80085c0:	68e8      	ldr	r0, [r5, #12]
 80085c2:	8819      	ldrh	r1, [r3, #0]
 80085c4:	4301      	orrs	r1, r0
 80085c6:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80085c8:	6920      	ldr	r0, [r4, #16]
y.v8[1]=eightbit;
 80085ca:	2118      	movs	r1, #24
GPIOA->BSRR |= 0x01000000;
 80085cc:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 80085d0:	6120      	str	r0, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80085d2:	6920      	ldr	r0, [r4, #16]
 80085d4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80085d8:	6120      	str	r0, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80085da:	6920      	ldr	r0, [r4, #16]
 80085dc:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80085e0:	6120      	str	r0, [r4, #16]
y.v8[1]=eightbit;
 80085e2:	705a      	strb	r2, [r3, #1]
GPIOB->ODR &=0x000000ff;
 80085e4:	68ea      	ldr	r2, [r5, #12]
 80085e6:	b2d2      	uxtb	r2, r2
 80085e8:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 80085ea:	68e8      	ldr	r0, [r5, #12]
 80085ec:	881a      	ldrh	r2, [r3, #0]
 80085ee:	4302      	orrs	r2, r0
 80085f0:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80085f2:	6922      	ldr	r2, [r4, #16]
y.v8[1]=eightbit;
 80085f4:	2034      	movs	r0, #52	; 0x34
GPIOA->BSRR |= 0x01000000;
 80085f6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80085fa:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80085fc:	6922      	ldr	r2, [r4, #16]
 80085fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008602:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008604:	6922      	ldr	r2, [r4, #16]
 8008606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800860a:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 800860c:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 800860e:	7059      	strb	r1, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008610:	b2d2      	uxtb	r2, r2
 8008612:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008614:	68e9      	ldr	r1, [r5, #12]
 8008616:	881a      	ldrh	r2, [r3, #0]
 8008618:	430a      	orrs	r2, r1
 800861a:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 800861c:	6922      	ldr	r2, [r4, #16]
y.v8[1]=eightbit;
 800861e:	2143      	movs	r1, #67	; 0x43
GPIOA->BSRR |= 0x01000000;
 8008620:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008624:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008626:	6922      	ldr	r2, [r4, #16]
 8008628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800862c:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 800862e:	6922      	ldr	r2, [r4, #16]
 8008630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008634:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8008636:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 8008638:	7058      	strb	r0, [r3, #1]
GPIOB->ODR &=0x000000ff;
 800863a:	b2d2      	uxtb	r2, r2
 800863c:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 800863e:	68e8      	ldr	r0, [r5, #12]
 8008640:	881a      	ldrh	r2, [r3, #0]
 8008642:	4302      	orrs	r2, r0
 8008644:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008646:	6922      	ldr	r2, [r4, #16]
y.v8[1]=eightbit;
 8008648:	204a      	movs	r0, #74	; 0x4a
GPIOA->BSRR |= 0x01000000;
 800864a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800864e:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008650:	6922      	ldr	r2, [r4, #16]
 8008652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008656:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008658:	6922      	ldr	r2, [r4, #16]
 800865a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800865e:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8008660:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 8008662:	7059      	strb	r1, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008664:	b2d2      	uxtb	r2, r2
 8008666:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008668:	68e9      	ldr	r1, [r5, #12]
 800866a:	881a      	ldrh	r2, [r3, #0]
 800866c:	430a      	orrs	r2, r1
 800866e:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008670:	6922      	ldr	r2, [r4, #16]
y.v8[1]=eightbit;
 8008672:	212b      	movs	r1, #43	; 0x2b
GPIOA->BSRR |= 0x01000000;
 8008674:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008678:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 800867a:	6922      	ldr	r2, [r4, #16]
 800867c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008680:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008682:	6922      	ldr	r2, [r4, #16]
 8008684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008688:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 800868a:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 800868c:	7058      	strb	r0, [r3, #1]
GPIOB->ODR &=0x000000ff;
 800868e:	b2d2      	uxtb	r2, r2
 8008690:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008692:	68e8      	ldr	r0, [r5, #12]
 8008694:	881a      	ldrh	r2, [r3, #0]
 8008696:	4302      	orrs	r2, r0
 8008698:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 800869a:	6922      	ldr	r2, [r4, #16]
y.v8[1]=eightbit;
 800869c:	201b      	movs	r0, #27
GPIOA->BSRR |= 0x01000000;
 800869e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80086a2:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80086a4:	6922      	ldr	r2, [r4, #16]
 80086a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086aa:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80086ac:	6922      	ldr	r2, [r4, #16]
 80086ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086b2:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 80086b4:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 80086b6:	7059      	strb	r1, [r3, #1]
GPIOB->ODR &=0x000000ff;
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 80086bc:	68e9      	ldr	r1, [r5, #12]
 80086be:	881a      	ldrh	r2, [r3, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80086c4:	6922      	ldr	r2, [r4, #16]
y.v8[1]=eightbit;
 80086c6:	211c      	movs	r1, #28
GPIOA->BSRR |= 0x01000000;
 80086c8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80086cc:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80086ce:	6922      	ldr	r2, [r4, #16]
 80086d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086d4:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80086d6:	6922      	ldr	r2, [r4, #16]
 80086d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086dc:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 80086de:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 80086e0:	7058      	strb	r0, [r3, #1]
GPIOB->ODR &=0x000000ff;
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 80086e6:	68e8      	ldr	r0, [r5, #12]
 80086e8:	881a      	ldrh	r2, [r3, #0]
 80086ea:	4302      	orrs	r2, r0
 80086ec:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80086ee:	6922      	ldr	r2, [r4, #16]
y.v8[1]=eightbit;
 80086f0:	2022      	movs	r0, #34	; 0x22
GPIOA->BSRR |= 0x01000000;
 80086f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80086f6:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80086f8:	6922      	ldr	r2, [r4, #16]
 80086fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086fe:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008700:	6922      	ldr	r2, [r4, #16]
 8008702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008706:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8008708:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 800870a:	7059      	strb	r1, [r3, #1]
GPIOB->ODR &=0x000000ff;
 800870c:	b2d2      	uxtb	r2, r2
 800870e:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008710:	68e9      	ldr	r1, [r5, #12]
 8008712:	881a      	ldrh	r2, [r3, #0]
 8008714:	430a      	orrs	r2, r1
 8008716:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008718:	6922      	ldr	r2, [r4, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 800871a:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
GPIOA->BSRR |= 0x01000000;
 800871e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008722:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008724:	6922      	ldr	r2, [r4, #16]
 8008726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800872a:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 800872c:	6922      	ldr	r2, [r4, #16]
 800872e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008732:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8008734:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 8008736:	7058      	strb	r0, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008738:	b2d2      	uxtb	r2, r2
 800873a:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 800873c:	68e8      	ldr	r0, [r5, #12]
 800873e:	881a      	ldrh	r2, [r3, #0]
 8008740:	4302      	orrs	r2, r0
 8008742:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008744:	6922      	ldr	r2, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008746:	f04f 4053 	mov.w	r0, #3539992576	; 0xd3000000
GPIOA->BSRR |= 0x01000000;
 800874a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800874e:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008750:	6922      	ldr	r2, [r4, #16]
 8008752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008756:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008758:	6922      	ldr	r2, [r4, #16]
 800875a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800875e:	6122      	str	r2, [r4, #16]
GPIOB->ODR &=0x000000ff;
 8008760:	68ea      	ldr	r2, [r5, #12]
y.v8[1]=eightbit;
 8008762:	f883 9001 	strb.w	r9, [r3, #1]
GPIOB->ODR &=0x000000ff;
 8008766:	b2d2      	uxtb	r2, r2
 8008768:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 800876a:	68ea      	ldr	r2, [r5, #12]
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	4313      	orrs	r3, r2
 8008770:	60eb      	str	r3, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008772:	6923      	ldr	r3, [r4, #16]
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8008774:	2201      	movs	r2, #1
GPIOA->BSRR |= 0x01000000;
 8008776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800877a:	6123      	str	r3, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 800877c:	6923      	ldr	r3, [r4, #16]
 800877e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008782:	6123      	str	r3, [r4, #16]
GPIOA->BSRR |= 0x08000000;
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800878a:	6123      	str	r3, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 800878c:	f8c5 e010 	str.w	lr, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008790:	f8c5 c010 	str.w	ip, [r5, #16]
GPIOA->BSRR |= 0x01000000;
 8008794:	6923      	ldr	r3, [r4, #16]
 8008796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800879a:	6123      	str	r3, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087a2:	6123      	str	r3, [r4, #16]
GPIOA->BSRR |= 0x08000000;
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087aa:	6123      	str	r3, [r4, #16]
 ivert_eightbit = ~(eightbit);
 80087ac:	4b13      	ldr	r3, [pc, #76]	; (80087fc <Display_Init+0xb00>)
 80087ae:	701e      	strb	r6, [r3, #0]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 80087b0:	6128      	str	r0, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 80087b2:	6129      	str	r1, [r5, #16]
GPIOA->BSRR |= 0x01000000;
 80087b4:	6923      	ldr	r3, [r4, #16]
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80087b6:	4628      	mov	r0, r5
GPIOA->BSRR |= 0x01000000;
 80087b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087bc:	6123      	str	r3, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80087be:	6923      	ldr	r3, [r4, #16]
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80087c0:	4611      	mov	r1, r2
GPIOA->BSRR |= 0x00000100;
 80087c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087c6:	6123      	str	r3, [r4, #16]
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80087c8:	f7fc f942 	bl	8004a50 <HAL_GPIO_WritePin>
    UG_Init(&guiST7735, Display_PSet, DISPLAY_WIDTH, DISPLAY_HEIGHT);
 80087cc:	23f0      	movs	r3, #240	; 0xf0
 80087ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80087d2:	4640      	mov	r0, r8
 80087d4:	490a      	ldr	r1, [pc, #40]	; (8008800 <Display_Init+0xb04>)
 80087d6:	f7fe f813 	bl	8006800 <UG_Init>
    // Register accelerators.
    UG_DriverRegister(DRIVER_FILL_FRAME, (void*)HW_FillFrame);
 80087da:	2001      	movs	r0, #1
 80087dc:	4909      	ldr	r1, [pc, #36]	; (8008804 <Display_Init+0xb08>)
    guiST7735.desktop_color= C_BLACK;
 80087de:	f8a8 7046 	strh.w	r7, [r8, #70]	; 0x46
    UG_DriverRegister(DRIVER_FILL_FRAME, (void*)HW_FillFrame);
 80087e2:	f7fe fddb 	bl	800739c <UG_DriverRegister>
    UG_DriverRegister(DRIVER_DRAW_LINE, (void*)HW_DrawLine);
 80087e6:	4638      	mov	r0, r7
 80087e8:	4907      	ldr	r1, [pc, #28]	; (8008808 <Display_Init+0xb0c>)
 80087ea:	f7fe fdd7 	bl	800739c <UG_DriverRegister>
    UG_DriverRegister(DRIVER_DRAW_IMAGE, (void*)HW_DrawImage);
}
 80087ee:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UG_DriverRegister(DRIVER_DRAW_IMAGE, (void*)HW_DrawImage);
 80087f2:	2003      	movs	r0, #3
 80087f4:	4905      	ldr	r1, [pc, #20]	; (800880c <Display_Init+0xb10>)
 80087f6:	f7fe bdd1 	b.w	800739c <UG_DriverRegister>
 80087fa:	bf00      	nop
 80087fc:	200018bc 	.word	0x200018bc
 8008800:	080089f5 	.word	0x080089f5
 8008804:	08008ab5 	.word	0x08008ab5
 8008808:	08008bb9 	.word	0x08008bb9
 800880c:	08008c05 	.word	0x08008c05

08008810 <Display_WindowSet>:

void Display_WindowSet(unsigned int s_x,unsigned int e_x,unsigned int s_y,unsigned int e_y)
{
 8008810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008814:	f04f 4755 	mov.w	r7, #3573547008	; 0xd5000000
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008818:	f44f 5628 	mov.w	r6, #10752	; 0x2a00
GPIOA->BSRR |= 0x08000000;
 800881c:	4c71      	ldr	r4, [pc, #452]	; (80089e4 <Display_WindowSet+0x1d4>)
    uint8_t data[4];

    data[0] = ((s_x)>>8);                   //SET start column address
 800881e:	ea4f 2910 	mov.w	r9, r0, lsr #8
GPIOA->BSRR |= 0x08000000;
 8008822:	6925      	ldr	r5, [r4, #16]
 ivert_eightbit = ~(eightbit);
 8008824:	f04f 08d4 	mov.w	r8, #212	; 0xd4
GPIOA->BSRR |= 0x08000000;
 8008828:	f045 6500 	orr.w	r5, r5, #134217728	; 0x8000000
 800882c:	6125      	str	r5, [r4, #16]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 800882e:	4d6e      	ldr	r5, [pc, #440]	; (80089e8 <Display_WindowSet+0x1d8>)
 8008830:	f04f 4c54 	mov.w	ip, #3556769792	; 0xd4000000
 8008834:	612f      	str	r7, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008836:	612e      	str	r6, [r5, #16]
GPIOA->BSRR |= 0x01000000;
 8008838:	6926      	ldr	r6, [r4, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 800883a:	f44f 572c 	mov.w	r7, #11008	; 0x2b00
GPIOA->BSRR |= 0x01000000;
 800883e:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 8008842:	6126      	str	r6, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008844:	6926      	ldr	r6, [r4, #16]
 ivert_eightbit = ~(eightbit);
 8008846:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80089ec <Display_WindowSet+0x1dc>
GPIOA->BSRR |= 0x00000100;
 800884a:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 800884e:	6126      	str	r6, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008850:	6926      	ldr	r6, [r4, #16]
 8008852:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
 8008856:	6126      	str	r6, [r4, #16]
y.v8[1]=eightbit;
 8008858:	4e65      	ldr	r6, [pc, #404]	; (80089f0 <Display_WindowSet+0x1e0>)
    data[0] = ((s_x)>>8);                   //SET start column address
 800885a:	f886 9001 	strb.w	r9, [r6, #1]
GPIOB->ODR &=0x000000ff;
 800885e:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8008862:	fa5f f989 	uxtb.w	r9, r9
 8008866:	f8c5 900c 	str.w	r9, [r5, #12]
GPIOB->ODR |=(y.v32);
 800886a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800886e:	f8b6 9000 	ldrh.w	r9, [r6]
 8008872:	ea49 090a 	orr.w	r9, r9, sl
 8008876:	f8c5 900c 	str.w	r9, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 800887a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800887e:	f049 7980 	orr.w	r9, r9, #16777216	; 0x1000000
 8008882:	f8c4 9010 	str.w	r9, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008886:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800888a:	f449 7980 	orr.w	r9, r9, #256	; 0x100
 800888e:	f8c4 9010 	str.w	r9, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008892:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008896:	f449 6900 	orr.w	r9, r9, #2048	; 0x800
 800889a:	f8c4 9010 	str.w	r9, [r4, #16]
    data[1] = (s_x);
 800889e:	7070      	strb	r0, [r6, #1]
GPIOB->ODR &=0x000000ff;
 80088a0:	68e8      	ldr	r0, [r5, #12]
 80088a2:	b2c0      	uxtb	r0, r0
 80088a4:	60e8      	str	r0, [r5, #12]
GPIOB->ODR |=(y.v32);
 80088a6:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80088aa:	8830      	ldrh	r0, [r6, #0]
 80088ac:	ea40 0009 	orr.w	r0, r0, r9
 80088b0:	60e8      	str	r0, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80088b2:	6920      	ldr	r0, [r4, #16]
 80088b4:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 80088b8:	6120      	str	r0, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80088ba:	6920      	ldr	r0, [r4, #16]
 80088bc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80088c0:	6120      	str	r0, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80088c2:	6920      	ldr	r0, [r4, #16]
 80088c4:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80088c8:	6120      	str	r0, [r4, #16]
    data[2] = ((e_x)>>8);			        //SET end column address
 80088ca:	0a08      	lsrs	r0, r1, #8
 80088cc:	7070      	strb	r0, [r6, #1]
GPIOB->ODR &=0x000000ff;
 80088ce:	68e8      	ldr	r0, [r5, #12]
 80088d0:	b2c0      	uxtb	r0, r0
 80088d2:	60e8      	str	r0, [r5, #12]
GPIOB->ODR |=(y.v32);
 80088d4:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80088d8:	8830      	ldrh	r0, [r6, #0]
 80088da:	ea40 0009 	orr.w	r0, r0, r9
 80088de:	60e8      	str	r0, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80088e0:	6920      	ldr	r0, [r4, #16]
 80088e2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 80088e6:	6120      	str	r0, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80088e8:	6920      	ldr	r0, [r4, #16]
 80088ea:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80088ee:	6120      	str	r0, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80088f0:	6920      	ldr	r0, [r4, #16]
 80088f2:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80088f6:	6120      	str	r0, [r4, #16]
    data[3] = (e_x);
 80088f8:	7071      	strb	r1, [r6, #1]
GPIOB->ODR &=0x000000ff;
 80088fa:	68e9      	ldr	r1, [r5, #12]
 80088fc:	b2c9      	uxtb	r1, r1
 80088fe:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008900:	68e8      	ldr	r0, [r5, #12]
 8008902:	8831      	ldrh	r1, [r6, #0]
 8008904:	4301      	orrs	r1, r0
 8008906:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008908:	6921      	ldr	r1, [r4, #16]
 800890a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800890e:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008910:	6921      	ldr	r1, [r4, #16]
 8008912:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008916:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x08000000;
 8008918:	6921      	ldr	r1, [r4, #16]
 800891a:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800891e:	6121      	str	r1, [r4, #16]
 ivert_eightbit = ~(eightbit);
 8008920:	f88e 8000 	strb.w	r8, [lr]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008924:	f8c5 c010 	str.w	ip, [r5, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008928:	612f      	str	r7, [r5, #16]
GPIOA->BSRR |= 0x01000000;
 800892a:	6921      	ldr	r1, [r4, #16]
 800892c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008930:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008932:	6921      	ldr	r1, [r4, #16]
 8008934:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008938:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 800893a:	6921      	ldr	r1, [r4, #16]
 800893c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008940:	6121      	str	r1, [r4, #16]
	Display_WriteCommand(0x2a);		        //SET column address
//	printf ("data: %X, %X, %X, %X\n",data[0],data[1],data[2],data[3]);
    Display_WriteMultiData(data, 4);


    data[0] = ((s_y)>>8);                   //SET start row address
 8008942:	0a11      	lsrs	r1, r2, #8
 8008944:	7071      	strb	r1, [r6, #1]
GPIOB->ODR &=0x000000ff;
 8008946:	68e9      	ldr	r1, [r5, #12]
 8008948:	b2c9      	uxtb	r1, r1
 800894a:	60e9      	str	r1, [r5, #12]
GPIOB->ODR |=(y.v32);
 800894c:	68e8      	ldr	r0, [r5, #12]
 800894e:	8831      	ldrh	r1, [r6, #0]
 8008950:	4301      	orrs	r1, r0
 8008952:	60e9      	str	r1, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 8008954:	6921      	ldr	r1, [r4, #16]
 8008956:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800895a:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 800895c:	6921      	ldr	r1, [r4, #16]
 800895e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008962:	6121      	str	r1, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 8008964:	6921      	ldr	r1, [r4, #16]
 8008966:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800896a:	6121      	str	r1, [r4, #16]
    data[1] = (s_y);
 800896c:	7072      	strb	r2, [r6, #1]
GPIOB->ODR &=0x000000ff;
 800896e:	68ea      	ldr	r2, [r5, #12]
 8008970:	b2d2      	uxtb	r2, r2
 8008972:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 8008974:	68e9      	ldr	r1, [r5, #12]
 8008976:	8832      	ldrh	r2, [r6, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 800897c:	6922      	ldr	r2, [r4, #16]
 800897e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008982:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 8008984:	6922      	ldr	r2, [r4, #16]
 8008986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800898a:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 800898c:	6922      	ldr	r2, [r4, #16]
 800898e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008992:	6122      	str	r2, [r4, #16]
    data[2] = ((e_y)>>8);			        //SET end row address
 8008994:	0a1a      	lsrs	r2, r3, #8
 8008996:	7072      	strb	r2, [r6, #1]
GPIOB->ODR &=0x000000ff;
 8008998:	68ea      	ldr	r2, [r5, #12]
 800899a:	b2d2      	uxtb	r2, r2
 800899c:	60ea      	str	r2, [r5, #12]
GPIOB->ODR |=(y.v32);
 800899e:	68e9      	ldr	r1, [r5, #12]
 80089a0:	8832      	ldrh	r2, [r6, #0]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	60ea      	str	r2, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80089a6:	6922      	ldr	r2, [r4, #16]
 80089a8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80089ac:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80089ae:	6922      	ldr	r2, [r4, #16]
 80089b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089b4:	6122      	str	r2, [r4, #16]
GPIOA->BSRR |= 0x00000800;
 80089b6:	6922      	ldr	r2, [r4, #16]
 80089b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089bc:	6122      	str	r2, [r4, #16]
    data[3] = (e_y);
 80089be:	7073      	strb	r3, [r6, #1]
GPIOB->ODR &=0x000000ff;
 80089c0:	68eb      	ldr	r3, [r5, #12]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	60eb      	str	r3, [r5, #12]
GPIOB->ODR |=(y.v32);
 80089c6:	68ea      	ldr	r2, [r5, #12]
 80089c8:	8833      	ldrh	r3, [r6, #0]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60eb      	str	r3, [r5, #12]
GPIOA->BSRR |= 0x01000000;
 80089ce:	6923      	ldr	r3, [r4, #16]
 80089d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089d4:	6123      	str	r3, [r4, #16]
GPIOA->BSRR |= 0x00000100;
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089dc:	6123      	str	r3, [r4, #16]
	Display_WriteCommand(0x2b);		        //SET row address
    Display_WriteMultiData(data, 4);
}
 80089de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e2:	bf00      	nop
 80089e4:	40010800 	.word	0x40010800
 80089e8:	40010c00 	.word	0x40010c00
 80089ec:	200018bc 	.word	0x200018bc
 80089f0:	20000014 	.word	0x20000014

080089f4 <Display_PSet>:

void Display_PSet(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 80089f4:	b538      	push	{r3, r4, r5, lr}
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 80089f6:	b283      	uxth	r3, r0
 80089f8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80089fc:	d202      	bcs.n	8008a04 <Display_PSet+0x10>
 80089fe:	b28b      	uxth	r3, r1
 8008a00:	2bef      	cmp	r3, #239	; 0xef
 8008a02:	d900      	bls.n	8008a06 <Display_PSet+0x12>
            Display_WriteMultiData(data, 2);

#endif


}
 8008a04:	bd38      	pop	{r3, r4, r5, pc}
    Display_WindowSet(x, x + 1, y, y + 1);
 8008a06:	f100 0c01 	add.w	ip, r0, #1
 8008a0a:	1c4b      	adds	r3, r1, #1
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	b21b      	sxth	r3, r3
 8008a10:	460a      	mov	r2, r1
 8008a12:	fa0f f18c 	sxth.w	r1, ip
 8008a16:	f7ff fefb 	bl	8008810 <Display_WindowSet>
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008a1a:	f04f 4553 	mov.w	r5, #3539992576	; 0xd3000000
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008a1e:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 ivert_eightbit = ~(eightbit);
 8008a22:	f04f 0cd3 	mov.w	ip, #211	; 0xd3
GPIOA->BSRR |= 0x08000000;
 8008a26:	4b1f      	ldr	r3, [pc, #124]	; (8008aa4 <Display_PSet+0xb0>)
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008a28:	491f      	ldr	r1, [pc, #124]	; (8008aa8 <Display_PSet+0xb4>)
GPIOA->BSRR |= 0x08000000;
 8008a2a:	691a      	ldr	r2, [r3, #16]
 8008a2c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8008a30:	611a      	str	r2, [r3, #16]
 ivert_eightbit = ~(eightbit);
 8008a32:	4a1e      	ldr	r2, [pc, #120]	; (8008aac <Display_PSet+0xb8>)
 8008a34:	f882 c000 	strb.w	ip, [r2]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008a38:	610d      	str	r5, [r1, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008a3a:	6108      	str	r0, [r1, #16]
GPIOA->BSRR |= 0x01000000;
 8008a3c:	6918      	ldr	r0, [r3, #16]
y.v8[1]=eightbit;
 8008a3e:	4a1c      	ldr	r2, [pc, #112]	; (8008ab0 <Display_PSet+0xbc>)
GPIOA->BSRR |= 0x01000000;
 8008a40:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8008a44:	6118      	str	r0, [r3, #16]
GPIOA->BSRR |= 0x00000100;
 8008a46:	6918      	ldr	r0, [r3, #16]
 8008a48:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8008a4c:	6118      	str	r0, [r3, #16]
GPIOA->BSRR |= 0x00000800;
 8008a4e:	6918      	ldr	r0, [r3, #16]
 8008a50:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8008a54:	6118      	str	r0, [r3, #16]
            data[0] = (c >> 8);
 8008a56:	0a20      	lsrs	r0, r4, #8
 8008a58:	7050      	strb	r0, [r2, #1]
GPIOB->ODR &=0x000000ff;
 8008a5a:	68c8      	ldr	r0, [r1, #12]
 8008a5c:	b2c0      	uxtb	r0, r0
 8008a5e:	60c8      	str	r0, [r1, #12]
GPIOB->ODR |=(y.v32);
 8008a60:	68cd      	ldr	r5, [r1, #12]
 8008a62:	8810      	ldrh	r0, [r2, #0]
 8008a64:	4328      	orrs	r0, r5
 8008a66:	60c8      	str	r0, [r1, #12]
GPIOA->BSRR |= 0x01000000;
 8008a68:	6918      	ldr	r0, [r3, #16]
 8008a6a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8008a6e:	6118      	str	r0, [r3, #16]
GPIOA->BSRR |= 0x00000100;
 8008a70:	6918      	ldr	r0, [r3, #16]
 8008a72:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8008a76:	6118      	str	r0, [r3, #16]
GPIOA->BSRR |= 0x00000800;
 8008a78:	6918      	ldr	r0, [r3, #16]
 8008a7a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8008a7e:	6118      	str	r0, [r3, #16]
GPIOB->ODR &=0x000000ff;
 8008a80:	68c8      	ldr	r0, [r1, #12]
            data[1] = (c);
 8008a82:	7054      	strb	r4, [r2, #1]
GPIOB->ODR &=0x000000ff;
 8008a84:	b2c0      	uxtb	r0, r0
 8008a86:	60c8      	str	r0, [r1, #12]
GPIOB->ODR |=(y.v32);
 8008a88:	68c8      	ldr	r0, [r1, #12]
 8008a8a:	8812      	ldrh	r2, [r2, #0]
 8008a8c:	4302      	orrs	r2, r0
 8008a8e:	60ca      	str	r2, [r1, #12]
GPIOA->BSRR |= 0x01000000;
 8008a90:	691a      	ldr	r2, [r3, #16]
 8008a92:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008a96:	611a      	str	r2, [r3, #16]
GPIOA->BSRR |= 0x00000100;
 8008a98:	691a      	ldr	r2, [r3, #16]
 8008a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a9e:	611a      	str	r2, [r3, #16]
}
 8008aa0:	bd38      	pop	{r3, r4, r5, pc}
 8008aa2:	bf00      	nop
 8008aa4:	40010800 	.word	0x40010800
 8008aa8:	40010c00 	.word	0x40010c00
 8008aac:	200018bc 	.word	0x200018bc
 8008ab0:	20000014 	.word	0x20000014

08008ab4 <HW_FillFrame>:

UG_RESULT HW_FillFrame(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 8008ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab8:	4614      	mov	r4, r2
   // uint16_t loopx, loopy;


    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008aba:	b282      	uxth	r2, r0
 8008abc:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
{
 8008ac0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008ac4:	d26b      	bcs.n	8008b9e <HW_FillFrame+0xea>
 8008ac6:	b28a      	uxth	r2, r1
 8008ac8:	2aef      	cmp	r2, #239	; 0xef
 8008aca:	460d      	mov	r5, r1
 8008acc:	d867      	bhi.n	8008b9e <HW_FillFrame+0xea>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008ace:	b2a2      	uxth	r2, r4
 8008ad0:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
 8008ad4:	d263      	bcs.n	8008b9e <HW_FillFrame+0xea>
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	2aef      	cmp	r2, #239	; 0xef
 8008ada:	4698      	mov	r8, r3
 8008adc:	d85f      	bhi.n	8008b9e <HW_FillFrame+0xea>
    Display_WindowSet(x1,x2,y1,y2);
 8008ade:	4607      	mov	r7, r0
 8008ae0:	460a      	mov	r2, r1
 8008ae2:	4621      	mov	r1, r4
    Display_WriteCommand(0x2c);
    uint32_t  do_loop = (x1-(x2+1))*(y1-(y2+1));
 8008ae4:	3401      	adds	r4, #1
 8008ae6:	b224      	sxth	r4, r4
    Display_WindowSet(x1,x2,y1,y2);
 8008ae8:	f7ff fe92 	bl	8008810 <Display_WindowSet>
    uint32_t  do_loop = (x1-(x2+1))*(y1-(y2+1));
 8008aec:	1b38      	subs	r0, r7, r4

    //#ifdef USE_COLOR_RGB565 // 16-bit colour 5*Red-6*Green-5*Blue
       lower.v8[1]= (c >> 8);
       lower.v8[3] = ~(lower.v8[1]);
       upper.v8[1]= (c);
 8008aee:	b2f7      	uxtb	r7, r6
       upper.v8[3]= ~(upper.v8[1]);
 8008af0:	ea6f 0a07 	mvn.w	sl, r7
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008af4:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
    uint32_t  do_loop = (x1-(x2+1))*(y1-(y2+1));
 8008af8:	f108 0301 	add.w	r3, r8, #1
 ivert_eightbit = ~(eightbit);
 8008afc:	f04f 09d3 	mov.w	r9, #211	; 0xd3
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008b00:	f04f 4853 	mov.w	r8, #3539992576	; 0xd3000000
       lower.v8[1]= (c >> 8);
 8008b04:	0a31      	lsrs	r1, r6, #8
    uint32_t  do_loop = (x1-(x2+1))*(y1-(y2+1));
 8008b06:	b21b      	sxth	r3, r3
 8008b08:	1aeb      	subs	r3, r5, r3
       lower.v8[3] = ~(lower.v8[1]);
 8008b0a:	43cd      	mvns	r5, r1
    uint32_t  do_loop = (x1-(x2+1))*(y1-(y2+1));
 8008b0c:	fb03 f000 	mul.w	r0, r3, r0
GPIOA->BSRR |= 0x08000000;
 8008b10:	4b24      	ldr	r3, [pc, #144]	; (8008ba4 <HW_FillFrame+0xf0>)
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008b12:	4a25      	ldr	r2, [pc, #148]	; (8008ba8 <HW_FillFrame+0xf4>)
GPIOA->BSRR |= 0x08000000;
 8008b14:	691c      	ldr	r4, [r3, #16]
       lower.v8[1]= (c >> 8);
 8008b16:	f8df e094 	ldr.w	lr, [pc, #148]	; 8008bac <HW_FillFrame+0xf8>
GPIOA->BSRR |= 0x08000000;
 8008b1a:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8008b1e:	611c      	str	r4, [r3, #16]
       upper.v8[3]= ~(upper.v8[1]);
 8008b20:	fa5f f48a 	uxtb.w	r4, sl
 ivert_eightbit = ~(eightbit);
 8008b24:	f8df a088 	ldr.w	sl, [pc, #136]	; 8008bb0 <HW_FillFrame+0xfc>
       lower.v8[3] = ~(lower.v8[1]);
 8008b28:	b2ed      	uxtb	r5, r5
 ivert_eightbit = ~(eightbit);
 8008b2a:	f88a 9000 	strb.w	r9, [sl]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008b2e:	f8c2 8010 	str.w	r8, [r2, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008b32:	f8c2 c010 	str.w	ip, [r2, #16]
GPIOA->BSRR |= 0x01000000;
 8008b36:	f8d3 c010 	ldr.w	ip, [r3, #16]
       GPIOA->BSRR |= 0x00000800;
       do{
    //	GPIOB->ODR &=0x000000ff;
    //	GPIOB->ODR |=(y.v32);
    	   GPIOB->BSRR = lower.v8[3]<<24;
    	   GPIOB->BSRR = lower.v8[1]<<8;
 8008b3a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
GPIOA->BSRR |= 0x01000000;
 8008b3e:	f04c 7c80 	orr.w	ip, ip, #16777216	; 0x1000000
 8008b42:	f8c3 c010 	str.w	ip, [r3, #16]
GPIOA->BSRR |= 0x00000100;
 8008b46:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8008b4a:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8008b4e:	f8c3 c010 	str.w	ip, [r3, #16]
       lower.v8[1]= (c >> 8);
 8008b52:	f88e 1001 	strb.w	r1, [lr, #1]
       upper.v8[1]= (c);
 8008b56:	4917      	ldr	r1, [pc, #92]	; (8008bb4 <HW_FillFrame+0x100>)
       lower.v8[3] = ~(lower.v8[1]);
 8008b58:	f88e 5003 	strb.w	r5, [lr, #3]
       upper.v8[1]= (c);
 8008b5c:	704f      	strb	r7, [r1, #1]
       upper.v8[3]= ~(upper.v8[1]);
 8008b5e:	70cc      	strb	r4, [r1, #3]
       GPIOA->BSRR |= 0x00000800;
 8008b60:	6919      	ldr	r1, [r3, #16]
    	   GPIOB->BSRR = lower.v8[3]<<24;
 8008b62:	062d      	lsls	r5, r5, #24
       GPIOA->BSRR |= 0x00000800;
 8008b64:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    	GPIOA->BSRR |= 0x01000000;
    	GPIOA->BSRR |= 0x00000100;
//    	GPIOB->ODR &=0x000000ff;
//    	GPIOB->ODR |=(x.v32);
    	GPIOB->BSRR = upper.v8[3]<<24;
 8008b68:	0624      	lsls	r4, r4, #24
    	GPIOB->BSRR = upper.v8[1]<<8;
 8008b6a:	023f      	lsls	r7, r7, #8
       GPIOA->BSRR |= 0x00000800;
 8008b6c:	6119      	str	r1, [r3, #16]
    	   GPIOB->BSRR = lower.v8[3]<<24;
 8008b6e:	6115      	str	r5, [r2, #16]
    	   GPIOB->BSRR = lower.v8[1]<<8;
 8008b70:	6116      	str	r6, [r2, #16]
    	GPIOA->BSRR |= 0x01000000;
 8008b72:	6919      	ldr	r1, [r3, #16]
        GPIOA->BSRR |= 0x01000000;
        GPIOA->BSRR |= 0x00000100;
       }while(--(do_loop)!=0);
 8008b74:	3801      	subs	r0, #1
    	GPIOA->BSRR |= 0x01000000;
 8008b76:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008b7a:	6119      	str	r1, [r3, #16]
    	GPIOA->BSRR |= 0x00000100;
 8008b7c:	6919      	ldr	r1, [r3, #16]
 8008b7e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008b82:	6119      	str	r1, [r3, #16]
    	GPIOB->BSRR = upper.v8[3]<<24;
 8008b84:	6114      	str	r4, [r2, #16]
    	GPIOB->BSRR = upper.v8[1]<<8;
 8008b86:	6117      	str	r7, [r2, #16]
        GPIOA->BSRR |= 0x01000000;
 8008b88:	6919      	ldr	r1, [r3, #16]
 8008b8a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008b8e:	6119      	str	r1, [r3, #16]
        GPIOA->BSRR |= 0x00000100;
 8008b90:	6919      	ldr	r1, [r3, #16]
 8008b92:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008b96:	6119      	str	r1, [r3, #16]
       }while(--(do_loop)!=0);
 8008b98:	d1e9      	bne.n	8008b6e <HW_FillFrame+0xba>

    return UG_RESULT_OK;
}
 8008b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ba2:	e7fa      	b.n	8008b9a <HW_FillFrame+0xe6>
 8008ba4:	40010800 	.word	0x40010800
 8008ba8:	40010c00 	.word	0x40010c00
 8008bac:	200018c0 	.word	0x200018c0
 8008bb0:	200018bc 	.word	0x200018bc
 8008bb4:	200018c4 	.word	0x200018c4

08008bb8 <HW_DrawLine>:

UG_RESULT HW_DrawLine( UG_S16 x1 , UG_S16 y1 , UG_S16 x2 , UG_S16 y2 , UG_COLOR c )
{
 8008bb8:	b510      	push	{r4, lr}
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008bba:	fa1f fc80 	uxth.w	ip, r0
{
 8008bbe:	b082      	sub	sp, #8
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008bc0:	f5bc 7fa0 	cmp.w	ip, #320	; 0x140
{
 8008bc4:	f8bd 4010 	ldrh.w	r4, [sp, #16]
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008bc8:	d218      	bcs.n	8008bfc <HW_DrawLine+0x44>
 8008bca:	fa1f fc81 	uxth.w	ip, r1
 8008bce:	f1bc 0fef 	cmp.w	ip, #239	; 0xef
 8008bd2:	d813      	bhi.n	8008bfc <HW_DrawLine+0x44>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008bd4:	fa1f fc82 	uxth.w	ip, r2
 8008bd8:	f5bc 7fa0 	cmp.w	ip, #320	; 0x140
 8008bdc:	d20e      	bcs.n	8008bfc <HW_DrawLine+0x44>
 8008bde:	fa1f fc83 	uxth.w	ip, r3
 8008be2:	f1bc 0fef 	cmp.w	ip, #239	; 0xef
 8008be6:	d809      	bhi.n	8008bfc <HW_DrawLine+0x44>

    // If it is a vertical or a horizontal line, draw it.
    // If not, then use original drawline routine.
    if ((x1 == x2) || (y1 == y2))
 8008be8:	4290      	cmp	r0, r2
 8008bea:	d001      	beq.n	8008bf0 <HW_DrawLine+0x38>
 8008bec:	4299      	cmp	r1, r3
 8008bee:	d105      	bne.n	8008bfc <HW_DrawLine+0x44>
    {
        HW_FillFrame(x1, y1, x2, y2, c);
 8008bf0:	9400      	str	r4, [sp, #0]
 8008bf2:	f7ff ff5f 	bl	8008ab4 <HW_FillFrame>
        return UG_RESULT_OK;
 8008bf6:	2000      	movs	r0, #0
    }

    return UG_RESULT_FAIL;
}
 8008bf8:	b002      	add	sp, #8
 8008bfa:	bd10      	pop	{r4, pc}
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008c00:	b002      	add	sp, #8
 8008c02:	bd10      	pop	{r4, pc}

08008c04 <HW_DrawImage>:

UG_RESULT HW_DrawImage(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint16_t *image, uint16_t pSize)
{
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008c06:	fa1f fe80 	uxth.w	lr, r0
{
 8008c0a:	af00      	add	r7, sp, #0
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008c0c:	f5be 7fa0 	cmp.w	lr, #320	; 0x140
{
 8008c10:	69bc      	ldr	r4, [r7, #24]
 8008c12:	8bbd      	ldrh	r5, [r7, #28]
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008c14:	d26b      	bcs.n	8008cee <HW_DrawImage+0xea>
 8008c16:	468c      	mov	ip, r1
 8008c18:	4611      	mov	r1, r2
 8008c1a:	fa1f f28c 	uxth.w	r2, ip
 8008c1e:	2aef      	cmp	r2, #239	; 0xef
 8008c20:	d865      	bhi.n	8008cee <HW_DrawImage+0xea>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008c22:	b28a      	uxth	r2, r1
 8008c24:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
 8008c28:	d261      	bcs.n	8008cee <HW_DrawImage+0xea>
 8008c2a:	b29e      	uxth	r6, r3
 8008c2c:	2eef      	cmp	r6, #239	; 0xef
 8008c2e:	d85e      	bhi.n	8008cee <HW_DrawImage+0xea>

    Display_WindowSet(x1,x2,y1,y2);
 8008c30:	4662      	mov	r2, ip
 8008c32:	f7ff fded 	bl	8008810 <Display_WindowSet>
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008c36:	f04f 4653 	mov.w	r6, #3539992576	; 0xd3000000
 ivert_eightbit = ~(eightbit);
 8008c3a:	f04f 0cd3 	mov.w	ip, #211	; 0xd3
GPIOA->BSRR |= 0x08000000;
 8008c3e:	4b2d      	ldr	r3, [pc, #180]	; (8008cf4 <HW_DrawImage+0xf0>)
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008c40:	4a2d      	ldr	r2, [pc, #180]	; (8008cf8 <HW_DrawImage+0xf4>)
GPIOA->BSRR |= 0x08000000;
 8008c42:	6919      	ldr	r1, [r3, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008c44:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
GPIOA->BSRR |= 0x08000000;
 8008c48:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8008c4c:	6119      	str	r1, [r3, #16]
 ivert_eightbit = ~(eightbit);
 8008c4e:	492b      	ldr	r1, [pc, #172]	; (8008cfc <HW_DrawImage+0xf8>)
 8008c50:	f881 c000 	strb.w	ip, [r1]
GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 8008c54:	6116      	str	r6, [r2, #16]
#ifdef USE_COLOR_RGB565 // 16-bit colour 5*Red-6*Green-5*Blue

    Display_WriteCommand(0x2c);

    uint16_t i;
    uint16_t buffer[(pSize-1)];
 8008c56:	466e      	mov	r6, sp
 8008c58:	0069      	lsls	r1, r5, #1
 8008c5a:	3105      	adds	r1, #5
 8008c5c:	08c9      	lsrs	r1, r1, #3
 8008c5e:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
 8008c62:	468d      	mov	sp, r1
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008c64:	6110      	str	r0, [r2, #16]
GPIOA->BSRR |= 0x01000000;
 8008c66:	6918      	ldr	r0, [r3, #16]
    uint16_t buffer[(pSize-1)];
 8008c68:	46ec      	mov	ip, sp
GPIOA->BSRR |= 0x01000000;
 8008c6a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8008c6e:	6118      	str	r0, [r3, #16]
GPIOA->BSRR |= 0x00000100;
 8008c70:	6918      	ldr	r0, [r3, #16]
 8008c72:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8008c76:	6118      	str	r0, [r3, #16]
    uint16_t *ptr = image;
    uint8_t data[2];

    for(i=0 ;i < pSize; i++)
 8008c78:	2d00      	cmp	r5, #0
 8008c7a:	d035      	beq.n	8008ce8 <HW_DrawImage+0xe4>
 8008c7c:	4920      	ldr	r1, [pc, #128]	; (8008d00 <HW_DrawImage+0xfc>)
 8008c7e:	f1ac 0c02 	sub.w	ip, ip, #2
 8008c82:	eb04 0e45 	add.w	lr, r4, r5, lsl #1
GPIOA->BSRR |= 0x00000800;
 8008c86:	691d      	ldr	r5, [r3, #16]
    {
    	buffer[i] = *(ptr++);
 8008c88:	f834 0b02 	ldrh.w	r0, [r4], #2
GPIOA->BSRR |= 0x00000800;
 8008c8c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
    	buffer[i] = *(ptr++);
 8008c90:	f82c 0f02 	strh.w	r0, [ip, #2]!
GPIOA->BSRR |= 0x00000800;
 8008c94:	611d      	str	r5, [r3, #16]
GPIOB->ODR &=0x000000ff;
 8008c96:	68d5      	ldr	r5, [r2, #12]

            data[0] = (buffer[i] >> 8);
 8008c98:	0a06      	lsrs	r6, r0, #8
GPIOB->ODR &=0x000000ff;
 8008c9a:	b2ed      	uxtb	r5, r5
            data[0] = (buffer[i] >> 8);
 8008c9c:	704e      	strb	r6, [r1, #1]
GPIOB->ODR &=0x000000ff;
 8008c9e:	60d5      	str	r5, [r2, #12]
GPIOB->ODR |=(y.v32);
 8008ca0:	68d6      	ldr	r6, [r2, #12]
 8008ca2:	880d      	ldrh	r5, [r1, #0]
    for(i=0 ;i < pSize; i++)
 8008ca4:	4574      	cmp	r4, lr
GPIOB->ODR |=(y.v32);
 8008ca6:	ea45 0506 	orr.w	r5, r5, r6
 8008caa:	60d5      	str	r5, [r2, #12]
GPIOA->BSRR |= 0x01000000;
 8008cac:	691d      	ldr	r5, [r3, #16]
 8008cae:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 8008cb2:	611d      	str	r5, [r3, #16]
GPIOA->BSRR |= 0x00000100;
 8008cb4:	691d      	ldr	r5, [r3, #16]
 8008cb6:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8008cba:	611d      	str	r5, [r3, #16]
GPIOA->BSRR |= 0x00000800;
 8008cbc:	691d      	ldr	r5, [r3, #16]
 8008cbe:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8008cc2:	611d      	str	r5, [r3, #16]
            data[1] = (buffer[i]);
 8008cc4:	7048      	strb	r0, [r1, #1]
GPIOB->ODR &=0x000000ff;
 8008cc6:	68d0      	ldr	r0, [r2, #12]
 8008cc8:	b2c0      	uxtb	r0, r0
 8008cca:	60d0      	str	r0, [r2, #12]
GPIOB->ODR |=(y.v32);
 8008ccc:	68d5      	ldr	r5, [r2, #12]
 8008cce:	8808      	ldrh	r0, [r1, #0]
 8008cd0:	ea40 0005 	orr.w	r0, r0, r5
 8008cd4:	60d0      	str	r0, [r2, #12]
GPIOA->BSRR |= 0x01000000;
 8008cd6:	6918      	ldr	r0, [r3, #16]
 8008cd8:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8008cdc:	6118      	str	r0, [r3, #16]
GPIOA->BSRR |= 0x00000100;
 8008cde:	6918      	ldr	r0, [r3, #16]
 8008ce0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8008ce4:	6118      	str	r0, [r3, #16]
    for(i=0 ;i < pSize; i++)
 8008ce6:	d1ce      	bne.n	8008c86 <HW_DrawImage+0x82>
 //           printf("data: %X, %X\n",data[0],data[1]);
            Display_WriteMultiData(data, 2);
    }
#endif
    return UG_RESULT_OK;
 8008ce8:	2000      	movs	r0, #0
}
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cf2:	e7fa      	b.n	8008cea <HW_DrawImage+0xe6>
 8008cf4:	40010800 	.word	0x40010800
 8008cf8:	40010c00 	.word	0x40010c00
 8008cfc:	200018bc 	.word	0x200018bc
 8008d00:	20000014 	.word	0x20000014

08008d04 <__errno>:
 8008d04:	4b01      	ldr	r3, [pc, #4]	; (8008d0c <__errno+0x8>)
 8008d06:	6818      	ldr	r0, [r3, #0]
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	20000018 	.word	0x20000018

08008d10 <__libc_init_array>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	2600      	movs	r6, #0
 8008d14:	4d0c      	ldr	r5, [pc, #48]	; (8008d48 <__libc_init_array+0x38>)
 8008d16:	4c0d      	ldr	r4, [pc, #52]	; (8008d4c <__libc_init_array+0x3c>)
 8008d18:	1b64      	subs	r4, r4, r5
 8008d1a:	10a4      	asrs	r4, r4, #2
 8008d1c:	42a6      	cmp	r6, r4
 8008d1e:	d109      	bne.n	8008d34 <__libc_init_array+0x24>
 8008d20:	f002 ff14 	bl	800bb4c <_init>
 8008d24:	2600      	movs	r6, #0
 8008d26:	4d0a      	ldr	r5, [pc, #40]	; (8008d50 <__libc_init_array+0x40>)
 8008d28:	4c0a      	ldr	r4, [pc, #40]	; (8008d54 <__libc_init_array+0x44>)
 8008d2a:	1b64      	subs	r4, r4, r5
 8008d2c:	10a4      	asrs	r4, r4, #2
 8008d2e:	42a6      	cmp	r6, r4
 8008d30:	d105      	bne.n	8008d3e <__libc_init_array+0x2e>
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d38:	4798      	blx	r3
 8008d3a:	3601      	adds	r6, #1
 8008d3c:	e7ee      	b.n	8008d1c <__libc_init_array+0xc>
 8008d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d42:	4798      	blx	r3
 8008d44:	3601      	adds	r6, #1
 8008d46:	e7f2      	b.n	8008d2e <__libc_init_array+0x1e>
 8008d48:	08012a44 	.word	0x08012a44
 8008d4c:	08012a44 	.word	0x08012a44
 8008d50:	08012a44 	.word	0x08012a44
 8008d54:	08012a48 	.word	0x08012a48

08008d58 <memset>:
 8008d58:	4603      	mov	r3, r0
 8008d5a:	4402      	add	r2, r0
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d100      	bne.n	8008d62 <memset+0xa>
 8008d60:	4770      	bx	lr
 8008d62:	f803 1b01 	strb.w	r1, [r3], #1
 8008d66:	e7f9      	b.n	8008d5c <memset+0x4>

08008d68 <__cvt>:
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d6e:	461f      	mov	r7, r3
 8008d70:	bfbb      	ittet	lt
 8008d72:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008d76:	461f      	movlt	r7, r3
 8008d78:	2300      	movge	r3, #0
 8008d7a:	232d      	movlt	r3, #45	; 0x2d
 8008d7c:	b088      	sub	sp, #32
 8008d7e:	4614      	mov	r4, r2
 8008d80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d82:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008d84:	7013      	strb	r3, [r2, #0]
 8008d86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d88:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008d8c:	f023 0820 	bic.w	r8, r3, #32
 8008d90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d94:	d005      	beq.n	8008da2 <__cvt+0x3a>
 8008d96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d9a:	d100      	bne.n	8008d9e <__cvt+0x36>
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	2302      	movs	r3, #2
 8008da0:	e000      	b.n	8008da4 <__cvt+0x3c>
 8008da2:	2303      	movs	r3, #3
 8008da4:	aa07      	add	r2, sp, #28
 8008da6:	9204      	str	r2, [sp, #16]
 8008da8:	aa06      	add	r2, sp, #24
 8008daa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008dae:	e9cd 3500 	strd	r3, r5, [sp]
 8008db2:	4622      	mov	r2, r4
 8008db4:	463b      	mov	r3, r7
 8008db6:	f000 fcfb 	bl	80097b0 <_dtoa_r>
 8008dba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	d102      	bne.n	8008dc8 <__cvt+0x60>
 8008dc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dc4:	07db      	lsls	r3, r3, #31
 8008dc6:	d522      	bpl.n	8008e0e <__cvt+0xa6>
 8008dc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008dcc:	eb06 0905 	add.w	r9, r6, r5
 8008dd0:	d110      	bne.n	8008df4 <__cvt+0x8c>
 8008dd2:	7833      	ldrb	r3, [r6, #0]
 8008dd4:	2b30      	cmp	r3, #48	; 0x30
 8008dd6:	d10a      	bne.n	8008dee <__cvt+0x86>
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2300      	movs	r3, #0
 8008ddc:	4620      	mov	r0, r4
 8008dde:	4639      	mov	r1, r7
 8008de0:	f7f7 fde2 	bl	80009a8 <__aeabi_dcmpeq>
 8008de4:	b918      	cbnz	r0, 8008dee <__cvt+0x86>
 8008de6:	f1c5 0501 	rsb	r5, r5, #1
 8008dea:	f8ca 5000 	str.w	r5, [sl]
 8008dee:	f8da 3000 	ldr.w	r3, [sl]
 8008df2:	4499      	add	r9, r3
 8008df4:	2200      	movs	r2, #0
 8008df6:	2300      	movs	r3, #0
 8008df8:	4620      	mov	r0, r4
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	f7f7 fdd4 	bl	80009a8 <__aeabi_dcmpeq>
 8008e00:	b108      	cbz	r0, 8008e06 <__cvt+0x9e>
 8008e02:	f8cd 901c 	str.w	r9, [sp, #28]
 8008e06:	2230      	movs	r2, #48	; 0x30
 8008e08:	9b07      	ldr	r3, [sp, #28]
 8008e0a:	454b      	cmp	r3, r9
 8008e0c:	d307      	bcc.n	8008e1e <__cvt+0xb6>
 8008e0e:	4630      	mov	r0, r6
 8008e10:	9b07      	ldr	r3, [sp, #28]
 8008e12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e14:	1b9b      	subs	r3, r3, r6
 8008e16:	6013      	str	r3, [r2, #0]
 8008e18:	b008      	add	sp, #32
 8008e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e1e:	1c59      	adds	r1, r3, #1
 8008e20:	9107      	str	r1, [sp, #28]
 8008e22:	701a      	strb	r2, [r3, #0]
 8008e24:	e7f0      	b.n	8008e08 <__cvt+0xa0>

08008e26 <__exponent>:
 8008e26:	4603      	mov	r3, r0
 8008e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e2a:	2900      	cmp	r1, #0
 8008e2c:	f803 2b02 	strb.w	r2, [r3], #2
 8008e30:	bfb6      	itet	lt
 8008e32:	222d      	movlt	r2, #45	; 0x2d
 8008e34:	222b      	movge	r2, #43	; 0x2b
 8008e36:	4249      	neglt	r1, r1
 8008e38:	2909      	cmp	r1, #9
 8008e3a:	7042      	strb	r2, [r0, #1]
 8008e3c:	dd2b      	ble.n	8008e96 <__exponent+0x70>
 8008e3e:	f10d 0407 	add.w	r4, sp, #7
 8008e42:	46a4      	mov	ip, r4
 8008e44:	270a      	movs	r7, #10
 8008e46:	fb91 f6f7 	sdiv	r6, r1, r7
 8008e4a:	460a      	mov	r2, r1
 8008e4c:	46a6      	mov	lr, r4
 8008e4e:	fb07 1516 	mls	r5, r7, r6, r1
 8008e52:	2a63      	cmp	r2, #99	; 0x63
 8008e54:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008e58:	4631      	mov	r1, r6
 8008e5a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008e5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008e62:	dcf0      	bgt.n	8008e46 <__exponent+0x20>
 8008e64:	3130      	adds	r1, #48	; 0x30
 8008e66:	f1ae 0502 	sub.w	r5, lr, #2
 8008e6a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e6e:	4629      	mov	r1, r5
 8008e70:	1c44      	adds	r4, r0, #1
 8008e72:	4561      	cmp	r1, ip
 8008e74:	d30a      	bcc.n	8008e8c <__exponent+0x66>
 8008e76:	f10d 0209 	add.w	r2, sp, #9
 8008e7a:	eba2 020e 	sub.w	r2, r2, lr
 8008e7e:	4565      	cmp	r5, ip
 8008e80:	bf88      	it	hi
 8008e82:	2200      	movhi	r2, #0
 8008e84:	4413      	add	r3, r2
 8008e86:	1a18      	subs	r0, r3, r0
 8008e88:	b003      	add	sp, #12
 8008e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e90:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e94:	e7ed      	b.n	8008e72 <__exponent+0x4c>
 8008e96:	2330      	movs	r3, #48	; 0x30
 8008e98:	3130      	adds	r1, #48	; 0x30
 8008e9a:	7083      	strb	r3, [r0, #2]
 8008e9c:	70c1      	strb	r1, [r0, #3]
 8008e9e:	1d03      	adds	r3, r0, #4
 8008ea0:	e7f1      	b.n	8008e86 <__exponent+0x60>
	...

08008ea4 <_printf_float>:
 8008ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea8:	b091      	sub	sp, #68	; 0x44
 8008eaa:	460c      	mov	r4, r1
 8008eac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008eb0:	4616      	mov	r6, r2
 8008eb2:	461f      	mov	r7, r3
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	f001 fb5f 	bl	800a578 <_localeconv_r>
 8008eba:	6803      	ldr	r3, [r0, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec0:	f7f7 f946 	bl	8000150 <strlen>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	930e      	str	r3, [sp, #56]	; 0x38
 8008ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8008ecc:	900a      	str	r0, [sp, #40]	; 0x28
 8008ece:	3307      	adds	r3, #7
 8008ed0:	f023 0307 	bic.w	r3, r3, #7
 8008ed4:	f103 0208 	add.w	r2, r3, #8
 8008ed8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008edc:	f8d4 b000 	ldr.w	fp, [r4]
 8008ee0:	f8c8 2000 	str.w	r2, [r8]
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008eec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008ef0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008ef4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008efa:	4640      	mov	r0, r8
 8008efc:	4b9c      	ldr	r3, [pc, #624]	; (8009170 <_printf_float+0x2cc>)
 8008efe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f00:	f7f7 fd84 	bl	8000a0c <__aeabi_dcmpun>
 8008f04:	bb70      	cbnz	r0, 8008f64 <_printf_float+0xc0>
 8008f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	4b98      	ldr	r3, [pc, #608]	; (8009170 <_printf_float+0x2cc>)
 8008f0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f10:	f7f7 fd5e 	bl	80009d0 <__aeabi_dcmple>
 8008f14:	bb30      	cbnz	r0, 8008f64 <_printf_float+0xc0>
 8008f16:	2200      	movs	r2, #0
 8008f18:	2300      	movs	r3, #0
 8008f1a:	4640      	mov	r0, r8
 8008f1c:	4651      	mov	r1, sl
 8008f1e:	f7f7 fd4d 	bl	80009bc <__aeabi_dcmplt>
 8008f22:	b110      	cbz	r0, 8008f2a <_printf_float+0x86>
 8008f24:	232d      	movs	r3, #45	; 0x2d
 8008f26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f2a:	4b92      	ldr	r3, [pc, #584]	; (8009174 <_printf_float+0x2d0>)
 8008f2c:	4892      	ldr	r0, [pc, #584]	; (8009178 <_printf_float+0x2d4>)
 8008f2e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008f32:	bf94      	ite	ls
 8008f34:	4698      	movls	r8, r3
 8008f36:	4680      	movhi	r8, r0
 8008f38:	2303      	movs	r3, #3
 8008f3a:	f04f 0a00 	mov.w	sl, #0
 8008f3e:	6123      	str	r3, [r4, #16]
 8008f40:	f02b 0304 	bic.w	r3, fp, #4
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	4633      	mov	r3, r6
 8008f48:	4621      	mov	r1, r4
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	9700      	str	r7, [sp, #0]
 8008f4e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008f50:	f000 f9d4 	bl	80092fc <_printf_common>
 8008f54:	3001      	adds	r0, #1
 8008f56:	f040 8090 	bne.w	800907a <_printf_float+0x1d6>
 8008f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f5e:	b011      	add	sp, #68	; 0x44
 8008f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f64:	4642      	mov	r2, r8
 8008f66:	4653      	mov	r3, sl
 8008f68:	4640      	mov	r0, r8
 8008f6a:	4651      	mov	r1, sl
 8008f6c:	f7f7 fd4e 	bl	8000a0c <__aeabi_dcmpun>
 8008f70:	b148      	cbz	r0, 8008f86 <_printf_float+0xe2>
 8008f72:	f1ba 0f00 	cmp.w	sl, #0
 8008f76:	bfb8      	it	lt
 8008f78:	232d      	movlt	r3, #45	; 0x2d
 8008f7a:	4880      	ldr	r0, [pc, #512]	; (800917c <_printf_float+0x2d8>)
 8008f7c:	bfb8      	it	lt
 8008f7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f82:	4b7f      	ldr	r3, [pc, #508]	; (8009180 <_printf_float+0x2dc>)
 8008f84:	e7d3      	b.n	8008f2e <_printf_float+0x8a>
 8008f86:	6863      	ldr	r3, [r4, #4]
 8008f88:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	d142      	bne.n	8009016 <_printf_float+0x172>
 8008f90:	2306      	movs	r3, #6
 8008f92:	6063      	str	r3, [r4, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	9206      	str	r2, [sp, #24]
 8008f98:	aa0e      	add	r2, sp, #56	; 0x38
 8008f9a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008f9e:	aa0d      	add	r2, sp, #52	; 0x34
 8008fa0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008fa4:	9203      	str	r2, [sp, #12]
 8008fa6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008faa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008fae:	6023      	str	r3, [r4, #0]
 8008fb0:	6863      	ldr	r3, [r4, #4]
 8008fb2:	4642      	mov	r2, r8
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	4653      	mov	r3, sl
 8008fba:	910b      	str	r1, [sp, #44]	; 0x2c
 8008fbc:	f7ff fed4 	bl	8008d68 <__cvt>
 8008fc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fc2:	4680      	mov	r8, r0
 8008fc4:	2947      	cmp	r1, #71	; 0x47
 8008fc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008fc8:	d108      	bne.n	8008fdc <_printf_float+0x138>
 8008fca:	1cc8      	adds	r0, r1, #3
 8008fcc:	db02      	blt.n	8008fd4 <_printf_float+0x130>
 8008fce:	6863      	ldr	r3, [r4, #4]
 8008fd0:	4299      	cmp	r1, r3
 8008fd2:	dd40      	ble.n	8009056 <_printf_float+0x1b2>
 8008fd4:	f1a9 0902 	sub.w	r9, r9, #2
 8008fd8:	fa5f f989 	uxtb.w	r9, r9
 8008fdc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008fe0:	d81f      	bhi.n	8009022 <_printf_float+0x17e>
 8008fe2:	464a      	mov	r2, r9
 8008fe4:	3901      	subs	r1, #1
 8008fe6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008fea:	910d      	str	r1, [sp, #52]	; 0x34
 8008fec:	f7ff ff1b 	bl	8008e26 <__exponent>
 8008ff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ff2:	4682      	mov	sl, r0
 8008ff4:	1813      	adds	r3, r2, r0
 8008ff6:	2a01      	cmp	r2, #1
 8008ff8:	6123      	str	r3, [r4, #16]
 8008ffa:	dc02      	bgt.n	8009002 <_printf_float+0x15e>
 8008ffc:	6822      	ldr	r2, [r4, #0]
 8008ffe:	07d2      	lsls	r2, r2, #31
 8009000:	d501      	bpl.n	8009006 <_printf_float+0x162>
 8009002:	3301      	adds	r3, #1
 8009004:	6123      	str	r3, [r4, #16]
 8009006:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800900a:	2b00      	cmp	r3, #0
 800900c:	d09b      	beq.n	8008f46 <_printf_float+0xa2>
 800900e:	232d      	movs	r3, #45	; 0x2d
 8009010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009014:	e797      	b.n	8008f46 <_printf_float+0xa2>
 8009016:	2947      	cmp	r1, #71	; 0x47
 8009018:	d1bc      	bne.n	8008f94 <_printf_float+0xf0>
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1ba      	bne.n	8008f94 <_printf_float+0xf0>
 800901e:	2301      	movs	r3, #1
 8009020:	e7b7      	b.n	8008f92 <_printf_float+0xee>
 8009022:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009026:	d118      	bne.n	800905a <_printf_float+0x1b6>
 8009028:	2900      	cmp	r1, #0
 800902a:	6863      	ldr	r3, [r4, #4]
 800902c:	dd0b      	ble.n	8009046 <_printf_float+0x1a2>
 800902e:	6121      	str	r1, [r4, #16]
 8009030:	b913      	cbnz	r3, 8009038 <_printf_float+0x194>
 8009032:	6822      	ldr	r2, [r4, #0]
 8009034:	07d0      	lsls	r0, r2, #31
 8009036:	d502      	bpl.n	800903e <_printf_float+0x19a>
 8009038:	3301      	adds	r3, #1
 800903a:	440b      	add	r3, r1
 800903c:	6123      	str	r3, [r4, #16]
 800903e:	f04f 0a00 	mov.w	sl, #0
 8009042:	65a1      	str	r1, [r4, #88]	; 0x58
 8009044:	e7df      	b.n	8009006 <_printf_float+0x162>
 8009046:	b913      	cbnz	r3, 800904e <_printf_float+0x1aa>
 8009048:	6822      	ldr	r2, [r4, #0]
 800904a:	07d2      	lsls	r2, r2, #31
 800904c:	d501      	bpl.n	8009052 <_printf_float+0x1ae>
 800904e:	3302      	adds	r3, #2
 8009050:	e7f4      	b.n	800903c <_printf_float+0x198>
 8009052:	2301      	movs	r3, #1
 8009054:	e7f2      	b.n	800903c <_printf_float+0x198>
 8009056:	f04f 0967 	mov.w	r9, #103	; 0x67
 800905a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800905c:	4299      	cmp	r1, r3
 800905e:	db05      	blt.n	800906c <_printf_float+0x1c8>
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	6121      	str	r1, [r4, #16]
 8009064:	07d8      	lsls	r0, r3, #31
 8009066:	d5ea      	bpl.n	800903e <_printf_float+0x19a>
 8009068:	1c4b      	adds	r3, r1, #1
 800906a:	e7e7      	b.n	800903c <_printf_float+0x198>
 800906c:	2900      	cmp	r1, #0
 800906e:	bfcc      	ite	gt
 8009070:	2201      	movgt	r2, #1
 8009072:	f1c1 0202 	rsble	r2, r1, #2
 8009076:	4413      	add	r3, r2
 8009078:	e7e0      	b.n	800903c <_printf_float+0x198>
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	055a      	lsls	r2, r3, #21
 800907e:	d407      	bmi.n	8009090 <_printf_float+0x1ec>
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	4642      	mov	r2, r8
 8009084:	4631      	mov	r1, r6
 8009086:	4628      	mov	r0, r5
 8009088:	47b8      	blx	r7
 800908a:	3001      	adds	r0, #1
 800908c:	d12b      	bne.n	80090e6 <_printf_float+0x242>
 800908e:	e764      	b.n	8008f5a <_printf_float+0xb6>
 8009090:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009094:	f240 80dd 	bls.w	8009252 <_printf_float+0x3ae>
 8009098:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800909c:	2200      	movs	r2, #0
 800909e:	2300      	movs	r3, #0
 80090a0:	f7f7 fc82 	bl	80009a8 <__aeabi_dcmpeq>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d033      	beq.n	8009110 <_printf_float+0x26c>
 80090a8:	2301      	movs	r3, #1
 80090aa:	4631      	mov	r1, r6
 80090ac:	4628      	mov	r0, r5
 80090ae:	4a35      	ldr	r2, [pc, #212]	; (8009184 <_printf_float+0x2e0>)
 80090b0:	47b8      	blx	r7
 80090b2:	3001      	adds	r0, #1
 80090b4:	f43f af51 	beq.w	8008f5a <_printf_float+0xb6>
 80090b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80090bc:	429a      	cmp	r2, r3
 80090be:	db02      	blt.n	80090c6 <_printf_float+0x222>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	07d8      	lsls	r0, r3, #31
 80090c4:	d50f      	bpl.n	80090e6 <_printf_float+0x242>
 80090c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090ca:	4631      	mov	r1, r6
 80090cc:	4628      	mov	r0, r5
 80090ce:	47b8      	blx	r7
 80090d0:	3001      	adds	r0, #1
 80090d2:	f43f af42 	beq.w	8008f5a <_printf_float+0xb6>
 80090d6:	f04f 0800 	mov.w	r8, #0
 80090da:	f104 091a 	add.w	r9, r4, #26
 80090de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090e0:	3b01      	subs	r3, #1
 80090e2:	4543      	cmp	r3, r8
 80090e4:	dc09      	bgt.n	80090fa <_printf_float+0x256>
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	079b      	lsls	r3, r3, #30
 80090ea:	f100 8102 	bmi.w	80092f2 <_printf_float+0x44e>
 80090ee:	68e0      	ldr	r0, [r4, #12]
 80090f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090f2:	4298      	cmp	r0, r3
 80090f4:	bfb8      	it	lt
 80090f6:	4618      	movlt	r0, r3
 80090f8:	e731      	b.n	8008f5e <_printf_float+0xba>
 80090fa:	2301      	movs	r3, #1
 80090fc:	464a      	mov	r2, r9
 80090fe:	4631      	mov	r1, r6
 8009100:	4628      	mov	r0, r5
 8009102:	47b8      	blx	r7
 8009104:	3001      	adds	r0, #1
 8009106:	f43f af28 	beq.w	8008f5a <_printf_float+0xb6>
 800910a:	f108 0801 	add.w	r8, r8, #1
 800910e:	e7e6      	b.n	80090de <_printf_float+0x23a>
 8009110:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009112:	2b00      	cmp	r3, #0
 8009114:	dc38      	bgt.n	8009188 <_printf_float+0x2e4>
 8009116:	2301      	movs	r3, #1
 8009118:	4631      	mov	r1, r6
 800911a:	4628      	mov	r0, r5
 800911c:	4a19      	ldr	r2, [pc, #100]	; (8009184 <_printf_float+0x2e0>)
 800911e:	47b8      	blx	r7
 8009120:	3001      	adds	r0, #1
 8009122:	f43f af1a 	beq.w	8008f5a <_printf_float+0xb6>
 8009126:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800912a:	4313      	orrs	r3, r2
 800912c:	d102      	bne.n	8009134 <_printf_float+0x290>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	07d9      	lsls	r1, r3, #31
 8009132:	d5d8      	bpl.n	80090e6 <_printf_float+0x242>
 8009134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009138:	4631      	mov	r1, r6
 800913a:	4628      	mov	r0, r5
 800913c:	47b8      	blx	r7
 800913e:	3001      	adds	r0, #1
 8009140:	f43f af0b 	beq.w	8008f5a <_printf_float+0xb6>
 8009144:	f04f 0900 	mov.w	r9, #0
 8009148:	f104 0a1a 	add.w	sl, r4, #26
 800914c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800914e:	425b      	negs	r3, r3
 8009150:	454b      	cmp	r3, r9
 8009152:	dc01      	bgt.n	8009158 <_printf_float+0x2b4>
 8009154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009156:	e794      	b.n	8009082 <_printf_float+0x1de>
 8009158:	2301      	movs	r3, #1
 800915a:	4652      	mov	r2, sl
 800915c:	4631      	mov	r1, r6
 800915e:	4628      	mov	r0, r5
 8009160:	47b8      	blx	r7
 8009162:	3001      	adds	r0, #1
 8009164:	f43f aef9 	beq.w	8008f5a <_printf_float+0xb6>
 8009168:	f109 0901 	add.w	r9, r9, #1
 800916c:	e7ee      	b.n	800914c <_printf_float+0x2a8>
 800916e:	bf00      	nop
 8009170:	7fefffff 	.word	0x7fefffff
 8009174:	08012670 	.word	0x08012670
 8009178:	08012674 	.word	0x08012674
 800917c:	0801267c 	.word	0x0801267c
 8009180:	08012678 	.word	0x08012678
 8009184:	08012680 	.word	0x08012680
 8009188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800918a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800918c:	429a      	cmp	r2, r3
 800918e:	bfa8      	it	ge
 8009190:	461a      	movge	r2, r3
 8009192:	2a00      	cmp	r2, #0
 8009194:	4691      	mov	r9, r2
 8009196:	dc37      	bgt.n	8009208 <_printf_float+0x364>
 8009198:	f04f 0b00 	mov.w	fp, #0
 800919c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091a0:	f104 021a 	add.w	r2, r4, #26
 80091a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80091a8:	ebaa 0309 	sub.w	r3, sl, r9
 80091ac:	455b      	cmp	r3, fp
 80091ae:	dc33      	bgt.n	8009218 <_printf_float+0x374>
 80091b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80091b4:	429a      	cmp	r2, r3
 80091b6:	db3b      	blt.n	8009230 <_printf_float+0x38c>
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	07da      	lsls	r2, r3, #31
 80091bc:	d438      	bmi.n	8009230 <_printf_float+0x38c>
 80091be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80091c2:	eba3 020a 	sub.w	r2, r3, sl
 80091c6:	eba3 0901 	sub.w	r9, r3, r1
 80091ca:	4591      	cmp	r9, r2
 80091cc:	bfa8      	it	ge
 80091ce:	4691      	movge	r9, r2
 80091d0:	f1b9 0f00 	cmp.w	r9, #0
 80091d4:	dc34      	bgt.n	8009240 <_printf_float+0x39c>
 80091d6:	f04f 0800 	mov.w	r8, #0
 80091da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091de:	f104 0a1a 	add.w	sl, r4, #26
 80091e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80091e6:	1a9b      	subs	r3, r3, r2
 80091e8:	eba3 0309 	sub.w	r3, r3, r9
 80091ec:	4543      	cmp	r3, r8
 80091ee:	f77f af7a 	ble.w	80090e6 <_printf_float+0x242>
 80091f2:	2301      	movs	r3, #1
 80091f4:	4652      	mov	r2, sl
 80091f6:	4631      	mov	r1, r6
 80091f8:	4628      	mov	r0, r5
 80091fa:	47b8      	blx	r7
 80091fc:	3001      	adds	r0, #1
 80091fe:	f43f aeac 	beq.w	8008f5a <_printf_float+0xb6>
 8009202:	f108 0801 	add.w	r8, r8, #1
 8009206:	e7ec      	b.n	80091e2 <_printf_float+0x33e>
 8009208:	4613      	mov	r3, r2
 800920a:	4631      	mov	r1, r6
 800920c:	4642      	mov	r2, r8
 800920e:	4628      	mov	r0, r5
 8009210:	47b8      	blx	r7
 8009212:	3001      	adds	r0, #1
 8009214:	d1c0      	bne.n	8009198 <_printf_float+0x2f4>
 8009216:	e6a0      	b.n	8008f5a <_printf_float+0xb6>
 8009218:	2301      	movs	r3, #1
 800921a:	4631      	mov	r1, r6
 800921c:	4628      	mov	r0, r5
 800921e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009220:	47b8      	blx	r7
 8009222:	3001      	adds	r0, #1
 8009224:	f43f ae99 	beq.w	8008f5a <_printf_float+0xb6>
 8009228:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800922a:	f10b 0b01 	add.w	fp, fp, #1
 800922e:	e7b9      	b.n	80091a4 <_printf_float+0x300>
 8009230:	4631      	mov	r1, r6
 8009232:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009236:	4628      	mov	r0, r5
 8009238:	47b8      	blx	r7
 800923a:	3001      	adds	r0, #1
 800923c:	d1bf      	bne.n	80091be <_printf_float+0x31a>
 800923e:	e68c      	b.n	8008f5a <_printf_float+0xb6>
 8009240:	464b      	mov	r3, r9
 8009242:	4631      	mov	r1, r6
 8009244:	4628      	mov	r0, r5
 8009246:	eb08 020a 	add.w	r2, r8, sl
 800924a:	47b8      	blx	r7
 800924c:	3001      	adds	r0, #1
 800924e:	d1c2      	bne.n	80091d6 <_printf_float+0x332>
 8009250:	e683      	b.n	8008f5a <_printf_float+0xb6>
 8009252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009254:	2a01      	cmp	r2, #1
 8009256:	dc01      	bgt.n	800925c <_printf_float+0x3b8>
 8009258:	07db      	lsls	r3, r3, #31
 800925a:	d537      	bpl.n	80092cc <_printf_float+0x428>
 800925c:	2301      	movs	r3, #1
 800925e:	4642      	mov	r2, r8
 8009260:	4631      	mov	r1, r6
 8009262:	4628      	mov	r0, r5
 8009264:	47b8      	blx	r7
 8009266:	3001      	adds	r0, #1
 8009268:	f43f ae77 	beq.w	8008f5a <_printf_float+0xb6>
 800926c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009270:	4631      	mov	r1, r6
 8009272:	4628      	mov	r0, r5
 8009274:	47b8      	blx	r7
 8009276:	3001      	adds	r0, #1
 8009278:	f43f ae6f 	beq.w	8008f5a <_printf_float+0xb6>
 800927c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009280:	2200      	movs	r2, #0
 8009282:	2300      	movs	r3, #0
 8009284:	f7f7 fb90 	bl	80009a8 <__aeabi_dcmpeq>
 8009288:	b9d8      	cbnz	r0, 80092c2 <_printf_float+0x41e>
 800928a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800928c:	f108 0201 	add.w	r2, r8, #1
 8009290:	3b01      	subs	r3, #1
 8009292:	4631      	mov	r1, r6
 8009294:	4628      	mov	r0, r5
 8009296:	47b8      	blx	r7
 8009298:	3001      	adds	r0, #1
 800929a:	d10e      	bne.n	80092ba <_printf_float+0x416>
 800929c:	e65d      	b.n	8008f5a <_printf_float+0xb6>
 800929e:	2301      	movs	r3, #1
 80092a0:	464a      	mov	r2, r9
 80092a2:	4631      	mov	r1, r6
 80092a4:	4628      	mov	r0, r5
 80092a6:	47b8      	blx	r7
 80092a8:	3001      	adds	r0, #1
 80092aa:	f43f ae56 	beq.w	8008f5a <_printf_float+0xb6>
 80092ae:	f108 0801 	add.w	r8, r8, #1
 80092b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092b4:	3b01      	subs	r3, #1
 80092b6:	4543      	cmp	r3, r8
 80092b8:	dcf1      	bgt.n	800929e <_printf_float+0x3fa>
 80092ba:	4653      	mov	r3, sl
 80092bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092c0:	e6e0      	b.n	8009084 <_printf_float+0x1e0>
 80092c2:	f04f 0800 	mov.w	r8, #0
 80092c6:	f104 091a 	add.w	r9, r4, #26
 80092ca:	e7f2      	b.n	80092b2 <_printf_float+0x40e>
 80092cc:	2301      	movs	r3, #1
 80092ce:	4642      	mov	r2, r8
 80092d0:	e7df      	b.n	8009292 <_printf_float+0x3ee>
 80092d2:	2301      	movs	r3, #1
 80092d4:	464a      	mov	r2, r9
 80092d6:	4631      	mov	r1, r6
 80092d8:	4628      	mov	r0, r5
 80092da:	47b8      	blx	r7
 80092dc:	3001      	adds	r0, #1
 80092de:	f43f ae3c 	beq.w	8008f5a <_printf_float+0xb6>
 80092e2:	f108 0801 	add.w	r8, r8, #1
 80092e6:	68e3      	ldr	r3, [r4, #12]
 80092e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092ea:	1a5b      	subs	r3, r3, r1
 80092ec:	4543      	cmp	r3, r8
 80092ee:	dcf0      	bgt.n	80092d2 <_printf_float+0x42e>
 80092f0:	e6fd      	b.n	80090ee <_printf_float+0x24a>
 80092f2:	f04f 0800 	mov.w	r8, #0
 80092f6:	f104 0919 	add.w	r9, r4, #25
 80092fa:	e7f4      	b.n	80092e6 <_printf_float+0x442>

080092fc <_printf_common>:
 80092fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009300:	4616      	mov	r6, r2
 8009302:	4699      	mov	r9, r3
 8009304:	688a      	ldr	r2, [r1, #8]
 8009306:	690b      	ldr	r3, [r1, #16]
 8009308:	4607      	mov	r7, r0
 800930a:	4293      	cmp	r3, r2
 800930c:	bfb8      	it	lt
 800930e:	4613      	movlt	r3, r2
 8009310:	6033      	str	r3, [r6, #0]
 8009312:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009316:	460c      	mov	r4, r1
 8009318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800931c:	b10a      	cbz	r2, 8009322 <_printf_common+0x26>
 800931e:	3301      	adds	r3, #1
 8009320:	6033      	str	r3, [r6, #0]
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	0699      	lsls	r1, r3, #26
 8009326:	bf42      	ittt	mi
 8009328:	6833      	ldrmi	r3, [r6, #0]
 800932a:	3302      	addmi	r3, #2
 800932c:	6033      	strmi	r3, [r6, #0]
 800932e:	6825      	ldr	r5, [r4, #0]
 8009330:	f015 0506 	ands.w	r5, r5, #6
 8009334:	d106      	bne.n	8009344 <_printf_common+0x48>
 8009336:	f104 0a19 	add.w	sl, r4, #25
 800933a:	68e3      	ldr	r3, [r4, #12]
 800933c:	6832      	ldr	r2, [r6, #0]
 800933e:	1a9b      	subs	r3, r3, r2
 8009340:	42ab      	cmp	r3, r5
 8009342:	dc28      	bgt.n	8009396 <_printf_common+0x9a>
 8009344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009348:	1e13      	subs	r3, r2, #0
 800934a:	6822      	ldr	r2, [r4, #0]
 800934c:	bf18      	it	ne
 800934e:	2301      	movne	r3, #1
 8009350:	0692      	lsls	r2, r2, #26
 8009352:	d42d      	bmi.n	80093b0 <_printf_common+0xb4>
 8009354:	4649      	mov	r1, r9
 8009356:	4638      	mov	r0, r7
 8009358:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800935c:	47c0      	blx	r8
 800935e:	3001      	adds	r0, #1
 8009360:	d020      	beq.n	80093a4 <_printf_common+0xa8>
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	68e5      	ldr	r5, [r4, #12]
 8009366:	f003 0306 	and.w	r3, r3, #6
 800936a:	2b04      	cmp	r3, #4
 800936c:	bf18      	it	ne
 800936e:	2500      	movne	r5, #0
 8009370:	6832      	ldr	r2, [r6, #0]
 8009372:	f04f 0600 	mov.w	r6, #0
 8009376:	68a3      	ldr	r3, [r4, #8]
 8009378:	bf08      	it	eq
 800937a:	1aad      	subeq	r5, r5, r2
 800937c:	6922      	ldr	r2, [r4, #16]
 800937e:	bf08      	it	eq
 8009380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009384:	4293      	cmp	r3, r2
 8009386:	bfc4      	itt	gt
 8009388:	1a9b      	subgt	r3, r3, r2
 800938a:	18ed      	addgt	r5, r5, r3
 800938c:	341a      	adds	r4, #26
 800938e:	42b5      	cmp	r5, r6
 8009390:	d11a      	bne.n	80093c8 <_printf_common+0xcc>
 8009392:	2000      	movs	r0, #0
 8009394:	e008      	b.n	80093a8 <_printf_common+0xac>
 8009396:	2301      	movs	r3, #1
 8009398:	4652      	mov	r2, sl
 800939a:	4649      	mov	r1, r9
 800939c:	4638      	mov	r0, r7
 800939e:	47c0      	blx	r8
 80093a0:	3001      	adds	r0, #1
 80093a2:	d103      	bne.n	80093ac <_printf_common+0xb0>
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ac:	3501      	adds	r5, #1
 80093ae:	e7c4      	b.n	800933a <_printf_common+0x3e>
 80093b0:	2030      	movs	r0, #48	; 0x30
 80093b2:	18e1      	adds	r1, r4, r3
 80093b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093be:	4422      	add	r2, r4
 80093c0:	3302      	adds	r3, #2
 80093c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093c6:	e7c5      	b.n	8009354 <_printf_common+0x58>
 80093c8:	2301      	movs	r3, #1
 80093ca:	4622      	mov	r2, r4
 80093cc:	4649      	mov	r1, r9
 80093ce:	4638      	mov	r0, r7
 80093d0:	47c0      	blx	r8
 80093d2:	3001      	adds	r0, #1
 80093d4:	d0e6      	beq.n	80093a4 <_printf_common+0xa8>
 80093d6:	3601      	adds	r6, #1
 80093d8:	e7d9      	b.n	800938e <_printf_common+0x92>
	...

080093dc <_printf_i>:
 80093dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093e0:	7e0f      	ldrb	r7, [r1, #24]
 80093e2:	4691      	mov	r9, r2
 80093e4:	2f78      	cmp	r7, #120	; 0x78
 80093e6:	4680      	mov	r8, r0
 80093e8:	460c      	mov	r4, r1
 80093ea:	469a      	mov	sl, r3
 80093ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093f2:	d807      	bhi.n	8009404 <_printf_i+0x28>
 80093f4:	2f62      	cmp	r7, #98	; 0x62
 80093f6:	d80a      	bhi.n	800940e <_printf_i+0x32>
 80093f8:	2f00      	cmp	r7, #0
 80093fa:	f000 80d9 	beq.w	80095b0 <_printf_i+0x1d4>
 80093fe:	2f58      	cmp	r7, #88	; 0x58
 8009400:	f000 80a4 	beq.w	800954c <_printf_i+0x170>
 8009404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009408:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800940c:	e03a      	b.n	8009484 <_printf_i+0xa8>
 800940e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009412:	2b15      	cmp	r3, #21
 8009414:	d8f6      	bhi.n	8009404 <_printf_i+0x28>
 8009416:	a101      	add	r1, pc, #4	; (adr r1, 800941c <_printf_i+0x40>)
 8009418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800941c:	08009475 	.word	0x08009475
 8009420:	08009489 	.word	0x08009489
 8009424:	08009405 	.word	0x08009405
 8009428:	08009405 	.word	0x08009405
 800942c:	08009405 	.word	0x08009405
 8009430:	08009405 	.word	0x08009405
 8009434:	08009489 	.word	0x08009489
 8009438:	08009405 	.word	0x08009405
 800943c:	08009405 	.word	0x08009405
 8009440:	08009405 	.word	0x08009405
 8009444:	08009405 	.word	0x08009405
 8009448:	08009597 	.word	0x08009597
 800944c:	080094b9 	.word	0x080094b9
 8009450:	08009579 	.word	0x08009579
 8009454:	08009405 	.word	0x08009405
 8009458:	08009405 	.word	0x08009405
 800945c:	080095b9 	.word	0x080095b9
 8009460:	08009405 	.word	0x08009405
 8009464:	080094b9 	.word	0x080094b9
 8009468:	08009405 	.word	0x08009405
 800946c:	08009405 	.word	0x08009405
 8009470:	08009581 	.word	0x08009581
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	1d1a      	adds	r2, r3, #4
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	602a      	str	r2, [r5, #0]
 800947c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009484:	2301      	movs	r3, #1
 8009486:	e0a4      	b.n	80095d2 <_printf_i+0x1f6>
 8009488:	6820      	ldr	r0, [r4, #0]
 800948a:	6829      	ldr	r1, [r5, #0]
 800948c:	0606      	lsls	r6, r0, #24
 800948e:	f101 0304 	add.w	r3, r1, #4
 8009492:	d50a      	bpl.n	80094aa <_printf_i+0xce>
 8009494:	680e      	ldr	r6, [r1, #0]
 8009496:	602b      	str	r3, [r5, #0]
 8009498:	2e00      	cmp	r6, #0
 800949a:	da03      	bge.n	80094a4 <_printf_i+0xc8>
 800949c:	232d      	movs	r3, #45	; 0x2d
 800949e:	4276      	negs	r6, r6
 80094a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094a4:	230a      	movs	r3, #10
 80094a6:	485e      	ldr	r0, [pc, #376]	; (8009620 <_printf_i+0x244>)
 80094a8:	e019      	b.n	80094de <_printf_i+0x102>
 80094aa:	680e      	ldr	r6, [r1, #0]
 80094ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094b0:	602b      	str	r3, [r5, #0]
 80094b2:	bf18      	it	ne
 80094b4:	b236      	sxthne	r6, r6
 80094b6:	e7ef      	b.n	8009498 <_printf_i+0xbc>
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	6820      	ldr	r0, [r4, #0]
 80094bc:	1d19      	adds	r1, r3, #4
 80094be:	6029      	str	r1, [r5, #0]
 80094c0:	0601      	lsls	r1, r0, #24
 80094c2:	d501      	bpl.n	80094c8 <_printf_i+0xec>
 80094c4:	681e      	ldr	r6, [r3, #0]
 80094c6:	e002      	b.n	80094ce <_printf_i+0xf2>
 80094c8:	0646      	lsls	r6, r0, #25
 80094ca:	d5fb      	bpl.n	80094c4 <_printf_i+0xe8>
 80094cc:	881e      	ldrh	r6, [r3, #0]
 80094ce:	2f6f      	cmp	r7, #111	; 0x6f
 80094d0:	bf0c      	ite	eq
 80094d2:	2308      	moveq	r3, #8
 80094d4:	230a      	movne	r3, #10
 80094d6:	4852      	ldr	r0, [pc, #328]	; (8009620 <_printf_i+0x244>)
 80094d8:	2100      	movs	r1, #0
 80094da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094de:	6865      	ldr	r5, [r4, #4]
 80094e0:	2d00      	cmp	r5, #0
 80094e2:	bfa8      	it	ge
 80094e4:	6821      	ldrge	r1, [r4, #0]
 80094e6:	60a5      	str	r5, [r4, #8]
 80094e8:	bfa4      	itt	ge
 80094ea:	f021 0104 	bicge.w	r1, r1, #4
 80094ee:	6021      	strge	r1, [r4, #0]
 80094f0:	b90e      	cbnz	r6, 80094f6 <_printf_i+0x11a>
 80094f2:	2d00      	cmp	r5, #0
 80094f4:	d04d      	beq.n	8009592 <_printf_i+0x1b6>
 80094f6:	4615      	mov	r5, r2
 80094f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80094fc:	fb03 6711 	mls	r7, r3, r1, r6
 8009500:	5dc7      	ldrb	r7, [r0, r7]
 8009502:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009506:	4637      	mov	r7, r6
 8009508:	42bb      	cmp	r3, r7
 800950a:	460e      	mov	r6, r1
 800950c:	d9f4      	bls.n	80094f8 <_printf_i+0x11c>
 800950e:	2b08      	cmp	r3, #8
 8009510:	d10b      	bne.n	800952a <_printf_i+0x14e>
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	07de      	lsls	r6, r3, #31
 8009516:	d508      	bpl.n	800952a <_printf_i+0x14e>
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	6861      	ldr	r1, [r4, #4]
 800951c:	4299      	cmp	r1, r3
 800951e:	bfde      	ittt	le
 8009520:	2330      	movle	r3, #48	; 0x30
 8009522:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009526:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800952a:	1b52      	subs	r2, r2, r5
 800952c:	6122      	str	r2, [r4, #16]
 800952e:	464b      	mov	r3, r9
 8009530:	4621      	mov	r1, r4
 8009532:	4640      	mov	r0, r8
 8009534:	f8cd a000 	str.w	sl, [sp]
 8009538:	aa03      	add	r2, sp, #12
 800953a:	f7ff fedf 	bl	80092fc <_printf_common>
 800953e:	3001      	adds	r0, #1
 8009540:	d14c      	bne.n	80095dc <_printf_i+0x200>
 8009542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009546:	b004      	add	sp, #16
 8009548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800954c:	4834      	ldr	r0, [pc, #208]	; (8009620 <_printf_i+0x244>)
 800954e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009552:	6829      	ldr	r1, [r5, #0]
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	f851 6b04 	ldr.w	r6, [r1], #4
 800955a:	6029      	str	r1, [r5, #0]
 800955c:	061d      	lsls	r5, r3, #24
 800955e:	d514      	bpl.n	800958a <_printf_i+0x1ae>
 8009560:	07df      	lsls	r7, r3, #31
 8009562:	bf44      	itt	mi
 8009564:	f043 0320 	orrmi.w	r3, r3, #32
 8009568:	6023      	strmi	r3, [r4, #0]
 800956a:	b91e      	cbnz	r6, 8009574 <_printf_i+0x198>
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	f023 0320 	bic.w	r3, r3, #32
 8009572:	6023      	str	r3, [r4, #0]
 8009574:	2310      	movs	r3, #16
 8009576:	e7af      	b.n	80094d8 <_printf_i+0xfc>
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	f043 0320 	orr.w	r3, r3, #32
 800957e:	6023      	str	r3, [r4, #0]
 8009580:	2378      	movs	r3, #120	; 0x78
 8009582:	4828      	ldr	r0, [pc, #160]	; (8009624 <_printf_i+0x248>)
 8009584:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009588:	e7e3      	b.n	8009552 <_printf_i+0x176>
 800958a:	0659      	lsls	r1, r3, #25
 800958c:	bf48      	it	mi
 800958e:	b2b6      	uxthmi	r6, r6
 8009590:	e7e6      	b.n	8009560 <_printf_i+0x184>
 8009592:	4615      	mov	r5, r2
 8009594:	e7bb      	b.n	800950e <_printf_i+0x132>
 8009596:	682b      	ldr	r3, [r5, #0]
 8009598:	6826      	ldr	r6, [r4, #0]
 800959a:	1d18      	adds	r0, r3, #4
 800959c:	6961      	ldr	r1, [r4, #20]
 800959e:	6028      	str	r0, [r5, #0]
 80095a0:	0635      	lsls	r5, r6, #24
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	d501      	bpl.n	80095aa <_printf_i+0x1ce>
 80095a6:	6019      	str	r1, [r3, #0]
 80095a8:	e002      	b.n	80095b0 <_printf_i+0x1d4>
 80095aa:	0670      	lsls	r0, r6, #25
 80095ac:	d5fb      	bpl.n	80095a6 <_printf_i+0x1ca>
 80095ae:	8019      	strh	r1, [r3, #0]
 80095b0:	2300      	movs	r3, #0
 80095b2:	4615      	mov	r5, r2
 80095b4:	6123      	str	r3, [r4, #16]
 80095b6:	e7ba      	b.n	800952e <_printf_i+0x152>
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	2100      	movs	r1, #0
 80095bc:	1d1a      	adds	r2, r3, #4
 80095be:	602a      	str	r2, [r5, #0]
 80095c0:	681d      	ldr	r5, [r3, #0]
 80095c2:	6862      	ldr	r2, [r4, #4]
 80095c4:	4628      	mov	r0, r5
 80095c6:	f000 ffe7 	bl	800a598 <memchr>
 80095ca:	b108      	cbz	r0, 80095d0 <_printf_i+0x1f4>
 80095cc:	1b40      	subs	r0, r0, r5
 80095ce:	6060      	str	r0, [r4, #4]
 80095d0:	6863      	ldr	r3, [r4, #4]
 80095d2:	6123      	str	r3, [r4, #16]
 80095d4:	2300      	movs	r3, #0
 80095d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095da:	e7a8      	b.n	800952e <_printf_i+0x152>
 80095dc:	462a      	mov	r2, r5
 80095de:	4649      	mov	r1, r9
 80095e0:	4640      	mov	r0, r8
 80095e2:	6923      	ldr	r3, [r4, #16]
 80095e4:	47d0      	blx	sl
 80095e6:	3001      	adds	r0, #1
 80095e8:	d0ab      	beq.n	8009542 <_printf_i+0x166>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	079b      	lsls	r3, r3, #30
 80095ee:	d413      	bmi.n	8009618 <_printf_i+0x23c>
 80095f0:	68e0      	ldr	r0, [r4, #12]
 80095f2:	9b03      	ldr	r3, [sp, #12]
 80095f4:	4298      	cmp	r0, r3
 80095f6:	bfb8      	it	lt
 80095f8:	4618      	movlt	r0, r3
 80095fa:	e7a4      	b.n	8009546 <_printf_i+0x16a>
 80095fc:	2301      	movs	r3, #1
 80095fe:	4632      	mov	r2, r6
 8009600:	4649      	mov	r1, r9
 8009602:	4640      	mov	r0, r8
 8009604:	47d0      	blx	sl
 8009606:	3001      	adds	r0, #1
 8009608:	d09b      	beq.n	8009542 <_printf_i+0x166>
 800960a:	3501      	adds	r5, #1
 800960c:	68e3      	ldr	r3, [r4, #12]
 800960e:	9903      	ldr	r1, [sp, #12]
 8009610:	1a5b      	subs	r3, r3, r1
 8009612:	42ab      	cmp	r3, r5
 8009614:	dcf2      	bgt.n	80095fc <_printf_i+0x220>
 8009616:	e7eb      	b.n	80095f0 <_printf_i+0x214>
 8009618:	2500      	movs	r5, #0
 800961a:	f104 0619 	add.w	r6, r4, #25
 800961e:	e7f5      	b.n	800960c <_printf_i+0x230>
 8009620:	08012682 	.word	0x08012682
 8009624:	08012693 	.word	0x08012693

08009628 <iprintf>:
 8009628:	b40f      	push	{r0, r1, r2, r3}
 800962a:	4b0a      	ldr	r3, [pc, #40]	; (8009654 <iprintf+0x2c>)
 800962c:	b513      	push	{r0, r1, r4, lr}
 800962e:	681c      	ldr	r4, [r3, #0]
 8009630:	b124      	cbz	r4, 800963c <iprintf+0x14>
 8009632:	69a3      	ldr	r3, [r4, #24]
 8009634:	b913      	cbnz	r3, 800963c <iprintf+0x14>
 8009636:	4620      	mov	r0, r4
 8009638:	f000 ff00 	bl	800a43c <__sinit>
 800963c:	ab05      	add	r3, sp, #20
 800963e:	4620      	mov	r0, r4
 8009640:	9a04      	ldr	r2, [sp, #16]
 8009642:	68a1      	ldr	r1, [r4, #8]
 8009644:	9301      	str	r3, [sp, #4]
 8009646:	f001 fdb9 	bl	800b1bc <_vfiprintf_r>
 800964a:	b002      	add	sp, #8
 800964c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009650:	b004      	add	sp, #16
 8009652:	4770      	bx	lr
 8009654:	20000018 	.word	0x20000018

08009658 <siprintf>:
 8009658:	b40e      	push	{r1, r2, r3}
 800965a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800965e:	b500      	push	{lr}
 8009660:	b09c      	sub	sp, #112	; 0x70
 8009662:	ab1d      	add	r3, sp, #116	; 0x74
 8009664:	9002      	str	r0, [sp, #8]
 8009666:	9006      	str	r0, [sp, #24]
 8009668:	9107      	str	r1, [sp, #28]
 800966a:	9104      	str	r1, [sp, #16]
 800966c:	4808      	ldr	r0, [pc, #32]	; (8009690 <siprintf+0x38>)
 800966e:	4909      	ldr	r1, [pc, #36]	; (8009694 <siprintf+0x3c>)
 8009670:	f853 2b04 	ldr.w	r2, [r3], #4
 8009674:	9105      	str	r1, [sp, #20]
 8009676:	6800      	ldr	r0, [r0, #0]
 8009678:	a902      	add	r1, sp, #8
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	f001 fc76 	bl	800af6c <_svfiprintf_r>
 8009680:	2200      	movs	r2, #0
 8009682:	9b02      	ldr	r3, [sp, #8]
 8009684:	701a      	strb	r2, [r3, #0]
 8009686:	b01c      	add	sp, #112	; 0x70
 8009688:	f85d eb04 	ldr.w	lr, [sp], #4
 800968c:	b003      	add	sp, #12
 800968e:	4770      	bx	lr
 8009690:	20000018 	.word	0x20000018
 8009694:	ffff0208 	.word	0xffff0208

08009698 <quorem>:
 8009698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	6903      	ldr	r3, [r0, #16]
 800969e:	690c      	ldr	r4, [r1, #16]
 80096a0:	4607      	mov	r7, r0
 80096a2:	42a3      	cmp	r3, r4
 80096a4:	f2c0 8082 	blt.w	80097ac <quorem+0x114>
 80096a8:	3c01      	subs	r4, #1
 80096aa:	f100 0514 	add.w	r5, r0, #20
 80096ae:	f101 0814 	add.w	r8, r1, #20
 80096b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096b6:	9301      	str	r3, [sp, #4]
 80096b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096c0:	3301      	adds	r3, #1
 80096c2:	429a      	cmp	r2, r3
 80096c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80096c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096d0:	d331      	bcc.n	8009736 <quorem+0x9e>
 80096d2:	f04f 0e00 	mov.w	lr, #0
 80096d6:	4640      	mov	r0, r8
 80096d8:	46ac      	mov	ip, r5
 80096da:	46f2      	mov	sl, lr
 80096dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80096e0:	b293      	uxth	r3, r2
 80096e2:	fb06 e303 	mla	r3, r6, r3, lr
 80096e6:	0c12      	lsrs	r2, r2, #16
 80096e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	fb06 e202 	mla	r2, r6, r2, lr
 80096f2:	ebaa 0303 	sub.w	r3, sl, r3
 80096f6:	f8dc a000 	ldr.w	sl, [ip]
 80096fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096fe:	fa1f fa8a 	uxth.w	sl, sl
 8009702:	4453      	add	r3, sl
 8009704:	f8dc a000 	ldr.w	sl, [ip]
 8009708:	b292      	uxth	r2, r2
 800970a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800970e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009712:	b29b      	uxth	r3, r3
 8009714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009718:	4581      	cmp	r9, r0
 800971a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800971e:	f84c 3b04 	str.w	r3, [ip], #4
 8009722:	d2db      	bcs.n	80096dc <quorem+0x44>
 8009724:	f855 300b 	ldr.w	r3, [r5, fp]
 8009728:	b92b      	cbnz	r3, 8009736 <quorem+0x9e>
 800972a:	9b01      	ldr	r3, [sp, #4]
 800972c:	3b04      	subs	r3, #4
 800972e:	429d      	cmp	r5, r3
 8009730:	461a      	mov	r2, r3
 8009732:	d32f      	bcc.n	8009794 <quorem+0xfc>
 8009734:	613c      	str	r4, [r7, #16]
 8009736:	4638      	mov	r0, r7
 8009738:	f001 f9c8 	bl	800aacc <__mcmp>
 800973c:	2800      	cmp	r0, #0
 800973e:	db25      	blt.n	800978c <quorem+0xf4>
 8009740:	4628      	mov	r0, r5
 8009742:	f04f 0c00 	mov.w	ip, #0
 8009746:	3601      	adds	r6, #1
 8009748:	f858 1b04 	ldr.w	r1, [r8], #4
 800974c:	f8d0 e000 	ldr.w	lr, [r0]
 8009750:	b28b      	uxth	r3, r1
 8009752:	ebac 0303 	sub.w	r3, ip, r3
 8009756:	fa1f f28e 	uxth.w	r2, lr
 800975a:	4413      	add	r3, r2
 800975c:	0c0a      	lsrs	r2, r1, #16
 800975e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009762:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009766:	b29b      	uxth	r3, r3
 8009768:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800976c:	45c1      	cmp	r9, r8
 800976e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009772:	f840 3b04 	str.w	r3, [r0], #4
 8009776:	d2e7      	bcs.n	8009748 <quorem+0xb0>
 8009778:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800977c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009780:	b922      	cbnz	r2, 800978c <quorem+0xf4>
 8009782:	3b04      	subs	r3, #4
 8009784:	429d      	cmp	r5, r3
 8009786:	461a      	mov	r2, r3
 8009788:	d30a      	bcc.n	80097a0 <quorem+0x108>
 800978a:	613c      	str	r4, [r7, #16]
 800978c:	4630      	mov	r0, r6
 800978e:	b003      	add	sp, #12
 8009790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009794:	6812      	ldr	r2, [r2, #0]
 8009796:	3b04      	subs	r3, #4
 8009798:	2a00      	cmp	r2, #0
 800979a:	d1cb      	bne.n	8009734 <quorem+0x9c>
 800979c:	3c01      	subs	r4, #1
 800979e:	e7c6      	b.n	800972e <quorem+0x96>
 80097a0:	6812      	ldr	r2, [r2, #0]
 80097a2:	3b04      	subs	r3, #4
 80097a4:	2a00      	cmp	r2, #0
 80097a6:	d1f0      	bne.n	800978a <quorem+0xf2>
 80097a8:	3c01      	subs	r4, #1
 80097aa:	e7eb      	b.n	8009784 <quorem+0xec>
 80097ac:	2000      	movs	r0, #0
 80097ae:	e7ee      	b.n	800978e <quorem+0xf6>

080097b0 <_dtoa_r>:
 80097b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	4616      	mov	r6, r2
 80097b6:	461f      	mov	r7, r3
 80097b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097ba:	b099      	sub	sp, #100	; 0x64
 80097bc:	4605      	mov	r5, r0
 80097be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80097c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80097c6:	b974      	cbnz	r4, 80097e6 <_dtoa_r+0x36>
 80097c8:	2010      	movs	r0, #16
 80097ca:	f000 fedd 	bl	800a588 <malloc>
 80097ce:	4602      	mov	r2, r0
 80097d0:	6268      	str	r0, [r5, #36]	; 0x24
 80097d2:	b920      	cbnz	r0, 80097de <_dtoa_r+0x2e>
 80097d4:	21ea      	movs	r1, #234	; 0xea
 80097d6:	4ba8      	ldr	r3, [pc, #672]	; (8009a78 <_dtoa_r+0x2c8>)
 80097d8:	48a8      	ldr	r0, [pc, #672]	; (8009a7c <_dtoa_r+0x2cc>)
 80097da:	f001 ff45 	bl	800b668 <__assert_func>
 80097de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097e2:	6004      	str	r4, [r0, #0]
 80097e4:	60c4      	str	r4, [r0, #12]
 80097e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097e8:	6819      	ldr	r1, [r3, #0]
 80097ea:	b151      	cbz	r1, 8009802 <_dtoa_r+0x52>
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	2301      	movs	r3, #1
 80097f0:	4093      	lsls	r3, r2
 80097f2:	604a      	str	r2, [r1, #4]
 80097f4:	608b      	str	r3, [r1, #8]
 80097f6:	4628      	mov	r0, r5
 80097f8:	f000 ff2a 	bl	800a650 <_Bfree>
 80097fc:	2200      	movs	r2, #0
 80097fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	1e3b      	subs	r3, r7, #0
 8009804:	bfaf      	iteee	ge
 8009806:	2300      	movge	r3, #0
 8009808:	2201      	movlt	r2, #1
 800980a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800980e:	9305      	strlt	r3, [sp, #20]
 8009810:	bfa8      	it	ge
 8009812:	f8c8 3000 	strge.w	r3, [r8]
 8009816:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800981a:	4b99      	ldr	r3, [pc, #612]	; (8009a80 <_dtoa_r+0x2d0>)
 800981c:	bfb8      	it	lt
 800981e:	f8c8 2000 	strlt.w	r2, [r8]
 8009822:	ea33 0309 	bics.w	r3, r3, r9
 8009826:	d119      	bne.n	800985c <_dtoa_r+0xac>
 8009828:	f242 730f 	movw	r3, #9999	; 0x270f
 800982c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009834:	4333      	orrs	r3, r6
 8009836:	f000 857f 	beq.w	800a338 <_dtoa_r+0xb88>
 800983a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800983c:	b953      	cbnz	r3, 8009854 <_dtoa_r+0xa4>
 800983e:	4b91      	ldr	r3, [pc, #580]	; (8009a84 <_dtoa_r+0x2d4>)
 8009840:	e022      	b.n	8009888 <_dtoa_r+0xd8>
 8009842:	4b91      	ldr	r3, [pc, #580]	; (8009a88 <_dtoa_r+0x2d8>)
 8009844:	9303      	str	r3, [sp, #12]
 8009846:	3308      	adds	r3, #8
 8009848:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800984a:	6013      	str	r3, [r2, #0]
 800984c:	9803      	ldr	r0, [sp, #12]
 800984e:	b019      	add	sp, #100	; 0x64
 8009850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009854:	4b8b      	ldr	r3, [pc, #556]	; (8009a84 <_dtoa_r+0x2d4>)
 8009856:	9303      	str	r3, [sp, #12]
 8009858:	3303      	adds	r3, #3
 800985a:	e7f5      	b.n	8009848 <_dtoa_r+0x98>
 800985c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009860:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009864:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009868:	2200      	movs	r2, #0
 800986a:	2300      	movs	r3, #0
 800986c:	f7f7 f89c 	bl	80009a8 <__aeabi_dcmpeq>
 8009870:	4680      	mov	r8, r0
 8009872:	b158      	cbz	r0, 800988c <_dtoa_r+0xdc>
 8009874:	2301      	movs	r3, #1
 8009876:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009878:	6013      	str	r3, [r2, #0]
 800987a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 8558 	beq.w	800a332 <_dtoa_r+0xb82>
 8009882:	4882      	ldr	r0, [pc, #520]	; (8009a8c <_dtoa_r+0x2dc>)
 8009884:	6018      	str	r0, [r3, #0]
 8009886:	1e43      	subs	r3, r0, #1
 8009888:	9303      	str	r3, [sp, #12]
 800988a:	e7df      	b.n	800984c <_dtoa_r+0x9c>
 800988c:	ab16      	add	r3, sp, #88	; 0x58
 800988e:	9301      	str	r3, [sp, #4]
 8009890:	ab17      	add	r3, sp, #92	; 0x5c
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	4628      	mov	r0, r5
 8009896:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800989a:	f001 f9bf 	bl	800ac1c <__d2b>
 800989e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80098a2:	4683      	mov	fp, r0
 80098a4:	2c00      	cmp	r4, #0
 80098a6:	d07f      	beq.n	80099a8 <_dtoa_r+0x1f8>
 80098a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098ae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80098b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80098ba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80098be:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80098c2:	2200      	movs	r2, #0
 80098c4:	4b72      	ldr	r3, [pc, #456]	; (8009a90 <_dtoa_r+0x2e0>)
 80098c6:	f7f6 fc4f 	bl	8000168 <__aeabi_dsub>
 80098ca:	a365      	add	r3, pc, #404	; (adr r3, 8009a60 <_dtoa_r+0x2b0>)
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	f7f6 fe02 	bl	80004d8 <__aeabi_dmul>
 80098d4:	a364      	add	r3, pc, #400	; (adr r3, 8009a68 <_dtoa_r+0x2b8>)
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	f7f6 fc47 	bl	800016c <__adddf3>
 80098de:	4606      	mov	r6, r0
 80098e0:	4620      	mov	r0, r4
 80098e2:	460f      	mov	r7, r1
 80098e4:	f7f6 fd8e 	bl	8000404 <__aeabi_i2d>
 80098e8:	a361      	add	r3, pc, #388	; (adr r3, 8009a70 <_dtoa_r+0x2c0>)
 80098ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ee:	f7f6 fdf3 	bl	80004d8 <__aeabi_dmul>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	4630      	mov	r0, r6
 80098f8:	4639      	mov	r1, r7
 80098fa:	f7f6 fc37 	bl	800016c <__adddf3>
 80098fe:	4606      	mov	r6, r0
 8009900:	460f      	mov	r7, r1
 8009902:	f7f7 f899 	bl	8000a38 <__aeabi_d2iz>
 8009906:	2200      	movs	r2, #0
 8009908:	4682      	mov	sl, r0
 800990a:	2300      	movs	r3, #0
 800990c:	4630      	mov	r0, r6
 800990e:	4639      	mov	r1, r7
 8009910:	f7f7 f854 	bl	80009bc <__aeabi_dcmplt>
 8009914:	b148      	cbz	r0, 800992a <_dtoa_r+0x17a>
 8009916:	4650      	mov	r0, sl
 8009918:	f7f6 fd74 	bl	8000404 <__aeabi_i2d>
 800991c:	4632      	mov	r2, r6
 800991e:	463b      	mov	r3, r7
 8009920:	f7f7 f842 	bl	80009a8 <__aeabi_dcmpeq>
 8009924:	b908      	cbnz	r0, 800992a <_dtoa_r+0x17a>
 8009926:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800992a:	f1ba 0f16 	cmp.w	sl, #22
 800992e:	d858      	bhi.n	80099e2 <_dtoa_r+0x232>
 8009930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009934:	4b57      	ldr	r3, [pc, #348]	; (8009a94 <_dtoa_r+0x2e4>)
 8009936:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	f7f7 f83d 	bl	80009bc <__aeabi_dcmplt>
 8009942:	2800      	cmp	r0, #0
 8009944:	d04f      	beq.n	80099e6 <_dtoa_r+0x236>
 8009946:	2300      	movs	r3, #0
 8009948:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800994c:	930f      	str	r3, [sp, #60]	; 0x3c
 800994e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009950:	1b1c      	subs	r4, r3, r4
 8009952:	1e63      	subs	r3, r4, #1
 8009954:	9309      	str	r3, [sp, #36]	; 0x24
 8009956:	bf49      	itett	mi
 8009958:	f1c4 0301 	rsbmi	r3, r4, #1
 800995c:	2300      	movpl	r3, #0
 800995e:	9306      	strmi	r3, [sp, #24]
 8009960:	2300      	movmi	r3, #0
 8009962:	bf54      	ite	pl
 8009964:	9306      	strpl	r3, [sp, #24]
 8009966:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009968:	f1ba 0f00 	cmp.w	sl, #0
 800996c:	db3d      	blt.n	80099ea <_dtoa_r+0x23a>
 800996e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009970:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009974:	4453      	add	r3, sl
 8009976:	9309      	str	r3, [sp, #36]	; 0x24
 8009978:	2300      	movs	r3, #0
 800997a:	930a      	str	r3, [sp, #40]	; 0x28
 800997c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800997e:	2b09      	cmp	r3, #9
 8009980:	f200 808c 	bhi.w	8009a9c <_dtoa_r+0x2ec>
 8009984:	2b05      	cmp	r3, #5
 8009986:	bfc4      	itt	gt
 8009988:	3b04      	subgt	r3, #4
 800998a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800998c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800998e:	bfc8      	it	gt
 8009990:	2400      	movgt	r4, #0
 8009992:	f1a3 0302 	sub.w	r3, r3, #2
 8009996:	bfd8      	it	le
 8009998:	2401      	movle	r4, #1
 800999a:	2b03      	cmp	r3, #3
 800999c:	f200 808a 	bhi.w	8009ab4 <_dtoa_r+0x304>
 80099a0:	e8df f003 	tbb	[pc, r3]
 80099a4:	5b4d4f2d 	.word	0x5b4d4f2d
 80099a8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80099ac:	441c      	add	r4, r3
 80099ae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80099b2:	2b20      	cmp	r3, #32
 80099b4:	bfc3      	ittte	gt
 80099b6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099ba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80099be:	fa09 f303 	lslgt.w	r3, r9, r3
 80099c2:	f1c3 0320 	rsble	r3, r3, #32
 80099c6:	bfc6      	itte	gt
 80099c8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80099cc:	4318      	orrgt	r0, r3
 80099ce:	fa06 f003 	lslle.w	r0, r6, r3
 80099d2:	f7f6 fd07 	bl	80003e4 <__aeabi_ui2d>
 80099d6:	2301      	movs	r3, #1
 80099d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80099dc:	3c01      	subs	r4, #1
 80099de:	9313      	str	r3, [sp, #76]	; 0x4c
 80099e0:	e76f      	b.n	80098c2 <_dtoa_r+0x112>
 80099e2:	2301      	movs	r3, #1
 80099e4:	e7b2      	b.n	800994c <_dtoa_r+0x19c>
 80099e6:	900f      	str	r0, [sp, #60]	; 0x3c
 80099e8:	e7b1      	b.n	800994e <_dtoa_r+0x19e>
 80099ea:	9b06      	ldr	r3, [sp, #24]
 80099ec:	eba3 030a 	sub.w	r3, r3, sl
 80099f0:	9306      	str	r3, [sp, #24]
 80099f2:	f1ca 0300 	rsb	r3, sl, #0
 80099f6:	930a      	str	r3, [sp, #40]	; 0x28
 80099f8:	2300      	movs	r3, #0
 80099fa:	930e      	str	r3, [sp, #56]	; 0x38
 80099fc:	e7be      	b.n	800997c <_dtoa_r+0x1cc>
 80099fe:	2300      	movs	r3, #0
 8009a00:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	dc58      	bgt.n	8009aba <_dtoa_r+0x30a>
 8009a08:	f04f 0901 	mov.w	r9, #1
 8009a0c:	464b      	mov	r3, r9
 8009a0e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009a12:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009a16:	2200      	movs	r2, #0
 8009a18:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009a1a:	6042      	str	r2, [r0, #4]
 8009a1c:	2204      	movs	r2, #4
 8009a1e:	f102 0614 	add.w	r6, r2, #20
 8009a22:	429e      	cmp	r6, r3
 8009a24:	6841      	ldr	r1, [r0, #4]
 8009a26:	d94e      	bls.n	8009ac6 <_dtoa_r+0x316>
 8009a28:	4628      	mov	r0, r5
 8009a2a:	f000 fdd1 	bl	800a5d0 <_Balloc>
 8009a2e:	9003      	str	r0, [sp, #12]
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d14c      	bne.n	8009ace <_dtoa_r+0x31e>
 8009a34:	4602      	mov	r2, r0
 8009a36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a3a:	4b17      	ldr	r3, [pc, #92]	; (8009a98 <_dtoa_r+0x2e8>)
 8009a3c:	e6cc      	b.n	80097d8 <_dtoa_r+0x28>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e7de      	b.n	8009a00 <_dtoa_r+0x250>
 8009a42:	2300      	movs	r3, #0
 8009a44:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a48:	eb0a 0903 	add.w	r9, sl, r3
 8009a4c:	f109 0301 	add.w	r3, r9, #1
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	9308      	str	r3, [sp, #32]
 8009a54:	bfb8      	it	lt
 8009a56:	2301      	movlt	r3, #1
 8009a58:	e7dd      	b.n	8009a16 <_dtoa_r+0x266>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e7f2      	b.n	8009a44 <_dtoa_r+0x294>
 8009a5e:	bf00      	nop
 8009a60:	636f4361 	.word	0x636f4361
 8009a64:	3fd287a7 	.word	0x3fd287a7
 8009a68:	8b60c8b3 	.word	0x8b60c8b3
 8009a6c:	3fc68a28 	.word	0x3fc68a28
 8009a70:	509f79fb 	.word	0x509f79fb
 8009a74:	3fd34413 	.word	0x3fd34413
 8009a78:	080126b1 	.word	0x080126b1
 8009a7c:	080126c8 	.word	0x080126c8
 8009a80:	7ff00000 	.word	0x7ff00000
 8009a84:	080126ad 	.word	0x080126ad
 8009a88:	080126a4 	.word	0x080126a4
 8009a8c:	08012681 	.word	0x08012681
 8009a90:	3ff80000 	.word	0x3ff80000
 8009a94:	08012818 	.word	0x08012818
 8009a98:	08012723 	.word	0x08012723
 8009a9c:	2401      	movs	r4, #1
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	940b      	str	r4, [sp, #44]	; 0x2c
 8009aa2:	9322      	str	r3, [sp, #136]	; 0x88
 8009aa4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	2312      	movs	r3, #18
 8009aac:	f8cd 9020 	str.w	r9, [sp, #32]
 8009ab0:	9223      	str	r2, [sp, #140]	; 0x8c
 8009ab2:	e7b0      	b.n	8009a16 <_dtoa_r+0x266>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ab8:	e7f4      	b.n	8009aa4 <_dtoa_r+0x2f4>
 8009aba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009abe:	464b      	mov	r3, r9
 8009ac0:	f8cd 9020 	str.w	r9, [sp, #32]
 8009ac4:	e7a7      	b.n	8009a16 <_dtoa_r+0x266>
 8009ac6:	3101      	adds	r1, #1
 8009ac8:	6041      	str	r1, [r0, #4]
 8009aca:	0052      	lsls	r2, r2, #1
 8009acc:	e7a7      	b.n	8009a1e <_dtoa_r+0x26e>
 8009ace:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ad0:	9a03      	ldr	r2, [sp, #12]
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	9b08      	ldr	r3, [sp, #32]
 8009ad6:	2b0e      	cmp	r3, #14
 8009ad8:	f200 80a8 	bhi.w	8009c2c <_dtoa_r+0x47c>
 8009adc:	2c00      	cmp	r4, #0
 8009ade:	f000 80a5 	beq.w	8009c2c <_dtoa_r+0x47c>
 8009ae2:	f1ba 0f00 	cmp.w	sl, #0
 8009ae6:	dd34      	ble.n	8009b52 <_dtoa_r+0x3a2>
 8009ae8:	4a9a      	ldr	r2, [pc, #616]	; (8009d54 <_dtoa_r+0x5a4>)
 8009aea:	f00a 030f 	and.w	r3, sl, #15
 8009aee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009af2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009af6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009afa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009afe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009b02:	d016      	beq.n	8009b32 <_dtoa_r+0x382>
 8009b04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b08:	4b93      	ldr	r3, [pc, #588]	; (8009d58 <_dtoa_r+0x5a8>)
 8009b0a:	2703      	movs	r7, #3
 8009b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b10:	f7f6 fe0c 	bl	800072c <__aeabi_ddiv>
 8009b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b18:	f004 040f 	and.w	r4, r4, #15
 8009b1c:	4e8e      	ldr	r6, [pc, #568]	; (8009d58 <_dtoa_r+0x5a8>)
 8009b1e:	b954      	cbnz	r4, 8009b36 <_dtoa_r+0x386>
 8009b20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b28:	f7f6 fe00 	bl	800072c <__aeabi_ddiv>
 8009b2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b30:	e029      	b.n	8009b86 <_dtoa_r+0x3d6>
 8009b32:	2702      	movs	r7, #2
 8009b34:	e7f2      	b.n	8009b1c <_dtoa_r+0x36c>
 8009b36:	07e1      	lsls	r1, r4, #31
 8009b38:	d508      	bpl.n	8009b4c <_dtoa_r+0x39c>
 8009b3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b42:	f7f6 fcc9 	bl	80004d8 <__aeabi_dmul>
 8009b46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b4a:	3701      	adds	r7, #1
 8009b4c:	1064      	asrs	r4, r4, #1
 8009b4e:	3608      	adds	r6, #8
 8009b50:	e7e5      	b.n	8009b1e <_dtoa_r+0x36e>
 8009b52:	f000 80a5 	beq.w	8009ca0 <_dtoa_r+0x4f0>
 8009b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b5a:	f1ca 0400 	rsb	r4, sl, #0
 8009b5e:	4b7d      	ldr	r3, [pc, #500]	; (8009d54 <_dtoa_r+0x5a4>)
 8009b60:	f004 020f 	and.w	r2, r4, #15
 8009b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	f7f6 fcb4 	bl	80004d8 <__aeabi_dmul>
 8009b70:	2702      	movs	r7, #2
 8009b72:	2300      	movs	r3, #0
 8009b74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b78:	4e77      	ldr	r6, [pc, #476]	; (8009d58 <_dtoa_r+0x5a8>)
 8009b7a:	1124      	asrs	r4, r4, #4
 8009b7c:	2c00      	cmp	r4, #0
 8009b7e:	f040 8084 	bne.w	8009c8a <_dtoa_r+0x4da>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1d2      	bne.n	8009b2c <_dtoa_r+0x37c>
 8009b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 808b 	beq.w	8009ca4 <_dtoa_r+0x4f4>
 8009b8e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	4b6f      	ldr	r3, [pc, #444]	; (8009d5c <_dtoa_r+0x5ac>)
 8009b9e:	f7f6 ff0d 	bl	80009bc <__aeabi_dcmplt>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d07e      	beq.n	8009ca4 <_dtoa_r+0x4f4>
 8009ba6:	9b08      	ldr	r3, [sp, #32]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d07b      	beq.n	8009ca4 <_dtoa_r+0x4f4>
 8009bac:	f1b9 0f00 	cmp.w	r9, #0
 8009bb0:	dd38      	ble.n	8009c24 <_dtoa_r+0x474>
 8009bb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	4b69      	ldr	r3, [pc, #420]	; (8009d60 <_dtoa_r+0x5b0>)
 8009bba:	f7f6 fc8d 	bl	80004d8 <__aeabi_dmul>
 8009bbe:	464c      	mov	r4, r9
 8009bc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bc4:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8009bc8:	3701      	adds	r7, #1
 8009bca:	4638      	mov	r0, r7
 8009bcc:	f7f6 fc1a 	bl	8000404 <__aeabi_i2d>
 8009bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bd4:	f7f6 fc80 	bl	80004d8 <__aeabi_dmul>
 8009bd8:	2200      	movs	r2, #0
 8009bda:	4b62      	ldr	r3, [pc, #392]	; (8009d64 <_dtoa_r+0x5b4>)
 8009bdc:	f7f6 fac6 	bl	800016c <__adddf3>
 8009be0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009be4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009be8:	9611      	str	r6, [sp, #68]	; 0x44
 8009bea:	2c00      	cmp	r4, #0
 8009bec:	d15d      	bne.n	8009caa <_dtoa_r+0x4fa>
 8009bee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	4b5c      	ldr	r3, [pc, #368]	; (8009d68 <_dtoa_r+0x5b8>)
 8009bf6:	f7f6 fab7 	bl	8000168 <__aeabi_dsub>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c02:	4633      	mov	r3, r6
 8009c04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c06:	f7f6 fef7 	bl	80009f8 <__aeabi_dcmpgt>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	f040 829c 	bne.w	800a148 <_dtoa_r+0x998>
 8009c10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c16:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c1a:	f7f6 fecf 	bl	80009bc <__aeabi_dcmplt>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	f040 8290 	bne.w	800a144 <_dtoa_r+0x994>
 8009c24:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009c28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f2c0 8152 	blt.w	8009ed8 <_dtoa_r+0x728>
 8009c34:	f1ba 0f0e 	cmp.w	sl, #14
 8009c38:	f300 814e 	bgt.w	8009ed8 <_dtoa_r+0x728>
 8009c3c:	4b45      	ldr	r3, [pc, #276]	; (8009d54 <_dtoa_r+0x5a4>)
 8009c3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c46:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009c4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f280 80db 	bge.w	8009e08 <_dtoa_r+0x658>
 8009c52:	9b08      	ldr	r3, [sp, #32]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f300 80d7 	bgt.w	8009e08 <_dtoa_r+0x658>
 8009c5a:	f040 8272 	bne.w	800a142 <_dtoa_r+0x992>
 8009c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c62:	2200      	movs	r2, #0
 8009c64:	4b40      	ldr	r3, [pc, #256]	; (8009d68 <_dtoa_r+0x5b8>)
 8009c66:	f7f6 fc37 	bl	80004d8 <__aeabi_dmul>
 8009c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c6e:	f7f6 feb9 	bl	80009e4 <__aeabi_dcmpge>
 8009c72:	9c08      	ldr	r4, [sp, #32]
 8009c74:	4626      	mov	r6, r4
 8009c76:	2800      	cmp	r0, #0
 8009c78:	f040 8248 	bne.w	800a10c <_dtoa_r+0x95c>
 8009c7c:	2331      	movs	r3, #49	; 0x31
 8009c7e:	9f03      	ldr	r7, [sp, #12]
 8009c80:	f10a 0a01 	add.w	sl, sl, #1
 8009c84:	f807 3b01 	strb.w	r3, [r7], #1
 8009c88:	e244      	b.n	800a114 <_dtoa_r+0x964>
 8009c8a:	07e2      	lsls	r2, r4, #31
 8009c8c:	d505      	bpl.n	8009c9a <_dtoa_r+0x4ea>
 8009c8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c92:	f7f6 fc21 	bl	80004d8 <__aeabi_dmul>
 8009c96:	2301      	movs	r3, #1
 8009c98:	3701      	adds	r7, #1
 8009c9a:	1064      	asrs	r4, r4, #1
 8009c9c:	3608      	adds	r6, #8
 8009c9e:	e76d      	b.n	8009b7c <_dtoa_r+0x3cc>
 8009ca0:	2702      	movs	r7, #2
 8009ca2:	e770      	b.n	8009b86 <_dtoa_r+0x3d6>
 8009ca4:	46d0      	mov	r8, sl
 8009ca6:	9c08      	ldr	r4, [sp, #32]
 8009ca8:	e78f      	b.n	8009bca <_dtoa_r+0x41a>
 8009caa:	9903      	ldr	r1, [sp, #12]
 8009cac:	4b29      	ldr	r3, [pc, #164]	; (8009d54 <_dtoa_r+0x5a4>)
 8009cae:	4421      	add	r1, r4
 8009cb0:	9112      	str	r1, [sp, #72]	; 0x48
 8009cb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009cb8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009cbc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cc0:	2900      	cmp	r1, #0
 8009cc2:	d055      	beq.n	8009d70 <_dtoa_r+0x5c0>
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	4929      	ldr	r1, [pc, #164]	; (8009d6c <_dtoa_r+0x5bc>)
 8009cc8:	f7f6 fd30 	bl	800072c <__aeabi_ddiv>
 8009ccc:	463b      	mov	r3, r7
 8009cce:	4632      	mov	r2, r6
 8009cd0:	f7f6 fa4a 	bl	8000168 <__aeabi_dsub>
 8009cd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009cd8:	9f03      	ldr	r7, [sp, #12]
 8009cda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cde:	f7f6 feab 	bl	8000a38 <__aeabi_d2iz>
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	f7f6 fb8e 	bl	8000404 <__aeabi_i2d>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cf0:	f7f6 fa3a 	bl	8000168 <__aeabi_dsub>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	3430      	adds	r4, #48	; 0x30
 8009cfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009cfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d02:	f807 4b01 	strb.w	r4, [r7], #1
 8009d06:	f7f6 fe59 	bl	80009bc <__aeabi_dcmplt>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d174      	bne.n	8009df8 <_dtoa_r+0x648>
 8009d0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d12:	2000      	movs	r0, #0
 8009d14:	4911      	ldr	r1, [pc, #68]	; (8009d5c <_dtoa_r+0x5ac>)
 8009d16:	f7f6 fa27 	bl	8000168 <__aeabi_dsub>
 8009d1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d1e:	f7f6 fe4d 	bl	80009bc <__aeabi_dcmplt>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	f040 80b7 	bne.w	8009e96 <_dtoa_r+0x6e6>
 8009d28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d2a:	429f      	cmp	r7, r3
 8009d2c:	f43f af7a 	beq.w	8009c24 <_dtoa_r+0x474>
 8009d30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d34:	2200      	movs	r2, #0
 8009d36:	4b0a      	ldr	r3, [pc, #40]	; (8009d60 <_dtoa_r+0x5b0>)
 8009d38:	f7f6 fbce 	bl	80004d8 <__aeabi_dmul>
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d46:	4b06      	ldr	r3, [pc, #24]	; (8009d60 <_dtoa_r+0x5b0>)
 8009d48:	f7f6 fbc6 	bl	80004d8 <__aeabi_dmul>
 8009d4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d50:	e7c3      	b.n	8009cda <_dtoa_r+0x52a>
 8009d52:	bf00      	nop
 8009d54:	08012818 	.word	0x08012818
 8009d58:	080127f0 	.word	0x080127f0
 8009d5c:	3ff00000 	.word	0x3ff00000
 8009d60:	40240000 	.word	0x40240000
 8009d64:	401c0000 	.word	0x401c0000
 8009d68:	40140000 	.word	0x40140000
 8009d6c:	3fe00000 	.word	0x3fe00000
 8009d70:	4630      	mov	r0, r6
 8009d72:	4639      	mov	r1, r7
 8009d74:	f7f6 fbb0 	bl	80004d8 <__aeabi_dmul>
 8009d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d7e:	9c03      	ldr	r4, [sp, #12]
 8009d80:	9314      	str	r3, [sp, #80]	; 0x50
 8009d82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d86:	f7f6 fe57 	bl	8000a38 <__aeabi_d2iz>
 8009d8a:	9015      	str	r0, [sp, #84]	; 0x54
 8009d8c:	f7f6 fb3a 	bl	8000404 <__aeabi_i2d>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d98:	f7f6 f9e6 	bl	8000168 <__aeabi_dsub>
 8009d9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d9e:	4606      	mov	r6, r0
 8009da0:	3330      	adds	r3, #48	; 0x30
 8009da2:	f804 3b01 	strb.w	r3, [r4], #1
 8009da6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009da8:	460f      	mov	r7, r1
 8009daa:	429c      	cmp	r4, r3
 8009dac:	f04f 0200 	mov.w	r2, #0
 8009db0:	d124      	bne.n	8009dfc <_dtoa_r+0x64c>
 8009db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009db6:	4bb0      	ldr	r3, [pc, #704]	; (800a078 <_dtoa_r+0x8c8>)
 8009db8:	f7f6 f9d8 	bl	800016c <__adddf3>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	4639      	mov	r1, r7
 8009dc4:	f7f6 fe18 	bl	80009f8 <__aeabi_dcmpgt>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d163      	bne.n	8009e94 <_dtoa_r+0x6e4>
 8009dcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	49a9      	ldr	r1, [pc, #676]	; (800a078 <_dtoa_r+0x8c8>)
 8009dd4:	f7f6 f9c8 	bl	8000168 <__aeabi_dsub>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4630      	mov	r0, r6
 8009dde:	4639      	mov	r1, r7
 8009de0:	f7f6 fdec 	bl	80009bc <__aeabi_dcmplt>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	f43f af1d 	beq.w	8009c24 <_dtoa_r+0x474>
 8009dea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009dec:	1e7b      	subs	r3, r7, #1
 8009dee:	9314      	str	r3, [sp, #80]	; 0x50
 8009df0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009df4:	2b30      	cmp	r3, #48	; 0x30
 8009df6:	d0f8      	beq.n	8009dea <_dtoa_r+0x63a>
 8009df8:	46c2      	mov	sl, r8
 8009dfa:	e03b      	b.n	8009e74 <_dtoa_r+0x6c4>
 8009dfc:	4b9f      	ldr	r3, [pc, #636]	; (800a07c <_dtoa_r+0x8cc>)
 8009dfe:	f7f6 fb6b 	bl	80004d8 <__aeabi_dmul>
 8009e02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e06:	e7bc      	b.n	8009d82 <_dtoa_r+0x5d2>
 8009e08:	9f03      	ldr	r7, [sp, #12]
 8009e0a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009e0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e12:	4640      	mov	r0, r8
 8009e14:	4649      	mov	r1, r9
 8009e16:	f7f6 fc89 	bl	800072c <__aeabi_ddiv>
 8009e1a:	f7f6 fe0d 	bl	8000a38 <__aeabi_d2iz>
 8009e1e:	4604      	mov	r4, r0
 8009e20:	f7f6 faf0 	bl	8000404 <__aeabi_i2d>
 8009e24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e28:	f7f6 fb56 	bl	80004d8 <__aeabi_dmul>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4640      	mov	r0, r8
 8009e32:	4649      	mov	r1, r9
 8009e34:	f7f6 f998 	bl	8000168 <__aeabi_dsub>
 8009e38:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009e3c:	f807 6b01 	strb.w	r6, [r7], #1
 8009e40:	9e03      	ldr	r6, [sp, #12]
 8009e42:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009e46:	1bbe      	subs	r6, r7, r6
 8009e48:	45b4      	cmp	ip, r6
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	d136      	bne.n	8009ebe <_dtoa_r+0x70e>
 8009e50:	f7f6 f98c 	bl	800016c <__adddf3>
 8009e54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e58:	4680      	mov	r8, r0
 8009e5a:	4689      	mov	r9, r1
 8009e5c:	f7f6 fdcc 	bl	80009f8 <__aeabi_dcmpgt>
 8009e60:	bb58      	cbnz	r0, 8009eba <_dtoa_r+0x70a>
 8009e62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e66:	4640      	mov	r0, r8
 8009e68:	4649      	mov	r1, r9
 8009e6a:	f7f6 fd9d 	bl	80009a8 <__aeabi_dcmpeq>
 8009e6e:	b108      	cbz	r0, 8009e74 <_dtoa_r+0x6c4>
 8009e70:	07e1      	lsls	r1, r4, #31
 8009e72:	d422      	bmi.n	8009eba <_dtoa_r+0x70a>
 8009e74:	4628      	mov	r0, r5
 8009e76:	4659      	mov	r1, fp
 8009e78:	f000 fbea 	bl	800a650 <_Bfree>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	703b      	strb	r3, [r7, #0]
 8009e80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009e82:	f10a 0001 	add.w	r0, sl, #1
 8009e86:	6018      	str	r0, [r3, #0]
 8009e88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f43f acde 	beq.w	800984c <_dtoa_r+0x9c>
 8009e90:	601f      	str	r7, [r3, #0]
 8009e92:	e4db      	b.n	800984c <_dtoa_r+0x9c>
 8009e94:	4627      	mov	r7, r4
 8009e96:	463b      	mov	r3, r7
 8009e98:	461f      	mov	r7, r3
 8009e9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e9e:	2a39      	cmp	r2, #57	; 0x39
 8009ea0:	d107      	bne.n	8009eb2 <_dtoa_r+0x702>
 8009ea2:	9a03      	ldr	r2, [sp, #12]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d1f7      	bne.n	8009e98 <_dtoa_r+0x6e8>
 8009ea8:	2230      	movs	r2, #48	; 0x30
 8009eaa:	9903      	ldr	r1, [sp, #12]
 8009eac:	f108 0801 	add.w	r8, r8, #1
 8009eb0:	700a      	strb	r2, [r1, #0]
 8009eb2:	781a      	ldrb	r2, [r3, #0]
 8009eb4:	3201      	adds	r2, #1
 8009eb6:	701a      	strb	r2, [r3, #0]
 8009eb8:	e79e      	b.n	8009df8 <_dtoa_r+0x648>
 8009eba:	46d0      	mov	r8, sl
 8009ebc:	e7eb      	b.n	8009e96 <_dtoa_r+0x6e6>
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	4b6e      	ldr	r3, [pc, #440]	; (800a07c <_dtoa_r+0x8cc>)
 8009ec2:	f7f6 fb09 	bl	80004d8 <__aeabi_dmul>
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2300      	movs	r3, #0
 8009eca:	4680      	mov	r8, r0
 8009ecc:	4689      	mov	r9, r1
 8009ece:	f7f6 fd6b 	bl	80009a8 <__aeabi_dcmpeq>
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	d09b      	beq.n	8009e0e <_dtoa_r+0x65e>
 8009ed6:	e7cd      	b.n	8009e74 <_dtoa_r+0x6c4>
 8009ed8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009eda:	2a00      	cmp	r2, #0
 8009edc:	f000 80d0 	beq.w	800a080 <_dtoa_r+0x8d0>
 8009ee0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009ee2:	2a01      	cmp	r2, #1
 8009ee4:	f300 80ae 	bgt.w	800a044 <_dtoa_r+0x894>
 8009ee8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009eea:	2a00      	cmp	r2, #0
 8009eec:	f000 80a6 	beq.w	800a03c <_dtoa_r+0x88c>
 8009ef0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ef4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009ef6:	9f06      	ldr	r7, [sp, #24]
 8009ef8:	9a06      	ldr	r2, [sp, #24]
 8009efa:	2101      	movs	r1, #1
 8009efc:	441a      	add	r2, r3
 8009efe:	9206      	str	r2, [sp, #24]
 8009f00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f02:	4628      	mov	r0, r5
 8009f04:	441a      	add	r2, r3
 8009f06:	9209      	str	r2, [sp, #36]	; 0x24
 8009f08:	f000 fc58 	bl	800a7bc <__i2b>
 8009f0c:	4606      	mov	r6, r0
 8009f0e:	2f00      	cmp	r7, #0
 8009f10:	dd0c      	ble.n	8009f2c <_dtoa_r+0x77c>
 8009f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	dd09      	ble.n	8009f2c <_dtoa_r+0x77c>
 8009f18:	42bb      	cmp	r3, r7
 8009f1a:	bfa8      	it	ge
 8009f1c:	463b      	movge	r3, r7
 8009f1e:	9a06      	ldr	r2, [sp, #24]
 8009f20:	1aff      	subs	r7, r7, r3
 8009f22:	1ad2      	subs	r2, r2, r3
 8009f24:	9206      	str	r2, [sp, #24]
 8009f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f2e:	b1f3      	cbz	r3, 8009f6e <_dtoa_r+0x7be>
 8009f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 80a8 	beq.w	800a088 <_dtoa_r+0x8d8>
 8009f38:	2c00      	cmp	r4, #0
 8009f3a:	dd10      	ble.n	8009f5e <_dtoa_r+0x7ae>
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	4622      	mov	r2, r4
 8009f40:	4628      	mov	r0, r5
 8009f42:	f000 fcf9 	bl	800a938 <__pow5mult>
 8009f46:	465a      	mov	r2, fp
 8009f48:	4601      	mov	r1, r0
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	f000 fc4b 	bl	800a7e8 <__multiply>
 8009f52:	4680      	mov	r8, r0
 8009f54:	4659      	mov	r1, fp
 8009f56:	4628      	mov	r0, r5
 8009f58:	f000 fb7a 	bl	800a650 <_Bfree>
 8009f5c:	46c3      	mov	fp, r8
 8009f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f60:	1b1a      	subs	r2, r3, r4
 8009f62:	d004      	beq.n	8009f6e <_dtoa_r+0x7be>
 8009f64:	4659      	mov	r1, fp
 8009f66:	4628      	mov	r0, r5
 8009f68:	f000 fce6 	bl	800a938 <__pow5mult>
 8009f6c:	4683      	mov	fp, r0
 8009f6e:	2101      	movs	r1, #1
 8009f70:	4628      	mov	r0, r5
 8009f72:	f000 fc23 	bl	800a7bc <__i2b>
 8009f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f78:	4604      	mov	r4, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f340 8086 	ble.w	800a08c <_dtoa_r+0x8dc>
 8009f80:	461a      	mov	r2, r3
 8009f82:	4601      	mov	r1, r0
 8009f84:	4628      	mov	r0, r5
 8009f86:	f000 fcd7 	bl	800a938 <__pow5mult>
 8009f8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	dd7f      	ble.n	800a092 <_dtoa_r+0x8e2>
 8009f92:	f04f 0800 	mov.w	r8, #0
 8009f96:	6923      	ldr	r3, [r4, #16]
 8009f98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f9c:	6918      	ldr	r0, [r3, #16]
 8009f9e:	f000 fbbf 	bl	800a720 <__hi0bits>
 8009fa2:	f1c0 0020 	rsb	r0, r0, #32
 8009fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fa8:	4418      	add	r0, r3
 8009faa:	f010 001f 	ands.w	r0, r0, #31
 8009fae:	f000 8092 	beq.w	800a0d6 <_dtoa_r+0x926>
 8009fb2:	f1c0 0320 	rsb	r3, r0, #32
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	f340 808a 	ble.w	800a0d0 <_dtoa_r+0x920>
 8009fbc:	f1c0 001c 	rsb	r0, r0, #28
 8009fc0:	9b06      	ldr	r3, [sp, #24]
 8009fc2:	4407      	add	r7, r0
 8009fc4:	4403      	add	r3, r0
 8009fc6:	9306      	str	r3, [sp, #24]
 8009fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fca:	4403      	add	r3, r0
 8009fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8009fce:	9b06      	ldr	r3, [sp, #24]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	dd05      	ble.n	8009fe0 <_dtoa_r+0x830>
 8009fd4:	4659      	mov	r1, fp
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	4628      	mov	r0, r5
 8009fda:	f000 fd07 	bl	800a9ec <__lshift>
 8009fde:	4683      	mov	fp, r0
 8009fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	dd05      	ble.n	8009ff2 <_dtoa_r+0x842>
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	461a      	mov	r2, r3
 8009fea:	4628      	mov	r0, r5
 8009fec:	f000 fcfe 	bl	800a9ec <__lshift>
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d070      	beq.n	800a0da <_dtoa_r+0x92a>
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	4658      	mov	r0, fp
 8009ffc:	f000 fd66 	bl	800aacc <__mcmp>
 800a000:	2800      	cmp	r0, #0
 800a002:	da6a      	bge.n	800a0da <_dtoa_r+0x92a>
 800a004:	2300      	movs	r3, #0
 800a006:	4659      	mov	r1, fp
 800a008:	220a      	movs	r2, #10
 800a00a:	4628      	mov	r0, r5
 800a00c:	f000 fb42 	bl	800a694 <__multadd>
 800a010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a012:	4683      	mov	fp, r0
 800a014:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 8194 	beq.w	800a346 <_dtoa_r+0xb96>
 800a01e:	4631      	mov	r1, r6
 800a020:	2300      	movs	r3, #0
 800a022:	220a      	movs	r2, #10
 800a024:	4628      	mov	r0, r5
 800a026:	f000 fb35 	bl	800a694 <__multadd>
 800a02a:	f1b9 0f00 	cmp.w	r9, #0
 800a02e:	4606      	mov	r6, r0
 800a030:	f300 8093 	bgt.w	800a15a <_dtoa_r+0x9aa>
 800a034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a036:	2b02      	cmp	r3, #2
 800a038:	dc57      	bgt.n	800a0ea <_dtoa_r+0x93a>
 800a03a:	e08e      	b.n	800a15a <_dtoa_r+0x9aa>
 800a03c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a03e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a042:	e757      	b.n	8009ef4 <_dtoa_r+0x744>
 800a044:	9b08      	ldr	r3, [sp, #32]
 800a046:	1e5c      	subs	r4, r3, #1
 800a048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a04a:	42a3      	cmp	r3, r4
 800a04c:	bfb7      	itett	lt
 800a04e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a050:	1b1c      	subge	r4, r3, r4
 800a052:	1ae2      	sublt	r2, r4, r3
 800a054:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a056:	bfbe      	ittt	lt
 800a058:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a05a:	189b      	addlt	r3, r3, r2
 800a05c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a05e:	9b08      	ldr	r3, [sp, #32]
 800a060:	bfb8      	it	lt
 800a062:	2400      	movlt	r4, #0
 800a064:	2b00      	cmp	r3, #0
 800a066:	bfbb      	ittet	lt
 800a068:	9b06      	ldrlt	r3, [sp, #24]
 800a06a:	9a08      	ldrlt	r2, [sp, #32]
 800a06c:	9f06      	ldrge	r7, [sp, #24]
 800a06e:	1a9f      	sublt	r7, r3, r2
 800a070:	bfac      	ite	ge
 800a072:	9b08      	ldrge	r3, [sp, #32]
 800a074:	2300      	movlt	r3, #0
 800a076:	e73f      	b.n	8009ef8 <_dtoa_r+0x748>
 800a078:	3fe00000 	.word	0x3fe00000
 800a07c:	40240000 	.word	0x40240000
 800a080:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a082:	9f06      	ldr	r7, [sp, #24]
 800a084:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a086:	e742      	b.n	8009f0e <_dtoa_r+0x75e>
 800a088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a08a:	e76b      	b.n	8009f64 <_dtoa_r+0x7b4>
 800a08c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a08e:	2b01      	cmp	r3, #1
 800a090:	dc19      	bgt.n	800a0c6 <_dtoa_r+0x916>
 800a092:	9b04      	ldr	r3, [sp, #16]
 800a094:	b9bb      	cbnz	r3, 800a0c6 <_dtoa_r+0x916>
 800a096:	9b05      	ldr	r3, [sp, #20]
 800a098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a09c:	b99b      	cbnz	r3, 800a0c6 <_dtoa_r+0x916>
 800a09e:	9b05      	ldr	r3, [sp, #20]
 800a0a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0a4:	0d1b      	lsrs	r3, r3, #20
 800a0a6:	051b      	lsls	r3, r3, #20
 800a0a8:	b183      	cbz	r3, 800a0cc <_dtoa_r+0x91c>
 800a0aa:	f04f 0801 	mov.w	r8, #1
 800a0ae:	9b06      	ldr	r3, [sp, #24]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	9306      	str	r3, [sp, #24]
 800a0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f47f af6a 	bne.w	8009f96 <_dtoa_r+0x7e6>
 800a0c2:	2001      	movs	r0, #1
 800a0c4:	e76f      	b.n	8009fa6 <_dtoa_r+0x7f6>
 800a0c6:	f04f 0800 	mov.w	r8, #0
 800a0ca:	e7f6      	b.n	800a0ba <_dtoa_r+0x90a>
 800a0cc:	4698      	mov	r8, r3
 800a0ce:	e7f4      	b.n	800a0ba <_dtoa_r+0x90a>
 800a0d0:	f43f af7d 	beq.w	8009fce <_dtoa_r+0x81e>
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	301c      	adds	r0, #28
 800a0d8:	e772      	b.n	8009fc0 <_dtoa_r+0x810>
 800a0da:	9b08      	ldr	r3, [sp, #32]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	dc36      	bgt.n	800a14e <_dtoa_r+0x99e>
 800a0e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	dd33      	ble.n	800a14e <_dtoa_r+0x99e>
 800a0e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a0ea:	f1b9 0f00 	cmp.w	r9, #0
 800a0ee:	d10d      	bne.n	800a10c <_dtoa_r+0x95c>
 800a0f0:	4621      	mov	r1, r4
 800a0f2:	464b      	mov	r3, r9
 800a0f4:	2205      	movs	r2, #5
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f000 facc 	bl	800a694 <__multadd>
 800a0fc:	4601      	mov	r1, r0
 800a0fe:	4604      	mov	r4, r0
 800a100:	4658      	mov	r0, fp
 800a102:	f000 fce3 	bl	800aacc <__mcmp>
 800a106:	2800      	cmp	r0, #0
 800a108:	f73f adb8 	bgt.w	8009c7c <_dtoa_r+0x4cc>
 800a10c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a10e:	9f03      	ldr	r7, [sp, #12]
 800a110:	ea6f 0a03 	mvn.w	sl, r3
 800a114:	f04f 0800 	mov.w	r8, #0
 800a118:	4621      	mov	r1, r4
 800a11a:	4628      	mov	r0, r5
 800a11c:	f000 fa98 	bl	800a650 <_Bfree>
 800a120:	2e00      	cmp	r6, #0
 800a122:	f43f aea7 	beq.w	8009e74 <_dtoa_r+0x6c4>
 800a126:	f1b8 0f00 	cmp.w	r8, #0
 800a12a:	d005      	beq.n	800a138 <_dtoa_r+0x988>
 800a12c:	45b0      	cmp	r8, r6
 800a12e:	d003      	beq.n	800a138 <_dtoa_r+0x988>
 800a130:	4641      	mov	r1, r8
 800a132:	4628      	mov	r0, r5
 800a134:	f000 fa8c 	bl	800a650 <_Bfree>
 800a138:	4631      	mov	r1, r6
 800a13a:	4628      	mov	r0, r5
 800a13c:	f000 fa88 	bl	800a650 <_Bfree>
 800a140:	e698      	b.n	8009e74 <_dtoa_r+0x6c4>
 800a142:	2400      	movs	r4, #0
 800a144:	4626      	mov	r6, r4
 800a146:	e7e1      	b.n	800a10c <_dtoa_r+0x95c>
 800a148:	46c2      	mov	sl, r8
 800a14a:	4626      	mov	r6, r4
 800a14c:	e596      	b.n	8009c7c <_dtoa_r+0x4cc>
 800a14e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a150:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a154:	2b00      	cmp	r3, #0
 800a156:	f000 80fd 	beq.w	800a354 <_dtoa_r+0xba4>
 800a15a:	2f00      	cmp	r7, #0
 800a15c:	dd05      	ble.n	800a16a <_dtoa_r+0x9ba>
 800a15e:	4631      	mov	r1, r6
 800a160:	463a      	mov	r2, r7
 800a162:	4628      	mov	r0, r5
 800a164:	f000 fc42 	bl	800a9ec <__lshift>
 800a168:	4606      	mov	r6, r0
 800a16a:	f1b8 0f00 	cmp.w	r8, #0
 800a16e:	d05c      	beq.n	800a22a <_dtoa_r+0xa7a>
 800a170:	4628      	mov	r0, r5
 800a172:	6871      	ldr	r1, [r6, #4]
 800a174:	f000 fa2c 	bl	800a5d0 <_Balloc>
 800a178:	4607      	mov	r7, r0
 800a17a:	b928      	cbnz	r0, 800a188 <_dtoa_r+0x9d8>
 800a17c:	4602      	mov	r2, r0
 800a17e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a182:	4b7f      	ldr	r3, [pc, #508]	; (800a380 <_dtoa_r+0xbd0>)
 800a184:	f7ff bb28 	b.w	80097d8 <_dtoa_r+0x28>
 800a188:	6932      	ldr	r2, [r6, #16]
 800a18a:	f106 010c 	add.w	r1, r6, #12
 800a18e:	3202      	adds	r2, #2
 800a190:	0092      	lsls	r2, r2, #2
 800a192:	300c      	adds	r0, #12
 800a194:	f000 fa0e 	bl	800a5b4 <memcpy>
 800a198:	2201      	movs	r2, #1
 800a19a:	4639      	mov	r1, r7
 800a19c:	4628      	mov	r0, r5
 800a19e:	f000 fc25 	bl	800a9ec <__lshift>
 800a1a2:	46b0      	mov	r8, r6
 800a1a4:	4606      	mov	r6, r0
 800a1a6:	9b03      	ldr	r3, [sp, #12]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	9308      	str	r3, [sp, #32]
 800a1ac:	9b03      	ldr	r3, [sp, #12]
 800a1ae:	444b      	add	r3, r9
 800a1b0:	930a      	str	r3, [sp, #40]	; 0x28
 800a1b2:	9b04      	ldr	r3, [sp, #16]
 800a1b4:	f003 0301 	and.w	r3, r3, #1
 800a1b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ba:	9b08      	ldr	r3, [sp, #32]
 800a1bc:	4621      	mov	r1, r4
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	4658      	mov	r0, fp
 800a1c2:	9304      	str	r3, [sp, #16]
 800a1c4:	f7ff fa68 	bl	8009698 <quorem>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	4641      	mov	r1, r8
 800a1cc:	3330      	adds	r3, #48	; 0x30
 800a1ce:	9006      	str	r0, [sp, #24]
 800a1d0:	4658      	mov	r0, fp
 800a1d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1d4:	f000 fc7a 	bl	800aacc <__mcmp>
 800a1d8:	4632      	mov	r2, r6
 800a1da:	4681      	mov	r9, r0
 800a1dc:	4621      	mov	r1, r4
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f000 fc90 	bl	800ab04 <__mdiff>
 800a1e4:	68c2      	ldr	r2, [r0, #12]
 800a1e6:	4607      	mov	r7, r0
 800a1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ea:	bb02      	cbnz	r2, 800a22e <_dtoa_r+0xa7e>
 800a1ec:	4601      	mov	r1, r0
 800a1ee:	4658      	mov	r0, fp
 800a1f0:	f000 fc6c 	bl	800aacc <__mcmp>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a200:	f000 fa26 	bl	800a650 <_Bfree>
 800a204:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a208:	9f08      	ldr	r7, [sp, #32]
 800a20a:	ea43 0102 	orr.w	r1, r3, r2
 800a20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a210:	430b      	orrs	r3, r1
 800a212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a214:	d10d      	bne.n	800a232 <_dtoa_r+0xa82>
 800a216:	2b39      	cmp	r3, #57	; 0x39
 800a218:	d029      	beq.n	800a26e <_dtoa_r+0xabe>
 800a21a:	f1b9 0f00 	cmp.w	r9, #0
 800a21e:	dd01      	ble.n	800a224 <_dtoa_r+0xa74>
 800a220:	9b06      	ldr	r3, [sp, #24]
 800a222:	3331      	adds	r3, #49	; 0x31
 800a224:	9a04      	ldr	r2, [sp, #16]
 800a226:	7013      	strb	r3, [r2, #0]
 800a228:	e776      	b.n	800a118 <_dtoa_r+0x968>
 800a22a:	4630      	mov	r0, r6
 800a22c:	e7b9      	b.n	800a1a2 <_dtoa_r+0x9f2>
 800a22e:	2201      	movs	r2, #1
 800a230:	e7e2      	b.n	800a1f8 <_dtoa_r+0xa48>
 800a232:	f1b9 0f00 	cmp.w	r9, #0
 800a236:	db06      	blt.n	800a246 <_dtoa_r+0xa96>
 800a238:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a23a:	ea41 0909 	orr.w	r9, r1, r9
 800a23e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a240:	ea59 0101 	orrs.w	r1, r9, r1
 800a244:	d120      	bne.n	800a288 <_dtoa_r+0xad8>
 800a246:	2a00      	cmp	r2, #0
 800a248:	ddec      	ble.n	800a224 <_dtoa_r+0xa74>
 800a24a:	4659      	mov	r1, fp
 800a24c:	2201      	movs	r2, #1
 800a24e:	4628      	mov	r0, r5
 800a250:	9308      	str	r3, [sp, #32]
 800a252:	f000 fbcb 	bl	800a9ec <__lshift>
 800a256:	4621      	mov	r1, r4
 800a258:	4683      	mov	fp, r0
 800a25a:	f000 fc37 	bl	800aacc <__mcmp>
 800a25e:	2800      	cmp	r0, #0
 800a260:	9b08      	ldr	r3, [sp, #32]
 800a262:	dc02      	bgt.n	800a26a <_dtoa_r+0xaba>
 800a264:	d1de      	bne.n	800a224 <_dtoa_r+0xa74>
 800a266:	07da      	lsls	r2, r3, #31
 800a268:	d5dc      	bpl.n	800a224 <_dtoa_r+0xa74>
 800a26a:	2b39      	cmp	r3, #57	; 0x39
 800a26c:	d1d8      	bne.n	800a220 <_dtoa_r+0xa70>
 800a26e:	2339      	movs	r3, #57	; 0x39
 800a270:	9a04      	ldr	r2, [sp, #16]
 800a272:	7013      	strb	r3, [r2, #0]
 800a274:	463b      	mov	r3, r7
 800a276:	461f      	mov	r7, r3
 800a278:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	2a39      	cmp	r2, #57	; 0x39
 800a280:	d050      	beq.n	800a324 <_dtoa_r+0xb74>
 800a282:	3201      	adds	r2, #1
 800a284:	701a      	strb	r2, [r3, #0]
 800a286:	e747      	b.n	800a118 <_dtoa_r+0x968>
 800a288:	2a00      	cmp	r2, #0
 800a28a:	dd03      	ble.n	800a294 <_dtoa_r+0xae4>
 800a28c:	2b39      	cmp	r3, #57	; 0x39
 800a28e:	d0ee      	beq.n	800a26e <_dtoa_r+0xabe>
 800a290:	3301      	adds	r3, #1
 800a292:	e7c7      	b.n	800a224 <_dtoa_r+0xa74>
 800a294:	9a08      	ldr	r2, [sp, #32]
 800a296:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a298:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a29c:	428a      	cmp	r2, r1
 800a29e:	d02a      	beq.n	800a2f6 <_dtoa_r+0xb46>
 800a2a0:	4659      	mov	r1, fp
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	220a      	movs	r2, #10
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f000 f9f4 	bl	800a694 <__multadd>
 800a2ac:	45b0      	cmp	r8, r6
 800a2ae:	4683      	mov	fp, r0
 800a2b0:	f04f 0300 	mov.w	r3, #0
 800a2b4:	f04f 020a 	mov.w	r2, #10
 800a2b8:	4641      	mov	r1, r8
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	d107      	bne.n	800a2ce <_dtoa_r+0xb1e>
 800a2be:	f000 f9e9 	bl	800a694 <__multadd>
 800a2c2:	4680      	mov	r8, r0
 800a2c4:	4606      	mov	r6, r0
 800a2c6:	9b08      	ldr	r3, [sp, #32]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	9308      	str	r3, [sp, #32]
 800a2cc:	e775      	b.n	800a1ba <_dtoa_r+0xa0a>
 800a2ce:	f000 f9e1 	bl	800a694 <__multadd>
 800a2d2:	4631      	mov	r1, r6
 800a2d4:	4680      	mov	r8, r0
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	220a      	movs	r2, #10
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f000 f9da 	bl	800a694 <__multadd>
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	e7f0      	b.n	800a2c6 <_dtoa_r+0xb16>
 800a2e4:	f1b9 0f00 	cmp.w	r9, #0
 800a2e8:	bfcc      	ite	gt
 800a2ea:	464f      	movgt	r7, r9
 800a2ec:	2701      	movle	r7, #1
 800a2ee:	f04f 0800 	mov.w	r8, #0
 800a2f2:	9a03      	ldr	r2, [sp, #12]
 800a2f4:	4417      	add	r7, r2
 800a2f6:	4659      	mov	r1, fp
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	9308      	str	r3, [sp, #32]
 800a2fe:	f000 fb75 	bl	800a9ec <__lshift>
 800a302:	4621      	mov	r1, r4
 800a304:	4683      	mov	fp, r0
 800a306:	f000 fbe1 	bl	800aacc <__mcmp>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	dcb2      	bgt.n	800a274 <_dtoa_r+0xac4>
 800a30e:	d102      	bne.n	800a316 <_dtoa_r+0xb66>
 800a310:	9b08      	ldr	r3, [sp, #32]
 800a312:	07db      	lsls	r3, r3, #31
 800a314:	d4ae      	bmi.n	800a274 <_dtoa_r+0xac4>
 800a316:	463b      	mov	r3, r7
 800a318:	461f      	mov	r7, r3
 800a31a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a31e:	2a30      	cmp	r2, #48	; 0x30
 800a320:	d0fa      	beq.n	800a318 <_dtoa_r+0xb68>
 800a322:	e6f9      	b.n	800a118 <_dtoa_r+0x968>
 800a324:	9a03      	ldr	r2, [sp, #12]
 800a326:	429a      	cmp	r2, r3
 800a328:	d1a5      	bne.n	800a276 <_dtoa_r+0xac6>
 800a32a:	2331      	movs	r3, #49	; 0x31
 800a32c:	f10a 0a01 	add.w	sl, sl, #1
 800a330:	e779      	b.n	800a226 <_dtoa_r+0xa76>
 800a332:	4b14      	ldr	r3, [pc, #80]	; (800a384 <_dtoa_r+0xbd4>)
 800a334:	f7ff baa8 	b.w	8009888 <_dtoa_r+0xd8>
 800a338:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f47f aa81 	bne.w	8009842 <_dtoa_r+0x92>
 800a340:	4b11      	ldr	r3, [pc, #68]	; (800a388 <_dtoa_r+0xbd8>)
 800a342:	f7ff baa1 	b.w	8009888 <_dtoa_r+0xd8>
 800a346:	f1b9 0f00 	cmp.w	r9, #0
 800a34a:	dc03      	bgt.n	800a354 <_dtoa_r+0xba4>
 800a34c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a34e:	2b02      	cmp	r3, #2
 800a350:	f73f aecb 	bgt.w	800a0ea <_dtoa_r+0x93a>
 800a354:	9f03      	ldr	r7, [sp, #12]
 800a356:	4621      	mov	r1, r4
 800a358:	4658      	mov	r0, fp
 800a35a:	f7ff f99d 	bl	8009698 <quorem>
 800a35e:	9a03      	ldr	r2, [sp, #12]
 800a360:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a364:	f807 3b01 	strb.w	r3, [r7], #1
 800a368:	1aba      	subs	r2, r7, r2
 800a36a:	4591      	cmp	r9, r2
 800a36c:	ddba      	ble.n	800a2e4 <_dtoa_r+0xb34>
 800a36e:	4659      	mov	r1, fp
 800a370:	2300      	movs	r3, #0
 800a372:	220a      	movs	r2, #10
 800a374:	4628      	mov	r0, r5
 800a376:	f000 f98d 	bl	800a694 <__multadd>
 800a37a:	4683      	mov	fp, r0
 800a37c:	e7eb      	b.n	800a356 <_dtoa_r+0xba6>
 800a37e:	bf00      	nop
 800a380:	08012723 	.word	0x08012723
 800a384:	08012680 	.word	0x08012680
 800a388:	080126a4 	.word	0x080126a4

0800a38c <std>:
 800a38c:	2300      	movs	r3, #0
 800a38e:	b510      	push	{r4, lr}
 800a390:	4604      	mov	r4, r0
 800a392:	e9c0 3300 	strd	r3, r3, [r0]
 800a396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a39a:	6083      	str	r3, [r0, #8]
 800a39c:	8181      	strh	r1, [r0, #12]
 800a39e:	6643      	str	r3, [r0, #100]	; 0x64
 800a3a0:	81c2      	strh	r2, [r0, #14]
 800a3a2:	6183      	str	r3, [r0, #24]
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	2208      	movs	r2, #8
 800a3a8:	305c      	adds	r0, #92	; 0x5c
 800a3aa:	f7fe fcd5 	bl	8008d58 <memset>
 800a3ae:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <std+0x38>)
 800a3b0:	6224      	str	r4, [r4, #32]
 800a3b2:	6263      	str	r3, [r4, #36]	; 0x24
 800a3b4:	4b04      	ldr	r3, [pc, #16]	; (800a3c8 <std+0x3c>)
 800a3b6:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3b8:	4b04      	ldr	r3, [pc, #16]	; (800a3cc <std+0x40>)
 800a3ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3bc:	4b04      	ldr	r3, [pc, #16]	; (800a3d0 <std+0x44>)
 800a3be:	6323      	str	r3, [r4, #48]	; 0x30
 800a3c0:	bd10      	pop	{r4, pc}
 800a3c2:	bf00      	nop
 800a3c4:	0800b43d 	.word	0x0800b43d
 800a3c8:	0800b45f 	.word	0x0800b45f
 800a3cc:	0800b497 	.word	0x0800b497
 800a3d0:	0800b4bb 	.word	0x0800b4bb

0800a3d4 <_cleanup_r>:
 800a3d4:	4901      	ldr	r1, [pc, #4]	; (800a3dc <_cleanup_r+0x8>)
 800a3d6:	f000 b8af 	b.w	800a538 <_fwalk_reent>
 800a3da:	bf00      	nop
 800a3dc:	0800b7c9 	.word	0x0800b7c9

0800a3e0 <__sfmoreglue>:
 800a3e0:	2268      	movs	r2, #104	; 0x68
 800a3e2:	b570      	push	{r4, r5, r6, lr}
 800a3e4:	1e4d      	subs	r5, r1, #1
 800a3e6:	4355      	muls	r5, r2
 800a3e8:	460e      	mov	r6, r1
 800a3ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a3ee:	f000 fced 	bl	800adcc <_malloc_r>
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	b140      	cbz	r0, 800a408 <__sfmoreglue+0x28>
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	e9c0 1600 	strd	r1, r6, [r0]
 800a3fc:	300c      	adds	r0, #12
 800a3fe:	60a0      	str	r0, [r4, #8]
 800a400:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a404:	f7fe fca8 	bl	8008d58 <memset>
 800a408:	4620      	mov	r0, r4
 800a40a:	bd70      	pop	{r4, r5, r6, pc}

0800a40c <__sfp_lock_acquire>:
 800a40c:	4801      	ldr	r0, [pc, #4]	; (800a414 <__sfp_lock_acquire+0x8>)
 800a40e:	f000 b8b8 	b.w	800a582 <__retarget_lock_acquire_recursive>
 800a412:	bf00      	nop
 800a414:	200018c9 	.word	0x200018c9

0800a418 <__sfp_lock_release>:
 800a418:	4801      	ldr	r0, [pc, #4]	; (800a420 <__sfp_lock_release+0x8>)
 800a41a:	f000 b8b3 	b.w	800a584 <__retarget_lock_release_recursive>
 800a41e:	bf00      	nop
 800a420:	200018c9 	.word	0x200018c9

0800a424 <__sinit_lock_acquire>:
 800a424:	4801      	ldr	r0, [pc, #4]	; (800a42c <__sinit_lock_acquire+0x8>)
 800a426:	f000 b8ac 	b.w	800a582 <__retarget_lock_acquire_recursive>
 800a42a:	bf00      	nop
 800a42c:	200018ca 	.word	0x200018ca

0800a430 <__sinit_lock_release>:
 800a430:	4801      	ldr	r0, [pc, #4]	; (800a438 <__sinit_lock_release+0x8>)
 800a432:	f000 b8a7 	b.w	800a584 <__retarget_lock_release_recursive>
 800a436:	bf00      	nop
 800a438:	200018ca 	.word	0x200018ca

0800a43c <__sinit>:
 800a43c:	b510      	push	{r4, lr}
 800a43e:	4604      	mov	r4, r0
 800a440:	f7ff fff0 	bl	800a424 <__sinit_lock_acquire>
 800a444:	69a3      	ldr	r3, [r4, #24]
 800a446:	b11b      	cbz	r3, 800a450 <__sinit+0x14>
 800a448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a44c:	f7ff bff0 	b.w	800a430 <__sinit_lock_release>
 800a450:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a454:	6523      	str	r3, [r4, #80]	; 0x50
 800a456:	4b13      	ldr	r3, [pc, #76]	; (800a4a4 <__sinit+0x68>)
 800a458:	4a13      	ldr	r2, [pc, #76]	; (800a4a8 <__sinit+0x6c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a45e:	42a3      	cmp	r3, r4
 800a460:	bf08      	it	eq
 800a462:	2301      	moveq	r3, #1
 800a464:	4620      	mov	r0, r4
 800a466:	bf08      	it	eq
 800a468:	61a3      	streq	r3, [r4, #24]
 800a46a:	f000 f81f 	bl	800a4ac <__sfp>
 800a46e:	6060      	str	r0, [r4, #4]
 800a470:	4620      	mov	r0, r4
 800a472:	f000 f81b 	bl	800a4ac <__sfp>
 800a476:	60a0      	str	r0, [r4, #8]
 800a478:	4620      	mov	r0, r4
 800a47a:	f000 f817 	bl	800a4ac <__sfp>
 800a47e:	2200      	movs	r2, #0
 800a480:	2104      	movs	r1, #4
 800a482:	60e0      	str	r0, [r4, #12]
 800a484:	6860      	ldr	r0, [r4, #4]
 800a486:	f7ff ff81 	bl	800a38c <std>
 800a48a:	2201      	movs	r2, #1
 800a48c:	2109      	movs	r1, #9
 800a48e:	68a0      	ldr	r0, [r4, #8]
 800a490:	f7ff ff7c 	bl	800a38c <std>
 800a494:	2202      	movs	r2, #2
 800a496:	2112      	movs	r1, #18
 800a498:	68e0      	ldr	r0, [r4, #12]
 800a49a:	f7ff ff77 	bl	800a38c <std>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	61a3      	str	r3, [r4, #24]
 800a4a2:	e7d1      	b.n	800a448 <__sinit+0xc>
 800a4a4:	0801266c 	.word	0x0801266c
 800a4a8:	0800a3d5 	.word	0x0800a3d5

0800a4ac <__sfp>:
 800a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ae:	4607      	mov	r7, r0
 800a4b0:	f7ff ffac 	bl	800a40c <__sfp_lock_acquire>
 800a4b4:	4b1e      	ldr	r3, [pc, #120]	; (800a530 <__sfp+0x84>)
 800a4b6:	681e      	ldr	r6, [r3, #0]
 800a4b8:	69b3      	ldr	r3, [r6, #24]
 800a4ba:	b913      	cbnz	r3, 800a4c2 <__sfp+0x16>
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f7ff ffbd 	bl	800a43c <__sinit>
 800a4c2:	3648      	adds	r6, #72	; 0x48
 800a4c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	d503      	bpl.n	800a4d4 <__sfp+0x28>
 800a4cc:	6833      	ldr	r3, [r6, #0]
 800a4ce:	b30b      	cbz	r3, 800a514 <__sfp+0x68>
 800a4d0:	6836      	ldr	r6, [r6, #0]
 800a4d2:	e7f7      	b.n	800a4c4 <__sfp+0x18>
 800a4d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a4d8:	b9d5      	cbnz	r5, 800a510 <__sfp+0x64>
 800a4da:	4b16      	ldr	r3, [pc, #88]	; (800a534 <__sfp+0x88>)
 800a4dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a4e0:	60e3      	str	r3, [r4, #12]
 800a4e2:	6665      	str	r5, [r4, #100]	; 0x64
 800a4e4:	f000 f84c 	bl	800a580 <__retarget_lock_init_recursive>
 800a4e8:	f7ff ff96 	bl	800a418 <__sfp_lock_release>
 800a4ec:	2208      	movs	r2, #8
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a4f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a4f8:	6025      	str	r5, [r4, #0]
 800a4fa:	61a5      	str	r5, [r4, #24]
 800a4fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a500:	f7fe fc2a 	bl	8008d58 <memset>
 800a504:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a508:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a50c:	4620      	mov	r0, r4
 800a50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a510:	3468      	adds	r4, #104	; 0x68
 800a512:	e7d9      	b.n	800a4c8 <__sfp+0x1c>
 800a514:	2104      	movs	r1, #4
 800a516:	4638      	mov	r0, r7
 800a518:	f7ff ff62 	bl	800a3e0 <__sfmoreglue>
 800a51c:	4604      	mov	r4, r0
 800a51e:	6030      	str	r0, [r6, #0]
 800a520:	2800      	cmp	r0, #0
 800a522:	d1d5      	bne.n	800a4d0 <__sfp+0x24>
 800a524:	f7ff ff78 	bl	800a418 <__sfp_lock_release>
 800a528:	230c      	movs	r3, #12
 800a52a:	603b      	str	r3, [r7, #0]
 800a52c:	e7ee      	b.n	800a50c <__sfp+0x60>
 800a52e:	bf00      	nop
 800a530:	0801266c 	.word	0x0801266c
 800a534:	ffff0001 	.word	0xffff0001

0800a538 <_fwalk_reent>:
 800a538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a53c:	4606      	mov	r6, r0
 800a53e:	4688      	mov	r8, r1
 800a540:	2700      	movs	r7, #0
 800a542:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a546:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a54a:	f1b9 0901 	subs.w	r9, r9, #1
 800a54e:	d505      	bpl.n	800a55c <_fwalk_reent+0x24>
 800a550:	6824      	ldr	r4, [r4, #0]
 800a552:	2c00      	cmp	r4, #0
 800a554:	d1f7      	bne.n	800a546 <_fwalk_reent+0xe>
 800a556:	4638      	mov	r0, r7
 800a558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a55c:	89ab      	ldrh	r3, [r5, #12]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d907      	bls.n	800a572 <_fwalk_reent+0x3a>
 800a562:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a566:	3301      	adds	r3, #1
 800a568:	d003      	beq.n	800a572 <_fwalk_reent+0x3a>
 800a56a:	4629      	mov	r1, r5
 800a56c:	4630      	mov	r0, r6
 800a56e:	47c0      	blx	r8
 800a570:	4307      	orrs	r7, r0
 800a572:	3568      	adds	r5, #104	; 0x68
 800a574:	e7e9      	b.n	800a54a <_fwalk_reent+0x12>
	...

0800a578 <_localeconv_r>:
 800a578:	4800      	ldr	r0, [pc, #0]	; (800a57c <_localeconv_r+0x4>)
 800a57a:	4770      	bx	lr
 800a57c:	2000016c 	.word	0x2000016c

0800a580 <__retarget_lock_init_recursive>:
 800a580:	4770      	bx	lr

0800a582 <__retarget_lock_acquire_recursive>:
 800a582:	4770      	bx	lr

0800a584 <__retarget_lock_release_recursive>:
 800a584:	4770      	bx	lr
	...

0800a588 <malloc>:
 800a588:	4b02      	ldr	r3, [pc, #8]	; (800a594 <malloc+0xc>)
 800a58a:	4601      	mov	r1, r0
 800a58c:	6818      	ldr	r0, [r3, #0]
 800a58e:	f000 bc1d 	b.w	800adcc <_malloc_r>
 800a592:	bf00      	nop
 800a594:	20000018 	.word	0x20000018

0800a598 <memchr>:
 800a598:	4603      	mov	r3, r0
 800a59a:	b510      	push	{r4, lr}
 800a59c:	b2c9      	uxtb	r1, r1
 800a59e:	4402      	add	r2, r0
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	d101      	bne.n	800a5aa <memchr+0x12>
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	e003      	b.n	800a5b2 <memchr+0x1a>
 800a5aa:	7804      	ldrb	r4, [r0, #0]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	428c      	cmp	r4, r1
 800a5b0:	d1f6      	bne.n	800a5a0 <memchr+0x8>
 800a5b2:	bd10      	pop	{r4, pc}

0800a5b4 <memcpy>:
 800a5b4:	440a      	add	r2, r1
 800a5b6:	4291      	cmp	r1, r2
 800a5b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a5bc:	d100      	bne.n	800a5c0 <memcpy+0xc>
 800a5be:	4770      	bx	lr
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5c6:	4291      	cmp	r1, r2
 800a5c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5cc:	d1f9      	bne.n	800a5c2 <memcpy+0xe>
 800a5ce:	bd10      	pop	{r4, pc}

0800a5d0 <_Balloc>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	460d      	mov	r5, r1
 800a5d8:	b976      	cbnz	r6, 800a5f8 <_Balloc+0x28>
 800a5da:	2010      	movs	r0, #16
 800a5dc:	f7ff ffd4 	bl	800a588 <malloc>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	6260      	str	r0, [r4, #36]	; 0x24
 800a5e4:	b920      	cbnz	r0, 800a5f0 <_Balloc+0x20>
 800a5e6:	2166      	movs	r1, #102	; 0x66
 800a5e8:	4b17      	ldr	r3, [pc, #92]	; (800a648 <_Balloc+0x78>)
 800a5ea:	4818      	ldr	r0, [pc, #96]	; (800a64c <_Balloc+0x7c>)
 800a5ec:	f001 f83c 	bl	800b668 <__assert_func>
 800a5f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5f4:	6006      	str	r6, [r0, #0]
 800a5f6:	60c6      	str	r6, [r0, #12]
 800a5f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a5fa:	68f3      	ldr	r3, [r6, #12]
 800a5fc:	b183      	cbz	r3, 800a620 <_Balloc+0x50>
 800a5fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a606:	b9b8      	cbnz	r0, 800a638 <_Balloc+0x68>
 800a608:	2101      	movs	r1, #1
 800a60a:	fa01 f605 	lsl.w	r6, r1, r5
 800a60e:	1d72      	adds	r2, r6, #5
 800a610:	4620      	mov	r0, r4
 800a612:	0092      	lsls	r2, r2, #2
 800a614:	f000 fb5e 	bl	800acd4 <_calloc_r>
 800a618:	b160      	cbz	r0, 800a634 <_Balloc+0x64>
 800a61a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a61e:	e00e      	b.n	800a63e <_Balloc+0x6e>
 800a620:	2221      	movs	r2, #33	; 0x21
 800a622:	2104      	movs	r1, #4
 800a624:	4620      	mov	r0, r4
 800a626:	f000 fb55 	bl	800acd4 <_calloc_r>
 800a62a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a62c:	60f0      	str	r0, [r6, #12]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1e4      	bne.n	800a5fe <_Balloc+0x2e>
 800a634:	2000      	movs	r0, #0
 800a636:	bd70      	pop	{r4, r5, r6, pc}
 800a638:	6802      	ldr	r2, [r0, #0]
 800a63a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a63e:	2300      	movs	r3, #0
 800a640:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a644:	e7f7      	b.n	800a636 <_Balloc+0x66>
 800a646:	bf00      	nop
 800a648:	080126b1 	.word	0x080126b1
 800a64c:	08012794 	.word	0x08012794

0800a650 <_Bfree>:
 800a650:	b570      	push	{r4, r5, r6, lr}
 800a652:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a654:	4605      	mov	r5, r0
 800a656:	460c      	mov	r4, r1
 800a658:	b976      	cbnz	r6, 800a678 <_Bfree+0x28>
 800a65a:	2010      	movs	r0, #16
 800a65c:	f7ff ff94 	bl	800a588 <malloc>
 800a660:	4602      	mov	r2, r0
 800a662:	6268      	str	r0, [r5, #36]	; 0x24
 800a664:	b920      	cbnz	r0, 800a670 <_Bfree+0x20>
 800a666:	218a      	movs	r1, #138	; 0x8a
 800a668:	4b08      	ldr	r3, [pc, #32]	; (800a68c <_Bfree+0x3c>)
 800a66a:	4809      	ldr	r0, [pc, #36]	; (800a690 <_Bfree+0x40>)
 800a66c:	f000 fffc 	bl	800b668 <__assert_func>
 800a670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a674:	6006      	str	r6, [r0, #0]
 800a676:	60c6      	str	r6, [r0, #12]
 800a678:	b13c      	cbz	r4, 800a68a <_Bfree+0x3a>
 800a67a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a67c:	6862      	ldr	r2, [r4, #4]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a684:	6021      	str	r1, [r4, #0]
 800a686:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	080126b1 	.word	0x080126b1
 800a690:	08012794 	.word	0x08012794

0800a694 <__multadd>:
 800a694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a698:	4607      	mov	r7, r0
 800a69a:	460c      	mov	r4, r1
 800a69c:	461e      	mov	r6, r3
 800a69e:	2000      	movs	r0, #0
 800a6a0:	690d      	ldr	r5, [r1, #16]
 800a6a2:	f101 0c14 	add.w	ip, r1, #20
 800a6a6:	f8dc 3000 	ldr.w	r3, [ip]
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	b299      	uxth	r1, r3
 800a6ae:	fb02 6101 	mla	r1, r2, r1, r6
 800a6b2:	0c1e      	lsrs	r6, r3, #16
 800a6b4:	0c0b      	lsrs	r3, r1, #16
 800a6b6:	fb02 3306 	mla	r3, r2, r6, r3
 800a6ba:	b289      	uxth	r1, r1
 800a6bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6c0:	4285      	cmp	r5, r0
 800a6c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6c6:	f84c 1b04 	str.w	r1, [ip], #4
 800a6ca:	dcec      	bgt.n	800a6a6 <__multadd+0x12>
 800a6cc:	b30e      	cbz	r6, 800a712 <__multadd+0x7e>
 800a6ce:	68a3      	ldr	r3, [r4, #8]
 800a6d0:	42ab      	cmp	r3, r5
 800a6d2:	dc19      	bgt.n	800a708 <__multadd+0x74>
 800a6d4:	6861      	ldr	r1, [r4, #4]
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	3101      	adds	r1, #1
 800a6da:	f7ff ff79 	bl	800a5d0 <_Balloc>
 800a6de:	4680      	mov	r8, r0
 800a6e0:	b928      	cbnz	r0, 800a6ee <__multadd+0x5a>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	21b5      	movs	r1, #181	; 0xb5
 800a6e6:	4b0c      	ldr	r3, [pc, #48]	; (800a718 <__multadd+0x84>)
 800a6e8:	480c      	ldr	r0, [pc, #48]	; (800a71c <__multadd+0x88>)
 800a6ea:	f000 ffbd 	bl	800b668 <__assert_func>
 800a6ee:	6922      	ldr	r2, [r4, #16]
 800a6f0:	f104 010c 	add.w	r1, r4, #12
 800a6f4:	3202      	adds	r2, #2
 800a6f6:	0092      	lsls	r2, r2, #2
 800a6f8:	300c      	adds	r0, #12
 800a6fa:	f7ff ff5b 	bl	800a5b4 <memcpy>
 800a6fe:	4621      	mov	r1, r4
 800a700:	4638      	mov	r0, r7
 800a702:	f7ff ffa5 	bl	800a650 <_Bfree>
 800a706:	4644      	mov	r4, r8
 800a708:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a70c:	3501      	adds	r5, #1
 800a70e:	615e      	str	r6, [r3, #20]
 800a710:	6125      	str	r5, [r4, #16]
 800a712:	4620      	mov	r0, r4
 800a714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a718:	08012723 	.word	0x08012723
 800a71c:	08012794 	.word	0x08012794

0800a720 <__hi0bits>:
 800a720:	0c02      	lsrs	r2, r0, #16
 800a722:	0412      	lsls	r2, r2, #16
 800a724:	4603      	mov	r3, r0
 800a726:	b9ca      	cbnz	r2, 800a75c <__hi0bits+0x3c>
 800a728:	0403      	lsls	r3, r0, #16
 800a72a:	2010      	movs	r0, #16
 800a72c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a730:	bf04      	itt	eq
 800a732:	021b      	lsleq	r3, r3, #8
 800a734:	3008      	addeq	r0, #8
 800a736:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a73a:	bf04      	itt	eq
 800a73c:	011b      	lsleq	r3, r3, #4
 800a73e:	3004      	addeq	r0, #4
 800a740:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a744:	bf04      	itt	eq
 800a746:	009b      	lsleq	r3, r3, #2
 800a748:	3002      	addeq	r0, #2
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	db05      	blt.n	800a75a <__hi0bits+0x3a>
 800a74e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a752:	f100 0001 	add.w	r0, r0, #1
 800a756:	bf08      	it	eq
 800a758:	2020      	moveq	r0, #32
 800a75a:	4770      	bx	lr
 800a75c:	2000      	movs	r0, #0
 800a75e:	e7e5      	b.n	800a72c <__hi0bits+0xc>

0800a760 <__lo0bits>:
 800a760:	6803      	ldr	r3, [r0, #0]
 800a762:	4602      	mov	r2, r0
 800a764:	f013 0007 	ands.w	r0, r3, #7
 800a768:	d00b      	beq.n	800a782 <__lo0bits+0x22>
 800a76a:	07d9      	lsls	r1, r3, #31
 800a76c:	d421      	bmi.n	800a7b2 <__lo0bits+0x52>
 800a76e:	0798      	lsls	r0, r3, #30
 800a770:	bf49      	itett	mi
 800a772:	085b      	lsrmi	r3, r3, #1
 800a774:	089b      	lsrpl	r3, r3, #2
 800a776:	2001      	movmi	r0, #1
 800a778:	6013      	strmi	r3, [r2, #0]
 800a77a:	bf5c      	itt	pl
 800a77c:	2002      	movpl	r0, #2
 800a77e:	6013      	strpl	r3, [r2, #0]
 800a780:	4770      	bx	lr
 800a782:	b299      	uxth	r1, r3
 800a784:	b909      	cbnz	r1, 800a78a <__lo0bits+0x2a>
 800a786:	2010      	movs	r0, #16
 800a788:	0c1b      	lsrs	r3, r3, #16
 800a78a:	b2d9      	uxtb	r1, r3
 800a78c:	b909      	cbnz	r1, 800a792 <__lo0bits+0x32>
 800a78e:	3008      	adds	r0, #8
 800a790:	0a1b      	lsrs	r3, r3, #8
 800a792:	0719      	lsls	r1, r3, #28
 800a794:	bf04      	itt	eq
 800a796:	091b      	lsreq	r3, r3, #4
 800a798:	3004      	addeq	r0, #4
 800a79a:	0799      	lsls	r1, r3, #30
 800a79c:	bf04      	itt	eq
 800a79e:	089b      	lsreq	r3, r3, #2
 800a7a0:	3002      	addeq	r0, #2
 800a7a2:	07d9      	lsls	r1, r3, #31
 800a7a4:	d403      	bmi.n	800a7ae <__lo0bits+0x4e>
 800a7a6:	085b      	lsrs	r3, r3, #1
 800a7a8:	f100 0001 	add.w	r0, r0, #1
 800a7ac:	d003      	beq.n	800a7b6 <__lo0bits+0x56>
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	4770      	bx	lr
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	4770      	bx	lr
 800a7b6:	2020      	movs	r0, #32
 800a7b8:	4770      	bx	lr
	...

0800a7bc <__i2b>:
 800a7bc:	b510      	push	{r4, lr}
 800a7be:	460c      	mov	r4, r1
 800a7c0:	2101      	movs	r1, #1
 800a7c2:	f7ff ff05 	bl	800a5d0 <_Balloc>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	b928      	cbnz	r0, 800a7d6 <__i2b+0x1a>
 800a7ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a7ce:	4b04      	ldr	r3, [pc, #16]	; (800a7e0 <__i2b+0x24>)
 800a7d0:	4804      	ldr	r0, [pc, #16]	; (800a7e4 <__i2b+0x28>)
 800a7d2:	f000 ff49 	bl	800b668 <__assert_func>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	6144      	str	r4, [r0, #20]
 800a7da:	6103      	str	r3, [r0, #16]
 800a7dc:	bd10      	pop	{r4, pc}
 800a7de:	bf00      	nop
 800a7e0:	08012723 	.word	0x08012723
 800a7e4:	08012794 	.word	0x08012794

0800a7e8 <__multiply>:
 800a7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ec:	4691      	mov	r9, r2
 800a7ee:	690a      	ldr	r2, [r1, #16]
 800a7f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	bfbe      	ittt	lt
 800a7fa:	460b      	movlt	r3, r1
 800a7fc:	464c      	movlt	r4, r9
 800a7fe:	4699      	movlt	r9, r3
 800a800:	6927      	ldr	r7, [r4, #16]
 800a802:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a806:	68a3      	ldr	r3, [r4, #8]
 800a808:	6861      	ldr	r1, [r4, #4]
 800a80a:	eb07 060a 	add.w	r6, r7, sl
 800a80e:	42b3      	cmp	r3, r6
 800a810:	b085      	sub	sp, #20
 800a812:	bfb8      	it	lt
 800a814:	3101      	addlt	r1, #1
 800a816:	f7ff fedb 	bl	800a5d0 <_Balloc>
 800a81a:	b930      	cbnz	r0, 800a82a <__multiply+0x42>
 800a81c:	4602      	mov	r2, r0
 800a81e:	f240 115d 	movw	r1, #349	; 0x15d
 800a822:	4b43      	ldr	r3, [pc, #268]	; (800a930 <__multiply+0x148>)
 800a824:	4843      	ldr	r0, [pc, #268]	; (800a934 <__multiply+0x14c>)
 800a826:	f000 ff1f 	bl	800b668 <__assert_func>
 800a82a:	f100 0514 	add.w	r5, r0, #20
 800a82e:	462b      	mov	r3, r5
 800a830:	2200      	movs	r2, #0
 800a832:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a836:	4543      	cmp	r3, r8
 800a838:	d321      	bcc.n	800a87e <__multiply+0x96>
 800a83a:	f104 0314 	add.w	r3, r4, #20
 800a83e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a842:	f109 0314 	add.w	r3, r9, #20
 800a846:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a84a:	9202      	str	r2, [sp, #8]
 800a84c:	1b3a      	subs	r2, r7, r4
 800a84e:	3a15      	subs	r2, #21
 800a850:	f022 0203 	bic.w	r2, r2, #3
 800a854:	3204      	adds	r2, #4
 800a856:	f104 0115 	add.w	r1, r4, #21
 800a85a:	428f      	cmp	r7, r1
 800a85c:	bf38      	it	cc
 800a85e:	2204      	movcc	r2, #4
 800a860:	9201      	str	r2, [sp, #4]
 800a862:	9a02      	ldr	r2, [sp, #8]
 800a864:	9303      	str	r3, [sp, #12]
 800a866:	429a      	cmp	r2, r3
 800a868:	d80c      	bhi.n	800a884 <__multiply+0x9c>
 800a86a:	2e00      	cmp	r6, #0
 800a86c:	dd03      	ble.n	800a876 <__multiply+0x8e>
 800a86e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a872:	2b00      	cmp	r3, #0
 800a874:	d059      	beq.n	800a92a <__multiply+0x142>
 800a876:	6106      	str	r6, [r0, #16]
 800a878:	b005      	add	sp, #20
 800a87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87e:	f843 2b04 	str.w	r2, [r3], #4
 800a882:	e7d8      	b.n	800a836 <__multiply+0x4e>
 800a884:	f8b3 a000 	ldrh.w	sl, [r3]
 800a888:	f1ba 0f00 	cmp.w	sl, #0
 800a88c:	d023      	beq.n	800a8d6 <__multiply+0xee>
 800a88e:	46a9      	mov	r9, r5
 800a890:	f04f 0c00 	mov.w	ip, #0
 800a894:	f104 0e14 	add.w	lr, r4, #20
 800a898:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a89c:	f8d9 1000 	ldr.w	r1, [r9]
 800a8a0:	fa1f fb82 	uxth.w	fp, r2
 800a8a4:	b289      	uxth	r1, r1
 800a8a6:	fb0a 110b 	mla	r1, sl, fp, r1
 800a8aa:	4461      	add	r1, ip
 800a8ac:	f8d9 c000 	ldr.w	ip, [r9]
 800a8b0:	0c12      	lsrs	r2, r2, #16
 800a8b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a8b6:	fb0a c202 	mla	r2, sl, r2, ip
 800a8ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a8be:	b289      	uxth	r1, r1
 800a8c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8c4:	4577      	cmp	r7, lr
 800a8c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8ca:	f849 1b04 	str.w	r1, [r9], #4
 800a8ce:	d8e3      	bhi.n	800a898 <__multiply+0xb0>
 800a8d0:	9a01      	ldr	r2, [sp, #4]
 800a8d2:	f845 c002 	str.w	ip, [r5, r2]
 800a8d6:	9a03      	ldr	r2, [sp, #12]
 800a8d8:	3304      	adds	r3, #4
 800a8da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8de:	f1b9 0f00 	cmp.w	r9, #0
 800a8e2:	d020      	beq.n	800a926 <__multiply+0x13e>
 800a8e4:	46ae      	mov	lr, r5
 800a8e6:	f04f 0a00 	mov.w	sl, #0
 800a8ea:	6829      	ldr	r1, [r5, #0]
 800a8ec:	f104 0c14 	add.w	ip, r4, #20
 800a8f0:	f8bc b000 	ldrh.w	fp, [ip]
 800a8f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a8f8:	b289      	uxth	r1, r1
 800a8fa:	fb09 220b 	mla	r2, r9, fp, r2
 800a8fe:	4492      	add	sl, r2
 800a900:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a904:	f84e 1b04 	str.w	r1, [lr], #4
 800a908:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a90c:	f8be 1000 	ldrh.w	r1, [lr]
 800a910:	0c12      	lsrs	r2, r2, #16
 800a912:	fb09 1102 	mla	r1, r9, r2, r1
 800a916:	4567      	cmp	r7, ip
 800a918:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a91c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a920:	d8e6      	bhi.n	800a8f0 <__multiply+0x108>
 800a922:	9a01      	ldr	r2, [sp, #4]
 800a924:	50a9      	str	r1, [r5, r2]
 800a926:	3504      	adds	r5, #4
 800a928:	e79b      	b.n	800a862 <__multiply+0x7a>
 800a92a:	3e01      	subs	r6, #1
 800a92c:	e79d      	b.n	800a86a <__multiply+0x82>
 800a92e:	bf00      	nop
 800a930:	08012723 	.word	0x08012723
 800a934:	08012794 	.word	0x08012794

0800a938 <__pow5mult>:
 800a938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a93c:	4615      	mov	r5, r2
 800a93e:	f012 0203 	ands.w	r2, r2, #3
 800a942:	4606      	mov	r6, r0
 800a944:	460f      	mov	r7, r1
 800a946:	d007      	beq.n	800a958 <__pow5mult+0x20>
 800a948:	4c25      	ldr	r4, [pc, #148]	; (800a9e0 <__pow5mult+0xa8>)
 800a94a:	3a01      	subs	r2, #1
 800a94c:	2300      	movs	r3, #0
 800a94e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a952:	f7ff fe9f 	bl	800a694 <__multadd>
 800a956:	4607      	mov	r7, r0
 800a958:	10ad      	asrs	r5, r5, #2
 800a95a:	d03d      	beq.n	800a9d8 <__pow5mult+0xa0>
 800a95c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a95e:	b97c      	cbnz	r4, 800a980 <__pow5mult+0x48>
 800a960:	2010      	movs	r0, #16
 800a962:	f7ff fe11 	bl	800a588 <malloc>
 800a966:	4602      	mov	r2, r0
 800a968:	6270      	str	r0, [r6, #36]	; 0x24
 800a96a:	b928      	cbnz	r0, 800a978 <__pow5mult+0x40>
 800a96c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a970:	4b1c      	ldr	r3, [pc, #112]	; (800a9e4 <__pow5mult+0xac>)
 800a972:	481d      	ldr	r0, [pc, #116]	; (800a9e8 <__pow5mult+0xb0>)
 800a974:	f000 fe78 	bl	800b668 <__assert_func>
 800a978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a97c:	6004      	str	r4, [r0, #0]
 800a97e:	60c4      	str	r4, [r0, #12]
 800a980:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a988:	b94c      	cbnz	r4, 800a99e <__pow5mult+0x66>
 800a98a:	f240 2171 	movw	r1, #625	; 0x271
 800a98e:	4630      	mov	r0, r6
 800a990:	f7ff ff14 	bl	800a7bc <__i2b>
 800a994:	2300      	movs	r3, #0
 800a996:	4604      	mov	r4, r0
 800a998:	f8c8 0008 	str.w	r0, [r8, #8]
 800a99c:	6003      	str	r3, [r0, #0]
 800a99e:	f04f 0900 	mov.w	r9, #0
 800a9a2:	07eb      	lsls	r3, r5, #31
 800a9a4:	d50a      	bpl.n	800a9bc <__pow5mult+0x84>
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	4622      	mov	r2, r4
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f7ff ff1c 	bl	800a7e8 <__multiply>
 800a9b0:	4680      	mov	r8, r0
 800a9b2:	4639      	mov	r1, r7
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f7ff fe4b 	bl	800a650 <_Bfree>
 800a9ba:	4647      	mov	r7, r8
 800a9bc:	106d      	asrs	r5, r5, #1
 800a9be:	d00b      	beq.n	800a9d8 <__pow5mult+0xa0>
 800a9c0:	6820      	ldr	r0, [r4, #0]
 800a9c2:	b938      	cbnz	r0, 800a9d4 <__pow5mult+0x9c>
 800a9c4:	4622      	mov	r2, r4
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7ff ff0d 	bl	800a7e8 <__multiply>
 800a9ce:	6020      	str	r0, [r4, #0]
 800a9d0:	f8c0 9000 	str.w	r9, [r0]
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	e7e4      	b.n	800a9a2 <__pow5mult+0x6a>
 800a9d8:	4638      	mov	r0, r7
 800a9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9de:	bf00      	nop
 800a9e0:	080128e0 	.word	0x080128e0
 800a9e4:	080126b1 	.word	0x080126b1
 800a9e8:	08012794 	.word	0x08012794

0800a9ec <__lshift>:
 800a9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f0:	460c      	mov	r4, r1
 800a9f2:	4607      	mov	r7, r0
 800a9f4:	4691      	mov	r9, r2
 800a9f6:	6923      	ldr	r3, [r4, #16]
 800a9f8:	6849      	ldr	r1, [r1, #4]
 800a9fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9fe:	68a3      	ldr	r3, [r4, #8]
 800aa00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa04:	f108 0601 	add.w	r6, r8, #1
 800aa08:	42b3      	cmp	r3, r6
 800aa0a:	db0b      	blt.n	800aa24 <__lshift+0x38>
 800aa0c:	4638      	mov	r0, r7
 800aa0e:	f7ff fddf 	bl	800a5d0 <_Balloc>
 800aa12:	4605      	mov	r5, r0
 800aa14:	b948      	cbnz	r0, 800aa2a <__lshift+0x3e>
 800aa16:	4602      	mov	r2, r0
 800aa18:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa1c:	4b29      	ldr	r3, [pc, #164]	; (800aac4 <__lshift+0xd8>)
 800aa1e:	482a      	ldr	r0, [pc, #168]	; (800aac8 <__lshift+0xdc>)
 800aa20:	f000 fe22 	bl	800b668 <__assert_func>
 800aa24:	3101      	adds	r1, #1
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	e7ee      	b.n	800aa08 <__lshift+0x1c>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f100 0114 	add.w	r1, r0, #20
 800aa30:	f100 0210 	add.w	r2, r0, #16
 800aa34:	4618      	mov	r0, r3
 800aa36:	4553      	cmp	r3, sl
 800aa38:	db37      	blt.n	800aaaa <__lshift+0xbe>
 800aa3a:	6920      	ldr	r0, [r4, #16]
 800aa3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa40:	f104 0314 	add.w	r3, r4, #20
 800aa44:	f019 091f 	ands.w	r9, r9, #31
 800aa48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aa50:	d02f      	beq.n	800aab2 <__lshift+0xc6>
 800aa52:	468a      	mov	sl, r1
 800aa54:	f04f 0c00 	mov.w	ip, #0
 800aa58:	f1c9 0e20 	rsb	lr, r9, #32
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	fa02 f209 	lsl.w	r2, r2, r9
 800aa62:	ea42 020c 	orr.w	r2, r2, ip
 800aa66:	f84a 2b04 	str.w	r2, [sl], #4
 800aa6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa6e:	4298      	cmp	r0, r3
 800aa70:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aa74:	d8f2      	bhi.n	800aa5c <__lshift+0x70>
 800aa76:	1b03      	subs	r3, r0, r4
 800aa78:	3b15      	subs	r3, #21
 800aa7a:	f023 0303 	bic.w	r3, r3, #3
 800aa7e:	3304      	adds	r3, #4
 800aa80:	f104 0215 	add.w	r2, r4, #21
 800aa84:	4290      	cmp	r0, r2
 800aa86:	bf38      	it	cc
 800aa88:	2304      	movcc	r3, #4
 800aa8a:	f841 c003 	str.w	ip, [r1, r3]
 800aa8e:	f1bc 0f00 	cmp.w	ip, #0
 800aa92:	d001      	beq.n	800aa98 <__lshift+0xac>
 800aa94:	f108 0602 	add.w	r6, r8, #2
 800aa98:	3e01      	subs	r6, #1
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	612e      	str	r6, [r5, #16]
 800aaa0:	f7ff fdd6 	bl	800a650 <_Bfree>
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800aaae:	3301      	adds	r3, #1
 800aab0:	e7c1      	b.n	800aa36 <__lshift+0x4a>
 800aab2:	3904      	subs	r1, #4
 800aab4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aab8:	4298      	cmp	r0, r3
 800aaba:	f841 2f04 	str.w	r2, [r1, #4]!
 800aabe:	d8f9      	bhi.n	800aab4 <__lshift+0xc8>
 800aac0:	e7ea      	b.n	800aa98 <__lshift+0xac>
 800aac2:	bf00      	nop
 800aac4:	08012723 	.word	0x08012723
 800aac8:	08012794 	.word	0x08012794

0800aacc <__mcmp>:
 800aacc:	4603      	mov	r3, r0
 800aace:	690a      	ldr	r2, [r1, #16]
 800aad0:	6900      	ldr	r0, [r0, #16]
 800aad2:	b530      	push	{r4, r5, lr}
 800aad4:	1a80      	subs	r0, r0, r2
 800aad6:	d10d      	bne.n	800aaf4 <__mcmp+0x28>
 800aad8:	3314      	adds	r3, #20
 800aada:	3114      	adds	r1, #20
 800aadc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aae0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aae4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aae8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aaec:	4295      	cmp	r5, r2
 800aaee:	d002      	beq.n	800aaf6 <__mcmp+0x2a>
 800aaf0:	d304      	bcc.n	800aafc <__mcmp+0x30>
 800aaf2:	2001      	movs	r0, #1
 800aaf4:	bd30      	pop	{r4, r5, pc}
 800aaf6:	42a3      	cmp	r3, r4
 800aaf8:	d3f4      	bcc.n	800aae4 <__mcmp+0x18>
 800aafa:	e7fb      	b.n	800aaf4 <__mcmp+0x28>
 800aafc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab00:	e7f8      	b.n	800aaf4 <__mcmp+0x28>
	...

0800ab04 <__mdiff>:
 800ab04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab08:	460d      	mov	r5, r1
 800ab0a:	4607      	mov	r7, r0
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	4628      	mov	r0, r5
 800ab10:	4614      	mov	r4, r2
 800ab12:	f7ff ffdb 	bl	800aacc <__mcmp>
 800ab16:	1e06      	subs	r6, r0, #0
 800ab18:	d111      	bne.n	800ab3e <__mdiff+0x3a>
 800ab1a:	4631      	mov	r1, r6
 800ab1c:	4638      	mov	r0, r7
 800ab1e:	f7ff fd57 	bl	800a5d0 <_Balloc>
 800ab22:	4602      	mov	r2, r0
 800ab24:	b928      	cbnz	r0, 800ab32 <__mdiff+0x2e>
 800ab26:	f240 2132 	movw	r1, #562	; 0x232
 800ab2a:	4b3a      	ldr	r3, [pc, #232]	; (800ac14 <__mdiff+0x110>)
 800ab2c:	483a      	ldr	r0, [pc, #232]	; (800ac18 <__mdiff+0x114>)
 800ab2e:	f000 fd9b 	bl	800b668 <__assert_func>
 800ab32:	2301      	movs	r3, #1
 800ab34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ab38:	4610      	mov	r0, r2
 800ab3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3e:	bfa4      	itt	ge
 800ab40:	4623      	movge	r3, r4
 800ab42:	462c      	movge	r4, r5
 800ab44:	4638      	mov	r0, r7
 800ab46:	6861      	ldr	r1, [r4, #4]
 800ab48:	bfa6      	itte	ge
 800ab4a:	461d      	movge	r5, r3
 800ab4c:	2600      	movge	r6, #0
 800ab4e:	2601      	movlt	r6, #1
 800ab50:	f7ff fd3e 	bl	800a5d0 <_Balloc>
 800ab54:	4602      	mov	r2, r0
 800ab56:	b918      	cbnz	r0, 800ab60 <__mdiff+0x5c>
 800ab58:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ab5c:	4b2d      	ldr	r3, [pc, #180]	; (800ac14 <__mdiff+0x110>)
 800ab5e:	e7e5      	b.n	800ab2c <__mdiff+0x28>
 800ab60:	f102 0814 	add.w	r8, r2, #20
 800ab64:	46c2      	mov	sl, r8
 800ab66:	f04f 0c00 	mov.w	ip, #0
 800ab6a:	6927      	ldr	r7, [r4, #16]
 800ab6c:	60c6      	str	r6, [r0, #12]
 800ab6e:	692e      	ldr	r6, [r5, #16]
 800ab70:	f104 0014 	add.w	r0, r4, #20
 800ab74:	f105 0914 	add.w	r9, r5, #20
 800ab78:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ab7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab80:	3410      	adds	r4, #16
 800ab82:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ab86:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab8a:	fa1f f18b 	uxth.w	r1, fp
 800ab8e:	448c      	add	ip, r1
 800ab90:	b299      	uxth	r1, r3
 800ab92:	0c1b      	lsrs	r3, r3, #16
 800ab94:	ebac 0101 	sub.w	r1, ip, r1
 800ab98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab9c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800aba0:	b289      	uxth	r1, r1
 800aba2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800aba6:	454e      	cmp	r6, r9
 800aba8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800abac:	f84a 3b04 	str.w	r3, [sl], #4
 800abb0:	d8e7      	bhi.n	800ab82 <__mdiff+0x7e>
 800abb2:	1b73      	subs	r3, r6, r5
 800abb4:	3b15      	subs	r3, #21
 800abb6:	f023 0303 	bic.w	r3, r3, #3
 800abba:	3515      	adds	r5, #21
 800abbc:	3304      	adds	r3, #4
 800abbe:	42ae      	cmp	r6, r5
 800abc0:	bf38      	it	cc
 800abc2:	2304      	movcc	r3, #4
 800abc4:	4418      	add	r0, r3
 800abc6:	4443      	add	r3, r8
 800abc8:	461e      	mov	r6, r3
 800abca:	4605      	mov	r5, r0
 800abcc:	4575      	cmp	r5, lr
 800abce:	d30e      	bcc.n	800abee <__mdiff+0xea>
 800abd0:	f10e 0103 	add.w	r1, lr, #3
 800abd4:	1a09      	subs	r1, r1, r0
 800abd6:	f021 0103 	bic.w	r1, r1, #3
 800abda:	3803      	subs	r0, #3
 800abdc:	4586      	cmp	lr, r0
 800abde:	bf38      	it	cc
 800abe0:	2100      	movcc	r1, #0
 800abe2:	4419      	add	r1, r3
 800abe4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800abe8:	b18b      	cbz	r3, 800ac0e <__mdiff+0x10a>
 800abea:	6117      	str	r7, [r2, #16]
 800abec:	e7a4      	b.n	800ab38 <__mdiff+0x34>
 800abee:	f855 8b04 	ldr.w	r8, [r5], #4
 800abf2:	fa1f f188 	uxth.w	r1, r8
 800abf6:	4461      	add	r1, ip
 800abf8:	140c      	asrs	r4, r1, #16
 800abfa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800abfe:	b289      	uxth	r1, r1
 800ac00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ac04:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ac08:	f846 1b04 	str.w	r1, [r6], #4
 800ac0c:	e7de      	b.n	800abcc <__mdiff+0xc8>
 800ac0e:	3f01      	subs	r7, #1
 800ac10:	e7e8      	b.n	800abe4 <__mdiff+0xe0>
 800ac12:	bf00      	nop
 800ac14:	08012723 	.word	0x08012723
 800ac18:	08012794 	.word	0x08012794

0800ac1c <__d2b>:
 800ac1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ac20:	2101      	movs	r1, #1
 800ac22:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ac26:	4690      	mov	r8, r2
 800ac28:	461d      	mov	r5, r3
 800ac2a:	f7ff fcd1 	bl	800a5d0 <_Balloc>
 800ac2e:	4604      	mov	r4, r0
 800ac30:	b930      	cbnz	r0, 800ac40 <__d2b+0x24>
 800ac32:	4602      	mov	r2, r0
 800ac34:	f240 310a 	movw	r1, #778	; 0x30a
 800ac38:	4b24      	ldr	r3, [pc, #144]	; (800accc <__d2b+0xb0>)
 800ac3a:	4825      	ldr	r0, [pc, #148]	; (800acd0 <__d2b+0xb4>)
 800ac3c:	f000 fd14 	bl	800b668 <__assert_func>
 800ac40:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ac44:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ac48:	bb2d      	cbnz	r5, 800ac96 <__d2b+0x7a>
 800ac4a:	9301      	str	r3, [sp, #4]
 800ac4c:	f1b8 0300 	subs.w	r3, r8, #0
 800ac50:	d026      	beq.n	800aca0 <__d2b+0x84>
 800ac52:	4668      	mov	r0, sp
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	f7ff fd83 	bl	800a760 <__lo0bits>
 800ac5a:	9900      	ldr	r1, [sp, #0]
 800ac5c:	b1f0      	cbz	r0, 800ac9c <__d2b+0x80>
 800ac5e:	9a01      	ldr	r2, [sp, #4]
 800ac60:	f1c0 0320 	rsb	r3, r0, #32
 800ac64:	fa02 f303 	lsl.w	r3, r2, r3
 800ac68:	430b      	orrs	r3, r1
 800ac6a:	40c2      	lsrs	r2, r0
 800ac6c:	6163      	str	r3, [r4, #20]
 800ac6e:	9201      	str	r2, [sp, #4]
 800ac70:	9b01      	ldr	r3, [sp, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	bf14      	ite	ne
 800ac76:	2102      	movne	r1, #2
 800ac78:	2101      	moveq	r1, #1
 800ac7a:	61a3      	str	r3, [r4, #24]
 800ac7c:	6121      	str	r1, [r4, #16]
 800ac7e:	b1c5      	cbz	r5, 800acb2 <__d2b+0x96>
 800ac80:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac84:	4405      	add	r5, r0
 800ac86:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac8a:	603d      	str	r5, [r7, #0]
 800ac8c:	6030      	str	r0, [r6, #0]
 800ac8e:	4620      	mov	r0, r4
 800ac90:	b002      	add	sp, #8
 800ac92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac9a:	e7d6      	b.n	800ac4a <__d2b+0x2e>
 800ac9c:	6161      	str	r1, [r4, #20]
 800ac9e:	e7e7      	b.n	800ac70 <__d2b+0x54>
 800aca0:	a801      	add	r0, sp, #4
 800aca2:	f7ff fd5d 	bl	800a760 <__lo0bits>
 800aca6:	2101      	movs	r1, #1
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	6121      	str	r1, [r4, #16]
 800acac:	6163      	str	r3, [r4, #20]
 800acae:	3020      	adds	r0, #32
 800acb0:	e7e5      	b.n	800ac7e <__d2b+0x62>
 800acb2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800acb6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800acba:	6038      	str	r0, [r7, #0]
 800acbc:	6918      	ldr	r0, [r3, #16]
 800acbe:	f7ff fd2f 	bl	800a720 <__hi0bits>
 800acc2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800acc6:	6031      	str	r1, [r6, #0]
 800acc8:	e7e1      	b.n	800ac8e <__d2b+0x72>
 800acca:	bf00      	nop
 800accc:	08012723 	.word	0x08012723
 800acd0:	08012794 	.word	0x08012794

0800acd4 <_calloc_r>:
 800acd4:	b570      	push	{r4, r5, r6, lr}
 800acd6:	fba1 5402 	umull	r5, r4, r1, r2
 800acda:	b934      	cbnz	r4, 800acea <_calloc_r+0x16>
 800acdc:	4629      	mov	r1, r5
 800acde:	f000 f875 	bl	800adcc <_malloc_r>
 800ace2:	4606      	mov	r6, r0
 800ace4:	b928      	cbnz	r0, 800acf2 <_calloc_r+0x1e>
 800ace6:	4630      	mov	r0, r6
 800ace8:	bd70      	pop	{r4, r5, r6, pc}
 800acea:	220c      	movs	r2, #12
 800acec:	2600      	movs	r6, #0
 800acee:	6002      	str	r2, [r0, #0]
 800acf0:	e7f9      	b.n	800ace6 <_calloc_r+0x12>
 800acf2:	462a      	mov	r2, r5
 800acf4:	4621      	mov	r1, r4
 800acf6:	f7fe f82f 	bl	8008d58 <memset>
 800acfa:	e7f4      	b.n	800ace6 <_calloc_r+0x12>

0800acfc <_free_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4605      	mov	r5, r0
 800ad00:	2900      	cmp	r1, #0
 800ad02:	d040      	beq.n	800ad86 <_free_r+0x8a>
 800ad04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad08:	1f0c      	subs	r4, r1, #4
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	bfb8      	it	lt
 800ad0e:	18e4      	addlt	r4, r4, r3
 800ad10:	f000 fe4c 	bl	800b9ac <__malloc_lock>
 800ad14:	4a1c      	ldr	r2, [pc, #112]	; (800ad88 <_free_r+0x8c>)
 800ad16:	6813      	ldr	r3, [r2, #0]
 800ad18:	b933      	cbnz	r3, 800ad28 <_free_r+0x2c>
 800ad1a:	6063      	str	r3, [r4, #4]
 800ad1c:	6014      	str	r4, [r2, #0]
 800ad1e:	4628      	mov	r0, r5
 800ad20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad24:	f000 be48 	b.w	800b9b8 <__malloc_unlock>
 800ad28:	42a3      	cmp	r3, r4
 800ad2a:	d908      	bls.n	800ad3e <_free_r+0x42>
 800ad2c:	6820      	ldr	r0, [r4, #0]
 800ad2e:	1821      	adds	r1, r4, r0
 800ad30:	428b      	cmp	r3, r1
 800ad32:	bf01      	itttt	eq
 800ad34:	6819      	ldreq	r1, [r3, #0]
 800ad36:	685b      	ldreq	r3, [r3, #4]
 800ad38:	1809      	addeq	r1, r1, r0
 800ad3a:	6021      	streq	r1, [r4, #0]
 800ad3c:	e7ed      	b.n	800ad1a <_free_r+0x1e>
 800ad3e:	461a      	mov	r2, r3
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	b10b      	cbz	r3, 800ad48 <_free_r+0x4c>
 800ad44:	42a3      	cmp	r3, r4
 800ad46:	d9fa      	bls.n	800ad3e <_free_r+0x42>
 800ad48:	6811      	ldr	r1, [r2, #0]
 800ad4a:	1850      	adds	r0, r2, r1
 800ad4c:	42a0      	cmp	r0, r4
 800ad4e:	d10b      	bne.n	800ad68 <_free_r+0x6c>
 800ad50:	6820      	ldr	r0, [r4, #0]
 800ad52:	4401      	add	r1, r0
 800ad54:	1850      	adds	r0, r2, r1
 800ad56:	4283      	cmp	r3, r0
 800ad58:	6011      	str	r1, [r2, #0]
 800ad5a:	d1e0      	bne.n	800ad1e <_free_r+0x22>
 800ad5c:	6818      	ldr	r0, [r3, #0]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	4401      	add	r1, r0
 800ad62:	6011      	str	r1, [r2, #0]
 800ad64:	6053      	str	r3, [r2, #4]
 800ad66:	e7da      	b.n	800ad1e <_free_r+0x22>
 800ad68:	d902      	bls.n	800ad70 <_free_r+0x74>
 800ad6a:	230c      	movs	r3, #12
 800ad6c:	602b      	str	r3, [r5, #0]
 800ad6e:	e7d6      	b.n	800ad1e <_free_r+0x22>
 800ad70:	6820      	ldr	r0, [r4, #0]
 800ad72:	1821      	adds	r1, r4, r0
 800ad74:	428b      	cmp	r3, r1
 800ad76:	bf01      	itttt	eq
 800ad78:	6819      	ldreq	r1, [r3, #0]
 800ad7a:	685b      	ldreq	r3, [r3, #4]
 800ad7c:	1809      	addeq	r1, r1, r0
 800ad7e:	6021      	streq	r1, [r4, #0]
 800ad80:	6063      	str	r3, [r4, #4]
 800ad82:	6054      	str	r4, [r2, #4]
 800ad84:	e7cb      	b.n	800ad1e <_free_r+0x22>
 800ad86:	bd38      	pop	{r3, r4, r5, pc}
 800ad88:	200018cc 	.word	0x200018cc

0800ad8c <sbrk_aligned>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	4e0e      	ldr	r6, [pc, #56]	; (800adc8 <sbrk_aligned+0x3c>)
 800ad90:	460c      	mov	r4, r1
 800ad92:	6831      	ldr	r1, [r6, #0]
 800ad94:	4605      	mov	r5, r0
 800ad96:	b911      	cbnz	r1, 800ad9e <sbrk_aligned+0x12>
 800ad98:	f000 fb40 	bl	800b41c <_sbrk_r>
 800ad9c:	6030      	str	r0, [r6, #0]
 800ad9e:	4621      	mov	r1, r4
 800ada0:	4628      	mov	r0, r5
 800ada2:	f000 fb3b 	bl	800b41c <_sbrk_r>
 800ada6:	1c43      	adds	r3, r0, #1
 800ada8:	d00a      	beq.n	800adc0 <sbrk_aligned+0x34>
 800adaa:	1cc4      	adds	r4, r0, #3
 800adac:	f024 0403 	bic.w	r4, r4, #3
 800adb0:	42a0      	cmp	r0, r4
 800adb2:	d007      	beq.n	800adc4 <sbrk_aligned+0x38>
 800adb4:	1a21      	subs	r1, r4, r0
 800adb6:	4628      	mov	r0, r5
 800adb8:	f000 fb30 	bl	800b41c <_sbrk_r>
 800adbc:	3001      	adds	r0, #1
 800adbe:	d101      	bne.n	800adc4 <sbrk_aligned+0x38>
 800adc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800adc4:	4620      	mov	r0, r4
 800adc6:	bd70      	pop	{r4, r5, r6, pc}
 800adc8:	200018d0 	.word	0x200018d0

0800adcc <_malloc_r>:
 800adcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add0:	1ccd      	adds	r5, r1, #3
 800add2:	f025 0503 	bic.w	r5, r5, #3
 800add6:	3508      	adds	r5, #8
 800add8:	2d0c      	cmp	r5, #12
 800adda:	bf38      	it	cc
 800addc:	250c      	movcc	r5, #12
 800adde:	2d00      	cmp	r5, #0
 800ade0:	4607      	mov	r7, r0
 800ade2:	db01      	blt.n	800ade8 <_malloc_r+0x1c>
 800ade4:	42a9      	cmp	r1, r5
 800ade6:	d905      	bls.n	800adf4 <_malloc_r+0x28>
 800ade8:	230c      	movs	r3, #12
 800adea:	2600      	movs	r6, #0
 800adec:	603b      	str	r3, [r7, #0]
 800adee:	4630      	mov	r0, r6
 800adf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf4:	4e2e      	ldr	r6, [pc, #184]	; (800aeb0 <_malloc_r+0xe4>)
 800adf6:	f000 fdd9 	bl	800b9ac <__malloc_lock>
 800adfa:	6833      	ldr	r3, [r6, #0]
 800adfc:	461c      	mov	r4, r3
 800adfe:	bb34      	cbnz	r4, 800ae4e <_malloc_r+0x82>
 800ae00:	4629      	mov	r1, r5
 800ae02:	4638      	mov	r0, r7
 800ae04:	f7ff ffc2 	bl	800ad8c <sbrk_aligned>
 800ae08:	1c43      	adds	r3, r0, #1
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	d14d      	bne.n	800aeaa <_malloc_r+0xde>
 800ae0e:	6834      	ldr	r4, [r6, #0]
 800ae10:	4626      	mov	r6, r4
 800ae12:	2e00      	cmp	r6, #0
 800ae14:	d140      	bne.n	800ae98 <_malloc_r+0xcc>
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	4631      	mov	r1, r6
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	eb04 0803 	add.w	r8, r4, r3
 800ae20:	f000 fafc 	bl	800b41c <_sbrk_r>
 800ae24:	4580      	cmp	r8, r0
 800ae26:	d13a      	bne.n	800ae9e <_malloc_r+0xd2>
 800ae28:	6821      	ldr	r1, [r4, #0]
 800ae2a:	3503      	adds	r5, #3
 800ae2c:	1a6d      	subs	r5, r5, r1
 800ae2e:	f025 0503 	bic.w	r5, r5, #3
 800ae32:	3508      	adds	r5, #8
 800ae34:	2d0c      	cmp	r5, #12
 800ae36:	bf38      	it	cc
 800ae38:	250c      	movcc	r5, #12
 800ae3a:	4638      	mov	r0, r7
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	f7ff ffa5 	bl	800ad8c <sbrk_aligned>
 800ae42:	3001      	adds	r0, #1
 800ae44:	d02b      	beq.n	800ae9e <_malloc_r+0xd2>
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	442b      	add	r3, r5
 800ae4a:	6023      	str	r3, [r4, #0]
 800ae4c:	e00e      	b.n	800ae6c <_malloc_r+0xa0>
 800ae4e:	6822      	ldr	r2, [r4, #0]
 800ae50:	1b52      	subs	r2, r2, r5
 800ae52:	d41e      	bmi.n	800ae92 <_malloc_r+0xc6>
 800ae54:	2a0b      	cmp	r2, #11
 800ae56:	d916      	bls.n	800ae86 <_malloc_r+0xba>
 800ae58:	1961      	adds	r1, r4, r5
 800ae5a:	42a3      	cmp	r3, r4
 800ae5c:	6025      	str	r5, [r4, #0]
 800ae5e:	bf18      	it	ne
 800ae60:	6059      	strne	r1, [r3, #4]
 800ae62:	6863      	ldr	r3, [r4, #4]
 800ae64:	bf08      	it	eq
 800ae66:	6031      	streq	r1, [r6, #0]
 800ae68:	5162      	str	r2, [r4, r5]
 800ae6a:	604b      	str	r3, [r1, #4]
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	f104 060b 	add.w	r6, r4, #11
 800ae72:	f000 fda1 	bl	800b9b8 <__malloc_unlock>
 800ae76:	f026 0607 	bic.w	r6, r6, #7
 800ae7a:	1d23      	adds	r3, r4, #4
 800ae7c:	1af2      	subs	r2, r6, r3
 800ae7e:	d0b6      	beq.n	800adee <_malloc_r+0x22>
 800ae80:	1b9b      	subs	r3, r3, r6
 800ae82:	50a3      	str	r3, [r4, r2]
 800ae84:	e7b3      	b.n	800adee <_malloc_r+0x22>
 800ae86:	6862      	ldr	r2, [r4, #4]
 800ae88:	42a3      	cmp	r3, r4
 800ae8a:	bf0c      	ite	eq
 800ae8c:	6032      	streq	r2, [r6, #0]
 800ae8e:	605a      	strne	r2, [r3, #4]
 800ae90:	e7ec      	b.n	800ae6c <_malloc_r+0xa0>
 800ae92:	4623      	mov	r3, r4
 800ae94:	6864      	ldr	r4, [r4, #4]
 800ae96:	e7b2      	b.n	800adfe <_malloc_r+0x32>
 800ae98:	4634      	mov	r4, r6
 800ae9a:	6876      	ldr	r6, [r6, #4]
 800ae9c:	e7b9      	b.n	800ae12 <_malloc_r+0x46>
 800ae9e:	230c      	movs	r3, #12
 800aea0:	4638      	mov	r0, r7
 800aea2:	603b      	str	r3, [r7, #0]
 800aea4:	f000 fd88 	bl	800b9b8 <__malloc_unlock>
 800aea8:	e7a1      	b.n	800adee <_malloc_r+0x22>
 800aeaa:	6025      	str	r5, [r4, #0]
 800aeac:	e7de      	b.n	800ae6c <_malloc_r+0xa0>
 800aeae:	bf00      	nop
 800aeb0:	200018cc 	.word	0x200018cc

0800aeb4 <__ssputs_r>:
 800aeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb8:	688e      	ldr	r6, [r1, #8]
 800aeba:	4682      	mov	sl, r0
 800aebc:	429e      	cmp	r6, r3
 800aebe:	460c      	mov	r4, r1
 800aec0:	4690      	mov	r8, r2
 800aec2:	461f      	mov	r7, r3
 800aec4:	d838      	bhi.n	800af38 <__ssputs_r+0x84>
 800aec6:	898a      	ldrh	r2, [r1, #12]
 800aec8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aecc:	d032      	beq.n	800af34 <__ssputs_r+0x80>
 800aece:	6825      	ldr	r5, [r4, #0]
 800aed0:	6909      	ldr	r1, [r1, #16]
 800aed2:	3301      	adds	r3, #1
 800aed4:	eba5 0901 	sub.w	r9, r5, r1
 800aed8:	6965      	ldr	r5, [r4, #20]
 800aeda:	444b      	add	r3, r9
 800aedc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aee0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aee4:	106d      	asrs	r5, r5, #1
 800aee6:	429d      	cmp	r5, r3
 800aee8:	bf38      	it	cc
 800aeea:	461d      	movcc	r5, r3
 800aeec:	0553      	lsls	r3, r2, #21
 800aeee:	d531      	bpl.n	800af54 <__ssputs_r+0xa0>
 800aef0:	4629      	mov	r1, r5
 800aef2:	f7ff ff6b 	bl	800adcc <_malloc_r>
 800aef6:	4606      	mov	r6, r0
 800aef8:	b950      	cbnz	r0, 800af10 <__ssputs_r+0x5c>
 800aefa:	230c      	movs	r3, #12
 800aefc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af00:	f8ca 3000 	str.w	r3, [sl]
 800af04:	89a3      	ldrh	r3, [r4, #12]
 800af06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af0a:	81a3      	strh	r3, [r4, #12]
 800af0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af10:	464a      	mov	r2, r9
 800af12:	6921      	ldr	r1, [r4, #16]
 800af14:	f7ff fb4e 	bl	800a5b4 <memcpy>
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af22:	81a3      	strh	r3, [r4, #12]
 800af24:	6126      	str	r6, [r4, #16]
 800af26:	444e      	add	r6, r9
 800af28:	6026      	str	r6, [r4, #0]
 800af2a:	463e      	mov	r6, r7
 800af2c:	6165      	str	r5, [r4, #20]
 800af2e:	eba5 0509 	sub.w	r5, r5, r9
 800af32:	60a5      	str	r5, [r4, #8]
 800af34:	42be      	cmp	r6, r7
 800af36:	d900      	bls.n	800af3a <__ssputs_r+0x86>
 800af38:	463e      	mov	r6, r7
 800af3a:	4632      	mov	r2, r6
 800af3c:	4641      	mov	r1, r8
 800af3e:	6820      	ldr	r0, [r4, #0]
 800af40:	f000 fd1a 	bl	800b978 <memmove>
 800af44:	68a3      	ldr	r3, [r4, #8]
 800af46:	2000      	movs	r0, #0
 800af48:	1b9b      	subs	r3, r3, r6
 800af4a:	60a3      	str	r3, [r4, #8]
 800af4c:	6823      	ldr	r3, [r4, #0]
 800af4e:	4433      	add	r3, r6
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	e7db      	b.n	800af0c <__ssputs_r+0x58>
 800af54:	462a      	mov	r2, r5
 800af56:	f000 fd35 	bl	800b9c4 <_realloc_r>
 800af5a:	4606      	mov	r6, r0
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d1e1      	bne.n	800af24 <__ssputs_r+0x70>
 800af60:	4650      	mov	r0, sl
 800af62:	6921      	ldr	r1, [r4, #16]
 800af64:	f7ff feca 	bl	800acfc <_free_r>
 800af68:	e7c7      	b.n	800aefa <__ssputs_r+0x46>
	...

0800af6c <_svfiprintf_r>:
 800af6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af70:	4698      	mov	r8, r3
 800af72:	898b      	ldrh	r3, [r1, #12]
 800af74:	4607      	mov	r7, r0
 800af76:	061b      	lsls	r3, r3, #24
 800af78:	460d      	mov	r5, r1
 800af7a:	4614      	mov	r4, r2
 800af7c:	b09d      	sub	sp, #116	; 0x74
 800af7e:	d50e      	bpl.n	800af9e <_svfiprintf_r+0x32>
 800af80:	690b      	ldr	r3, [r1, #16]
 800af82:	b963      	cbnz	r3, 800af9e <_svfiprintf_r+0x32>
 800af84:	2140      	movs	r1, #64	; 0x40
 800af86:	f7ff ff21 	bl	800adcc <_malloc_r>
 800af8a:	6028      	str	r0, [r5, #0]
 800af8c:	6128      	str	r0, [r5, #16]
 800af8e:	b920      	cbnz	r0, 800af9a <_svfiprintf_r+0x2e>
 800af90:	230c      	movs	r3, #12
 800af92:	603b      	str	r3, [r7, #0]
 800af94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af98:	e0d1      	b.n	800b13e <_svfiprintf_r+0x1d2>
 800af9a:	2340      	movs	r3, #64	; 0x40
 800af9c:	616b      	str	r3, [r5, #20]
 800af9e:	2300      	movs	r3, #0
 800afa0:	9309      	str	r3, [sp, #36]	; 0x24
 800afa2:	2320      	movs	r3, #32
 800afa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afa8:	2330      	movs	r3, #48	; 0x30
 800afaa:	f04f 0901 	mov.w	r9, #1
 800afae:	f8cd 800c 	str.w	r8, [sp, #12]
 800afb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b158 <_svfiprintf_r+0x1ec>
 800afb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afba:	4623      	mov	r3, r4
 800afbc:	469a      	mov	sl, r3
 800afbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afc2:	b10a      	cbz	r2, 800afc8 <_svfiprintf_r+0x5c>
 800afc4:	2a25      	cmp	r2, #37	; 0x25
 800afc6:	d1f9      	bne.n	800afbc <_svfiprintf_r+0x50>
 800afc8:	ebba 0b04 	subs.w	fp, sl, r4
 800afcc:	d00b      	beq.n	800afe6 <_svfiprintf_r+0x7a>
 800afce:	465b      	mov	r3, fp
 800afd0:	4622      	mov	r2, r4
 800afd2:	4629      	mov	r1, r5
 800afd4:	4638      	mov	r0, r7
 800afd6:	f7ff ff6d 	bl	800aeb4 <__ssputs_r>
 800afda:	3001      	adds	r0, #1
 800afdc:	f000 80aa 	beq.w	800b134 <_svfiprintf_r+0x1c8>
 800afe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afe2:	445a      	add	r2, fp
 800afe4:	9209      	str	r2, [sp, #36]	; 0x24
 800afe6:	f89a 3000 	ldrb.w	r3, [sl]
 800afea:	2b00      	cmp	r3, #0
 800afec:	f000 80a2 	beq.w	800b134 <_svfiprintf_r+0x1c8>
 800aff0:	2300      	movs	r3, #0
 800aff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aff6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800affa:	f10a 0a01 	add.w	sl, sl, #1
 800affe:	9304      	str	r3, [sp, #16]
 800b000:	9307      	str	r3, [sp, #28]
 800b002:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b006:	931a      	str	r3, [sp, #104]	; 0x68
 800b008:	4654      	mov	r4, sl
 800b00a:	2205      	movs	r2, #5
 800b00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b010:	4851      	ldr	r0, [pc, #324]	; (800b158 <_svfiprintf_r+0x1ec>)
 800b012:	f7ff fac1 	bl	800a598 <memchr>
 800b016:	9a04      	ldr	r2, [sp, #16]
 800b018:	b9d8      	cbnz	r0, 800b052 <_svfiprintf_r+0xe6>
 800b01a:	06d0      	lsls	r0, r2, #27
 800b01c:	bf44      	itt	mi
 800b01e:	2320      	movmi	r3, #32
 800b020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b024:	0711      	lsls	r1, r2, #28
 800b026:	bf44      	itt	mi
 800b028:	232b      	movmi	r3, #43	; 0x2b
 800b02a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b02e:	f89a 3000 	ldrb.w	r3, [sl]
 800b032:	2b2a      	cmp	r3, #42	; 0x2a
 800b034:	d015      	beq.n	800b062 <_svfiprintf_r+0xf6>
 800b036:	4654      	mov	r4, sl
 800b038:	2000      	movs	r0, #0
 800b03a:	f04f 0c0a 	mov.w	ip, #10
 800b03e:	9a07      	ldr	r2, [sp, #28]
 800b040:	4621      	mov	r1, r4
 800b042:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b046:	3b30      	subs	r3, #48	; 0x30
 800b048:	2b09      	cmp	r3, #9
 800b04a:	d94e      	bls.n	800b0ea <_svfiprintf_r+0x17e>
 800b04c:	b1b0      	cbz	r0, 800b07c <_svfiprintf_r+0x110>
 800b04e:	9207      	str	r2, [sp, #28]
 800b050:	e014      	b.n	800b07c <_svfiprintf_r+0x110>
 800b052:	eba0 0308 	sub.w	r3, r0, r8
 800b056:	fa09 f303 	lsl.w	r3, r9, r3
 800b05a:	4313      	orrs	r3, r2
 800b05c:	46a2      	mov	sl, r4
 800b05e:	9304      	str	r3, [sp, #16]
 800b060:	e7d2      	b.n	800b008 <_svfiprintf_r+0x9c>
 800b062:	9b03      	ldr	r3, [sp, #12]
 800b064:	1d19      	adds	r1, r3, #4
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	9103      	str	r1, [sp, #12]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	bfbb      	ittet	lt
 800b06e:	425b      	neglt	r3, r3
 800b070:	f042 0202 	orrlt.w	r2, r2, #2
 800b074:	9307      	strge	r3, [sp, #28]
 800b076:	9307      	strlt	r3, [sp, #28]
 800b078:	bfb8      	it	lt
 800b07a:	9204      	strlt	r2, [sp, #16]
 800b07c:	7823      	ldrb	r3, [r4, #0]
 800b07e:	2b2e      	cmp	r3, #46	; 0x2e
 800b080:	d10c      	bne.n	800b09c <_svfiprintf_r+0x130>
 800b082:	7863      	ldrb	r3, [r4, #1]
 800b084:	2b2a      	cmp	r3, #42	; 0x2a
 800b086:	d135      	bne.n	800b0f4 <_svfiprintf_r+0x188>
 800b088:	9b03      	ldr	r3, [sp, #12]
 800b08a:	3402      	adds	r4, #2
 800b08c:	1d1a      	adds	r2, r3, #4
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	9203      	str	r2, [sp, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	bfb8      	it	lt
 800b096:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b09a:	9305      	str	r3, [sp, #20]
 800b09c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b15c <_svfiprintf_r+0x1f0>
 800b0a0:	2203      	movs	r2, #3
 800b0a2:	4650      	mov	r0, sl
 800b0a4:	7821      	ldrb	r1, [r4, #0]
 800b0a6:	f7ff fa77 	bl	800a598 <memchr>
 800b0aa:	b140      	cbz	r0, 800b0be <_svfiprintf_r+0x152>
 800b0ac:	2340      	movs	r3, #64	; 0x40
 800b0ae:	eba0 000a 	sub.w	r0, r0, sl
 800b0b2:	fa03 f000 	lsl.w	r0, r3, r0
 800b0b6:	9b04      	ldr	r3, [sp, #16]
 800b0b8:	3401      	adds	r4, #1
 800b0ba:	4303      	orrs	r3, r0
 800b0bc:	9304      	str	r3, [sp, #16]
 800b0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c2:	2206      	movs	r2, #6
 800b0c4:	4826      	ldr	r0, [pc, #152]	; (800b160 <_svfiprintf_r+0x1f4>)
 800b0c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0ca:	f7ff fa65 	bl	800a598 <memchr>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d038      	beq.n	800b144 <_svfiprintf_r+0x1d8>
 800b0d2:	4b24      	ldr	r3, [pc, #144]	; (800b164 <_svfiprintf_r+0x1f8>)
 800b0d4:	bb1b      	cbnz	r3, 800b11e <_svfiprintf_r+0x1b2>
 800b0d6:	9b03      	ldr	r3, [sp, #12]
 800b0d8:	3307      	adds	r3, #7
 800b0da:	f023 0307 	bic.w	r3, r3, #7
 800b0de:	3308      	adds	r3, #8
 800b0e0:	9303      	str	r3, [sp, #12]
 800b0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e4:	4433      	add	r3, r6
 800b0e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e8:	e767      	b.n	800afba <_svfiprintf_r+0x4e>
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	2001      	movs	r0, #1
 800b0ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0f2:	e7a5      	b.n	800b040 <_svfiprintf_r+0xd4>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f04f 0c0a 	mov.w	ip, #10
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	3401      	adds	r4, #1
 800b0fe:	9305      	str	r3, [sp, #20]
 800b100:	4620      	mov	r0, r4
 800b102:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b106:	3a30      	subs	r2, #48	; 0x30
 800b108:	2a09      	cmp	r2, #9
 800b10a:	d903      	bls.n	800b114 <_svfiprintf_r+0x1a8>
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d0c5      	beq.n	800b09c <_svfiprintf_r+0x130>
 800b110:	9105      	str	r1, [sp, #20]
 800b112:	e7c3      	b.n	800b09c <_svfiprintf_r+0x130>
 800b114:	4604      	mov	r4, r0
 800b116:	2301      	movs	r3, #1
 800b118:	fb0c 2101 	mla	r1, ip, r1, r2
 800b11c:	e7f0      	b.n	800b100 <_svfiprintf_r+0x194>
 800b11e:	ab03      	add	r3, sp, #12
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	462a      	mov	r2, r5
 800b124:	4638      	mov	r0, r7
 800b126:	4b10      	ldr	r3, [pc, #64]	; (800b168 <_svfiprintf_r+0x1fc>)
 800b128:	a904      	add	r1, sp, #16
 800b12a:	f7fd febb 	bl	8008ea4 <_printf_float>
 800b12e:	1c42      	adds	r2, r0, #1
 800b130:	4606      	mov	r6, r0
 800b132:	d1d6      	bne.n	800b0e2 <_svfiprintf_r+0x176>
 800b134:	89ab      	ldrh	r3, [r5, #12]
 800b136:	065b      	lsls	r3, r3, #25
 800b138:	f53f af2c 	bmi.w	800af94 <_svfiprintf_r+0x28>
 800b13c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b13e:	b01d      	add	sp, #116	; 0x74
 800b140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b144:	ab03      	add	r3, sp, #12
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	462a      	mov	r2, r5
 800b14a:	4638      	mov	r0, r7
 800b14c:	4b06      	ldr	r3, [pc, #24]	; (800b168 <_svfiprintf_r+0x1fc>)
 800b14e:	a904      	add	r1, sp, #16
 800b150:	f7fe f944 	bl	80093dc <_printf_i>
 800b154:	e7eb      	b.n	800b12e <_svfiprintf_r+0x1c2>
 800b156:	bf00      	nop
 800b158:	080128ec 	.word	0x080128ec
 800b15c:	080128f2 	.word	0x080128f2
 800b160:	080128f6 	.word	0x080128f6
 800b164:	08008ea5 	.word	0x08008ea5
 800b168:	0800aeb5 	.word	0x0800aeb5

0800b16c <__sfputc_r>:
 800b16c:	6893      	ldr	r3, [r2, #8]
 800b16e:	b410      	push	{r4}
 800b170:	3b01      	subs	r3, #1
 800b172:	2b00      	cmp	r3, #0
 800b174:	6093      	str	r3, [r2, #8]
 800b176:	da07      	bge.n	800b188 <__sfputc_r+0x1c>
 800b178:	6994      	ldr	r4, [r2, #24]
 800b17a:	42a3      	cmp	r3, r4
 800b17c:	db01      	blt.n	800b182 <__sfputc_r+0x16>
 800b17e:	290a      	cmp	r1, #10
 800b180:	d102      	bne.n	800b188 <__sfputc_r+0x1c>
 800b182:	bc10      	pop	{r4}
 800b184:	f000 b99e 	b.w	800b4c4 <__swbuf_r>
 800b188:	6813      	ldr	r3, [r2, #0]
 800b18a:	1c58      	adds	r0, r3, #1
 800b18c:	6010      	str	r0, [r2, #0]
 800b18e:	7019      	strb	r1, [r3, #0]
 800b190:	4608      	mov	r0, r1
 800b192:	bc10      	pop	{r4}
 800b194:	4770      	bx	lr

0800b196 <__sfputs_r>:
 800b196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b198:	4606      	mov	r6, r0
 800b19a:	460f      	mov	r7, r1
 800b19c:	4614      	mov	r4, r2
 800b19e:	18d5      	adds	r5, r2, r3
 800b1a0:	42ac      	cmp	r4, r5
 800b1a2:	d101      	bne.n	800b1a8 <__sfputs_r+0x12>
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	e007      	b.n	800b1b8 <__sfputs_r+0x22>
 800b1a8:	463a      	mov	r2, r7
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1b0:	f7ff ffdc 	bl	800b16c <__sfputc_r>
 800b1b4:	1c43      	adds	r3, r0, #1
 800b1b6:	d1f3      	bne.n	800b1a0 <__sfputs_r+0xa>
 800b1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1bc <_vfiprintf_r>:
 800b1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c0:	460d      	mov	r5, r1
 800b1c2:	4614      	mov	r4, r2
 800b1c4:	4698      	mov	r8, r3
 800b1c6:	4606      	mov	r6, r0
 800b1c8:	b09d      	sub	sp, #116	; 0x74
 800b1ca:	b118      	cbz	r0, 800b1d4 <_vfiprintf_r+0x18>
 800b1cc:	6983      	ldr	r3, [r0, #24]
 800b1ce:	b90b      	cbnz	r3, 800b1d4 <_vfiprintf_r+0x18>
 800b1d0:	f7ff f934 	bl	800a43c <__sinit>
 800b1d4:	4b89      	ldr	r3, [pc, #548]	; (800b3fc <_vfiprintf_r+0x240>)
 800b1d6:	429d      	cmp	r5, r3
 800b1d8:	d11b      	bne.n	800b212 <_vfiprintf_r+0x56>
 800b1da:	6875      	ldr	r5, [r6, #4]
 800b1dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1de:	07d9      	lsls	r1, r3, #31
 800b1e0:	d405      	bmi.n	800b1ee <_vfiprintf_r+0x32>
 800b1e2:	89ab      	ldrh	r3, [r5, #12]
 800b1e4:	059a      	lsls	r2, r3, #22
 800b1e6:	d402      	bmi.n	800b1ee <_vfiprintf_r+0x32>
 800b1e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ea:	f7ff f9ca 	bl	800a582 <__retarget_lock_acquire_recursive>
 800b1ee:	89ab      	ldrh	r3, [r5, #12]
 800b1f0:	071b      	lsls	r3, r3, #28
 800b1f2:	d501      	bpl.n	800b1f8 <_vfiprintf_r+0x3c>
 800b1f4:	692b      	ldr	r3, [r5, #16]
 800b1f6:	b9eb      	cbnz	r3, 800b234 <_vfiprintf_r+0x78>
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f000 f9c6 	bl	800b58c <__swsetup_r>
 800b200:	b1c0      	cbz	r0, 800b234 <_vfiprintf_r+0x78>
 800b202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b204:	07dc      	lsls	r4, r3, #31
 800b206:	d50e      	bpl.n	800b226 <_vfiprintf_r+0x6a>
 800b208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b20c:	b01d      	add	sp, #116	; 0x74
 800b20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b212:	4b7b      	ldr	r3, [pc, #492]	; (800b400 <_vfiprintf_r+0x244>)
 800b214:	429d      	cmp	r5, r3
 800b216:	d101      	bne.n	800b21c <_vfiprintf_r+0x60>
 800b218:	68b5      	ldr	r5, [r6, #8]
 800b21a:	e7df      	b.n	800b1dc <_vfiprintf_r+0x20>
 800b21c:	4b79      	ldr	r3, [pc, #484]	; (800b404 <_vfiprintf_r+0x248>)
 800b21e:	429d      	cmp	r5, r3
 800b220:	bf08      	it	eq
 800b222:	68f5      	ldreq	r5, [r6, #12]
 800b224:	e7da      	b.n	800b1dc <_vfiprintf_r+0x20>
 800b226:	89ab      	ldrh	r3, [r5, #12]
 800b228:	0598      	lsls	r0, r3, #22
 800b22a:	d4ed      	bmi.n	800b208 <_vfiprintf_r+0x4c>
 800b22c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b22e:	f7ff f9a9 	bl	800a584 <__retarget_lock_release_recursive>
 800b232:	e7e9      	b.n	800b208 <_vfiprintf_r+0x4c>
 800b234:	2300      	movs	r3, #0
 800b236:	9309      	str	r3, [sp, #36]	; 0x24
 800b238:	2320      	movs	r3, #32
 800b23a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b23e:	2330      	movs	r3, #48	; 0x30
 800b240:	f04f 0901 	mov.w	r9, #1
 800b244:	f8cd 800c 	str.w	r8, [sp, #12]
 800b248:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b408 <_vfiprintf_r+0x24c>
 800b24c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b250:	4623      	mov	r3, r4
 800b252:	469a      	mov	sl, r3
 800b254:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b258:	b10a      	cbz	r2, 800b25e <_vfiprintf_r+0xa2>
 800b25a:	2a25      	cmp	r2, #37	; 0x25
 800b25c:	d1f9      	bne.n	800b252 <_vfiprintf_r+0x96>
 800b25e:	ebba 0b04 	subs.w	fp, sl, r4
 800b262:	d00b      	beq.n	800b27c <_vfiprintf_r+0xc0>
 800b264:	465b      	mov	r3, fp
 800b266:	4622      	mov	r2, r4
 800b268:	4629      	mov	r1, r5
 800b26a:	4630      	mov	r0, r6
 800b26c:	f7ff ff93 	bl	800b196 <__sfputs_r>
 800b270:	3001      	adds	r0, #1
 800b272:	f000 80aa 	beq.w	800b3ca <_vfiprintf_r+0x20e>
 800b276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b278:	445a      	add	r2, fp
 800b27a:	9209      	str	r2, [sp, #36]	; 0x24
 800b27c:	f89a 3000 	ldrb.w	r3, [sl]
 800b280:	2b00      	cmp	r3, #0
 800b282:	f000 80a2 	beq.w	800b3ca <_vfiprintf_r+0x20e>
 800b286:	2300      	movs	r3, #0
 800b288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b28c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b290:	f10a 0a01 	add.w	sl, sl, #1
 800b294:	9304      	str	r3, [sp, #16]
 800b296:	9307      	str	r3, [sp, #28]
 800b298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b29c:	931a      	str	r3, [sp, #104]	; 0x68
 800b29e:	4654      	mov	r4, sl
 800b2a0:	2205      	movs	r2, #5
 800b2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2a6:	4858      	ldr	r0, [pc, #352]	; (800b408 <_vfiprintf_r+0x24c>)
 800b2a8:	f7ff f976 	bl	800a598 <memchr>
 800b2ac:	9a04      	ldr	r2, [sp, #16]
 800b2ae:	b9d8      	cbnz	r0, 800b2e8 <_vfiprintf_r+0x12c>
 800b2b0:	06d1      	lsls	r1, r2, #27
 800b2b2:	bf44      	itt	mi
 800b2b4:	2320      	movmi	r3, #32
 800b2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2ba:	0713      	lsls	r3, r2, #28
 800b2bc:	bf44      	itt	mi
 800b2be:	232b      	movmi	r3, #43	; 0x2b
 800b2c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2ca:	d015      	beq.n	800b2f8 <_vfiprintf_r+0x13c>
 800b2cc:	4654      	mov	r4, sl
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	f04f 0c0a 	mov.w	ip, #10
 800b2d4:	9a07      	ldr	r2, [sp, #28]
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2dc:	3b30      	subs	r3, #48	; 0x30
 800b2de:	2b09      	cmp	r3, #9
 800b2e0:	d94e      	bls.n	800b380 <_vfiprintf_r+0x1c4>
 800b2e2:	b1b0      	cbz	r0, 800b312 <_vfiprintf_r+0x156>
 800b2e4:	9207      	str	r2, [sp, #28]
 800b2e6:	e014      	b.n	800b312 <_vfiprintf_r+0x156>
 800b2e8:	eba0 0308 	sub.w	r3, r0, r8
 800b2ec:	fa09 f303 	lsl.w	r3, r9, r3
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	46a2      	mov	sl, r4
 800b2f4:	9304      	str	r3, [sp, #16]
 800b2f6:	e7d2      	b.n	800b29e <_vfiprintf_r+0xe2>
 800b2f8:	9b03      	ldr	r3, [sp, #12]
 800b2fa:	1d19      	adds	r1, r3, #4
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	9103      	str	r1, [sp, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	bfbb      	ittet	lt
 800b304:	425b      	neglt	r3, r3
 800b306:	f042 0202 	orrlt.w	r2, r2, #2
 800b30a:	9307      	strge	r3, [sp, #28]
 800b30c:	9307      	strlt	r3, [sp, #28]
 800b30e:	bfb8      	it	lt
 800b310:	9204      	strlt	r2, [sp, #16]
 800b312:	7823      	ldrb	r3, [r4, #0]
 800b314:	2b2e      	cmp	r3, #46	; 0x2e
 800b316:	d10c      	bne.n	800b332 <_vfiprintf_r+0x176>
 800b318:	7863      	ldrb	r3, [r4, #1]
 800b31a:	2b2a      	cmp	r3, #42	; 0x2a
 800b31c:	d135      	bne.n	800b38a <_vfiprintf_r+0x1ce>
 800b31e:	9b03      	ldr	r3, [sp, #12]
 800b320:	3402      	adds	r4, #2
 800b322:	1d1a      	adds	r2, r3, #4
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	9203      	str	r2, [sp, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	bfb8      	it	lt
 800b32c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b330:	9305      	str	r3, [sp, #20]
 800b332:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b40c <_vfiprintf_r+0x250>
 800b336:	2203      	movs	r2, #3
 800b338:	4650      	mov	r0, sl
 800b33a:	7821      	ldrb	r1, [r4, #0]
 800b33c:	f7ff f92c 	bl	800a598 <memchr>
 800b340:	b140      	cbz	r0, 800b354 <_vfiprintf_r+0x198>
 800b342:	2340      	movs	r3, #64	; 0x40
 800b344:	eba0 000a 	sub.w	r0, r0, sl
 800b348:	fa03 f000 	lsl.w	r0, r3, r0
 800b34c:	9b04      	ldr	r3, [sp, #16]
 800b34e:	3401      	adds	r4, #1
 800b350:	4303      	orrs	r3, r0
 800b352:	9304      	str	r3, [sp, #16]
 800b354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b358:	2206      	movs	r2, #6
 800b35a:	482d      	ldr	r0, [pc, #180]	; (800b410 <_vfiprintf_r+0x254>)
 800b35c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b360:	f7ff f91a 	bl	800a598 <memchr>
 800b364:	2800      	cmp	r0, #0
 800b366:	d03f      	beq.n	800b3e8 <_vfiprintf_r+0x22c>
 800b368:	4b2a      	ldr	r3, [pc, #168]	; (800b414 <_vfiprintf_r+0x258>)
 800b36a:	bb1b      	cbnz	r3, 800b3b4 <_vfiprintf_r+0x1f8>
 800b36c:	9b03      	ldr	r3, [sp, #12]
 800b36e:	3307      	adds	r3, #7
 800b370:	f023 0307 	bic.w	r3, r3, #7
 800b374:	3308      	adds	r3, #8
 800b376:	9303      	str	r3, [sp, #12]
 800b378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b37a:	443b      	add	r3, r7
 800b37c:	9309      	str	r3, [sp, #36]	; 0x24
 800b37e:	e767      	b.n	800b250 <_vfiprintf_r+0x94>
 800b380:	460c      	mov	r4, r1
 800b382:	2001      	movs	r0, #1
 800b384:	fb0c 3202 	mla	r2, ip, r2, r3
 800b388:	e7a5      	b.n	800b2d6 <_vfiprintf_r+0x11a>
 800b38a:	2300      	movs	r3, #0
 800b38c:	f04f 0c0a 	mov.w	ip, #10
 800b390:	4619      	mov	r1, r3
 800b392:	3401      	adds	r4, #1
 800b394:	9305      	str	r3, [sp, #20]
 800b396:	4620      	mov	r0, r4
 800b398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b39c:	3a30      	subs	r2, #48	; 0x30
 800b39e:	2a09      	cmp	r2, #9
 800b3a0:	d903      	bls.n	800b3aa <_vfiprintf_r+0x1ee>
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d0c5      	beq.n	800b332 <_vfiprintf_r+0x176>
 800b3a6:	9105      	str	r1, [sp, #20]
 800b3a8:	e7c3      	b.n	800b332 <_vfiprintf_r+0x176>
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3b2:	e7f0      	b.n	800b396 <_vfiprintf_r+0x1da>
 800b3b4:	ab03      	add	r3, sp, #12
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	462a      	mov	r2, r5
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	4b16      	ldr	r3, [pc, #88]	; (800b418 <_vfiprintf_r+0x25c>)
 800b3be:	a904      	add	r1, sp, #16
 800b3c0:	f7fd fd70 	bl	8008ea4 <_printf_float>
 800b3c4:	4607      	mov	r7, r0
 800b3c6:	1c78      	adds	r0, r7, #1
 800b3c8:	d1d6      	bne.n	800b378 <_vfiprintf_r+0x1bc>
 800b3ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3cc:	07d9      	lsls	r1, r3, #31
 800b3ce:	d405      	bmi.n	800b3dc <_vfiprintf_r+0x220>
 800b3d0:	89ab      	ldrh	r3, [r5, #12]
 800b3d2:	059a      	lsls	r2, r3, #22
 800b3d4:	d402      	bmi.n	800b3dc <_vfiprintf_r+0x220>
 800b3d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3d8:	f7ff f8d4 	bl	800a584 <__retarget_lock_release_recursive>
 800b3dc:	89ab      	ldrh	r3, [r5, #12]
 800b3de:	065b      	lsls	r3, r3, #25
 800b3e0:	f53f af12 	bmi.w	800b208 <_vfiprintf_r+0x4c>
 800b3e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3e6:	e711      	b.n	800b20c <_vfiprintf_r+0x50>
 800b3e8:	ab03      	add	r3, sp, #12
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	462a      	mov	r2, r5
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	4b09      	ldr	r3, [pc, #36]	; (800b418 <_vfiprintf_r+0x25c>)
 800b3f2:	a904      	add	r1, sp, #16
 800b3f4:	f7fd fff2 	bl	80093dc <_printf_i>
 800b3f8:	e7e4      	b.n	800b3c4 <_vfiprintf_r+0x208>
 800b3fa:	bf00      	nop
 800b3fc:	08012754 	.word	0x08012754
 800b400:	08012774 	.word	0x08012774
 800b404:	08012734 	.word	0x08012734
 800b408:	080128ec 	.word	0x080128ec
 800b40c:	080128f2 	.word	0x080128f2
 800b410:	080128f6 	.word	0x080128f6
 800b414:	08008ea5 	.word	0x08008ea5
 800b418:	0800b197 	.word	0x0800b197

0800b41c <_sbrk_r>:
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	2300      	movs	r3, #0
 800b420:	4d05      	ldr	r5, [pc, #20]	; (800b438 <_sbrk_r+0x1c>)
 800b422:	4604      	mov	r4, r0
 800b424:	4608      	mov	r0, r1
 800b426:	602b      	str	r3, [r5, #0]
 800b428:	f7f8 fdd6 	bl	8003fd8 <_sbrk>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d102      	bne.n	800b436 <_sbrk_r+0x1a>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	b103      	cbz	r3, 800b436 <_sbrk_r+0x1a>
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	200018d4 	.word	0x200018d4

0800b43c <__sread>:
 800b43c:	b510      	push	{r4, lr}
 800b43e:	460c      	mov	r4, r1
 800b440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b444:	f000 faee 	bl	800ba24 <_read_r>
 800b448:	2800      	cmp	r0, #0
 800b44a:	bfab      	itete	ge
 800b44c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b44e:	89a3      	ldrhlt	r3, [r4, #12]
 800b450:	181b      	addge	r3, r3, r0
 800b452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b456:	bfac      	ite	ge
 800b458:	6563      	strge	r3, [r4, #84]	; 0x54
 800b45a:	81a3      	strhlt	r3, [r4, #12]
 800b45c:	bd10      	pop	{r4, pc}

0800b45e <__swrite>:
 800b45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b462:	461f      	mov	r7, r3
 800b464:	898b      	ldrh	r3, [r1, #12]
 800b466:	4605      	mov	r5, r0
 800b468:	05db      	lsls	r3, r3, #23
 800b46a:	460c      	mov	r4, r1
 800b46c:	4616      	mov	r6, r2
 800b46e:	d505      	bpl.n	800b47c <__swrite+0x1e>
 800b470:	2302      	movs	r3, #2
 800b472:	2200      	movs	r2, #0
 800b474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b478:	f000 f9f4 	bl	800b864 <_lseek_r>
 800b47c:	89a3      	ldrh	r3, [r4, #12]
 800b47e:	4632      	mov	r2, r6
 800b480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b484:	81a3      	strh	r3, [r4, #12]
 800b486:	4628      	mov	r0, r5
 800b488:	463b      	mov	r3, r7
 800b48a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b48e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b492:	f000 b869 	b.w	800b568 <_write_r>

0800b496 <__sseek>:
 800b496:	b510      	push	{r4, lr}
 800b498:	460c      	mov	r4, r1
 800b49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b49e:	f000 f9e1 	bl	800b864 <_lseek_r>
 800b4a2:	1c43      	adds	r3, r0, #1
 800b4a4:	89a3      	ldrh	r3, [r4, #12]
 800b4a6:	bf15      	itete	ne
 800b4a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4b2:	81a3      	strheq	r3, [r4, #12]
 800b4b4:	bf18      	it	ne
 800b4b6:	81a3      	strhne	r3, [r4, #12]
 800b4b8:	bd10      	pop	{r4, pc}

0800b4ba <__sclose>:
 800b4ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4be:	f000 b8f1 	b.w	800b6a4 <_close_r>
	...

0800b4c4 <__swbuf_r>:
 800b4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c6:	460e      	mov	r6, r1
 800b4c8:	4614      	mov	r4, r2
 800b4ca:	4605      	mov	r5, r0
 800b4cc:	b118      	cbz	r0, 800b4d6 <__swbuf_r+0x12>
 800b4ce:	6983      	ldr	r3, [r0, #24]
 800b4d0:	b90b      	cbnz	r3, 800b4d6 <__swbuf_r+0x12>
 800b4d2:	f7fe ffb3 	bl	800a43c <__sinit>
 800b4d6:	4b21      	ldr	r3, [pc, #132]	; (800b55c <__swbuf_r+0x98>)
 800b4d8:	429c      	cmp	r4, r3
 800b4da:	d12b      	bne.n	800b534 <__swbuf_r+0x70>
 800b4dc:	686c      	ldr	r4, [r5, #4]
 800b4de:	69a3      	ldr	r3, [r4, #24]
 800b4e0:	60a3      	str	r3, [r4, #8]
 800b4e2:	89a3      	ldrh	r3, [r4, #12]
 800b4e4:	071a      	lsls	r2, r3, #28
 800b4e6:	d52f      	bpl.n	800b548 <__swbuf_r+0x84>
 800b4e8:	6923      	ldr	r3, [r4, #16]
 800b4ea:	b36b      	cbz	r3, 800b548 <__swbuf_r+0x84>
 800b4ec:	6923      	ldr	r3, [r4, #16]
 800b4ee:	6820      	ldr	r0, [r4, #0]
 800b4f0:	b2f6      	uxtb	r6, r6
 800b4f2:	1ac0      	subs	r0, r0, r3
 800b4f4:	6963      	ldr	r3, [r4, #20]
 800b4f6:	4637      	mov	r7, r6
 800b4f8:	4283      	cmp	r3, r0
 800b4fa:	dc04      	bgt.n	800b506 <__swbuf_r+0x42>
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	4628      	mov	r0, r5
 800b500:	f000 f962 	bl	800b7c8 <_fflush_r>
 800b504:	bb30      	cbnz	r0, 800b554 <__swbuf_r+0x90>
 800b506:	68a3      	ldr	r3, [r4, #8]
 800b508:	3001      	adds	r0, #1
 800b50a:	3b01      	subs	r3, #1
 800b50c:	60a3      	str	r3, [r4, #8]
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	1c5a      	adds	r2, r3, #1
 800b512:	6022      	str	r2, [r4, #0]
 800b514:	701e      	strb	r6, [r3, #0]
 800b516:	6963      	ldr	r3, [r4, #20]
 800b518:	4283      	cmp	r3, r0
 800b51a:	d004      	beq.n	800b526 <__swbuf_r+0x62>
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	07db      	lsls	r3, r3, #31
 800b520:	d506      	bpl.n	800b530 <__swbuf_r+0x6c>
 800b522:	2e0a      	cmp	r6, #10
 800b524:	d104      	bne.n	800b530 <__swbuf_r+0x6c>
 800b526:	4621      	mov	r1, r4
 800b528:	4628      	mov	r0, r5
 800b52a:	f000 f94d 	bl	800b7c8 <_fflush_r>
 800b52e:	b988      	cbnz	r0, 800b554 <__swbuf_r+0x90>
 800b530:	4638      	mov	r0, r7
 800b532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b534:	4b0a      	ldr	r3, [pc, #40]	; (800b560 <__swbuf_r+0x9c>)
 800b536:	429c      	cmp	r4, r3
 800b538:	d101      	bne.n	800b53e <__swbuf_r+0x7a>
 800b53a:	68ac      	ldr	r4, [r5, #8]
 800b53c:	e7cf      	b.n	800b4de <__swbuf_r+0x1a>
 800b53e:	4b09      	ldr	r3, [pc, #36]	; (800b564 <__swbuf_r+0xa0>)
 800b540:	429c      	cmp	r4, r3
 800b542:	bf08      	it	eq
 800b544:	68ec      	ldreq	r4, [r5, #12]
 800b546:	e7ca      	b.n	800b4de <__swbuf_r+0x1a>
 800b548:	4621      	mov	r1, r4
 800b54a:	4628      	mov	r0, r5
 800b54c:	f000 f81e 	bl	800b58c <__swsetup_r>
 800b550:	2800      	cmp	r0, #0
 800b552:	d0cb      	beq.n	800b4ec <__swbuf_r+0x28>
 800b554:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b558:	e7ea      	b.n	800b530 <__swbuf_r+0x6c>
 800b55a:	bf00      	nop
 800b55c:	08012754 	.word	0x08012754
 800b560:	08012774 	.word	0x08012774
 800b564:	08012734 	.word	0x08012734

0800b568 <_write_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4604      	mov	r4, r0
 800b56c:	4608      	mov	r0, r1
 800b56e:	4611      	mov	r1, r2
 800b570:	2200      	movs	r2, #0
 800b572:	4d05      	ldr	r5, [pc, #20]	; (800b588 <_write_r+0x20>)
 800b574:	602a      	str	r2, [r5, #0]
 800b576:	461a      	mov	r2, r3
 800b578:	f7f7 fd4e 	bl	8003018 <_write>
 800b57c:	1c43      	adds	r3, r0, #1
 800b57e:	d102      	bne.n	800b586 <_write_r+0x1e>
 800b580:	682b      	ldr	r3, [r5, #0]
 800b582:	b103      	cbz	r3, 800b586 <_write_r+0x1e>
 800b584:	6023      	str	r3, [r4, #0]
 800b586:	bd38      	pop	{r3, r4, r5, pc}
 800b588:	200018d4 	.word	0x200018d4

0800b58c <__swsetup_r>:
 800b58c:	4b32      	ldr	r3, [pc, #200]	; (800b658 <__swsetup_r+0xcc>)
 800b58e:	b570      	push	{r4, r5, r6, lr}
 800b590:	681d      	ldr	r5, [r3, #0]
 800b592:	4606      	mov	r6, r0
 800b594:	460c      	mov	r4, r1
 800b596:	b125      	cbz	r5, 800b5a2 <__swsetup_r+0x16>
 800b598:	69ab      	ldr	r3, [r5, #24]
 800b59a:	b913      	cbnz	r3, 800b5a2 <__swsetup_r+0x16>
 800b59c:	4628      	mov	r0, r5
 800b59e:	f7fe ff4d 	bl	800a43c <__sinit>
 800b5a2:	4b2e      	ldr	r3, [pc, #184]	; (800b65c <__swsetup_r+0xd0>)
 800b5a4:	429c      	cmp	r4, r3
 800b5a6:	d10f      	bne.n	800b5c8 <__swsetup_r+0x3c>
 800b5a8:	686c      	ldr	r4, [r5, #4]
 800b5aa:	89a3      	ldrh	r3, [r4, #12]
 800b5ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5b0:	0719      	lsls	r1, r3, #28
 800b5b2:	d42c      	bmi.n	800b60e <__swsetup_r+0x82>
 800b5b4:	06dd      	lsls	r5, r3, #27
 800b5b6:	d411      	bmi.n	800b5dc <__swsetup_r+0x50>
 800b5b8:	2309      	movs	r3, #9
 800b5ba:	6033      	str	r3, [r6, #0]
 800b5bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5c4:	81a3      	strh	r3, [r4, #12]
 800b5c6:	e03e      	b.n	800b646 <__swsetup_r+0xba>
 800b5c8:	4b25      	ldr	r3, [pc, #148]	; (800b660 <__swsetup_r+0xd4>)
 800b5ca:	429c      	cmp	r4, r3
 800b5cc:	d101      	bne.n	800b5d2 <__swsetup_r+0x46>
 800b5ce:	68ac      	ldr	r4, [r5, #8]
 800b5d0:	e7eb      	b.n	800b5aa <__swsetup_r+0x1e>
 800b5d2:	4b24      	ldr	r3, [pc, #144]	; (800b664 <__swsetup_r+0xd8>)
 800b5d4:	429c      	cmp	r4, r3
 800b5d6:	bf08      	it	eq
 800b5d8:	68ec      	ldreq	r4, [r5, #12]
 800b5da:	e7e6      	b.n	800b5aa <__swsetup_r+0x1e>
 800b5dc:	0758      	lsls	r0, r3, #29
 800b5de:	d512      	bpl.n	800b606 <__swsetup_r+0x7a>
 800b5e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5e2:	b141      	cbz	r1, 800b5f6 <__swsetup_r+0x6a>
 800b5e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5e8:	4299      	cmp	r1, r3
 800b5ea:	d002      	beq.n	800b5f2 <__swsetup_r+0x66>
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f7ff fb85 	bl	800acfc <_free_r>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	6363      	str	r3, [r4, #52]	; 0x34
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5fc:	81a3      	strh	r3, [r4, #12]
 800b5fe:	2300      	movs	r3, #0
 800b600:	6063      	str	r3, [r4, #4]
 800b602:	6923      	ldr	r3, [r4, #16]
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	89a3      	ldrh	r3, [r4, #12]
 800b608:	f043 0308 	orr.w	r3, r3, #8
 800b60c:	81a3      	strh	r3, [r4, #12]
 800b60e:	6923      	ldr	r3, [r4, #16]
 800b610:	b94b      	cbnz	r3, 800b626 <__swsetup_r+0x9a>
 800b612:	89a3      	ldrh	r3, [r4, #12]
 800b614:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b61c:	d003      	beq.n	800b626 <__swsetup_r+0x9a>
 800b61e:	4621      	mov	r1, r4
 800b620:	4630      	mov	r0, r6
 800b622:	f000 f957 	bl	800b8d4 <__smakebuf_r>
 800b626:	89a0      	ldrh	r0, [r4, #12]
 800b628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b62c:	f010 0301 	ands.w	r3, r0, #1
 800b630:	d00a      	beq.n	800b648 <__swsetup_r+0xbc>
 800b632:	2300      	movs	r3, #0
 800b634:	60a3      	str	r3, [r4, #8]
 800b636:	6963      	ldr	r3, [r4, #20]
 800b638:	425b      	negs	r3, r3
 800b63a:	61a3      	str	r3, [r4, #24]
 800b63c:	6923      	ldr	r3, [r4, #16]
 800b63e:	b943      	cbnz	r3, 800b652 <__swsetup_r+0xc6>
 800b640:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b644:	d1ba      	bne.n	800b5bc <__swsetup_r+0x30>
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	0781      	lsls	r1, r0, #30
 800b64a:	bf58      	it	pl
 800b64c:	6963      	ldrpl	r3, [r4, #20]
 800b64e:	60a3      	str	r3, [r4, #8]
 800b650:	e7f4      	b.n	800b63c <__swsetup_r+0xb0>
 800b652:	2000      	movs	r0, #0
 800b654:	e7f7      	b.n	800b646 <__swsetup_r+0xba>
 800b656:	bf00      	nop
 800b658:	20000018 	.word	0x20000018
 800b65c:	08012754 	.word	0x08012754
 800b660:	08012774 	.word	0x08012774
 800b664:	08012734 	.word	0x08012734

0800b668 <__assert_func>:
 800b668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b66a:	4614      	mov	r4, r2
 800b66c:	461a      	mov	r2, r3
 800b66e:	4b09      	ldr	r3, [pc, #36]	; (800b694 <__assert_func+0x2c>)
 800b670:	4605      	mov	r5, r0
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	68d8      	ldr	r0, [r3, #12]
 800b676:	b14c      	cbz	r4, 800b68c <__assert_func+0x24>
 800b678:	4b07      	ldr	r3, [pc, #28]	; (800b698 <__assert_func+0x30>)
 800b67a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b67e:	9100      	str	r1, [sp, #0]
 800b680:	462b      	mov	r3, r5
 800b682:	4906      	ldr	r1, [pc, #24]	; (800b69c <__assert_func+0x34>)
 800b684:	f000 f8dc 	bl	800b840 <fiprintf>
 800b688:	f000 f9eb 	bl	800ba62 <abort>
 800b68c:	4b04      	ldr	r3, [pc, #16]	; (800b6a0 <__assert_func+0x38>)
 800b68e:	461c      	mov	r4, r3
 800b690:	e7f3      	b.n	800b67a <__assert_func+0x12>
 800b692:	bf00      	nop
 800b694:	20000018 	.word	0x20000018
 800b698:	080128fd 	.word	0x080128fd
 800b69c:	0801290a 	.word	0x0801290a
 800b6a0:	08012938 	.word	0x08012938

0800b6a4 <_close_r>:
 800b6a4:	b538      	push	{r3, r4, r5, lr}
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	4d05      	ldr	r5, [pc, #20]	; (800b6c0 <_close_r+0x1c>)
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	4608      	mov	r0, r1
 800b6ae:	602b      	str	r3, [r5, #0]
 800b6b0:	f7f8 fc84 	bl	8003fbc <_close>
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	d102      	bne.n	800b6be <_close_r+0x1a>
 800b6b8:	682b      	ldr	r3, [r5, #0]
 800b6ba:	b103      	cbz	r3, 800b6be <_close_r+0x1a>
 800b6bc:	6023      	str	r3, [r4, #0]
 800b6be:	bd38      	pop	{r3, r4, r5, pc}
 800b6c0:	200018d4 	.word	0x200018d4

0800b6c4 <__sflush_r>:
 800b6c4:	898a      	ldrh	r2, [r1, #12]
 800b6c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	0710      	lsls	r0, r2, #28
 800b6cc:	460c      	mov	r4, r1
 800b6ce:	d457      	bmi.n	800b780 <__sflush_r+0xbc>
 800b6d0:	684b      	ldr	r3, [r1, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	dc04      	bgt.n	800b6e0 <__sflush_r+0x1c>
 800b6d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	dc01      	bgt.n	800b6e0 <__sflush_r+0x1c>
 800b6dc:	2000      	movs	r0, #0
 800b6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6e2:	2e00      	cmp	r6, #0
 800b6e4:	d0fa      	beq.n	800b6dc <__sflush_r+0x18>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6ec:	682f      	ldr	r7, [r5, #0]
 800b6ee:	602b      	str	r3, [r5, #0]
 800b6f0:	d032      	beq.n	800b758 <__sflush_r+0x94>
 800b6f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6f4:	89a3      	ldrh	r3, [r4, #12]
 800b6f6:	075a      	lsls	r2, r3, #29
 800b6f8:	d505      	bpl.n	800b706 <__sflush_r+0x42>
 800b6fa:	6863      	ldr	r3, [r4, #4]
 800b6fc:	1ac0      	subs	r0, r0, r3
 800b6fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b700:	b10b      	cbz	r3, 800b706 <__sflush_r+0x42>
 800b702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b704:	1ac0      	subs	r0, r0, r3
 800b706:	2300      	movs	r3, #0
 800b708:	4602      	mov	r2, r0
 800b70a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b70c:	4628      	mov	r0, r5
 800b70e:	6a21      	ldr	r1, [r4, #32]
 800b710:	47b0      	blx	r6
 800b712:	1c43      	adds	r3, r0, #1
 800b714:	89a3      	ldrh	r3, [r4, #12]
 800b716:	d106      	bne.n	800b726 <__sflush_r+0x62>
 800b718:	6829      	ldr	r1, [r5, #0]
 800b71a:	291d      	cmp	r1, #29
 800b71c:	d82c      	bhi.n	800b778 <__sflush_r+0xb4>
 800b71e:	4a29      	ldr	r2, [pc, #164]	; (800b7c4 <__sflush_r+0x100>)
 800b720:	40ca      	lsrs	r2, r1
 800b722:	07d6      	lsls	r6, r2, #31
 800b724:	d528      	bpl.n	800b778 <__sflush_r+0xb4>
 800b726:	2200      	movs	r2, #0
 800b728:	6062      	str	r2, [r4, #4]
 800b72a:	6922      	ldr	r2, [r4, #16]
 800b72c:	04d9      	lsls	r1, r3, #19
 800b72e:	6022      	str	r2, [r4, #0]
 800b730:	d504      	bpl.n	800b73c <__sflush_r+0x78>
 800b732:	1c42      	adds	r2, r0, #1
 800b734:	d101      	bne.n	800b73a <__sflush_r+0x76>
 800b736:	682b      	ldr	r3, [r5, #0]
 800b738:	b903      	cbnz	r3, 800b73c <__sflush_r+0x78>
 800b73a:	6560      	str	r0, [r4, #84]	; 0x54
 800b73c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b73e:	602f      	str	r7, [r5, #0]
 800b740:	2900      	cmp	r1, #0
 800b742:	d0cb      	beq.n	800b6dc <__sflush_r+0x18>
 800b744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b748:	4299      	cmp	r1, r3
 800b74a:	d002      	beq.n	800b752 <__sflush_r+0x8e>
 800b74c:	4628      	mov	r0, r5
 800b74e:	f7ff fad5 	bl	800acfc <_free_r>
 800b752:	2000      	movs	r0, #0
 800b754:	6360      	str	r0, [r4, #52]	; 0x34
 800b756:	e7c2      	b.n	800b6de <__sflush_r+0x1a>
 800b758:	6a21      	ldr	r1, [r4, #32]
 800b75a:	2301      	movs	r3, #1
 800b75c:	4628      	mov	r0, r5
 800b75e:	47b0      	blx	r6
 800b760:	1c41      	adds	r1, r0, #1
 800b762:	d1c7      	bne.n	800b6f4 <__sflush_r+0x30>
 800b764:	682b      	ldr	r3, [r5, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d0c4      	beq.n	800b6f4 <__sflush_r+0x30>
 800b76a:	2b1d      	cmp	r3, #29
 800b76c:	d001      	beq.n	800b772 <__sflush_r+0xae>
 800b76e:	2b16      	cmp	r3, #22
 800b770:	d101      	bne.n	800b776 <__sflush_r+0xb2>
 800b772:	602f      	str	r7, [r5, #0]
 800b774:	e7b2      	b.n	800b6dc <__sflush_r+0x18>
 800b776:	89a3      	ldrh	r3, [r4, #12]
 800b778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b77c:	81a3      	strh	r3, [r4, #12]
 800b77e:	e7ae      	b.n	800b6de <__sflush_r+0x1a>
 800b780:	690f      	ldr	r7, [r1, #16]
 800b782:	2f00      	cmp	r7, #0
 800b784:	d0aa      	beq.n	800b6dc <__sflush_r+0x18>
 800b786:	0793      	lsls	r3, r2, #30
 800b788:	bf18      	it	ne
 800b78a:	2300      	movne	r3, #0
 800b78c:	680e      	ldr	r6, [r1, #0]
 800b78e:	bf08      	it	eq
 800b790:	694b      	ldreq	r3, [r1, #20]
 800b792:	1bf6      	subs	r6, r6, r7
 800b794:	600f      	str	r7, [r1, #0]
 800b796:	608b      	str	r3, [r1, #8]
 800b798:	2e00      	cmp	r6, #0
 800b79a:	dd9f      	ble.n	800b6dc <__sflush_r+0x18>
 800b79c:	4633      	mov	r3, r6
 800b79e:	463a      	mov	r2, r7
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	6a21      	ldr	r1, [r4, #32]
 800b7a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b7a8:	47e0      	blx	ip
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	dc06      	bgt.n	800b7bc <__sflush_r+0xf8>
 800b7ae:	89a3      	ldrh	r3, [r4, #12]
 800b7b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7b8:	81a3      	strh	r3, [r4, #12]
 800b7ba:	e790      	b.n	800b6de <__sflush_r+0x1a>
 800b7bc:	4407      	add	r7, r0
 800b7be:	1a36      	subs	r6, r6, r0
 800b7c0:	e7ea      	b.n	800b798 <__sflush_r+0xd4>
 800b7c2:	bf00      	nop
 800b7c4:	20400001 	.word	0x20400001

0800b7c8 <_fflush_r>:
 800b7c8:	b538      	push	{r3, r4, r5, lr}
 800b7ca:	690b      	ldr	r3, [r1, #16]
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	b913      	cbnz	r3, 800b7d8 <_fflush_r+0x10>
 800b7d2:	2500      	movs	r5, #0
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	bd38      	pop	{r3, r4, r5, pc}
 800b7d8:	b118      	cbz	r0, 800b7e2 <_fflush_r+0x1a>
 800b7da:	6983      	ldr	r3, [r0, #24]
 800b7dc:	b90b      	cbnz	r3, 800b7e2 <_fflush_r+0x1a>
 800b7de:	f7fe fe2d 	bl	800a43c <__sinit>
 800b7e2:	4b14      	ldr	r3, [pc, #80]	; (800b834 <_fflush_r+0x6c>)
 800b7e4:	429c      	cmp	r4, r3
 800b7e6:	d11b      	bne.n	800b820 <_fflush_r+0x58>
 800b7e8:	686c      	ldr	r4, [r5, #4]
 800b7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d0ef      	beq.n	800b7d2 <_fflush_r+0xa>
 800b7f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7f4:	07d0      	lsls	r0, r2, #31
 800b7f6:	d404      	bmi.n	800b802 <_fflush_r+0x3a>
 800b7f8:	0599      	lsls	r1, r3, #22
 800b7fa:	d402      	bmi.n	800b802 <_fflush_r+0x3a>
 800b7fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7fe:	f7fe fec0 	bl	800a582 <__retarget_lock_acquire_recursive>
 800b802:	4628      	mov	r0, r5
 800b804:	4621      	mov	r1, r4
 800b806:	f7ff ff5d 	bl	800b6c4 <__sflush_r>
 800b80a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b80c:	4605      	mov	r5, r0
 800b80e:	07da      	lsls	r2, r3, #31
 800b810:	d4e0      	bmi.n	800b7d4 <_fflush_r+0xc>
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	059b      	lsls	r3, r3, #22
 800b816:	d4dd      	bmi.n	800b7d4 <_fflush_r+0xc>
 800b818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b81a:	f7fe feb3 	bl	800a584 <__retarget_lock_release_recursive>
 800b81e:	e7d9      	b.n	800b7d4 <_fflush_r+0xc>
 800b820:	4b05      	ldr	r3, [pc, #20]	; (800b838 <_fflush_r+0x70>)
 800b822:	429c      	cmp	r4, r3
 800b824:	d101      	bne.n	800b82a <_fflush_r+0x62>
 800b826:	68ac      	ldr	r4, [r5, #8]
 800b828:	e7df      	b.n	800b7ea <_fflush_r+0x22>
 800b82a:	4b04      	ldr	r3, [pc, #16]	; (800b83c <_fflush_r+0x74>)
 800b82c:	429c      	cmp	r4, r3
 800b82e:	bf08      	it	eq
 800b830:	68ec      	ldreq	r4, [r5, #12]
 800b832:	e7da      	b.n	800b7ea <_fflush_r+0x22>
 800b834:	08012754 	.word	0x08012754
 800b838:	08012774 	.word	0x08012774
 800b83c:	08012734 	.word	0x08012734

0800b840 <fiprintf>:
 800b840:	b40e      	push	{r1, r2, r3}
 800b842:	b503      	push	{r0, r1, lr}
 800b844:	4601      	mov	r1, r0
 800b846:	ab03      	add	r3, sp, #12
 800b848:	4805      	ldr	r0, [pc, #20]	; (800b860 <fiprintf+0x20>)
 800b84a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b84e:	6800      	ldr	r0, [r0, #0]
 800b850:	9301      	str	r3, [sp, #4]
 800b852:	f7ff fcb3 	bl	800b1bc <_vfiprintf_r>
 800b856:	b002      	add	sp, #8
 800b858:	f85d eb04 	ldr.w	lr, [sp], #4
 800b85c:	b003      	add	sp, #12
 800b85e:	4770      	bx	lr
 800b860:	20000018 	.word	0x20000018

0800b864 <_lseek_r>:
 800b864:	b538      	push	{r3, r4, r5, lr}
 800b866:	4604      	mov	r4, r0
 800b868:	4608      	mov	r0, r1
 800b86a:	4611      	mov	r1, r2
 800b86c:	2200      	movs	r2, #0
 800b86e:	4d05      	ldr	r5, [pc, #20]	; (800b884 <_lseek_r+0x20>)
 800b870:	602a      	str	r2, [r5, #0]
 800b872:	461a      	mov	r2, r3
 800b874:	f7f8 fbae 	bl	8003fd4 <_lseek>
 800b878:	1c43      	adds	r3, r0, #1
 800b87a:	d102      	bne.n	800b882 <_lseek_r+0x1e>
 800b87c:	682b      	ldr	r3, [r5, #0]
 800b87e:	b103      	cbz	r3, 800b882 <_lseek_r+0x1e>
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	bd38      	pop	{r3, r4, r5, pc}
 800b884:	200018d4 	.word	0x200018d4

0800b888 <__swhatbuf_r>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	460e      	mov	r6, r1
 800b88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b890:	4614      	mov	r4, r2
 800b892:	2900      	cmp	r1, #0
 800b894:	461d      	mov	r5, r3
 800b896:	b096      	sub	sp, #88	; 0x58
 800b898:	da08      	bge.n	800b8ac <__swhatbuf_r+0x24>
 800b89a:	2200      	movs	r2, #0
 800b89c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b8a0:	602a      	str	r2, [r5, #0]
 800b8a2:	061a      	lsls	r2, r3, #24
 800b8a4:	d410      	bmi.n	800b8c8 <__swhatbuf_r+0x40>
 800b8a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8aa:	e00e      	b.n	800b8ca <__swhatbuf_r+0x42>
 800b8ac:	466a      	mov	r2, sp
 800b8ae:	f000 f8df 	bl	800ba70 <_fstat_r>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	dbf1      	blt.n	800b89a <__swhatbuf_r+0x12>
 800b8b6:	9a01      	ldr	r2, [sp, #4]
 800b8b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8c0:	425a      	negs	r2, r3
 800b8c2:	415a      	adcs	r2, r3
 800b8c4:	602a      	str	r2, [r5, #0]
 800b8c6:	e7ee      	b.n	800b8a6 <__swhatbuf_r+0x1e>
 800b8c8:	2340      	movs	r3, #64	; 0x40
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	b016      	add	sp, #88	; 0x58
 800b8d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8d4 <__smakebuf_r>:
 800b8d4:	898b      	ldrh	r3, [r1, #12]
 800b8d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8d8:	079d      	lsls	r5, r3, #30
 800b8da:	4606      	mov	r6, r0
 800b8dc:	460c      	mov	r4, r1
 800b8de:	d507      	bpl.n	800b8f0 <__smakebuf_r+0x1c>
 800b8e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	6123      	str	r3, [r4, #16]
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	6163      	str	r3, [r4, #20]
 800b8ec:	b002      	add	sp, #8
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	466a      	mov	r2, sp
 800b8f2:	ab01      	add	r3, sp, #4
 800b8f4:	f7ff ffc8 	bl	800b888 <__swhatbuf_r>
 800b8f8:	9900      	ldr	r1, [sp, #0]
 800b8fa:	4605      	mov	r5, r0
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7ff fa65 	bl	800adcc <_malloc_r>
 800b902:	b948      	cbnz	r0, 800b918 <__smakebuf_r+0x44>
 800b904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b908:	059a      	lsls	r2, r3, #22
 800b90a:	d4ef      	bmi.n	800b8ec <__smakebuf_r+0x18>
 800b90c:	f023 0303 	bic.w	r3, r3, #3
 800b910:	f043 0302 	orr.w	r3, r3, #2
 800b914:	81a3      	strh	r3, [r4, #12]
 800b916:	e7e3      	b.n	800b8e0 <__smakebuf_r+0xc>
 800b918:	4b0d      	ldr	r3, [pc, #52]	; (800b950 <__smakebuf_r+0x7c>)
 800b91a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b91c:	89a3      	ldrh	r3, [r4, #12]
 800b91e:	6020      	str	r0, [r4, #0]
 800b920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b924:	81a3      	strh	r3, [r4, #12]
 800b926:	9b00      	ldr	r3, [sp, #0]
 800b928:	6120      	str	r0, [r4, #16]
 800b92a:	6163      	str	r3, [r4, #20]
 800b92c:	9b01      	ldr	r3, [sp, #4]
 800b92e:	b15b      	cbz	r3, 800b948 <__smakebuf_r+0x74>
 800b930:	4630      	mov	r0, r6
 800b932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b936:	f000 f8ad 	bl	800ba94 <_isatty_r>
 800b93a:	b128      	cbz	r0, 800b948 <__smakebuf_r+0x74>
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	f023 0303 	bic.w	r3, r3, #3
 800b942:	f043 0301 	orr.w	r3, r3, #1
 800b946:	81a3      	strh	r3, [r4, #12]
 800b948:	89a0      	ldrh	r0, [r4, #12]
 800b94a:	4305      	orrs	r5, r0
 800b94c:	81a5      	strh	r5, [r4, #12]
 800b94e:	e7cd      	b.n	800b8ec <__smakebuf_r+0x18>
 800b950:	0800a3d5 	.word	0x0800a3d5

0800b954 <__ascii_mbtowc>:
 800b954:	b082      	sub	sp, #8
 800b956:	b901      	cbnz	r1, 800b95a <__ascii_mbtowc+0x6>
 800b958:	a901      	add	r1, sp, #4
 800b95a:	b142      	cbz	r2, 800b96e <__ascii_mbtowc+0x1a>
 800b95c:	b14b      	cbz	r3, 800b972 <__ascii_mbtowc+0x1e>
 800b95e:	7813      	ldrb	r3, [r2, #0]
 800b960:	600b      	str	r3, [r1, #0]
 800b962:	7812      	ldrb	r2, [r2, #0]
 800b964:	1e10      	subs	r0, r2, #0
 800b966:	bf18      	it	ne
 800b968:	2001      	movne	r0, #1
 800b96a:	b002      	add	sp, #8
 800b96c:	4770      	bx	lr
 800b96e:	4610      	mov	r0, r2
 800b970:	e7fb      	b.n	800b96a <__ascii_mbtowc+0x16>
 800b972:	f06f 0001 	mvn.w	r0, #1
 800b976:	e7f8      	b.n	800b96a <__ascii_mbtowc+0x16>

0800b978 <memmove>:
 800b978:	4288      	cmp	r0, r1
 800b97a:	b510      	push	{r4, lr}
 800b97c:	eb01 0402 	add.w	r4, r1, r2
 800b980:	d902      	bls.n	800b988 <memmove+0x10>
 800b982:	4284      	cmp	r4, r0
 800b984:	4623      	mov	r3, r4
 800b986:	d807      	bhi.n	800b998 <memmove+0x20>
 800b988:	1e43      	subs	r3, r0, #1
 800b98a:	42a1      	cmp	r1, r4
 800b98c:	d008      	beq.n	800b9a0 <memmove+0x28>
 800b98e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b992:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b996:	e7f8      	b.n	800b98a <memmove+0x12>
 800b998:	4601      	mov	r1, r0
 800b99a:	4402      	add	r2, r0
 800b99c:	428a      	cmp	r2, r1
 800b99e:	d100      	bne.n	800b9a2 <memmove+0x2a>
 800b9a0:	bd10      	pop	{r4, pc}
 800b9a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9aa:	e7f7      	b.n	800b99c <memmove+0x24>

0800b9ac <__malloc_lock>:
 800b9ac:	4801      	ldr	r0, [pc, #4]	; (800b9b4 <__malloc_lock+0x8>)
 800b9ae:	f7fe bde8 	b.w	800a582 <__retarget_lock_acquire_recursive>
 800b9b2:	bf00      	nop
 800b9b4:	200018c8 	.word	0x200018c8

0800b9b8 <__malloc_unlock>:
 800b9b8:	4801      	ldr	r0, [pc, #4]	; (800b9c0 <__malloc_unlock+0x8>)
 800b9ba:	f7fe bde3 	b.w	800a584 <__retarget_lock_release_recursive>
 800b9be:	bf00      	nop
 800b9c0:	200018c8 	.word	0x200018c8

0800b9c4 <_realloc_r>:
 800b9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c8:	4680      	mov	r8, r0
 800b9ca:	4614      	mov	r4, r2
 800b9cc:	460e      	mov	r6, r1
 800b9ce:	b921      	cbnz	r1, 800b9da <_realloc_r+0x16>
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d6:	f7ff b9f9 	b.w	800adcc <_malloc_r>
 800b9da:	b92a      	cbnz	r2, 800b9e8 <_realloc_r+0x24>
 800b9dc:	f7ff f98e 	bl	800acfc <_free_r>
 800b9e0:	4625      	mov	r5, r4
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e8:	f000 f864 	bl	800bab4 <_malloc_usable_size_r>
 800b9ec:	4284      	cmp	r4, r0
 800b9ee:	4607      	mov	r7, r0
 800b9f0:	d802      	bhi.n	800b9f8 <_realloc_r+0x34>
 800b9f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9f6:	d812      	bhi.n	800ba1e <_realloc_r+0x5a>
 800b9f8:	4621      	mov	r1, r4
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	f7ff f9e6 	bl	800adcc <_malloc_r>
 800ba00:	4605      	mov	r5, r0
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d0ed      	beq.n	800b9e2 <_realloc_r+0x1e>
 800ba06:	42bc      	cmp	r4, r7
 800ba08:	4622      	mov	r2, r4
 800ba0a:	4631      	mov	r1, r6
 800ba0c:	bf28      	it	cs
 800ba0e:	463a      	movcs	r2, r7
 800ba10:	f7fe fdd0 	bl	800a5b4 <memcpy>
 800ba14:	4631      	mov	r1, r6
 800ba16:	4640      	mov	r0, r8
 800ba18:	f7ff f970 	bl	800acfc <_free_r>
 800ba1c:	e7e1      	b.n	800b9e2 <_realloc_r+0x1e>
 800ba1e:	4635      	mov	r5, r6
 800ba20:	e7df      	b.n	800b9e2 <_realloc_r+0x1e>
	...

0800ba24 <_read_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	4604      	mov	r4, r0
 800ba28:	4608      	mov	r0, r1
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	4d05      	ldr	r5, [pc, #20]	; (800ba44 <_read_r+0x20>)
 800ba30:	602a      	str	r2, [r5, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	f7f8 fab4 	bl	8003fa0 <_read>
 800ba38:	1c43      	adds	r3, r0, #1
 800ba3a:	d102      	bne.n	800ba42 <_read_r+0x1e>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	b103      	cbz	r3, 800ba42 <_read_r+0x1e>
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	bd38      	pop	{r3, r4, r5, pc}
 800ba44:	200018d4 	.word	0x200018d4

0800ba48 <__ascii_wctomb>:
 800ba48:	4603      	mov	r3, r0
 800ba4a:	4608      	mov	r0, r1
 800ba4c:	b141      	cbz	r1, 800ba60 <__ascii_wctomb+0x18>
 800ba4e:	2aff      	cmp	r2, #255	; 0xff
 800ba50:	d904      	bls.n	800ba5c <__ascii_wctomb+0x14>
 800ba52:	228a      	movs	r2, #138	; 0x8a
 800ba54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba58:	601a      	str	r2, [r3, #0]
 800ba5a:	4770      	bx	lr
 800ba5c:	2001      	movs	r0, #1
 800ba5e:	700a      	strb	r2, [r1, #0]
 800ba60:	4770      	bx	lr

0800ba62 <abort>:
 800ba62:	2006      	movs	r0, #6
 800ba64:	b508      	push	{r3, lr}
 800ba66:	f000 f855 	bl	800bb14 <raise>
 800ba6a:	2001      	movs	r0, #1
 800ba6c:	f7f8 fa92 	bl	8003f94 <_exit>

0800ba70 <_fstat_r>:
 800ba70:	b538      	push	{r3, r4, r5, lr}
 800ba72:	2300      	movs	r3, #0
 800ba74:	4d06      	ldr	r5, [pc, #24]	; (800ba90 <_fstat_r+0x20>)
 800ba76:	4604      	mov	r4, r0
 800ba78:	4608      	mov	r0, r1
 800ba7a:	4611      	mov	r1, r2
 800ba7c:	602b      	str	r3, [r5, #0]
 800ba7e:	f7f8 faa1 	bl	8003fc4 <_fstat>
 800ba82:	1c43      	adds	r3, r0, #1
 800ba84:	d102      	bne.n	800ba8c <_fstat_r+0x1c>
 800ba86:	682b      	ldr	r3, [r5, #0]
 800ba88:	b103      	cbz	r3, 800ba8c <_fstat_r+0x1c>
 800ba8a:	6023      	str	r3, [r4, #0]
 800ba8c:	bd38      	pop	{r3, r4, r5, pc}
 800ba8e:	bf00      	nop
 800ba90:	200018d4 	.word	0x200018d4

0800ba94 <_isatty_r>:
 800ba94:	b538      	push	{r3, r4, r5, lr}
 800ba96:	2300      	movs	r3, #0
 800ba98:	4d05      	ldr	r5, [pc, #20]	; (800bab0 <_isatty_r+0x1c>)
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	4608      	mov	r0, r1
 800ba9e:	602b      	str	r3, [r5, #0]
 800baa0:	f7f8 fa96 	bl	8003fd0 <_isatty>
 800baa4:	1c43      	adds	r3, r0, #1
 800baa6:	d102      	bne.n	800baae <_isatty_r+0x1a>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	b103      	cbz	r3, 800baae <_isatty_r+0x1a>
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	bd38      	pop	{r3, r4, r5, pc}
 800bab0:	200018d4 	.word	0x200018d4

0800bab4 <_malloc_usable_size_r>:
 800bab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bab8:	1f18      	subs	r0, r3, #4
 800baba:	2b00      	cmp	r3, #0
 800babc:	bfbc      	itt	lt
 800babe:	580b      	ldrlt	r3, [r1, r0]
 800bac0:	18c0      	addlt	r0, r0, r3
 800bac2:	4770      	bx	lr

0800bac4 <_raise_r>:
 800bac4:	291f      	cmp	r1, #31
 800bac6:	b538      	push	{r3, r4, r5, lr}
 800bac8:	4604      	mov	r4, r0
 800baca:	460d      	mov	r5, r1
 800bacc:	d904      	bls.n	800bad8 <_raise_r+0x14>
 800bace:	2316      	movs	r3, #22
 800bad0:	6003      	str	r3, [r0, #0]
 800bad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bad6:	bd38      	pop	{r3, r4, r5, pc}
 800bad8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bada:	b112      	cbz	r2, 800bae2 <_raise_r+0x1e>
 800badc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bae0:	b94b      	cbnz	r3, 800baf6 <_raise_r+0x32>
 800bae2:	4620      	mov	r0, r4
 800bae4:	f000 f830 	bl	800bb48 <_getpid_r>
 800bae8:	462a      	mov	r2, r5
 800baea:	4601      	mov	r1, r0
 800baec:	4620      	mov	r0, r4
 800baee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baf2:	f000 b817 	b.w	800bb24 <_kill_r>
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d00a      	beq.n	800bb10 <_raise_r+0x4c>
 800bafa:	1c59      	adds	r1, r3, #1
 800bafc:	d103      	bne.n	800bb06 <_raise_r+0x42>
 800bafe:	2316      	movs	r3, #22
 800bb00:	6003      	str	r3, [r0, #0]
 800bb02:	2001      	movs	r0, #1
 800bb04:	e7e7      	b.n	800bad6 <_raise_r+0x12>
 800bb06:	2400      	movs	r4, #0
 800bb08:	4628      	mov	r0, r5
 800bb0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb0e:	4798      	blx	r3
 800bb10:	2000      	movs	r0, #0
 800bb12:	e7e0      	b.n	800bad6 <_raise_r+0x12>

0800bb14 <raise>:
 800bb14:	4b02      	ldr	r3, [pc, #8]	; (800bb20 <raise+0xc>)
 800bb16:	4601      	mov	r1, r0
 800bb18:	6818      	ldr	r0, [r3, #0]
 800bb1a:	f7ff bfd3 	b.w	800bac4 <_raise_r>
 800bb1e:	bf00      	nop
 800bb20:	20000018 	.word	0x20000018

0800bb24 <_kill_r>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	2300      	movs	r3, #0
 800bb28:	4d06      	ldr	r5, [pc, #24]	; (800bb44 <_kill_r+0x20>)
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	4608      	mov	r0, r1
 800bb2e:	4611      	mov	r1, r2
 800bb30:	602b      	str	r3, [r5, #0]
 800bb32:	f7f8 fa25 	bl	8003f80 <_kill>
 800bb36:	1c43      	adds	r3, r0, #1
 800bb38:	d102      	bne.n	800bb40 <_kill_r+0x1c>
 800bb3a:	682b      	ldr	r3, [r5, #0]
 800bb3c:	b103      	cbz	r3, 800bb40 <_kill_r+0x1c>
 800bb3e:	6023      	str	r3, [r4, #0]
 800bb40:	bd38      	pop	{r3, r4, r5, pc}
 800bb42:	bf00      	nop
 800bb44:	200018d4 	.word	0x200018d4

0800bb48 <_getpid_r>:
 800bb48:	f7f8 ba18 	b.w	8003f7c <_getpid>

0800bb4c <_init>:
 800bb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4e:	bf00      	nop
 800bb50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb52:	bc08      	pop	{r3}
 800bb54:	469e      	mov	lr, r3
 800bb56:	4770      	bx	lr

0800bb58 <_fini>:
 800bb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5a:	bf00      	nop
 800bb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb5e:	bc08      	pop	{r3}
 800bb60:	469e      	mov	lr, r3
 800bb62:	4770      	bx	lr
