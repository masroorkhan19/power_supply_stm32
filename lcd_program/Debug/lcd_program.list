
lcd_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b910  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ee4  0800ba20  0800ba20  0001ba20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012904  08012904  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08012904  08012904  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012904  08012904  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012904  08012904  00022904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012908  08012908  00022908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801290c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001568  200001e4  08012af0  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000174c  08012af0  0003174c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013818  00000000  00000000  0003020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027c7  00000000  00000000  00043a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  000461f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001288  00000000  00000000  000475a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0ce  00000000  00000000  00048828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157a5  00000000  00000000  000628f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa60  00000000  00000000  0007809b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107afb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000671c  00000000  00000000  00107b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ba08 	.word	0x0800ba08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800ba08 	.word	0x0800ba08

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <SW3516_init>:
void read_from_register(uint8_t reg_address, uint8_t value){
	HAL_I2C_Mem_Read(&hi2c1, SW3516_address, reg_address, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
}


void SW3516_init(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write(&hi2c1, SW3516_address, I2C_CTRL, I2C_MEMADD_SIZE_8BIT, &Vinenable, 1, 10000);
 80010d6:	f242 7310 	movw	r3, #10000	; 0x2710
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2301      	movs	r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SW3516_init+0x28>)
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	2213      	movs	r2, #19
 80010e8:	2178      	movs	r1, #120	; 0x78
 80010ea:	4804      	ldr	r0, [pc, #16]	; (80010fc <SW3516_init+0x2c>)
 80010ec:	f003 fa26 	bl	800453c <HAL_I2C_Mem_Write>
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000005 	.word	0x20000005
 80010fc:	2000160c 	.word	0x2000160c

08001100 <read_ADC_DATA_BUFFER>:


void read_ADC_DATA_BUFFER(uint8_t value, uint16_t* structure_member, uint8_t data_to_put_in_buff){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]

	  HAL_I2C_Mem_Write(&hi2c1, SW3516_address, ADC_DATA_TYPE, I2C_MEMADD_SIZE_8BIT, &data_to_put_in_buff, 1, 10000);
 8001110:	f242 7310 	movw	r3, #10000	; 0x2710
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	2301      	movs	r3, #1
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	1dbb      	adds	r3, r7, #6
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	223a      	movs	r2, #58	; 0x3a
 8001122:	2178      	movs	r1, #120	; 0x78
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <read_ADC_DATA_BUFFER+0x8c>)
 8001126:	f003 fa09 	bl	800453c <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_H, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 800112a:	f242 7310 	movw	r3, #10000	; 0x2710
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	2301      	movs	r3, #1
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	223b      	movs	r2, #59	; 0x3b
 800113c:	2178      	movs	r1, #120	; 0x78
 800113e:	4813      	ldr	r0, [pc, #76]	; (800118c <read_ADC_DATA_BUFFER+0x8c>)
 8001140:	f003 faf6 	bl	8004730 <HAL_I2C_Mem_Read>
	  *structure_member  = (uint16_t)value << 4;
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	b29b      	uxth	r3, r3
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	b29a      	uxth	r2, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	801a      	strh	r2, [r3, #0]
	  HAL_I2C_Mem_Read(&hi2c1, SW3516_address, ADC_DATA_BUFFER_L, I2C_MEMADD_SIZE_8BIT, &value, 1, 10000);
 8001150:	f242 7310 	movw	r3, #10000	; 0x2710
 8001154:	9302      	str	r3, [sp, #8]
 8001156:	2301      	movs	r3, #1
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	223c      	movs	r2, #60	; 0x3c
 8001162:	2178      	movs	r1, #120	; 0x78
 8001164:	4809      	ldr	r0, [pc, #36]	; (800118c <read_ADC_DATA_BUFFER+0x8c>)
 8001166:	f003 fae3 	bl	8004730 <HAL_I2C_Mem_Read>
	  *structure_member |= (uint16_t)value & 0x000F;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	b21a      	sxth	r2, r3
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	b21b      	sxth	r3, r3
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21b      	sxth	r3, r3
 800117e:	b29a      	uxth	r2, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	801a      	strh	r2, [r3, #0]
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000160c 	.word	0x2000160c

08001190 <convert_ADC>:


void convert_ADC(float* current1, float* current2, float* voltagein, float* voltageout, float* temperature){
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af04      	add	r7, sp, #16
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]

		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.currentA_ADC, iout1_buffer_enable);
 800119e:	4b6f      	ldr	r3, [pc, #444]	; (800135c <convert_ADC+0x1cc>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4a6f      	ldr	r2, [pc, #444]	; (8001360 <convert_ADC+0x1d0>)
 80011a4:	7812      	ldrb	r2, [r2, #0]
 80011a6:	496f      	ldr	r1, [pc, #444]	; (8001364 <convert_ADC+0x1d4>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ffa9 	bl	8001100 <read_ADC_DATA_BUFFER>
		*current1 = sw3516_current_ADC.currentA_ADC * 2.5;
 80011ae:	4b6d      	ldr	r3, [pc, #436]	; (8001364 <convert_ADC+0x1d4>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f926 	bl	8000404 <__aeabi_i2d>
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	4b6a      	ldr	r3, [pc, #424]	; (8001368 <convert_ADC+0x1d8>)
 80011be:	f7ff f98b 	bl	80004d8 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fc5d 	bl	8000a88 <__aeabi_d2f>
 80011ce:	4602      	mov	r2, r0
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	601a      	str	r2, [r3, #0]
		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.currentC_ADC, iout2_buffer_enable);
 80011d4:	4b61      	ldr	r3, [pc, #388]	; (800135c <convert_ADC+0x1cc>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4a64      	ldr	r2, [pc, #400]	; (800136c <convert_ADC+0x1dc>)
 80011da:	7812      	ldrb	r2, [r2, #0]
 80011dc:	4964      	ldr	r1, [pc, #400]	; (8001370 <convert_ADC+0x1e0>)
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff8e 	bl	8001100 <read_ADC_DATA_BUFFER>
		*current2 = sw3516_current_ADC.currentC_ADC * 2.5;
 80011e4:	4b5f      	ldr	r3, [pc, #380]	; (8001364 <convert_ADC+0x1d4>)
 80011e6:	885b      	ldrh	r3, [r3, #2]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f90b 	bl	8000404 <__aeabi_i2d>
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <convert_ADC+0x1d8>)
 80011f4:	f7ff f970 	bl	80004d8 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fc42 	bl	8000a88 <__aeabi_d2f>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	601a      	str	r2, [r3, #0]
		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.voltagein_ADC, vin_buffer_enable);
 800120a:	4b54      	ldr	r3, [pc, #336]	; (800135c <convert_ADC+0x1cc>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4a59      	ldr	r2, [pc, #356]	; (8001374 <convert_ADC+0x1e4>)
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	4959      	ldr	r1, [pc, #356]	; (8001378 <convert_ADC+0x1e8>)
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff73 	bl	8001100 <read_ADC_DATA_BUFFER>
		*voltagein = sw3516_current_ADC.voltagein_ADC * 10;
 800121a:	4b52      	ldr	r3, [pc, #328]	; (8001364 <convert_ADC+0x1d4>)
 800121c:	889b      	ldrh	r3, [r3, #4]
 800121e:	461a      	mov	r2, r3
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fd37 	bl	8000c9c <__aeabi_i2f>
 800122e:	4602      	mov	r2, r0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	601a      	str	r2, [r3, #0]
		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.voltageout_ADC, vout_buffer_enable);
 8001234:	4b49      	ldr	r3, [pc, #292]	; (800135c <convert_ADC+0x1cc>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4a50      	ldr	r2, [pc, #320]	; (800137c <convert_ADC+0x1ec>)
 800123a:	7812      	ldrb	r2, [r2, #0]
 800123c:	4950      	ldr	r1, [pc, #320]	; (8001380 <convert_ADC+0x1f0>)
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff5e 	bl	8001100 <read_ADC_DATA_BUFFER>
		*voltageout = sw3516_current_ADC.voltageout_ADC * 6;
 8001244:	4b47      	ldr	r3, [pc, #284]	; (8001364 <convert_ADC+0x1d4>)
 8001246:	88db      	ldrh	r3, [r3, #6]
 8001248:	461a      	mov	r2, r3
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fd22 	bl	8000c9c <__aeabi_i2f>
 8001258:	4602      	mov	r2, r0
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	601a      	str	r2, [r3, #0]
		read_ADC_DATA_BUFFER(reg_value, &sw3516_current_ADC.temperature_ADC, temp_buffer_enable);
 800125e:	4b3f      	ldr	r3, [pc, #252]	; (800135c <convert_ADC+0x1cc>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	4a48      	ldr	r2, [pc, #288]	; (8001384 <convert_ADC+0x1f4>)
 8001264:	7812      	ldrb	r2, [r2, #0]
 8001266:	4948      	ldr	r1, [pc, #288]	; (8001388 <convert_ADC+0x1f8>)
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff49 	bl	8001100 <read_ADC_DATA_BUFFER>
		*temperature = sw3516_current_ADC.temperature_ADC / 100.0;
 800126e:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <convert_ADC+0x1d4>)
 8001270:	891b      	ldrh	r3, [r3, #8]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f8c6 	bl	8000404 <__aeabi_i2d>
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	4b43      	ldr	r3, [pc, #268]	; (800138c <convert_ADC+0x1fc>)
 800127e:	f7ff fa55 	bl	800072c <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fbfd 	bl	8000a88 <__aeabi_d2f>
 800128e:	4602      	mov	r2, r0
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	601a      	str	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, SW3516_address, PWR_STATUS, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, 10000);
 8001294:	f242 7310 	movw	r3, #10000	; 0x2710
 8001298:	9302      	str	r3, [sp, #8]
 800129a:	2301      	movs	r3, #1
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	4b2f      	ldr	r3, [pc, #188]	; (800135c <convert_ADC+0x1cc>)
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	2207      	movs	r2, #7
 80012a6:	2178      	movs	r1, #120	; 0x78
 80012a8:	4839      	ldr	r0, [pc, #228]	; (8001390 <convert_ADC+0x200>)
 80012aa:	f003 fa41 	bl	8004730 <HAL_I2C_Mem_Read>
		sw3516_current.status_USBC = reg_value & 0x01;
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <convert_ADC+0x1cc>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf14      	ite	ne
 80012ba:	2301      	movne	r3, #1
 80012bc:	2300      	moveq	r3, #0
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b34      	ldr	r3, [pc, #208]	; (8001394 <convert_ADC+0x204>)
 80012c2:	755a      	strb	r2, [r3, #21]
		sw3516_current.status_USBA = reg_value & 0x02;
 80012c4:	4b25      	ldr	r3, [pc, #148]	; (800135c <convert_ADC+0x1cc>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf14      	ite	ne
 80012d0:	2301      	movne	r3, #1
 80012d2:	2300      	moveq	r3, #0
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <convert_ADC+0x204>)
 80012d8:	751a      	strb	r2, [r3, #20]


		if(sw3516_current.status_USBA & sw3516_current.currentA>0 ){
 80012da:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <convert_ADC+0x204>)
 80012dc:	7d1b      	ldrb	r3, [r3, #20]
 80012de:	461c      	mov	r4, r3
 80012e0:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <convert_ADC+0x204>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4615      	mov	r5, r2
 80012e8:	f04f 0100 	mov.w	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fee5 	bl	80010bc <__aeabi_fcmpgt>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <convert_ADC+0x16c>
 80012f8:	2300      	movs	r3, #0
 80012fa:	461d      	mov	r5, r3
 80012fc:	b2eb      	uxtb	r3, r5
 80012fe:	4023      	ands	r3, r4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <convert_ADC+0x180>

			sw3516_current.time_in_secs_A++;
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <convert_ADC+0x204>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	3301      	adds	r3, #1
 800130a:	4a22      	ldr	r2, [pc, #136]	; (8001394 <convert_ADC+0x204>)
 800130c:	6193      	str	r3, [r2, #24]
 800130e:	e002      	b.n	8001316 <convert_ADC+0x186>

		}
		else{	sw3516_current.time_in_secs_A=0;}
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <convert_ADC+0x204>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]

		if(sw3516_current.status_USBC & sw3516_current.currentC>0 ){
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <convert_ADC+0x204>)
 8001318:	7d5b      	ldrb	r3, [r3, #21]
 800131a:	461c      	mov	r4, r3
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <convert_ADC+0x204>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	4615      	mov	r5, r2
 8001324:	f04f 0100 	mov.w	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fec7 	bl	80010bc <__aeabi_fcmpgt>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <convert_ADC+0x1a8>
 8001334:	2300      	movs	r3, #0
 8001336:	461d      	mov	r5, r3
 8001338:	b2eb      	uxtb	r3, r5
 800133a:	4023      	ands	r3, r4
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <convert_ADC+0x1bc>

					sw3516_current.time_in_secs_C++;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <convert_ADC+0x204>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	4a13      	ldr	r2, [pc, #76]	; (8001394 <convert_ADC+0x204>)
 8001348:	61d3      	str	r3, [r2, #28]

				}
				else{	sw3516_current.time_in_secs_C=0;}
}
 800134a:	e002      	b.n	8001352 <convert_ADC+0x1c2>
				else{	sw3516_current.time_in_secs_C=0;}
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <convert_ADC+0x204>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bdb0      	pop	{r4, r5, r7, pc}
 800135a:	bf00      	nop
 800135c:	20000200 	.word	0x20000200
 8001360:	20000002 	.word	0x20000002
 8001364:	20000204 	.word	0x20000204
 8001368:	40040000 	.word	0x40040000
 800136c:	20000003 	.word	0x20000003
 8001370:	20000206 	.word	0x20000206
 8001374:	20000000 	.word	0x20000000
 8001378:	20000208 	.word	0x20000208
 800137c:	20000001 	.word	0x20000001
 8001380:	2000020a 	.word	0x2000020a
 8001384:	20000004 	.word	0x20000004
 8001388:	2000020c 	.word	0x2000020c
 800138c:	40590000 	.word	0x40590000
 8001390:	2000160c 	.word	0x2000160c
 8001394:	20000230 	.word	0x20000230

08001398 <sw3516_read>:


void sw3516_read(){
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af02      	add	r7, sp, #8

	convert_ADC(&sw3516_current.currentA, &sw3516_current.currentC, &sw3516_current.voltagein, &sw3516_current.voltageout, &sw3516_current.temperature);
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <sw3516_read+0x1c>)
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <sw3516_read+0x20>)
 80013a4:	4a05      	ldr	r2, [pc, #20]	; (80013bc <sw3516_read+0x24>)
 80013a6:	4906      	ldr	r1, [pc, #24]	; (80013c0 <sw3516_read+0x28>)
 80013a8:	4806      	ldr	r0, [pc, #24]	; (80013c4 <sw3516_read+0x2c>)
 80013aa:	f7ff fef1 	bl	8001190 <convert_ADC>

}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000240 	.word	0x20000240
 80013b8:	2000023c 	.word	0x2000023c
 80013bc:	20000238 	.word	0x20000238
 80013c0:	20000234 	.word	0x20000234
 80013c4:	20000230 	.word	0x20000230

080013c8 <usb_charging_page_msg>:
#include "SW3516.h"
#include "buck_convertor.h"



void usb_charging_page_msg( ){
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
	UG_MESSAGE page_msg={2,2,0,0,&obj_buff_window_page_3};
 80013ce:	4ab4      	ldr	r2, [pc, #720]	; (80016a0 <usb_charging_page_msg+0x2d8>)
 80013d0:	463b      	mov	r3, r7
 80013d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d6:	e883 0003 	stmia.w	r3, {r0, r1}

if(guiST7735.active_window == &window_page_3){
 80013da:	4bb2      	ldr	r3, [pc, #712]	; (80016a4 <usb_charging_page_msg+0x2dc>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	4ab2      	ldr	r2, [pc, #712]	; (80016a8 <usb_charging_page_msg+0x2e0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	f040 817f 	bne.w	80016e4 <usb_charging_page_msg+0x31c>


	if(sw3516_current.temperature!=sw3516_previous.temperature){
 80013e6:	4bb1      	ldr	r3, [pc, #708]	; (80016ac <usb_charging_page_msg+0x2e4>)
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	4ab1      	ldr	r2, [pc, #708]	; (80016b0 <usb_charging_page_msg+0x2e8>)
 80013ec:	6912      	ldr	r2, [r2, #16]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fe3b 	bl	800106c <__aeabi_fcmpeq>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d109      	bne.n	8001410 <usb_charging_page_msg+0x48>
		page_msg.event =2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	70fb      	strb	r3, [r7, #3]
		page_msg.sub_id=2;
 8001400:	2302      	movs	r3, #2
 8001402:	70bb      	strb	r3, [r7, #2]
		 window_page_3_callback(&page_msg);
 8001404:	463b      	mov	r3, r7
 8001406:	4618      	mov	r0, r3
 8001408:	f002 f802 	bl	8003410 <window_page_3_callback>
		 UG_Update();
 800140c:	f006 f84c 	bl	80074a8 <UG_Update>



	    }
	 if(sw3516_current.status_USBC!=sw3516_previous.status_USBC){
 8001410:	4ba6      	ldr	r3, [pc, #664]	; (80016ac <usb_charging_page_msg+0x2e4>)
 8001412:	7d5a      	ldrb	r2, [r3, #21]
 8001414:	4ba6      	ldr	r3, [pc, #664]	; (80016b0 <usb_charging_page_msg+0x2e8>)
 8001416:	7d5b      	ldrb	r3, [r3, #21]
 8001418:	429a      	cmp	r2, r3
 800141a:	d009      	beq.n	8001430 <usb_charging_page_msg+0x68>
		 page_msg.event =2;
 800141c:	2302      	movs	r3, #2
 800141e:	70fb      	strb	r3, [r7, #3]
		 		page_msg.sub_id=4;
 8001420:	2304      	movs	r3, #4
 8001422:	70bb      	strb	r3, [r7, #2]
		 		 window_page_3_callback(&page_msg);
 8001424:	463b      	mov	r3, r7
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fff2 	bl	8003410 <window_page_3_callback>
		 		 UG_Update();
 800142c:	f006 f83c 	bl	80074a8 <UG_Update>

	        }
		if(sw3516_current.time_in_secs_C!=sw3516_previous.time_in_secs_C){
 8001430:	4b9e      	ldr	r3, [pc, #632]	; (80016ac <usb_charging_page_msg+0x2e4>)
 8001432:	69da      	ldr	r2, [r3, #28]
 8001434:	4b9e      	ldr	r3, [pc, #632]	; (80016b0 <usb_charging_page_msg+0x2e8>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	429a      	cmp	r2, r3
 800143a:	d009      	beq.n	8001450 <usb_charging_page_msg+0x88>
			 page_msg.event =2;
 800143c:	2302      	movs	r3, #2
 800143e:	70fb      	strb	r3, [r7, #3]
				 		page_msg.sub_id=25;
 8001440:	2319      	movs	r3, #25
 8001442:	70bb      	strb	r3, [r7, #2]
				 		 window_page_3_callback(&page_msg);
 8001444:	463b      	mov	r3, r7
 8001446:	4618      	mov	r0, r3
 8001448:	f001 ffe2 	bl	8003410 <window_page_3_callback>
				 		 UG_Update();
 800144c:	f006 f82c 	bl	80074a8 <UG_Update>

		          }


    if(sw3516_current.status_USBA!=sw3516_previous.status_USBA){
 8001450:	4b96      	ldr	r3, [pc, #600]	; (80016ac <usb_charging_page_msg+0x2e4>)
 8001452:	7d1a      	ldrb	r2, [r3, #20]
 8001454:	4b96      	ldr	r3, [pc, #600]	; (80016b0 <usb_charging_page_msg+0x2e8>)
 8001456:	7d1b      	ldrb	r3, [r3, #20]
 8001458:	429a      	cmp	r2, r3
 800145a:	d009      	beq.n	8001470 <usb_charging_page_msg+0xa8>
		 page_msg.event =2;
 800145c:	2302      	movs	r3, #2
 800145e:	70fb      	strb	r3, [r7, #3]
			 		page_msg.sub_id=5;
 8001460:	2305      	movs	r3, #5
 8001462:	70bb      	strb	r3, [r7, #2]
			 		 window_page_3_callback(&page_msg);
 8001464:	463b      	mov	r3, r7
 8001466:	4618      	mov	r0, r3
 8001468:	f001 ffd2 	bl	8003410 <window_page_3_callback>
			 		 UG_Update();
 800146c:	f006 f81c 	bl	80074a8 <UG_Update>

      }

    if(sw3516_current.time_in_secs_A!=sw3516_previous.time_in_secs_A){
 8001470:	4b8e      	ldr	r3, [pc, #568]	; (80016ac <usb_charging_page_msg+0x2e4>)
 8001472:	699a      	ldr	r2, [r3, #24]
 8001474:	4b8e      	ldr	r3, [pc, #568]	; (80016b0 <usb_charging_page_msg+0x2e8>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	429a      	cmp	r2, r3
 800147a:	d009      	beq.n	8001490 <usb_charging_page_msg+0xc8>
    		 page_msg.event =2;
 800147c:	2302      	movs	r3, #2
 800147e:	70fb      	strb	r3, [r7, #3]
    			 		page_msg.sub_id=26;
 8001480:	231a      	movs	r3, #26
 8001482:	70bb      	strb	r3, [r7, #2]
    			 		 window_page_3_callback(&page_msg);
 8001484:	463b      	mov	r3, r7
 8001486:	4618      	mov	r0, r3
 8001488:	f001 ffc2 	bl	8003410 <window_page_3_callback>
    			 		 UG_Update();
 800148c:	f006 f80c 	bl	80074a8 <UG_Update>

    	          }

    if(sw3516_current.voltageout!=sw3516_previous.voltageout){
 8001490:	4b86      	ldr	r3, [pc, #536]	; (80016ac <usb_charging_page_msg+0x2e4>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4a86      	ldr	r2, [pc, #536]	; (80016b0 <usb_charging_page_msg+0x2e8>)
 8001496:	68d2      	ldr	r2, [r2, #12]
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fde6 	bl	800106c <__aeabi_fcmpeq>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d11b      	bne.n	80014de <usb_charging_page_msg+0x116>
    	if(sw3516_current.status_USBC){
 80014a6:	4b81      	ldr	r3, [pc, #516]	; (80016ac <usb_charging_page_msg+0x2e4>)
 80014a8:	7d5b      	ldrb	r3, [r3, #21]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d009      	beq.n	80014c2 <usb_charging_page_msg+0xfa>
		 page_msg.event =2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	70fb      	strb	r3, [r7, #3]
		page_msg.sub_id=6;
 80014b2:	2306      	movs	r3, #6
 80014b4:	70bb      	strb	r3, [r7, #2]
		window_page_3_callback(&page_msg);
 80014b6:	463b      	mov	r3, r7
 80014b8:	4618      	mov	r0, r3
 80014ba:	f001 ffa9 	bl	8003410 <window_page_3_callback>

		UG_Update();
 80014be:	f005 fff3 	bl	80074a8 <UG_Update>

    	}
    	if(sw3516_current.status_USBA){
 80014c2:	4b7a      	ldr	r3, [pc, #488]	; (80016ac <usb_charging_page_msg+0x2e4>)
 80014c4:	7d1b      	ldrb	r3, [r3, #20]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d009      	beq.n	80014de <usb_charging_page_msg+0x116>
		page_msg.event =2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	70fb      	strb	r3, [r7, #3]
		page_msg.sub_id=8;
 80014ce:	2308      	movs	r3, #8
 80014d0:	70bb      	strb	r3, [r7, #2]
		window_page_3_callback(&page_msg);
 80014d2:	463b      	mov	r3, r7
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 ff9b 	bl	8003410 <window_page_3_callback>

		UG_Update();
 80014da:	f005 ffe5 	bl	80074a8 <UG_Update>

             }



    if(sw3516_current.currentC!=sw3516_previous.currentC & sw3516_current.status_USBC){
 80014de:	4b73      	ldr	r3, [pc, #460]	; (80016ac <usb_charging_page_msg+0x2e4>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4a73      	ldr	r2, [pc, #460]	; (80016b0 <usb_charging_page_msg+0x2e8>)
 80014e4:	6852      	ldr	r2, [r2, #4]
 80014e6:	2101      	movs	r1, #1
 80014e8:	460c      	mov	r4, r1
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fdbd 	bl	800106c <__aeabi_fcmpeq>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <usb_charging_page_msg+0x134>
 80014f8:	2300      	movs	r3, #0
 80014fa:	461c      	mov	r4, r3
 80014fc:	b2e3      	uxtb	r3, r4
 80014fe:	461a      	mov	r2, r3
 8001500:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <usb_charging_page_msg+0x2e4>)
 8001502:	7d5b      	ldrb	r3, [r3, #21]
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <usb_charging_page_msg+0x156>

    	 page_msg.event =2;
 800150a:	2302      	movs	r3, #2
 800150c:	70fb      	strb	r3, [r7, #3]
    	page_msg.sub_id=10;
 800150e:	230a      	movs	r3, #10
 8001510:	70bb      	strb	r3, [r7, #2]
    	window_page_3_callback(&page_msg);
 8001512:	463b      	mov	r3, r7
 8001514:	4618      	mov	r0, r3
 8001516:	f001 ff7b 	bl	8003410 <window_page_3_callback>
    	UG_Update();
 800151a:	f005 ffc5 	bl	80074a8 <UG_Update>

    }
    if(sw3516_current.currentA!=sw3516_previous.currentA){
 800151e:	4b63      	ldr	r3, [pc, #396]	; (80016ac <usb_charging_page_msg+0x2e4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a63      	ldr	r2, [pc, #396]	; (80016b0 <usb_charging_page_msg+0x2e8>)
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fd9f 	bl	800106c <__aeabi_fcmpeq>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d109      	bne.n	8001548 <usb_charging_page_msg+0x180>
   	 page_msg.event =2;
 8001534:	2302      	movs	r3, #2
 8001536:	70fb      	strb	r3, [r7, #3]
   	page_msg.sub_id=12;
 8001538:	230c      	movs	r3, #12
 800153a:	70bb      	strb	r3, [r7, #2]
   	window_page_3_callback(&page_msg);
 800153c:	463b      	mov	r3, r7
 800153e:	4618      	mov	r0, r3
 8001540:	f001 ff66 	bl	8003410 <window_page_3_callback>
  	UG_Update();
 8001544:	f005 ffb0 	bl	80074a8 <UG_Update>
        }

    if((sw3516_current.voltageout!=sw3516_previous.voltageout | sw3516_current.currentC!=sw3516_previous.currentC) & sw3516_current.status_USBC){
 8001548:	4b58      	ldr	r3, [pc, #352]	; (80016ac <usb_charging_page_msg+0x2e4>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	4a58      	ldr	r2, [pc, #352]	; (80016b0 <usb_charging_page_msg+0x2e8>)
 800154e:	68d2      	ldr	r2, [r2, #12]
 8001550:	2101      	movs	r1, #1
 8001552:	460c      	mov	r4, r1
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fd88 	bl	800106c <__aeabi_fcmpeq>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <usb_charging_page_msg+0x19e>
 8001562:	2300      	movs	r3, #0
 8001564:	461c      	mov	r4, r3
 8001566:	b2e4      	uxtb	r4, r4
 8001568:	4b50      	ldr	r3, [pc, #320]	; (80016ac <usb_charging_page_msg+0x2e4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4a50      	ldr	r2, [pc, #320]	; (80016b0 <usb_charging_page_msg+0x2e8>)
 800156e:	6852      	ldr	r2, [r2, #4]
 8001570:	2101      	movs	r1, #1
 8001572:	460d      	mov	r5, r1
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fd78 	bl	800106c <__aeabi_fcmpeq>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <usb_charging_page_msg+0x1be>
 8001582:	2300      	movs	r3, #0
 8001584:	461d      	mov	r5, r3
 8001586:	b2eb      	uxtb	r3, r5
 8001588:	4323      	orrs	r3, r4
 800158a:	b2db      	uxtb	r3, r3
 800158c:	461a      	mov	r2, r3
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <usb_charging_page_msg+0x2e4>)
 8001590:	7d5b      	ldrb	r3, [r3, #21]
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d009      	beq.n	80015ac <usb_charging_page_msg+0x1e4>

		page_msg.event =2;
 8001598:	2302      	movs	r3, #2
 800159a:	70fb      	strb	r3, [r7, #3]
		page_msg.sub_id=14;
 800159c:	230e      	movs	r3, #14
 800159e:	70bb      	strb	r3, [r7, #2]
		window_page_3_callback(&page_msg);
 80015a0:	463b      	mov	r3, r7
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 ff34 	bl	8003410 <window_page_3_callback>
		UG_Update();
 80015a8:	f005 ff7e 	bl	80074a8 <UG_Update>
    }
    if((sw3516_current.voltageout!=sw3516_previous.voltageout | sw3516_current.currentA!=sw3516_previous.currentA) & sw3516_current.status_USBA){
 80015ac:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <usb_charging_page_msg+0x2e4>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4a3f      	ldr	r2, [pc, #252]	; (80016b0 <usb_charging_page_msg+0x2e8>)
 80015b2:	68d2      	ldr	r2, [r2, #12]
 80015b4:	2101      	movs	r1, #1
 80015b6:	460c      	mov	r4, r1
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fd56 	bl	800106c <__aeabi_fcmpeq>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <usb_charging_page_msg+0x202>
 80015c6:	2300      	movs	r3, #0
 80015c8:	461c      	mov	r4, r3
 80015ca:	b2e4      	uxtb	r4, r4
 80015cc:	4b37      	ldr	r3, [pc, #220]	; (80016ac <usb_charging_page_msg+0x2e4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a37      	ldr	r2, [pc, #220]	; (80016b0 <usb_charging_page_msg+0x2e8>)
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	2101      	movs	r1, #1
 80015d6:	460d      	mov	r5, r1
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fd46 	bl	800106c <__aeabi_fcmpeq>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <usb_charging_page_msg+0x222>
 80015e6:	2300      	movs	r3, #0
 80015e8:	461d      	mov	r5, r3
 80015ea:	b2eb      	uxtb	r3, r5
 80015ec:	4323      	orrs	r3, r4
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <usb_charging_page_msg+0x2e4>)
 80015f4:	7d1b      	ldrb	r3, [r3, #20]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d009      	beq.n	8001610 <usb_charging_page_msg+0x248>

		page_msg.event =2;
 80015fc:	2302      	movs	r3, #2
 80015fe:	70fb      	strb	r3, [r7, #3]
		page_msg.sub_id=16;
 8001600:	2310      	movs	r3, #16
 8001602:	70bb      	strb	r3, [r7, #2]
		window_page_3_callback(&page_msg);
 8001604:	463b      	mov	r3, r7
 8001606:	4618      	mov	r0, r3
 8001608:	f001 ff02 	bl	8003410 <window_page_3_callback>
		UG_Update();
 800160c:	f005 ff4c 	bl	80074a8 <UG_Update>
      }



    ////////////
    if(buck_convertor_current.status_ok!=buck_convertor_pervious.status_ok){
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <usb_charging_page_msg+0x2ec>)
 8001612:	7e9a      	ldrb	r2, [r3, #26]
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <usb_charging_page_msg+0x2f0>)
 8001616:	7e9b      	ldrb	r3, [r3, #26]
 8001618:	429a      	cmp	r2, r3
 800161a:	d009      	beq.n	8001630 <usb_charging_page_msg+0x268>
      	 page_msg.event =2;
 800161c:	2302      	movs	r3, #2
 800161e:	70fb      	strb	r3, [r7, #3]
      	page_msg.sub_id=18;
 8001620:	2312      	movs	r3, #18
 8001622:	70bb      	strb	r3, [r7, #2]
      	window_page_3_callback(&page_msg);
 8001624:	463b      	mov	r3, r7
 8001626:	4618      	mov	r0, r3
 8001628:	f001 fef2 	bl	8003410 <window_page_3_callback>
      	 UG_Update();
 800162c:	f005 ff3c 	bl	80074a8 <UG_Update>

            }
    if(buck_convertor_current.status_cv!=buck_convertor_pervious.status_cv){
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <usb_charging_page_msg+0x2ec>)
 8001632:	7e1a      	ldrb	r2, [r3, #24]
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <usb_charging_page_msg+0x2f0>)
 8001636:	7e1b      	ldrb	r3, [r3, #24]
 8001638:	429a      	cmp	r2, r3
 800163a:	d009      	beq.n	8001650 <usb_charging_page_msg+0x288>
      	 page_msg.event =2;
 800163c:	2302      	movs	r3, #2
 800163e:	70fb      	strb	r3, [r7, #3]
      	page_msg.sub_id=19;
 8001640:	2313      	movs	r3, #19
 8001642:	70bb      	strb	r3, [r7, #2]
      	window_page_3_callback(&page_msg);
 8001644:	463b      	mov	r3, r7
 8001646:	4618      	mov	r0, r3
 8001648:	f001 fee2 	bl	8003410 <window_page_3_callback>
      	 UG_Update();
 800164c:	f005 ff2c 	bl	80074a8 <UG_Update>

              }
    if(buck_convertor_current.status_cc!=buck_convertor_pervious.status_cc){
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <usb_charging_page_msg+0x2ec>)
 8001652:	7e5a      	ldrb	r2, [r3, #25]
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <usb_charging_page_msg+0x2f0>)
 8001656:	7e5b      	ldrb	r3, [r3, #25]
 8001658:	429a      	cmp	r2, r3
 800165a:	d009      	beq.n	8001670 <usb_charging_page_msg+0x2a8>
      	 page_msg.event =2;
 800165c:	2302      	movs	r3, #2
 800165e:	70fb      	strb	r3, [r7, #3]
      	page_msg.sub_id=20;
 8001660:	2314      	movs	r3, #20
 8001662:	70bb      	strb	r3, [r7, #2]
      	window_page_3_callback(&page_msg);
 8001664:	463b      	mov	r3, r7
 8001666:	4618      	mov	r0, r3
 8001668:	f001 fed2 	bl	8003410 <window_page_3_callback>
      	 UG_Update();
 800166c:	f005 ff1c 	bl	80074a8 <UG_Update>

                  }
    if(buck_convertor_current.voltageout_output!=buck_convertor_pervious.voltageout_output){
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <usb_charging_page_msg+0x2ec>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <usb_charging_page_msg+0x2f0>)
 8001676:	68d2      	ldr	r2, [r2, #12]
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fcf6 	bl	800106c <__aeabi_fcmpeq>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <usb_charging_page_msg+0x2d2>
      	 page_msg.event =2;
 8001686:	2302      	movs	r3, #2
 8001688:	70fb      	strb	r3, [r7, #3]
      	page_msg.sub_id=21;
 800168a:	2315      	movs	r3, #21
 800168c:	70bb      	strb	r3, [r7, #2]
      	window_page_3_callback(&page_msg);
 800168e:	463b      	mov	r3, r7
 8001690:	4618      	mov	r0, r3
 8001692:	f001 febd 	bl	8003410 <window_page_3_callback>
      	 UG_Update();
 8001696:	f005 ff07 	bl	80074a8 <UG_Update>

                        }
    if(buck_convertor_current.current_output!=buck_convertor_pervious.current_output){
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <usb_charging_page_msg+0x2ec>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	e00d      	b.n	80016bc <usb_charging_page_msg+0x2f4>
 80016a0:	0800ba20 	.word	0x0800ba20
 80016a4:	200016cc 	.word	0x200016cc
 80016a8:	2000107c 	.word	0x2000107c
 80016ac:	20000230 	.word	0x20000230
 80016b0:	20000210 	.word	0x20000210
 80016b4:	20000250 	.word	0x20000250
 80016b8:	2000026c 	.word	0x2000026c
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <usb_charging_page_msg+0x324>)
 80016be:	6892      	ldr	r2, [r2, #8]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fcd2 	bl	800106c <__aeabi_fcmpeq>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d000      	beq.n	80016d0 <usb_charging_page_msg+0x308>


}


}
 80016ce:	e009      	b.n	80016e4 <usb_charging_page_msg+0x31c>
      	 page_msg.event =2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	70fb      	strb	r3, [r7, #3]
      	page_msg.sub_id=23;
 80016d4:	2317      	movs	r3, #23
 80016d6:	70bb      	strb	r3, [r7, #2]
      	window_page_3_callback(&page_msg);
 80016d8:	463b      	mov	r3, r7
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 fe98 	bl	8003410 <window_page_3_callback>
      	 UG_Update();
 80016e0:	f005 fee2 	bl	80074a8 <UG_Update>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bdb0      	pop	{r4, r5, r7, pc}
 80016ec:	2000026c 	.word	0x2000026c

080016f0 <Page_3>:
 		 	    UG_DrawLine(0, 167, 104, 167, C_WHITE);


 }

 void Page_3(){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af02      	add	r7, sp, #8

	 UG_WindowShow(&window_page_3);
 80016f6:	4812      	ldr	r0, [pc, #72]	; (8001740 <Page_3+0x50>)
 80016f8:	f006 f862 	bl	80077c0 <UG_WindowShow>
	 		 		UG_Update();
 80016fc:	f005 fed4 	bl	80074a8 <UG_Update>
	 		     //  UG_DrawLine(215, 0, 215, 239, C_WHITE);
	 		 	 	   	UG_DrawLine(0, 32, 319, 32, C_WHITE);
 8001700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2320      	movs	r3, #32
 8001708:	f240 123f 	movw	r2, #319	; 0x13f
 800170c:	2120      	movs	r1, #32
 800170e:	2000      	movs	r0, #0
 8001710:	f004 fed6 	bl	80064c0 <UG_DrawLine>
	 		 	 	 	UG_DrawLine(160, 32, 160, 196, C_WHITE);
 8001714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	23c4      	movs	r3, #196	; 0xc4
 800171c:	22a0      	movs	r2, #160	; 0xa0
 800171e:	2120      	movs	r1, #32
 8001720:	20a0      	movs	r0, #160	; 0xa0
 8001722:	f004 fecd 	bl	80064c0 <UG_DrawLine>
	 		 	 	   	UG_DrawLine(0, 196, 319, 196, C_WHITE);
 8001726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	23c4      	movs	r3, #196	; 0xc4
 800172e:	f240 123f 	movw	r2, #319	; 0x13f
 8001732:	21c4      	movs	r1, #196	; 0xc4
 8001734:	2000      	movs	r0, #0
 8001736:	f004 fec3 	bl	80064c0 <UG_DrawLine>

 }
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000107c 	.word	0x2000107c

08001744 <begin>:
		 	    UG_DrawLine(105, 79, 221, 79, C_AQUA);
}



void begin(void){
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af04      	add	r7, sp, #16
	//Page 0
				UG_WindowCreate(&window_page_0, obj_buff_window_page_0, MAX_OBJECTS_WIN_GRAPH, window_page_0_callback);
 800174a:	4bc1      	ldr	r3, [pc, #772]	; (8001a50 <begin+0x30c>)
 800174c:	2214      	movs	r2, #20
 800174e:	49c1      	ldr	r1, [pc, #772]	; (8001a54 <begin+0x310>)
 8001750:	48c1      	ldr	r0, [pc, #772]	; (8001a58 <begin+0x314>)
 8001752:	f005 ffa5 	bl	80076a0 <UG_WindowCreate>
		 	    UG_WindowSetStyle(&window_page_0, WND_STYLE_2D | WND_STYLE_HIDE_TITLE);
 8001756:	2100      	movs	r1, #0
 8001758:	48bf      	ldr	r0, [pc, #764]	; (8001a58 <begin+0x314>)
 800175a:	f006 f93a 	bl	80079d2 <UG_WindowSetStyle>
		 	    UG_WindowSetBackColor(&window_page_0, C_BLACK);
 800175e:	2100      	movs	r1, #0
 8001760:	48bd      	ldr	r0, [pc, #756]	; (8001a58 <begin+0x314>)
 8001762:	f006 f851 	bl	8007808 <UG_WindowSetBackColor>

		 	    /////////////ok //
		 	    UG_TextboxCreate(&window_page_0, &OK_graphic, TXB_ID_0, 0, 5, 70, 35);
 8001766:	2323      	movs	r3, #35	; 0x23
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	2346      	movs	r3, #70	; 0x46
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	2305      	movs	r3, #5
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2300      	movs	r3, #0
 8001774:	2200      	movs	r2, #0
 8001776:	49b9      	ldr	r1, [pc, #740]	; (8001a5c <begin+0x318>)
 8001778:	48b7      	ldr	r0, [pc, #732]	; (8001a58 <begin+0x314>)
 800177a:	f006 fb43 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_0, &FONT_12X20);
 800177e:	4ab8      	ldr	r2, [pc, #736]	; (8001a60 <begin+0x31c>)
 8001780:	2100      	movs	r1, #0
 8001782:	48b5      	ldr	r0, [pc, #724]	; (8001a58 <begin+0x314>)
 8001784:	f006 fc66 	bl	8008054 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_0, ALIGN_CENTER);
 8001788:	2212      	movs	r2, #18
 800178a:	2100      	movs	r1, #0
 800178c:	48b2      	ldr	r0, [pc, #712]	; (8001a58 <begin+0x314>)
 800178e:	f006 fc8b 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_0, C_GREEN);
 8001792:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001796:	2100      	movs	r1, #0
 8001798:	48af      	ldr	r0, [pc, #700]	; (8001a58 <begin+0x314>)
 800179a:	f006 fc06 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_0, C_BLACK);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	48ad      	ldr	r0, [pc, #692]	; (8001a58 <begin+0x314>)
 80017a4:	f006 fbd6 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_0, "OK");
 80017a8:	4aae      	ldr	r2, [pc, #696]	; (8001a64 <begin+0x320>)
 80017aa:	2100      	movs	r1, #0
 80017ac:	48aa      	ldr	r0, [pc, #680]	; (8001a58 <begin+0x314>)
 80017ae:	f006 fc27 	bl	8008000 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_0);
 80017b2:	2100      	movs	r1, #0
 80017b4:	48a8      	ldr	r0, [pc, #672]	; (8001a58 <begin+0x314>)
 80017b6:	f006 fba5 	bl	8007f04 <UG_TextboxShow>

		 	    ////////////CV//
		 	    UG_TextboxCreate(&window_page_0, &CV_graphic, TXB_ID_1, 75, 5, 105, 35);
 80017ba:	2323      	movs	r3, #35	; 0x23
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	2369      	movs	r3, #105	; 0x69
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	2305      	movs	r3, #5
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	234b      	movs	r3, #75	; 0x4b
 80017c8:	2201      	movs	r2, #1
 80017ca:	49a7      	ldr	r1, [pc, #668]	; (8001a68 <begin+0x324>)
 80017cc:	48a2      	ldr	r0, [pc, #648]	; (8001a58 <begin+0x314>)
 80017ce:	f006 fb19 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_1, &FONT_12X20);
 80017d2:	4aa3      	ldr	r2, [pc, #652]	; (8001a60 <begin+0x31c>)
 80017d4:	2101      	movs	r1, #1
 80017d6:	48a0      	ldr	r0, [pc, #640]	; (8001a58 <begin+0x314>)
 80017d8:	f006 fc3c 	bl	8008054 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_1, ALIGN_CENTER);
 80017dc:	2212      	movs	r2, #18
 80017de:	2101      	movs	r1, #1
 80017e0:	489d      	ldr	r0, [pc, #628]	; (8001a58 <begin+0x314>)
 80017e2:	f006 fc61 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_1, C_YELLOW);
 80017e6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80017ea:	2101      	movs	r1, #1
 80017ec:	489a      	ldr	r0, [pc, #616]	; (8001a58 <begin+0x314>)
 80017ee:	f006 fbdc 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_1, C_BLACK);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2101      	movs	r1, #1
 80017f6:	4898      	ldr	r0, [pc, #608]	; (8001a58 <begin+0x314>)
 80017f8:	f006 fbac 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_1, "CV");
 80017fc:	4a9b      	ldr	r2, [pc, #620]	; (8001a6c <begin+0x328>)
 80017fe:	2101      	movs	r1, #1
 8001800:	4895      	ldr	r0, [pc, #596]	; (8001a58 <begin+0x314>)
 8001802:	f006 fbfd 	bl	8008000 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_1);
 8001806:	2101      	movs	r1, #1
 8001808:	4893      	ldr	r0, [pc, #588]	; (8001a58 <begin+0x314>)
 800180a:	f006 fb7b 	bl	8007f04 <UG_TextboxShow>
		 	    ////////////CC//
		 	    UG_TextboxCreate(&window_page_0, &CC_graphic, TXB_ID_2, 110, 5, 140, 35);
 800180e:	2323      	movs	r3, #35	; 0x23
 8001810:	9302      	str	r3, [sp, #8]
 8001812:	238c      	movs	r3, #140	; 0x8c
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	2305      	movs	r3, #5
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	236e      	movs	r3, #110	; 0x6e
 800181c:	2202      	movs	r2, #2
 800181e:	4994      	ldr	r1, [pc, #592]	; (8001a70 <begin+0x32c>)
 8001820:	488d      	ldr	r0, [pc, #564]	; (8001a58 <begin+0x314>)
 8001822:	f006 faef 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_2, &FONT_12X20);
 8001826:	4a8e      	ldr	r2, [pc, #568]	; (8001a60 <begin+0x31c>)
 8001828:	2102      	movs	r1, #2
 800182a:	488b      	ldr	r0, [pc, #556]	; (8001a58 <begin+0x314>)
 800182c:	f006 fc12 	bl	8008054 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_2, ALIGN_CENTER);
 8001830:	2212      	movs	r2, #18
 8001832:	2102      	movs	r1, #2
 8001834:	4888      	ldr	r0, [pc, #544]	; (8001a58 <begin+0x314>)
 8001836:	f006 fc37 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_2, 	C_DIM_GRAY);
 800183a:	f246 322c 	movw	r2, #25388	; 0x632c
 800183e:	2102      	movs	r1, #2
 8001840:	4885      	ldr	r0, [pc, #532]	; (8001a58 <begin+0x314>)
 8001842:	f006 fbb2 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_2, C_BLACK);
 8001846:	2200      	movs	r2, #0
 8001848:	2102      	movs	r1, #2
 800184a:	4883      	ldr	r0, [pc, #524]	; (8001a58 <begin+0x314>)
 800184c:	f006 fb82 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_2, "CC");
 8001850:	4a88      	ldr	r2, [pc, #544]	; (8001a74 <begin+0x330>)
 8001852:	2102      	movs	r1, #2
 8001854:	4880      	ldr	r0, [pc, #512]	; (8001a58 <begin+0x314>)
 8001856:	f006 fbd3 	bl	8008000 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_2);
 800185a:	2102      	movs	r1, #2
 800185c:	487e      	ldr	r0, [pc, #504]	; (8001a58 <begin+0x314>)
 800185e:	f006 fb51 	bl	8007f04 <UG_TextboxShow>



		 	    UG_ImageCreate(&window_page_0, &image_1, IMG_ID_1,145, 8, 160,32);
 8001862:	2320      	movs	r3, #32
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	23a0      	movs	r3, #160	; 0xa0
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	2308      	movs	r3, #8
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2391      	movs	r3, #145	; 0x91
 8001870:	2201      	movs	r2, #1
 8001872:	4981      	ldr	r1, [pc, #516]	; (8001a78 <begin+0x334>)
 8001874:	4878      	ldr	r0, [pc, #480]	; (8001a58 <begin+0x314>)
 8001876:	f006 fd15 	bl	80082a4 <UG_ImageCreate>
		 	   	UG_ImageSetBMP(&window_page_0, IMG_ID_1, &logo_FNIRSI);
 800187a:	4a80      	ldr	r2, [pc, #512]	; (8001a7c <begin+0x338>)
 800187c:	2101      	movs	r1, #1
 800187e:	4876      	ldr	r0, [pc, #472]	; (8001a58 <begin+0x314>)
 8001880:	f006 fd6e 	bl	8008360 <UG_ImageSetBMP>

		 	    UG_TextboxCreate(&window_page_0, &current_V_graphic_page_1, TXB_ID_3, 1, 40, 73,60);
 8001884:	233c      	movs	r3, #60	; 0x3c
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2349      	movs	r3, #73	; 0x49
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	2328      	movs	r3, #40	; 0x28
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2301      	movs	r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	497a      	ldr	r1, [pc, #488]	; (8001a80 <begin+0x33c>)
 8001896:	4870      	ldr	r0, [pc, #448]	; (8001a58 <begin+0x314>)
 8001898:	f006 fab4 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_3, &FONT_12X20);
 800189c:	4a70      	ldr	r2, [pc, #448]	; (8001a60 <begin+0x31c>)
 800189e:	2103      	movs	r1, #3
 80018a0:	486d      	ldr	r0, [pc, #436]	; (8001a58 <begin+0x314>)
 80018a2:	f006 fbd7 	bl	8008054 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_3, ALIGN_CENTER);
 80018a6:	2212      	movs	r2, #18
 80018a8:	2103      	movs	r1, #3
 80018aa:	486b      	ldr	r0, [pc, #428]	; (8001a58 <begin+0x314>)
 80018ac:	f006 fbfc 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_3, 	C_YELLOW);
 80018b0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80018b4:	2103      	movs	r1, #3
 80018b6:	4868      	ldr	r0, [pc, #416]	; (8001a58 <begin+0x314>)
 80018b8:	f006 fb77 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_3, C_BLACK);
 80018bc:	2200      	movs	r2, #0
 80018be:	2103      	movs	r1, #3
 80018c0:	4865      	ldr	r0, [pc, #404]	; (8001a58 <begin+0x314>)
 80018c2:	f006 fb47 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_3, "12.10V");
 80018c6:	4a6f      	ldr	r2, [pc, #444]	; (8001a84 <begin+0x340>)
 80018c8:	2103      	movs	r1, #3
 80018ca:	4863      	ldr	r0, [pc, #396]	; (8001a58 <begin+0x314>)
 80018cc:	f006 fb98 	bl	8008000 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_3);
 80018d0:	2103      	movs	r1, #3
 80018d2:	4861      	ldr	r0, [pc, #388]	; (8001a58 <begin+0x314>)
 80018d4:	f006 fb16 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_0, &current_I_graphic_page_1, TXB_ID_4, 1, 63, 73,83);
 80018d8:	2353      	movs	r3, #83	; 0x53
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	2349      	movs	r3, #73	; 0x49
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	233f      	movs	r3, #63	; 0x3f
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2301      	movs	r3, #1
 80018e6:	2204      	movs	r2, #4
 80018e8:	4967      	ldr	r1, [pc, #412]	; (8001a88 <begin+0x344>)
 80018ea:	485b      	ldr	r0, [pc, #364]	; (8001a58 <begin+0x314>)
 80018ec:	f006 fa8a 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_4, &FONT_12X20);
 80018f0:	4a5b      	ldr	r2, [pc, #364]	; (8001a60 <begin+0x31c>)
 80018f2:	2104      	movs	r1, #4
 80018f4:	4858      	ldr	r0, [pc, #352]	; (8001a58 <begin+0x314>)
 80018f6:	f006 fbad 	bl	8008054 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_4, ALIGN_CENTER);
 80018fa:	2212      	movs	r2, #18
 80018fc:	2104      	movs	r1, #4
 80018fe:	4856      	ldr	r0, [pc, #344]	; (8001a58 <begin+0x314>)
 8001900:	f006 fbd2 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_4, 	C_GREEN);
 8001904:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001908:	2104      	movs	r1, #4
 800190a:	4853      	ldr	r0, [pc, #332]	; (8001a58 <begin+0x314>)
 800190c:	f006 fb4d 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_4, C_BLACK);
 8001910:	2200      	movs	r2, #0
 8001912:	2104      	movs	r1, #4
 8001914:	4850      	ldr	r0, [pc, #320]	; (8001a58 <begin+0x314>)
 8001916:	f006 fb1d 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_4, "0.000A");
 800191a:	4a5c      	ldr	r2, [pc, #368]	; (8001a8c <begin+0x348>)
 800191c:	2104      	movs	r1, #4
 800191e:	484e      	ldr	r0, [pc, #312]	; (8001a58 <begin+0x314>)
 8001920:	f006 fb6e 	bl	8008000 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_4);
 8001924:	2104      	movs	r1, #4
 8001926:	484c      	ldr	r0, [pc, #304]	; (8001a58 <begin+0x314>)
 8001928:	f006 faec 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_0, &set_V_graphic_page_1, TXB_ID_5, 0, 218, 76, 238);
 800192c:	23ee      	movs	r3, #238	; 0xee
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	234c      	movs	r3, #76	; 0x4c
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	23da      	movs	r3, #218	; 0xda
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2300      	movs	r3, #0
 800193a:	2205      	movs	r2, #5
 800193c:	4954      	ldr	r1, [pc, #336]	; (8001a90 <begin+0x34c>)
 800193e:	4846      	ldr	r0, [pc, #280]	; (8001a58 <begin+0x314>)
 8001940:	f006 fa60 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_5, &FONT_12X20);
 8001944:	4a46      	ldr	r2, [pc, #280]	; (8001a60 <begin+0x31c>)
 8001946:	2105      	movs	r1, #5
 8001948:	4843      	ldr	r0, [pc, #268]	; (8001a58 <begin+0x314>)
 800194a:	f006 fb83 	bl	8008054 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_5, ALIGN_CENTER);
 800194e:	2212      	movs	r2, #18
 8001950:	2105      	movs	r1, #5
 8001952:	4841      	ldr	r0, [pc, #260]	; (8001a58 <begin+0x314>)
 8001954:	f006 fba8 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_5, 	C_BLACK);
 8001958:	2200      	movs	r2, #0
 800195a:	2105      	movs	r1, #5
 800195c:	483e      	ldr	r0, [pc, #248]	; (8001a58 <begin+0x314>)
 800195e:	f006 fb24 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_5, C_WHITE);
 8001962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001966:	2105      	movs	r1, #5
 8001968:	483b      	ldr	r0, [pc, #236]	; (8001a58 <begin+0x314>)
 800196a:	f006 faf3 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_5, "SET V:");
 800196e:	4a49      	ldr	r2, [pc, #292]	; (8001a94 <begin+0x350>)
 8001970:	2105      	movs	r1, #5
 8001972:	4839      	ldr	r0, [pc, #228]	; (8001a58 <begin+0x314>)
 8001974:	f006 fb44 	bl	8008000 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_5);
 8001978:	2105      	movs	r1, #5
 800197a:	4837      	ldr	r0, [pc, #220]	; (8001a58 <begin+0x314>)
 800197c:	f006 fac2 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_0, &set_V_graphic_value_page_1, TXB_ID_6, 80, 218, 156, 238);
 8001980:	23ee      	movs	r3, #238	; 0xee
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	239c      	movs	r3, #156	; 0x9c
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	23da      	movs	r3, #218	; 0xda
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2350      	movs	r3, #80	; 0x50
 800198e:	2206      	movs	r2, #6
 8001990:	4941      	ldr	r1, [pc, #260]	; (8001a98 <begin+0x354>)
 8001992:	4831      	ldr	r0, [pc, #196]	; (8001a58 <begin+0x314>)
 8001994:	f006 fa36 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_6, &FONT_12X20);
 8001998:	4a31      	ldr	r2, [pc, #196]	; (8001a60 <begin+0x31c>)
 800199a:	2106      	movs	r1, #6
 800199c:	482e      	ldr	r0, [pc, #184]	; (8001a58 <begin+0x314>)
 800199e:	f006 fb59 	bl	8008054 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_6, ALIGN_CENTER);
 80019a2:	2212      	movs	r2, #18
 80019a4:	2106      	movs	r1, #6
 80019a6:	482c      	ldr	r0, [pc, #176]	; (8001a58 <begin+0x314>)
 80019a8:	f006 fb7e 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_6, 	C_YELLOW);
 80019ac:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80019b0:	2106      	movs	r1, #6
 80019b2:	4829      	ldr	r0, [pc, #164]	; (8001a58 <begin+0x314>)
 80019b4:	f006 faf9 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_6, C_BLACK);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2106      	movs	r1, #6
 80019bc:	4826      	ldr	r0, [pc, #152]	; (8001a58 <begin+0x314>)
 80019be:	f006 fac9 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_6, "00.00V");
 80019c2:	4a36      	ldr	r2, [pc, #216]	; (8001a9c <begin+0x358>)
 80019c4:	2106      	movs	r1, #6
 80019c6:	4824      	ldr	r0, [pc, #144]	; (8001a58 <begin+0x314>)
 80019c8:	f006 fb1a 	bl	8008000 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_6);
 80019cc:	2106      	movs	r1, #6
 80019ce:	4822      	ldr	r0, [pc, #136]	; (8001a58 <begin+0x314>)
 80019d0:	f006 fa98 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_0, &set_I_graphic_page_1, TXB_ID_7, 162, 218, 238, 238);
 80019d4:	23ee      	movs	r3, #238	; 0xee
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	23ee      	movs	r3, #238	; 0xee
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	23da      	movs	r3, #218	; 0xda
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	23a2      	movs	r3, #162	; 0xa2
 80019e2:	2207      	movs	r2, #7
 80019e4:	492e      	ldr	r1, [pc, #184]	; (8001aa0 <begin+0x35c>)
 80019e6:	481c      	ldr	r0, [pc, #112]	; (8001a58 <begin+0x314>)
 80019e8:	f006 fa0c 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_7, &FONT_12X20);
 80019ec:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <begin+0x31c>)
 80019ee:	2107      	movs	r1, #7
 80019f0:	4819      	ldr	r0, [pc, #100]	; (8001a58 <begin+0x314>)
 80019f2:	f006 fb2f 	bl	8008054 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_7, ALIGN_CENTER);
 80019f6:	2212      	movs	r2, #18
 80019f8:	2107      	movs	r1, #7
 80019fa:	4817      	ldr	r0, [pc, #92]	; (8001a58 <begin+0x314>)
 80019fc:	f006 fb54 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_7, 	C_BLACK);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2107      	movs	r1, #7
 8001a04:	4814      	ldr	r0, [pc, #80]	; (8001a58 <begin+0x314>)
 8001a06:	f006 fad0 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_7, C_WHITE);
 8001a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a0e:	2107      	movs	r1, #7
 8001a10:	4811      	ldr	r0, [pc, #68]	; (8001a58 <begin+0x314>)
 8001a12:	f006 fa9f 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_7, "SET I:");
 8001a16:	4a23      	ldr	r2, [pc, #140]	; (8001aa4 <begin+0x360>)
 8001a18:	2107      	movs	r1, #7
 8001a1a:	480f      	ldr	r0, [pc, #60]	; (8001a58 <begin+0x314>)
 8001a1c:	f006 faf0 	bl	8008000 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_7);
 8001a20:	2107      	movs	r1, #7
 8001a22:	480d      	ldr	r0, [pc, #52]	; (8001a58 <begin+0x314>)
 8001a24:	f006 fa6e 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_0, &set_I_graphic_value_page_1, TXB_ID_8, 242, 218, 318, 238);
 8001a28:	23ee      	movs	r3, #238	; 0xee
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	23da      	movs	r3, #218	; 0xda
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	23f2      	movs	r3, #242	; 0xf2
 8001a38:	2208      	movs	r2, #8
 8001a3a:	491b      	ldr	r1, [pc, #108]	; (8001aa8 <begin+0x364>)
 8001a3c:	4806      	ldr	r0, [pc, #24]	; (8001a58 <begin+0x314>)
 8001a3e:	f006 f9e1 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_0, TXB_ID_8, &FONT_12X20);
 8001a42:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <begin+0x31c>)
 8001a44:	2108      	movs	r1, #8
 8001a46:	4804      	ldr	r0, [pc, #16]	; (8001a58 <begin+0x314>)
 8001a48:	f006 fb04 	bl	8008054 <UG_TextboxSetFont>
 8001a4c:	e02e      	b.n	8001aac <begin+0x368>
 8001a4e:	bf00      	nop
 8001a50:	0800305b 	.word	0x0800305b
 8001a54:	20000b40 	.word	0x20000b40
 8001a58:	20000ad0 	.word	0x20000ad0
 8001a5c:	20000b04 	.word	0x20000b04
 8001a60:	080124ec 	.word	0x080124ec
 8001a64:	0800ba28 	.word	0x0800ba28
 8001a68:	20000b18 	.word	0x20000b18
 8001a6c:	0800ba2c 	.word	0x0800ba2c
 8001a70:	20000b2c 	.word	0x20000b2c
 8001a74:	0800ba30 	.word	0x0800ba30
 8001a78:	20001074 	.word	0x20001074
 8001a7c:	0800bb9c 	.word	0x0800bb9c
 8001a80:	200002cc 	.word	0x200002cc
 8001a84:	0800ba34 	.word	0x0800ba34
 8001a88:	2000031c 	.word	0x2000031c
 8001a8c:	0800ba3c 	.word	0x0800ba3c
 8001a90:	200007b0 	.word	0x200007b0
 8001a94:	0800ba44 	.word	0x0800ba44
 8001a98:	20000800 	.word	0x20000800
 8001a9c:	0800ba4c 	.word	0x0800ba4c
 8001aa0:	200007d8 	.word	0x200007d8
 8001aa4:	0800ba54 	.word	0x0800ba54
 8001aa8:	20000828 	.word	0x20000828
		 	    UG_TextboxSetAlignment(&window_page_0, TXB_ID_8, ALIGN_CENTER);
 8001aac:	2212      	movs	r2, #18
 8001aae:	2108      	movs	r1, #8
 8001ab0:	48c2      	ldr	r0, [pc, #776]	; (8001dbc <begin+0x678>)
 8001ab2:	f006 faf9 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_0, TXB_ID_8, 	C_YELLOW);
 8001ab6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001aba:	2108      	movs	r1, #8
 8001abc:	48bf      	ldr	r0, [pc, #764]	; (8001dbc <begin+0x678>)
 8001abe:	f006 fa74 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_0, TXB_ID_8, C_BLACK);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2108      	movs	r1, #8
 8001ac6:	48bd      	ldr	r0, [pc, #756]	; (8001dbc <begin+0x678>)
 8001ac8:	f006 fa44 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_0, TXB_ID_8, "0.000A");
 8001acc:	4abc      	ldr	r2, [pc, #752]	; (8001dc0 <begin+0x67c>)
 8001ace:	2108      	movs	r1, #8
 8001ad0:	48ba      	ldr	r0, [pc, #744]	; (8001dbc <begin+0x678>)
 8001ad2:	f006 fa95 	bl	8008000 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_0, TXB_ID_8);
 8001ad6:	2108      	movs	r1, #8
 8001ad8:	48b8      	ldr	r0, [pc, #736]	; (8001dbc <begin+0x678>)
 8001ada:	f006 fa13 	bl	8007f04 <UG_TextboxShow>
		 	   //
		 	   //	 	   	    UG_SetBackcolor(C_GREEN);
		 	   //	 	   	    UG_SetForecolor(C_BLACK);
		 	   //	 	   	    UG_PutString(242 , 219 , "00.00A");
	//Page 1
	 	 	 	UG_WindowCreate(&window_page_1, obj_buff_window_page_1, MAX_OBJECTS_WIN_GRAPH, window_page_1_callback);
 8001ade:	4bb9      	ldr	r3, [pc, #740]	; (8001dc4 <begin+0x680>)
 8001ae0:	2214      	movs	r2, #20
 8001ae2:	49b9      	ldr	r1, [pc, #740]	; (8001dc8 <begin+0x684>)
 8001ae4:	48b9      	ldr	r0, [pc, #740]	; (8001dcc <begin+0x688>)
 8001ae6:	f005 fddb 	bl	80076a0 <UG_WindowCreate>
		 	    UG_WindowSetStyle(&window_page_1, WND_STYLE_2D | WND_STYLE_HIDE_TITLE);
 8001aea:	2100      	movs	r1, #0
 8001aec:	48b7      	ldr	r0, [pc, #732]	; (8001dcc <begin+0x688>)
 8001aee:	f005 ff70 	bl	80079d2 <UG_WindowSetStyle>
		 	    UG_WindowSetBackColor(&window_page_1, C_BLACK);
 8001af2:	2100      	movs	r1, #0
 8001af4:	48b5      	ldr	r0, [pc, #724]	; (8001dcc <begin+0x688>)
 8001af6:	f005 fe87 	bl	8007808 <UG_WindowSetBackColor>

		 	    /////////////Current Voltage //
		   	    UG_TextboxCreate(&window_page_1, &current_CV_graphic, TXB_ID_3, 0, 10, 210, 26);
 8001afa:	231a      	movs	r3, #26
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	23d2      	movs	r3, #210	; 0xd2
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	230a      	movs	r3, #10
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2300      	movs	r3, #0
 8001b08:	2203      	movs	r2, #3
 8001b0a:	49b1      	ldr	r1, [pc, #708]	; (8001dd0 <begin+0x68c>)
 8001b0c:	48af      	ldr	r0, [pc, #700]	; (8001dcc <begin+0x688>)
 8001b0e:	f006 f979 	bl	8007e04 <UG_TextboxCreate>
		  	    UG_TextboxSetFont(&window_page_1, TXB_ID_3, &FONT_10X16);
 8001b12:	4ab0      	ldr	r2, [pc, #704]	; (8001dd4 <begin+0x690>)
 8001b14:	2103      	movs	r1, #3
 8001b16:	48ad      	ldr	r0, [pc, #692]	; (8001dcc <begin+0x688>)
 8001b18:	f006 fa9c 	bl	8008054 <UG_TextboxSetFont>
		 	   	UG_TextboxSetAlignment(&window_page_1, TXB_ID_3, ALIGN_CENTER_LEFT);
 8001b1c:	2211      	movs	r2, #17
 8001b1e:	2103      	movs	r1, #3
 8001b20:	48aa      	ldr	r0, [pc, #680]	; (8001dcc <begin+0x688>)
 8001b22:	f006 fac1 	bl	80080a8 <UG_TextboxSetAlignment>
		 	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_3, C_YELLOW);
 8001b26:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001b2a:	2103      	movs	r1, #3
 8001b2c:	48a7      	ldr	r0, [pc, #668]	; (8001dcc <begin+0x688>)
 8001b2e:	f006 fa3c 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_3, C_BLACK);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2103      	movs	r1, #3
 8001b36:	48a5      	ldr	r0, [pc, #660]	; (8001dcc <begin+0x688>)
 8001b38:	f006 fa0c 	bl	8007f54 <UG_TextboxSetForeColor>
		  	    UG_TextboxSetText(&window_page_1, TXB_ID_3, "VOLTS");
 8001b3c:	4aa6      	ldr	r2, [pc, #664]	; (8001dd8 <begin+0x694>)
 8001b3e:	2103      	movs	r1, #3
 8001b40:	48a2      	ldr	r0, [pc, #648]	; (8001dcc <begin+0x688>)
 8001b42:	f006 fa5d 	bl	8008000 <UG_TextboxSetText>
		 	   	UG_TextboxShow(&window_page_1, TXB_ID_3);
 8001b46:	2103      	movs	r1, #3
 8001b48:	48a0      	ldr	r0, [pc, #640]	; (8001dcc <begin+0x688>)
 8001b4a:	f006 f9db 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &current_V_graphic_page_2, TXB_ID_4, 0, 31, 181, 71);
 8001b4e:	2347      	movs	r3, #71	; 0x47
 8001b50:	9302      	str	r3, [sp, #8]
 8001b52:	23b5      	movs	r3, #181	; 0xb5
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	231f      	movs	r3, #31
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	499f      	ldr	r1, [pc, #636]	; (8001ddc <begin+0x698>)
 8001b60:	489a      	ldr	r0, [pc, #616]	; (8001dcc <begin+0x688>)
 8001b62:	f006 f94f 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_4, &FONT_24X40);
 8001b66:	4a9e      	ldr	r2, [pc, #632]	; (8001de0 <begin+0x69c>)
 8001b68:	2104      	movs	r1, #4
 8001b6a:	4898      	ldr	r0, [pc, #608]	; (8001dcc <begin+0x688>)
 8001b6c:	f006 fa72 	bl	8008054 <UG_TextboxSetFont>
	  	 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_4, ALIGN_CENTER);
 8001b70:	2212      	movs	r2, #18
 8001b72:	2104      	movs	r1, #4
 8001b74:	4895      	ldr	r0, [pc, #596]	; (8001dcc <begin+0x688>)
 8001b76:	f006 fa97 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_4, C_DIM_GRAY);
 8001b7a:	f246 322c 	movw	r2, #25388	; 0x632c
 8001b7e:	2104      	movs	r1, #4
 8001b80:	4892      	ldr	r0, [pc, #584]	; (8001dcc <begin+0x688>)
 8001b82:	f006 fa12 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_4, C_WHITE);
 8001b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8a:	2104      	movs	r1, #4
 8001b8c:	488f      	ldr	r0, [pc, #572]	; (8001dcc <begin+0x688>)
 8001b8e:	f006 f9e1 	bl	8007f54 <UG_TextboxSetForeColor>
		  	    UG_TextboxSetText(&window_page_1, TXB_ID_4, "00.00");
 8001b92:	4a94      	ldr	r2, [pc, #592]	; (8001de4 <begin+0x6a0>)
 8001b94:	2104      	movs	r1, #4
 8001b96:	488d      	ldr	r0, [pc, #564]	; (8001dcc <begin+0x688>)
 8001b98:	f006 fa32 	bl	8008000 <UG_TextboxSetText>
		  	    UG_TextboxShow(&window_page_1, TXB_ID_4);
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	488b      	ldr	r0, [pc, #556]	; (8001dcc <begin+0x688>)
 8001ba0:	f006 f9b0 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &current_V2_graphic, TXB_ID_5, 186, 27, 210, 71);
 8001ba4:	2347      	movs	r3, #71	; 0x47
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	23d2      	movs	r3, #210	; 0xd2
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	231b      	movs	r3, #27
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	23ba      	movs	r3, #186	; 0xba
 8001bb2:	2205      	movs	r2, #5
 8001bb4:	498c      	ldr	r1, [pc, #560]	; (8001de8 <begin+0x6a4>)
 8001bb6:	4885      	ldr	r0, [pc, #532]	; (8001dcc <begin+0x688>)
 8001bb8:	f006 f924 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_5, &FONT_24X40);
 8001bbc:	4a88      	ldr	r2, [pc, #544]	; (8001de0 <begin+0x69c>)
 8001bbe:	2105      	movs	r1, #5
 8001bc0:	4882      	ldr	r0, [pc, #520]	; (8001dcc <begin+0x688>)
 8001bc2:	f006 fa47 	bl	8008054 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_5, ALIGN_CENTER);
 8001bc6:	2212      	movs	r2, #18
 8001bc8:	2105      	movs	r1, #5
 8001bca:	4880      	ldr	r0, [pc, #512]	; (8001dcc <begin+0x688>)
 8001bcc:	f006 fa6c 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_5, C_YELLOW);
 8001bd0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	487d      	ldr	r0, [pc, #500]	; (8001dcc <begin+0x688>)
 8001bd8:	f006 f9e7 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_5, C_BLACK);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2105      	movs	r1, #5
 8001be0:	487a      	ldr	r0, [pc, #488]	; (8001dcc <begin+0x688>)
 8001be2:	f006 f9b7 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_5, "V");
 8001be6:	4a81      	ldr	r2, [pc, #516]	; (8001dec <begin+0x6a8>)
 8001be8:	2105      	movs	r1, #5
 8001bea:	4878      	ldr	r0, [pc, #480]	; (8001dcc <begin+0x688>)
 8001bec:	f006 fa08 	bl	8008000 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_5);
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	4876      	ldr	r0, [pc, #472]	; (8001dcc <begin+0x688>)
 8001bf4:	f006 f986 	bl	8007f04 <UG_TextboxShow>

		 	    ////////////Current Current//
		   	    UG_TextboxCreate(&window_page_1, &current_CC_graphic, TXB_ID_6, 0, 76, 210, 92);
 8001bf8:	235c      	movs	r3, #92	; 0x5c
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	23d2      	movs	r3, #210	; 0xd2
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	234c      	movs	r3, #76	; 0x4c
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2300      	movs	r3, #0
 8001c06:	2206      	movs	r2, #6
 8001c08:	4979      	ldr	r1, [pc, #484]	; (8001df0 <begin+0x6ac>)
 8001c0a:	4870      	ldr	r0, [pc, #448]	; (8001dcc <begin+0x688>)
 8001c0c:	f006 f8fa 	bl	8007e04 <UG_TextboxCreate>
		  	    UG_TextboxSetFont(&window_page_1, TXB_ID_6, &FONT_10X16);
 8001c10:	4a70      	ldr	r2, [pc, #448]	; (8001dd4 <begin+0x690>)
 8001c12:	2106      	movs	r1, #6
 8001c14:	486d      	ldr	r0, [pc, #436]	; (8001dcc <begin+0x688>)
 8001c16:	f006 fa1d 	bl	8008054 <UG_TextboxSetFont>
		 	   	UG_TextboxSetAlignment(&window_page_1, TXB_ID_6, ALIGN_CENTER_LEFT);
 8001c1a:	2211      	movs	r2, #17
 8001c1c:	2106      	movs	r1, #6
 8001c1e:	486b      	ldr	r0, [pc, #428]	; (8001dcc <begin+0x688>)
 8001c20:	f006 fa42 	bl	80080a8 <UG_TextboxSetAlignment>
		 	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_6, C_GREEN);
 8001c24:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001c28:	2106      	movs	r1, #6
 8001c2a:	4868      	ldr	r0, [pc, #416]	; (8001dcc <begin+0x688>)
 8001c2c:	f006 f9bd 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_6, C_BLACK);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2106      	movs	r1, #6
 8001c34:	4865      	ldr	r0, [pc, #404]	; (8001dcc <begin+0x688>)
 8001c36:	f006 f98d 	bl	8007f54 <UG_TextboxSetForeColor>
		  	    UG_TextboxSetText(&window_page_1, TXB_ID_6, "AMPS");
 8001c3a:	4a6e      	ldr	r2, [pc, #440]	; (8001df4 <begin+0x6b0>)
 8001c3c:	2106      	movs	r1, #6
 8001c3e:	4863      	ldr	r0, [pc, #396]	; (8001dcc <begin+0x688>)
 8001c40:	f006 f9de 	bl	8008000 <UG_TextboxSetText>
		 	   	UG_TextboxShow(&window_page_1, TXB_ID_6);
 8001c44:	2106      	movs	r1, #6
 8001c46:	4861      	ldr	r0, [pc, #388]	; (8001dcc <begin+0x688>)
 8001c48:	f006 f95c 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &current_I_graphic_page_2, TXB_ID_7, 0, 97, 181, 137);
 8001c4c:	2389      	movs	r3, #137	; 0x89
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	23b5      	movs	r3, #181	; 0xb5
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	2361      	movs	r3, #97	; 0x61
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	4966      	ldr	r1, [pc, #408]	; (8001df8 <begin+0x6b4>)
 8001c5e:	485b      	ldr	r0, [pc, #364]	; (8001dcc <begin+0x688>)
 8001c60:	f006 f8d0 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_7, &FONT_24X40);
 8001c64:	4a5e      	ldr	r2, [pc, #376]	; (8001de0 <begin+0x69c>)
 8001c66:	2107      	movs	r1, #7
 8001c68:	4858      	ldr	r0, [pc, #352]	; (8001dcc <begin+0x688>)
 8001c6a:	f006 f9f3 	bl	8008054 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_7, ALIGN_CENTER);
 8001c6e:	2212      	movs	r2, #18
 8001c70:	2107      	movs	r1, #7
 8001c72:	4856      	ldr	r0, [pc, #344]	; (8001dcc <begin+0x688>)
 8001c74:	f006 fa18 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_7, C_DIM_GRAY);
 8001c78:	f246 322c 	movw	r2, #25388	; 0x632c
 8001c7c:	2107      	movs	r1, #7
 8001c7e:	4853      	ldr	r0, [pc, #332]	; (8001dcc <begin+0x688>)
 8001c80:	f006 f993 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_7, C_WHITE);
 8001c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c88:	2107      	movs	r1, #7
 8001c8a:	4850      	ldr	r0, [pc, #320]	; (8001dcc <begin+0x688>)
 8001c8c:	f006 f962 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_7, "0.000");
 8001c90:	4a5a      	ldr	r2, [pc, #360]	; (8001dfc <begin+0x6b8>)
 8001c92:	2107      	movs	r1, #7
 8001c94:	484d      	ldr	r0, [pc, #308]	; (8001dcc <begin+0x688>)
 8001c96:	f006 f9b3 	bl	8008000 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_7);
 8001c9a:	2107      	movs	r1, #7
 8001c9c:	484b      	ldr	r0, [pc, #300]	; (8001dcc <begin+0x688>)
 8001c9e:	f006 f931 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &current_I2_graphic, TXB_ID_8, 186, 93, 210, 137);
 8001ca2:	2389      	movs	r3, #137	; 0x89
 8001ca4:	9302      	str	r3, [sp, #8]
 8001ca6:	23d2      	movs	r3, #210	; 0xd2
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	235d      	movs	r3, #93	; 0x5d
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	23ba      	movs	r3, #186	; 0xba
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	4953      	ldr	r1, [pc, #332]	; (8001e00 <begin+0x6bc>)
 8001cb4:	4845      	ldr	r0, [pc, #276]	; (8001dcc <begin+0x688>)
 8001cb6:	f006 f8a5 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_8, &FONT_24X40);
 8001cba:	4a49      	ldr	r2, [pc, #292]	; (8001de0 <begin+0x69c>)
 8001cbc:	2108      	movs	r1, #8
 8001cbe:	4843      	ldr	r0, [pc, #268]	; (8001dcc <begin+0x688>)
 8001cc0:	f006 f9c8 	bl	8008054 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_8, ALIGN_CENTER);
 8001cc4:	2212      	movs	r2, #18
 8001cc6:	2108      	movs	r1, #8
 8001cc8:	4840      	ldr	r0, [pc, #256]	; (8001dcc <begin+0x688>)
 8001cca:	f006 f9ed 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_8, C_GREEN);
 8001cce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001cd2:	2108      	movs	r1, #8
 8001cd4:	483d      	ldr	r0, [pc, #244]	; (8001dcc <begin+0x688>)
 8001cd6:	f006 f968 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_8, C_BLACK);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2108      	movs	r1, #8
 8001cde:	483b      	ldr	r0, [pc, #236]	; (8001dcc <begin+0x688>)
 8001ce0:	f006 f938 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_8, "I");
 8001ce4:	4a47      	ldr	r2, [pc, #284]	; (8001e04 <begin+0x6c0>)
 8001ce6:	2108      	movs	r1, #8
 8001ce8:	4838      	ldr	r0, [pc, #224]	; (8001dcc <begin+0x688>)
 8001cea:	f006 f989 	bl	8008000 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_8);
 8001cee:	2108      	movs	r1, #8
 8001cf0:	4836      	ldr	r0, [pc, #216]	; (8001dcc <begin+0x688>)
 8001cf2:	f006 f907 	bl	8007f04 <UG_TextboxShow>

		 	    ////////////power//
		   	    UG_TextboxCreate(&window_page_1, &current_CW_graphic, TXB_ID_9, 0, 142, 210, 158);
 8001cf6:	239e      	movs	r3, #158	; 0x9e
 8001cf8:	9302      	str	r3, [sp, #8]
 8001cfa:	23d2      	movs	r3, #210	; 0xd2
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	238e      	movs	r3, #142	; 0x8e
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2300      	movs	r3, #0
 8001d04:	2209      	movs	r2, #9
 8001d06:	4940      	ldr	r1, [pc, #256]	; (8001e08 <begin+0x6c4>)
 8001d08:	4830      	ldr	r0, [pc, #192]	; (8001dcc <begin+0x688>)
 8001d0a:	f006 f87b 	bl	8007e04 <UG_TextboxCreate>
		  	    UG_TextboxSetFont(&window_page_1, TXB_ID_9, &FONT_10X16);
 8001d0e:	4a31      	ldr	r2, [pc, #196]	; (8001dd4 <begin+0x690>)
 8001d10:	2109      	movs	r1, #9
 8001d12:	482e      	ldr	r0, [pc, #184]	; (8001dcc <begin+0x688>)
 8001d14:	f006 f99e 	bl	8008054 <UG_TextboxSetFont>
		 	   	UG_TextboxSetAlignment(&window_page_1, TXB_ID_9, ALIGN_CENTER_LEFT);
 8001d18:	2211      	movs	r2, #17
 8001d1a:	2109      	movs	r1, #9
 8001d1c:	482b      	ldr	r0, [pc, #172]	; (8001dcc <begin+0x688>)
 8001d1e:	f006 f9c3 	bl	80080a8 <UG_TextboxSetAlignment>
		 	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_9, C_VIOLET);
 8001d22:	f24e 421c 	movw	r2, #58396	; 0xe41c
 8001d26:	2109      	movs	r1, #9
 8001d28:	4828      	ldr	r0, [pc, #160]	; (8001dcc <begin+0x688>)
 8001d2a:	f006 f93e 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_9, C_BLACK);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2109      	movs	r1, #9
 8001d32:	4826      	ldr	r0, [pc, #152]	; (8001dcc <begin+0x688>)
 8001d34:	f006 f90e 	bl	8007f54 <UG_TextboxSetForeColor>
		  	    UG_TextboxSetText(&window_page_1, TXB_ID_9, "WATTS");
 8001d38:	4a34      	ldr	r2, [pc, #208]	; (8001e0c <begin+0x6c8>)
 8001d3a:	2109      	movs	r1, #9
 8001d3c:	4823      	ldr	r0, [pc, #140]	; (8001dcc <begin+0x688>)
 8001d3e:	f006 f95f 	bl	8008000 <UG_TextboxSetText>
		 	   	UG_TextboxShow(&window_page_1, TXB_ID_9);
 8001d42:	2109      	movs	r1, #9
 8001d44:	4821      	ldr	r0, [pc, #132]	; (8001dcc <begin+0x688>)
 8001d46:	f006 f8dd 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &current_W_graphic, TXB_ID_10, 0, 163, 181, 203);
 8001d4a:	23cb      	movs	r3, #203	; 0xcb
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	23b5      	movs	r3, #181	; 0xb5
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	23a3      	movs	r3, #163	; 0xa3
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2300      	movs	r3, #0
 8001d58:	220a      	movs	r2, #10
 8001d5a:	492d      	ldr	r1, [pc, #180]	; (8001e10 <begin+0x6cc>)
 8001d5c:	481b      	ldr	r0, [pc, #108]	; (8001dcc <begin+0x688>)
 8001d5e:	f006 f851 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_10, &FONT_24X40);
 8001d62:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <begin+0x69c>)
 8001d64:	210a      	movs	r1, #10
 8001d66:	4819      	ldr	r0, [pc, #100]	; (8001dcc <begin+0x688>)
 8001d68:	f006 f974 	bl	8008054 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_10, ALIGN_CENTER);
 8001d6c:	2212      	movs	r2, #18
 8001d6e:	210a      	movs	r1, #10
 8001d70:	4816      	ldr	r0, [pc, #88]	; (8001dcc <begin+0x688>)
 8001d72:	f006 f999 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_10, C_DIM_GRAY);
 8001d76:	f246 322c 	movw	r2, #25388	; 0x632c
 8001d7a:	210a      	movs	r1, #10
 8001d7c:	4813      	ldr	r0, [pc, #76]	; (8001dcc <begin+0x688>)
 8001d7e:	f006 f914 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_10, C_WHITE);
 8001d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d86:	210a      	movs	r1, #10
 8001d88:	4810      	ldr	r0, [pc, #64]	; (8001dcc <begin+0x688>)
 8001d8a:	f006 f8e3 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_10, "200.0");
 8001d8e:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <begin+0x6d0>)
 8001d90:	210a      	movs	r1, #10
 8001d92:	480e      	ldr	r0, [pc, #56]	; (8001dcc <begin+0x688>)
 8001d94:	f006 f934 	bl	8008000 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_10);
 8001d98:	210a      	movs	r1, #10
 8001d9a:	480c      	ldr	r0, [pc, #48]	; (8001dcc <begin+0x688>)
 8001d9c:	f006 f8b2 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &current_W2_graphic, TXB_ID_11, 186, 159, 210, 203);
 8001da0:	23cb      	movs	r3, #203	; 0xcb
 8001da2:	9302      	str	r3, [sp, #8]
 8001da4:	23d2      	movs	r3, #210	; 0xd2
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	239f      	movs	r3, #159	; 0x9f
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	23ba      	movs	r3, #186	; 0xba
 8001dae:	220b      	movs	r2, #11
 8001db0:	4919      	ldr	r1, [pc, #100]	; (8001e18 <begin+0x6d4>)
 8001db2:	4806      	ldr	r0, [pc, #24]	; (8001dcc <begin+0x688>)
 8001db4:	f006 f826 	bl	8007e04 <UG_TextboxCreate>
 8001db8:	e030      	b.n	8001e1c <begin+0x6d8>
 8001dba:	bf00      	nop
 8001dbc:	20000ad0 	.word	0x20000ad0
 8001dc0:	0800ba3c 	.word	0x0800ba3c
 8001dc4:	08003049 	.word	0x08003049
 8001dc8:	20000850 	.word	0x20000850
 8001dcc:	20000298 	.word	0x20000298
 8001dd0:	20000308 	.word	0x20000308
 8001dd4:	080124d8 	.word	0x080124d8
 8001dd8:	0800ba5c 	.word	0x0800ba5c
 8001ddc:	200002e0 	.word	0x200002e0
 8001de0:	08012500 	.word	0x08012500
 8001de4:	0800ba64 	.word	0x0800ba64
 8001de8:	200002f4 	.word	0x200002f4
 8001dec:	0800ba6c 	.word	0x0800ba6c
 8001df0:	20000358 	.word	0x20000358
 8001df4:	0800ba70 	.word	0x0800ba70
 8001df8:	20000330 	.word	0x20000330
 8001dfc:	0800ba78 	.word	0x0800ba78
 8001e00:	20000344 	.word	0x20000344
 8001e04:	0800ba80 	.word	0x0800ba80
 8001e08:	20000394 	.word	0x20000394
 8001e0c:	0800ba84 	.word	0x0800ba84
 8001e10:	2000036c 	.word	0x2000036c
 8001e14:	0800ba8c 	.word	0x0800ba8c
 8001e18:	20000380 	.word	0x20000380
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_11, &FONT_24X40);
 8001e1c:	4ac2      	ldr	r2, [pc, #776]	; (8002128 <begin+0x9e4>)
 8001e1e:	210b      	movs	r1, #11
 8001e20:	48c2      	ldr	r0, [pc, #776]	; (800212c <begin+0x9e8>)
 8001e22:	f006 f917 	bl	8008054 <UG_TextboxSetFont>
		 	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_11, ALIGN_CENTER);
 8001e26:	2212      	movs	r2, #18
 8001e28:	210b      	movs	r1, #11
 8001e2a:	48c0      	ldr	r0, [pc, #768]	; (800212c <begin+0x9e8>)
 8001e2c:	f006 f93c 	bl	80080a8 <UG_TextboxSetAlignment>
		 	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_11, C_VIOLET);
 8001e30:	f24e 421c 	movw	r2, #58396	; 0xe41c
 8001e34:	210b      	movs	r1, #11
 8001e36:	48bd      	ldr	r0, [pc, #756]	; (800212c <begin+0x9e8>)
 8001e38:	f006 f8b7 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_11, C_BLACK);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	210b      	movs	r1, #11
 8001e40:	48ba      	ldr	r0, [pc, #744]	; (800212c <begin+0x9e8>)
 8001e42:	f006 f887 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_11, "W");
 8001e46:	4aba      	ldr	r2, [pc, #744]	; (8002130 <begin+0x9ec>)
 8001e48:	210b      	movs	r1, #11
 8001e4a:	48b8      	ldr	r0, [pc, #736]	; (800212c <begin+0x9e8>)
 8001e4c:	f006 f8d8 	bl	8008000 <UG_TextboxSetText>
		 	    UG_TextboxShow(&window_page_1, TXB_ID_11);
 8001e50:	210b      	movs	r1, #11
 8001e52:	48b6      	ldr	r0, [pc, #728]	; (800212c <begin+0x9e8>)
 8001e54:	f006 f856 	bl	8007f04 <UG_TextboxShow>



		 	    ////////////Temp//
		 	    UG_TextboxCreate(&window_page_1, &temp_graphic, TXB_ID_12, 220, 10, 318, 26);
 8001e58:	231a      	movs	r3, #26
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	230a      	movs	r3, #10
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	23dc      	movs	r3, #220	; 0xdc
 8001e68:	220c      	movs	r2, #12
 8001e6a:	49b2      	ldr	r1, [pc, #712]	; (8002134 <begin+0x9f0>)
 8001e6c:	48af      	ldr	r0, [pc, #700]	; (800212c <begin+0x9e8>)
 8001e6e:	f005 ffc9 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_12, &FONT_10X16);
 8001e72:	4ab1      	ldr	r2, [pc, #708]	; (8002138 <begin+0x9f4>)
 8001e74:	210c      	movs	r1, #12
 8001e76:	48ad      	ldr	r0, [pc, #692]	; (800212c <begin+0x9e8>)
 8001e78:	f006 f8ec 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_12, ALIGN_CENTER);
 8001e7c:	2212      	movs	r2, #18
 8001e7e:	210c      	movs	r1, #12
 8001e80:	48aa      	ldr	r0, [pc, #680]	; (800212c <begin+0x9e8>)
 8001e82:	f006 f911 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_12, 	C_ORANGE);
 8001e86:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 8001e8a:	210c      	movs	r1, #12
 8001e8c:	48a7      	ldr	r0, [pc, #668]	; (800212c <begin+0x9e8>)
 8001e8e:	f006 f88c 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_12, C_BLACK);
 8001e92:	2200      	movs	r2, #0
 8001e94:	210c      	movs	r1, #12
 8001e96:	48a5      	ldr	r0, [pc, #660]	; (800212c <begin+0x9e8>)
 8001e98:	f006 f85c 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_12, "TEMP C");
 8001e9c:	4aa7      	ldr	r2, [pc, #668]	; (800213c <begin+0x9f8>)
 8001e9e:	210c      	movs	r1, #12
 8001ea0:	48a2      	ldr	r0, [pc, #648]	; (800212c <begin+0x9e8>)
 8001ea2:	f006 f8ad 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_12);
 8001ea6:	210c      	movs	r1, #12
 8001ea8:	48a0      	ldr	r0, [pc, #640]	; (800212c <begin+0x9e8>)
 8001eaa:	f006 f82b 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &current_T_graphic, TXB_ID_13, 220, 31, 318, 71);
 8001eae:	2347      	movs	r3, #71	; 0x47
 8001eb0:	9302      	str	r3, [sp, #8]
 8001eb2:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	231f      	movs	r3, #31
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	23dc      	movs	r3, #220	; 0xdc
 8001ebe:	220d      	movs	r2, #13
 8001ec0:	499f      	ldr	r1, [pc, #636]	; (8002140 <begin+0x9fc>)
 8001ec2:	489a      	ldr	r0, [pc, #616]	; (800212c <begin+0x9e8>)
 8001ec4:	f005 ff9e 	bl	8007e04 <UG_TextboxCreate>
		 	    UG_TextboxSetFont(&window_page_1, TXB_ID_13, &FONT_12X20);
 8001ec8:	4a9e      	ldr	r2, [pc, #632]	; (8002144 <begin+0xa00>)
 8001eca:	210d      	movs	r1, #13
 8001ecc:	4897      	ldr	r0, [pc, #604]	; (800212c <begin+0x9e8>)
 8001ece:	f006 f8c1 	bl	8008054 <UG_TextboxSetFont>
		  	    UG_TextboxSetAlignment(&window_page_1, TXB_ID_13, ALIGN_CENTER);
 8001ed2:	2212      	movs	r2, #18
 8001ed4:	210d      	movs	r1, #13
 8001ed6:	4895      	ldr	r0, [pc, #596]	; (800212c <begin+0x9e8>)
 8001ed8:	f006 f8e6 	bl	80080a8 <UG_TextboxSetAlignment>
		  	    UG_TextboxSetBackColor(&window_page_1, TXB_ID_13, C_DIM_GRAY);
 8001edc:	f246 322c 	movw	r2, #25388	; 0x632c
 8001ee0:	210d      	movs	r1, #13
 8001ee2:	4892      	ldr	r0, [pc, #584]	; (800212c <begin+0x9e8>)
 8001ee4:	f006 f861 	bl	8007faa <UG_TextboxSetBackColor>
		  	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_13, C_WHITE);
 8001ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eec:	210d      	movs	r1, #13
 8001eee:	488f      	ldr	r0, [pc, #572]	; (800212c <begin+0x9e8>)
 8001ef0:	f006 f830 	bl	8007f54 <UG_TextboxSetForeColor>
		   	    UG_TextboxSetText(&window_page_1, TXB_ID_13, "24.5");
 8001ef4:	4a94      	ldr	r2, [pc, #592]	; (8002148 <begin+0xa04>)
 8001ef6:	210d      	movs	r1, #13
 8001ef8:	488c      	ldr	r0, [pc, #560]	; (800212c <begin+0x9e8>)
 8001efa:	f006 f881 	bl	8008000 <UG_TextboxSetText>
		   	    UG_TextboxShow(&window_page_1, TXB_ID_13);
 8001efe:	210d      	movs	r1, #13
 8001f00:	488a      	ldr	r0, [pc, #552]	; (800212c <begin+0x9e8>)
 8001f02:	f005 ffff 	bl	8007f04 <UG_TextboxShow>

		 	    ////////////USB//
		        UG_TextboxCreate(&window_page_1, &USBC_graphic, TXB_ID_14, 220, 76, 318, 107);
 8001f06:	236b      	movs	r3, #107	; 0x6b
 8001f08:	9302      	str	r3, [sp, #8]
 8001f0a:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	234c      	movs	r3, #76	; 0x4c
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	23dc      	movs	r3, #220	; 0xdc
 8001f16:	220e      	movs	r2, #14
 8001f18:	498c      	ldr	r1, [pc, #560]	; (800214c <begin+0xa08>)
 8001f1a:	4884      	ldr	r0, [pc, #528]	; (800212c <begin+0x9e8>)
 8001f1c:	f005 ff72 	bl	8007e04 <UG_TextboxCreate>
		   	    UG_TextboxSetFont(&window_page_1, TXB_ID_14, &FONT_12X20);
 8001f20:	4a88      	ldr	r2, [pc, #544]	; (8002144 <begin+0xa00>)
 8001f22:	210e      	movs	r1, #14
 8001f24:	4881      	ldr	r0, [pc, #516]	; (800212c <begin+0x9e8>)
 8001f26:	f006 f895 	bl	8008054 <UG_TextboxSetFont>
		   	   	UG_TextboxSetAlignment(&window_page_1, TXB_ID_14, ALIGN_CENTER);
 8001f2a:	2212      	movs	r2, #18
 8001f2c:	210e      	movs	r1, #14
 8001f2e:	487f      	ldr	r0, [pc, #508]	; (800212c <begin+0x9e8>)
 8001f30:	f006 f8ba 	bl	80080a8 <UG_TextboxSetAlignment>
		   	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_14, C_GREEN_YELLOW);
 8001f34:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8001f38:	210e      	movs	r1, #14
 8001f3a:	487c      	ldr	r0, [pc, #496]	; (800212c <begin+0x9e8>)
 8001f3c:	f006 f835 	bl	8007faa <UG_TextboxSetBackColor>
		   	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_14, C_BLACK);
 8001f40:	2200      	movs	r2, #0
 8001f42:	210e      	movs	r1, #14
 8001f44:	4879      	ldr	r0, [pc, #484]	; (800212c <begin+0x9e8>)
 8001f46:	f006 f805 	bl	8007f54 <UG_TextboxSetForeColor>
		   	    UG_TextboxSetText(&window_page_1, TXB_ID_14, "USB C");
 8001f4a:	4a81      	ldr	r2, [pc, #516]	; (8002150 <begin+0xa0c>)
 8001f4c:	210e      	movs	r1, #14
 8001f4e:	4877      	ldr	r0, [pc, #476]	; (800212c <begin+0x9e8>)
 8001f50:	f006 f856 	bl	8008000 <UG_TextboxSetText>
		  	   	UG_TextboxShow(&window_page_1, TXB_ID_14);
 8001f54:	210e      	movs	r1, #14
 8001f56:	4875      	ldr	r0, [pc, #468]	; (800212c <begin+0x9e8>)
 8001f58:	f005 ffd4 	bl	8007f04 <UG_TextboxShow>

		  	    UG_TextboxCreate(&window_page_1, &USBB_graphic, TXB_ID_15, 220, 109, 318, 137);
 8001f5c:	2389      	movs	r3, #137	; 0x89
 8001f5e:	9302      	str	r3, [sp, #8]
 8001f60:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	236d      	movs	r3, #109	; 0x6d
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	23dc      	movs	r3, #220	; 0xdc
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	4979      	ldr	r1, [pc, #484]	; (8002154 <begin+0xa10>)
 8001f70:	486e      	ldr	r0, [pc, #440]	; (800212c <begin+0x9e8>)
 8001f72:	f005 ff47 	bl	8007e04 <UG_TextboxCreate>
		  	  	UG_TextboxSetFont(&window_page_1, TXB_ID_15, &FONT_12X20);
 8001f76:	4a73      	ldr	r2, [pc, #460]	; (8002144 <begin+0xa00>)
 8001f78:	210f      	movs	r1, #15
 8001f7a:	486c      	ldr	r0, [pc, #432]	; (800212c <begin+0x9e8>)
 8001f7c:	f006 f86a 	bl	8008054 <UG_TextboxSetFont>
		  	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_15, ALIGN_CENTER);
 8001f80:	2212      	movs	r2, #18
 8001f82:	210f      	movs	r1, #15
 8001f84:	4869      	ldr	r0, [pc, #420]	; (800212c <begin+0x9e8>)
 8001f86:	f006 f88f 	bl	80080a8 <UG_TextboxSetAlignment>
		   	   	UG_TextboxSetBackColor(&window_page_1, TXB_ID_15, C_DIM_GRAY);
 8001f8a:	f246 322c 	movw	r2, #25388	; 0x632c
 8001f8e:	210f      	movs	r1, #15
 8001f90:	4866      	ldr	r0, [pc, #408]	; (800212c <begin+0x9e8>)
 8001f92:	f006 f80a 	bl	8007faa <UG_TextboxSetBackColor>
		   	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_15, C_WHITE);
 8001f96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	4863      	ldr	r0, [pc, #396]	; (800212c <begin+0x9e8>)
 8001f9e:	f005 ffd9 	bl	8007f54 <UG_TextboxSetForeColor>
	    	    UG_TextboxSetText(&window_page_1, TXB_ID_15, "USB B");
 8001fa2:	4a6d      	ldr	r2, [pc, #436]	; (8002158 <begin+0xa14>)
 8001fa4:	210f      	movs	r1, #15
 8001fa6:	4861      	ldr	r0, [pc, #388]	; (800212c <begin+0x9e8>)
 8001fa8:	f006 f82a 	bl	8008000 <UG_TextboxSetText>
		   	   	UG_TextboxShow(&window_page_1, TXB_ID_15);
 8001fac:	210f      	movs	r1, #15
 8001fae:	485f      	ldr	r0, [pc, #380]	; (800212c <begin+0x9e8>)
 8001fb0:	f005 ffa8 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &set_V_graphic_page_2, TXB_ID_16, 220, 143, 318, 159);
 8001fb4:	239f      	movs	r3, #159	; 0x9f
 8001fb6:	9302      	str	r3, [sp, #8]
 8001fb8:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	238f      	movs	r3, #143	; 0x8f
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	23dc      	movs	r3, #220	; 0xdc
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	4965      	ldr	r1, [pc, #404]	; (800215c <begin+0xa18>)
 8001fc8:	4858      	ldr	r0, [pc, #352]	; (800212c <begin+0x9e8>)
 8001fca:	f005 ff1b 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_16, &FONT_10X16);
 8001fce:	4a5a      	ldr	r2, [pc, #360]	; (8002138 <begin+0x9f4>)
 8001fd0:	2110      	movs	r1, #16
 8001fd2:	4856      	ldr	r0, [pc, #344]	; (800212c <begin+0x9e8>)
 8001fd4:	f006 f83e 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_16, ALIGN_CENTER);
 8001fd8:	2212      	movs	r2, #18
 8001fda:	2110      	movs	r1, #16
 8001fdc:	4853      	ldr	r0, [pc, #332]	; (800212c <begin+0x9e8>)
 8001fde:	f006 f863 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_16, 	C_VIOLET);
 8001fe2:	f24e 421c 	movw	r2, #58396	; 0xe41c
 8001fe6:	2110      	movs	r1, #16
 8001fe8:	4850      	ldr	r0, [pc, #320]	; (800212c <begin+0x9e8>)
 8001fea:	f005 ffde 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_16, C_BLACK);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2110      	movs	r1, #16
 8001ff2:	484e      	ldr	r0, [pc, #312]	; (800212c <begin+0x9e8>)
 8001ff4:	f005 ffae 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_16, "SET V");
 8001ff8:	4a59      	ldr	r2, [pc, #356]	; (8002160 <begin+0xa1c>)
 8001ffa:	2110      	movs	r1, #16
 8001ffc:	484b      	ldr	r0, [pc, #300]	; (800212c <begin+0x9e8>)
 8001ffe:	f005 ffff 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_16);
 8002002:	2110      	movs	r1, #16
 8002004:	4849      	ldr	r0, [pc, #292]	; (800212c <begin+0x9e8>)
 8002006:	f005 ff7d 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &set_V_graphic_value_page_2, TXB_ID_17, 220, 163, 318, 185);
 800200a:	23b9      	movs	r3, #185	; 0xb9
 800200c:	9302      	str	r3, [sp, #8]
 800200e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8002012:	9301      	str	r3, [sp, #4]
 8002014:	23a3      	movs	r3, #163	; 0xa3
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	23dc      	movs	r3, #220	; 0xdc
 800201a:	2211      	movs	r2, #17
 800201c:	4951      	ldr	r1, [pc, #324]	; (8002164 <begin+0xa20>)
 800201e:	4843      	ldr	r0, [pc, #268]	; (800212c <begin+0x9e8>)
 8002020:	f005 fef0 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_17, &FONT_12X20);
 8002024:	4a47      	ldr	r2, [pc, #284]	; (8002144 <begin+0xa00>)
 8002026:	2111      	movs	r1, #17
 8002028:	4840      	ldr	r0, [pc, #256]	; (800212c <begin+0x9e8>)
 800202a:	f006 f813 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_17, ALIGN_CENTER);
 800202e:	2212      	movs	r2, #18
 8002030:	2111      	movs	r1, #17
 8002032:	483e      	ldr	r0, [pc, #248]	; (800212c <begin+0x9e8>)
 8002034:	f006 f838 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_17, 	C_DIM_GRAY);
 8002038:	f246 322c 	movw	r2, #25388	; 0x632c
 800203c:	2111      	movs	r1, #17
 800203e:	483b      	ldr	r0, [pc, #236]	; (800212c <begin+0x9e8>)
 8002040:	f005 ffb3 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_17, C_WHITE);
 8002044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002048:	2111      	movs	r1, #17
 800204a:	4838      	ldr	r0, [pc, #224]	; (800212c <begin+0x9e8>)
 800204c:	f005 ff82 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_17, "00.00");
 8002050:	4a45      	ldr	r2, [pc, #276]	; (8002168 <begin+0xa24>)
 8002052:	2111      	movs	r1, #17
 8002054:	4835      	ldr	r0, [pc, #212]	; (800212c <begin+0x9e8>)
 8002056:	f005 ffd3 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_17);
 800205a:	2111      	movs	r1, #17
 800205c:	4833      	ldr	r0, [pc, #204]	; (800212c <begin+0x9e8>)
 800205e:	f005 ff51 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &set_I_graphic_page_2, TXB_ID_18, 220, 190, 318, 206);
 8002062:	23ce      	movs	r3, #206	; 0xce
 8002064:	9302      	str	r3, [sp, #8]
 8002066:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	23be      	movs	r3, #190	; 0xbe
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	23dc      	movs	r3, #220	; 0xdc
 8002072:	2212      	movs	r2, #18
 8002074:	493d      	ldr	r1, [pc, #244]	; (800216c <begin+0xa28>)
 8002076:	482d      	ldr	r0, [pc, #180]	; (800212c <begin+0x9e8>)
 8002078:	f005 fec4 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_18, &FONT_10X16);
 800207c:	4a2e      	ldr	r2, [pc, #184]	; (8002138 <begin+0x9f4>)
 800207e:	2112      	movs	r1, #18
 8002080:	482a      	ldr	r0, [pc, #168]	; (800212c <begin+0x9e8>)
 8002082:	f005 ffe7 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_18, ALIGN_CENTER);
 8002086:	2212      	movs	r2, #18
 8002088:	2112      	movs	r1, #18
 800208a:	4828      	ldr	r0, [pc, #160]	; (800212c <begin+0x9e8>)
 800208c:	f006 f80c 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_18, 	C_VIOLET);
 8002090:	f24e 421c 	movw	r2, #58396	; 0xe41c
 8002094:	2112      	movs	r1, #18
 8002096:	4825      	ldr	r0, [pc, #148]	; (800212c <begin+0x9e8>)
 8002098:	f005 ff87 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_18, C_BLACK);
 800209c:	2200      	movs	r2, #0
 800209e:	2112      	movs	r1, #18
 80020a0:	4822      	ldr	r0, [pc, #136]	; (800212c <begin+0x9e8>)
 80020a2:	f005 ff57 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_18, "SET I");
 80020a6:	4a32      	ldr	r2, [pc, #200]	; (8002170 <begin+0xa2c>)
 80020a8:	2112      	movs	r1, #18
 80020aa:	4820      	ldr	r0, [pc, #128]	; (800212c <begin+0x9e8>)
 80020ac:	f005 ffa8 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_18);
 80020b0:	2112      	movs	r1, #18
 80020b2:	481e      	ldr	r0, [pc, #120]	; (800212c <begin+0x9e8>)
 80020b4:	f005 ff26 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_1, &set_I_graphic_value_page_2, TXB_ID_19, 220, 209, 318, 231);
 80020b8:	23e7      	movs	r3, #231	; 0xe7
 80020ba:	9302      	str	r3, [sp, #8]
 80020bc:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	23d1      	movs	r3, #209	; 0xd1
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	23dc      	movs	r3, #220	; 0xdc
 80020c8:	2213      	movs	r2, #19
 80020ca:	492a      	ldr	r1, [pc, #168]	; (8002174 <begin+0xa30>)
 80020cc:	4817      	ldr	r0, [pc, #92]	; (800212c <begin+0x9e8>)
 80020ce:	f005 fe99 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_1, TXB_ID_19, &FONT_12X20);
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <begin+0xa00>)
 80020d4:	2113      	movs	r1, #19
 80020d6:	4815      	ldr	r0, [pc, #84]	; (800212c <begin+0x9e8>)
 80020d8:	f005 ffbc 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_1, TXB_ID_19, ALIGN_CENTER);
 80020dc:	2212      	movs	r2, #18
 80020de:	2113      	movs	r1, #19
 80020e0:	4812      	ldr	r0, [pc, #72]	; (800212c <begin+0x9e8>)
 80020e2:	f005 ffe1 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_1, TXB_ID_19, 	C_DIM_GRAY);
 80020e6:	f246 322c 	movw	r2, #25388	; 0x632c
 80020ea:	2113      	movs	r1, #19
 80020ec:	480f      	ldr	r0, [pc, #60]	; (800212c <begin+0x9e8>)
 80020ee:	f005 ff5c 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_1, TXB_ID_19, C_WHITE);
 80020f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f6:	2113      	movs	r1, #19
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <begin+0x9e8>)
 80020fa:	f005 ff2b 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_1, TXB_ID_19, "0.000");
 80020fe:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <begin+0xa34>)
 8002100:	2113      	movs	r1, #19
 8002102:	480a      	ldr	r0, [pc, #40]	; (800212c <begin+0x9e8>)
 8002104:	f005 ff7c 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_1, TXB_ID_19);
 8002108:	2113      	movs	r1, #19
 800210a:	4808      	ldr	r0, [pc, #32]	; (800212c <begin+0x9e8>)
 800210c:	f005 fefa 	bl	8007f04 <UG_TextboxShow>

	//Page 2
		 		UG_WindowCreate(&window_page_2, obj_buff_window_page_2, MAX_OBJECTS_WIN_GRAPH, window_page_2_callback);
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <begin+0xa38>)
 8002112:	2214      	movs	r2, #20
 8002114:	491a      	ldr	r1, [pc, #104]	; (8002180 <begin+0xa3c>)
 8002116:	481b      	ldr	r0, [pc, #108]	; (8002184 <begin+0xa40>)
 8002118:	f005 fac2 	bl	80076a0 <UG_WindowCreate>
				UG_WindowSetStyle(&window_page_2, WND_STYLE_2D | WND_STYLE_SHOW_TITLE);
 800211c:	2102      	movs	r1, #2
 800211e:	4819      	ldr	r0, [pc, #100]	; (8002184 <begin+0xa40>)
 8002120:	f005 fc57 	bl	80079d2 <UG_WindowSetStyle>
				UG_WindowSetBackColor(&window_page_2, C_BLACK);
 8002124:	2100      	movs	r1, #0
 8002126:	e02f      	b.n	8002188 <begin+0xa44>
 8002128:	08012500 	.word	0x08012500
 800212c:	20000298 	.word	0x20000298
 8002130:	0800ba94 	.word	0x0800ba94
 8002134:	20000760 	.word	0x20000760
 8002138:	080124d8 	.word	0x080124d8
 800213c:	0800ba98 	.word	0x0800ba98
 8002140:	20000774 	.word	0x20000774
 8002144:	080124ec 	.word	0x080124ec
 8002148:	0800baa0 	.word	0x0800baa0
 800214c:	20000788 	.word	0x20000788
 8002150:	0800baa8 	.word	0x0800baa8
 8002154:	2000079c 	.word	0x2000079c
 8002158:	0800bab0 	.word	0x0800bab0
 800215c:	200007c4 	.word	0x200007c4
 8002160:	0800bab8 	.word	0x0800bab8
 8002164:	20000814 	.word	0x20000814
 8002168:	0800ba64 	.word	0x0800ba64
 800216c:	200007ec 	.word	0x200007ec
 8002170:	0800bac0 	.word	0x0800bac0
 8002174:	2000083c 	.word	0x2000083c
 8002178:	0800ba78 	.word	0x0800ba78
 800217c:	0800307f 	.word	0x0800307f
 8002180:	20000404 	.word	0x20000404
 8002184:	200003d0 	.word	0x200003d0
 8002188:	48c2      	ldr	r0, [pc, #776]	; (8002494 <begin+0xd50>)
 800218a:	f005 fb3d 	bl	8007808 <UG_WindowSetBackColor>

				UG_WindowSetTitleColor(&window_page_2, C_BLACK); //title ending line is 22 pixel in height
 800218e:	2100      	movs	r1, #0
 8002190:	48c0      	ldr	r0, [pc, #768]	; (8002494 <begin+0xd50>)
 8002192:	f005 fb7d 	bl	8007890 <UG_WindowSetTitleColor>
				UG_WindowSetTitleTextColor(&window_page_2, C_ORANGE);
 8002196:	f44f 417d 	mov.w	r1, #64768	; 0xfd00
 800219a:	48be      	ldr	r0, [pc, #760]	; (8002494 <begin+0xd50>)
 800219c:	f005 fb56 	bl	800784c <UG_WindowSetTitleTextColor>
				UG_WindowSetTitleTextAlignment(&window_page_2, ALIGN_CENTER);
 80021a0:	2112      	movs	r1, #18
 80021a2:	48bc      	ldr	r0, [pc, #752]	; (8002494 <begin+0xd50>)
 80021a4:	f005 fbf2 	bl	800798c <UG_WindowSetTitleTextAlignment>
				UG_WindowSetTitleText(&window_page_2,"Window");
 80021a8:	49bb      	ldr	r1, [pc, #748]	; (8002498 <begin+0xd54>)
 80021aa:	48ba      	ldr	r0, [pc, #744]	; (8002494 <begin+0xd50>)
 80021ac:	f005 fb92 	bl	80078d4 <UG_WindowSetTitleText>
				UG_WindowSetTitleTextFont(&window_page_2,&FONT_12X20);
 80021b0:	49ba      	ldr	r1, [pc, #744]	; (800249c <begin+0xd58>)
 80021b2:	48b8      	ldr	r0, [pc, #736]	; (8002494 <begin+0xd50>)
 80021b4:	f005 fbaf 	bl	8007916 <UG_WindowSetTitleTextFont>

//				UG_ImageCreate(&window_page_2, &image_2, IMG_ID_0,115, 50, 146,65);
//				UG_ImageSetBMP(&window_page_2, IMG_ID_0, &sound);

		 	    UG_TextboxCreate(&window_page_2, &dummy_text_1, TXB_ID_1, 1,1,102,70);
 80021b8:	2346      	movs	r3, #70	; 0x46
 80021ba:	9302      	str	r3, [sp, #8]
 80021bc:	2366      	movs	r3, #102	; 0x66
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	2301      	movs	r3, #1
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2301      	movs	r3, #1
 80021c6:	2201      	movs	r2, #1
 80021c8:	49b5      	ldr	r1, [pc, #724]	; (80024a0 <begin+0xd5c>)
 80021ca:	48b2      	ldr	r0, [pc, #712]	; (8002494 <begin+0xd50>)
 80021cc:	f005 fe1a 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_1, &FONT_12X20);
 80021d0:	4ab2      	ldr	r2, [pc, #712]	; (800249c <begin+0xd58>)
 80021d2:	2101      	movs	r1, #1
 80021d4:	48af      	ldr	r0, [pc, #700]	; (8002494 <begin+0xd50>)
 80021d6:	f005 ff3d 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_1, ALIGN_CENTER);
 80021da:	2212      	movs	r2, #18
 80021dc:	2101      	movs	r1, #1
 80021de:	48ad      	ldr	r0, [pc, #692]	; (8002494 <begin+0xd50>)
 80021e0:	f005 ff62 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_1, 	C_ORANGE);
 80021e4:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 80021e8:	2101      	movs	r1, #1
 80021ea:	48aa      	ldr	r0, [pc, #680]	; (8002494 <begin+0xd50>)
 80021ec:	f005 fedd 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_1, C_WHITE);
 80021f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f4:	2101      	movs	r1, #1
 80021f6:	48a7      	ldr	r0, [pc, #668]	; (8002494 <begin+0xd50>)
 80021f8:	f005 feac 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_1, "PS\n Configuration");
 80021fc:	4aa9      	ldr	r2, [pc, #676]	; (80024a4 <begin+0xd60>)
 80021fe:	2101      	movs	r1, #1
 8002200:	48a4      	ldr	r0, [pc, #656]	; (8002494 <begin+0xd50>)
 8002202:	f005 fefd 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_1);
 8002206:	2101      	movs	r1, #1
 8002208:	48a2      	ldr	r0, [pc, #648]	; (8002494 <begin+0xd50>)
 800220a:	f005 fe7b 	bl	8007f04 <UG_TextboxShow>


		 	    UG_TextboxCreate(&window_page_2, &dummy_text_2, TXB_ID_2, 1,73,102,142);
 800220e:	238e      	movs	r3, #142	; 0x8e
 8002210:	9302      	str	r3, [sp, #8]
 8002212:	2366      	movs	r3, #102	; 0x66
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	2349      	movs	r3, #73	; 0x49
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2301      	movs	r3, #1
 800221c:	2202      	movs	r2, #2
 800221e:	49a2      	ldr	r1, [pc, #648]	; (80024a8 <begin+0xd64>)
 8002220:	489c      	ldr	r0, [pc, #624]	; (8002494 <begin+0xd50>)
 8002222:	f005 fdef 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_2, &FONT_12X20);
 8002226:	4a9d      	ldr	r2, [pc, #628]	; (800249c <begin+0xd58>)
 8002228:	2102      	movs	r1, #2
 800222a:	489a      	ldr	r0, [pc, #616]	; (8002494 <begin+0xd50>)
 800222c:	f005 ff12 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_2, ALIGN_CENTER);
 8002230:	2212      	movs	r2, #18
 8002232:	2102      	movs	r1, #2
 8002234:	4897      	ldr	r0, [pc, #604]	; (8002494 <begin+0xd50>)
 8002236:	f005 ff37 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_2, 	C_BLACK);
 800223a:	2200      	movs	r2, #0
 800223c:	2102      	movs	r1, #2
 800223e:	4895      	ldr	r0, [pc, #596]	; (8002494 <begin+0xd50>)
 8002240:	f005 feb3 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_2, C_WHITE);
 8002244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002248:	2102      	movs	r1, #2
 800224a:	4892      	ldr	r0, [pc, #584]	; (8002494 <begin+0xd50>)
 800224c:	f005 fe82 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_2, "Tab_2");
 8002250:	4a96      	ldr	r2, [pc, #600]	; (80024ac <begin+0xd68>)
 8002252:	2102      	movs	r1, #2
 8002254:	488f      	ldr	r0, [pc, #572]	; (8002494 <begin+0xd50>)
 8002256:	f005 fed3 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_2);
 800225a:	2102      	movs	r1, #2
 800225c:	488d      	ldr	r0, [pc, #564]	; (8002494 <begin+0xd50>)
 800225e:	f005 fe51 	bl	8007f04 <UG_TextboxShow>


		 	    UG_TextboxCreate(&window_page_2, &dummy_text_3, TXB_ID_3, 1,146,102,215);
 8002262:	23d7      	movs	r3, #215	; 0xd7
 8002264:	9302      	str	r3, [sp, #8]
 8002266:	2366      	movs	r3, #102	; 0x66
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	2392      	movs	r3, #146	; 0x92
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2301      	movs	r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	498f      	ldr	r1, [pc, #572]	; (80024b0 <begin+0xd6c>)
 8002274:	4887      	ldr	r0, [pc, #540]	; (8002494 <begin+0xd50>)
 8002276:	f005 fdc5 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_3, &FONT_12X20);
 800227a:	4a88      	ldr	r2, [pc, #544]	; (800249c <begin+0xd58>)
 800227c:	2103      	movs	r1, #3
 800227e:	4885      	ldr	r0, [pc, #532]	; (8002494 <begin+0xd50>)
 8002280:	f005 fee8 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_3, ALIGN_CENTER);
 8002284:	2212      	movs	r2, #18
 8002286:	2103      	movs	r1, #3
 8002288:	4882      	ldr	r0, [pc, #520]	; (8002494 <begin+0xd50>)
 800228a:	f005 ff0d 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_3, 	C_BLACK);
 800228e:	2200      	movs	r2, #0
 8002290:	2103      	movs	r1, #3
 8002292:	4880      	ldr	r0, [pc, #512]	; (8002494 <begin+0xd50>)
 8002294:	f005 fe89 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_3, C_WHITE);
 8002298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800229c:	2103      	movs	r1, #3
 800229e:	487d      	ldr	r0, [pc, #500]	; (8002494 <begin+0xd50>)
 80022a0:	f005 fe58 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_3, "Tab_3");
 80022a4:	4a83      	ldr	r2, [pc, #524]	; (80024b4 <begin+0xd70>)
 80022a6:	2103      	movs	r1, #3
 80022a8:	487a      	ldr	r0, [pc, #488]	; (8002494 <begin+0xd50>)
 80022aa:	f005 fea9 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_3);
 80022ae:	2103      	movs	r1, #3
 80022b0:	4878      	ldr	r0, [pc, #480]	; (8002494 <begin+0xd50>)
 80022b2:	f005 fe27 	bl	8007f04 <UG_TextboxShow>



		 	    UG_TextboxCreate(&window_page_2, &dummy_text_4, TXB_ID_4, 120,34,210,50);
 80022b6:	2332      	movs	r3, #50	; 0x32
 80022b8:	9302      	str	r3, [sp, #8]
 80022ba:	23d2      	movs	r3, #210	; 0xd2
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	2322      	movs	r3, #34	; 0x22
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2378      	movs	r3, #120	; 0x78
 80022c4:	2204      	movs	r2, #4
 80022c6:	497c      	ldr	r1, [pc, #496]	; (80024b8 <begin+0xd74>)
 80022c8:	4872      	ldr	r0, [pc, #456]	; (8002494 <begin+0xd50>)
 80022ca:	f005 fd9b 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_4, &FONT_10X16);
 80022ce:	4a7b      	ldr	r2, [pc, #492]	; (80024bc <begin+0xd78>)
 80022d0:	2104      	movs	r1, #4
 80022d2:	4870      	ldr	r0, [pc, #448]	; (8002494 <begin+0xd50>)
 80022d4:	f005 febe 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_4, ALIGN_CENTER_LEFT);
 80022d8:	2211      	movs	r2, #17
 80022da:	2104      	movs	r1, #4
 80022dc:	486d      	ldr	r0, [pc, #436]	; (8002494 <begin+0xd50>)
 80022de:	f005 fee3 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_4, 	C_BLACK);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2104      	movs	r1, #4
 80022e6:	486b      	ldr	r0, [pc, #428]	; (8002494 <begin+0xd50>)
 80022e8:	f005 fe5f 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_4, C_WHITE);
 80022ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f0:	2104      	movs	r1, #4
 80022f2:	4868      	ldr	r0, [pc, #416]	; (8002494 <begin+0xd50>)
 80022f4:	f005 fe2e 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_4, "Voltage");
 80022f8:	4a71      	ldr	r2, [pc, #452]	; (80024c0 <begin+0xd7c>)
 80022fa:	2104      	movs	r1, #4
 80022fc:	4865      	ldr	r0, [pc, #404]	; (8002494 <begin+0xd50>)
 80022fe:	f005 fe7f 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_4);
 8002302:	2104      	movs	r1, #4
 8002304:	4863      	ldr	r0, [pc, #396]	; (8002494 <begin+0xd50>)
 8002306:	f005 fdfd 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_2, &dummy_text_5, TXB_ID_5, 220,34,310,50);
 800230a:	2332      	movs	r3, #50	; 0x32
 800230c:	9302      	str	r3, [sp, #8]
 800230e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	2322      	movs	r3, #34	; 0x22
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	23dc      	movs	r3, #220	; 0xdc
 800231a:	2205      	movs	r2, #5
 800231c:	4969      	ldr	r1, [pc, #420]	; (80024c4 <begin+0xd80>)
 800231e:	485d      	ldr	r0, [pc, #372]	; (8002494 <begin+0xd50>)
 8002320:	f005 fd70 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_5, &FONT_10X16);
 8002324:	4a65      	ldr	r2, [pc, #404]	; (80024bc <begin+0xd78>)
 8002326:	2105      	movs	r1, #5
 8002328:	485a      	ldr	r0, [pc, #360]	; (8002494 <begin+0xd50>)
 800232a:	f005 fe93 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_5, ALIGN_CENTER_LEFT);
 800232e:	2211      	movs	r2, #17
 8002330:	2105      	movs	r1, #5
 8002332:	4858      	ldr	r0, [pc, #352]	; (8002494 <begin+0xd50>)
 8002334:	f005 feb8 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_5, 	C_BLACK);
 8002338:	2200      	movs	r2, #0
 800233a:	2105      	movs	r1, #5
 800233c:	4855      	ldr	r0, [pc, #340]	; (8002494 <begin+0xd50>)
 800233e:	f005 fe34 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_5, C_WHITE);
 8002342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002346:	2105      	movs	r1, #5
 8002348:	4852      	ldr	r0, [pc, #328]	; (8002494 <begin+0xd50>)
 800234a:	f005 fe03 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_5, "Ampere");
 800234e:	4a5e      	ldr	r2, [pc, #376]	; (80024c8 <begin+0xd84>)
 8002350:	2105      	movs	r1, #5
 8002352:	4850      	ldr	r0, [pc, #320]	; (8002494 <begin+0xd50>)
 8002354:	f005 fe54 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_5);
 8002358:	2105      	movs	r1, #5
 800235a:	484e      	ldr	r0, [pc, #312]	; (8002494 <begin+0xd50>)
 800235c:	f005 fdd2 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_2, &dummy_text_6, TXB_ID_6, 115,55,210,95);
 8002360:	235f      	movs	r3, #95	; 0x5f
 8002362:	9302      	str	r3, [sp, #8]
 8002364:	23d2      	movs	r3, #210	; 0xd2
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	2337      	movs	r3, #55	; 0x37
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2373      	movs	r3, #115	; 0x73
 800236e:	2206      	movs	r2, #6
 8002370:	4956      	ldr	r1, [pc, #344]	; (80024cc <begin+0xd88>)
 8002372:	4848      	ldr	r0, [pc, #288]	; (8002494 <begin+0xd50>)
 8002374:	f005 fd46 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_6, &FONT_12X20);
 8002378:	4a48      	ldr	r2, [pc, #288]	; (800249c <begin+0xd58>)
 800237a:	2106      	movs	r1, #6
 800237c:	4845      	ldr	r0, [pc, #276]	; (8002494 <begin+0xd50>)
 800237e:	f005 fe69 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_6, ALIGN_CENTER);
 8002382:	2212      	movs	r2, #18
 8002384:	2106      	movs	r1, #6
 8002386:	4843      	ldr	r0, [pc, #268]	; (8002494 <begin+0xd50>)
 8002388:	f005 fe8e 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_6, 	C_ORANGE);
 800238c:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 8002390:	2106      	movs	r1, #6
 8002392:	4840      	ldr	r0, [pc, #256]	; (8002494 <begin+0xd50>)
 8002394:	f005 fe09 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_6, C_BLACK);
 8002398:	2200      	movs	r2, #0
 800239a:	2106      	movs	r1, #6
 800239c:	483d      	ldr	r0, [pc, #244]	; (8002494 <begin+0xd50>)
 800239e:	f005 fdd9 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_6, "00.00V");
 80023a2:	4a4b      	ldr	r2, [pc, #300]	; (80024d0 <begin+0xd8c>)
 80023a4:	2106      	movs	r1, #6
 80023a6:	483b      	ldr	r0, [pc, #236]	; (8002494 <begin+0xd50>)
 80023a8:	f005 fe2a 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_6);
 80023ac:	2106      	movs	r1, #6
 80023ae:	4839      	ldr	r0, [pc, #228]	; (8002494 <begin+0xd50>)
 80023b0:	f005 fda8 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_2, &dummy_text_7, TXB_ID_7, 215,55,310,95);
 80023b4:	235f      	movs	r3, #95	; 0x5f
 80023b6:	9302      	str	r3, [sp, #8]
 80023b8:	f44f 739b 	mov.w	r3, #310	; 0x136
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	2337      	movs	r3, #55	; 0x37
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	23d7      	movs	r3, #215	; 0xd7
 80023c4:	2207      	movs	r2, #7
 80023c6:	4943      	ldr	r1, [pc, #268]	; (80024d4 <begin+0xd90>)
 80023c8:	4832      	ldr	r0, [pc, #200]	; (8002494 <begin+0xd50>)
 80023ca:	f005 fd1b 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_7, &FONT_12X20);
 80023ce:	4a33      	ldr	r2, [pc, #204]	; (800249c <begin+0xd58>)
 80023d0:	2107      	movs	r1, #7
 80023d2:	4830      	ldr	r0, [pc, #192]	; (8002494 <begin+0xd50>)
 80023d4:	f005 fe3e 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_7, ALIGN_CENTER);
 80023d8:	2212      	movs	r2, #18
 80023da:	2107      	movs	r1, #7
 80023dc:	482d      	ldr	r0, [pc, #180]	; (8002494 <begin+0xd50>)
 80023de:	f005 fe63 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_7, 	C_ORANGE);
 80023e2:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 80023e6:	2107      	movs	r1, #7
 80023e8:	482a      	ldr	r0, [pc, #168]	; (8002494 <begin+0xd50>)
 80023ea:	f005 fdde 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_7, C_BLACK);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2107      	movs	r1, #7
 80023f2:	4828      	ldr	r0, [pc, #160]	; (8002494 <begin+0xd50>)
 80023f4:	f005 fdae 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_7, "0.000A");
 80023f8:	4a37      	ldr	r2, [pc, #220]	; (80024d8 <begin+0xd94>)
 80023fa:	2107      	movs	r1, #7
 80023fc:	4825      	ldr	r0, [pc, #148]	; (8002494 <begin+0xd50>)
 80023fe:	f005 fdff 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_7);
 8002402:	2107      	movs	r1, #7
 8002404:	4823      	ldr	r0, [pc, #140]	; (8002494 <begin+0xd50>)
 8002406:	f005 fd7d 	bl	8007f04 <UG_TextboxShow>



		 	    UG_TextboxCreate(&window_page_2, &dummy_text_8, TXB_ID_8, 120,120,210,140);
 800240a:	238c      	movs	r3, #140	; 0x8c
 800240c:	9302      	str	r3, [sp, #8]
 800240e:	23d2      	movs	r3, #210	; 0xd2
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	2378      	movs	r3, #120	; 0x78
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2378      	movs	r3, #120	; 0x78
 8002418:	2208      	movs	r2, #8
 800241a:	4930      	ldr	r1, [pc, #192]	; (80024dc <begin+0xd98>)
 800241c:	481d      	ldr	r0, [pc, #116]	; (8002494 <begin+0xd50>)
 800241e:	f005 fcf1 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_8, &FONT_10X16);
 8002422:	4a26      	ldr	r2, [pc, #152]	; (80024bc <begin+0xd78>)
 8002424:	2108      	movs	r1, #8
 8002426:	481b      	ldr	r0, [pc, #108]	; (8002494 <begin+0xd50>)
 8002428:	f005 fe14 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_8, ALIGN_CENTER_LEFT);
 800242c:	2211      	movs	r2, #17
 800242e:	2108      	movs	r1, #8
 8002430:	4818      	ldr	r0, [pc, #96]	; (8002494 <begin+0xd50>)
 8002432:	f005 fe39 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_8, 	C_BLACK);
 8002436:	2200      	movs	r2, #0
 8002438:	2108      	movs	r1, #8
 800243a:	4816      	ldr	r0, [pc, #88]	; (8002494 <begin+0xd50>)
 800243c:	f005 fdb5 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_8, C_WHITE);
 8002440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002444:	2108      	movs	r1, #8
 8002446:	4813      	ldr	r0, [pc, #76]	; (8002494 <begin+0xd50>)
 8002448:	f005 fd84 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_8, "Watts");
 800244c:	4a24      	ldr	r2, [pc, #144]	; (80024e0 <begin+0xd9c>)
 800244e:	2108      	movs	r1, #8
 8002450:	4810      	ldr	r0, [pc, #64]	; (8002494 <begin+0xd50>)
 8002452:	f005 fdd5 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_8);
 8002456:	2108      	movs	r1, #8
 8002458:	480e      	ldr	r0, [pc, #56]	; (8002494 <begin+0xd50>)
 800245a:	f005 fd53 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_2, &dummy_text_9, TXB_ID_9, 220,120,310,140);
 800245e:	238c      	movs	r3, #140	; 0x8c
 8002460:	9302      	str	r3, [sp, #8]
 8002462:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	2378      	movs	r3, #120	; 0x78
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	23dc      	movs	r3, #220	; 0xdc
 800246e:	2209      	movs	r2, #9
 8002470:	491c      	ldr	r1, [pc, #112]	; (80024e4 <begin+0xda0>)
 8002472:	4808      	ldr	r0, [pc, #32]	; (8002494 <begin+0xd50>)
 8002474:	f005 fcc6 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_9, &FONT_10X16);
 8002478:	4a10      	ldr	r2, [pc, #64]	; (80024bc <begin+0xd78>)
 800247a:	2109      	movs	r1, #9
 800247c:	4805      	ldr	r0, [pc, #20]	; (8002494 <begin+0xd50>)
 800247e:	f005 fde9 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_9, ALIGN_CENTER_LEFT);
 8002482:	2211      	movs	r2, #17
 8002484:	2109      	movs	r1, #9
 8002486:	4803      	ldr	r0, [pc, #12]	; (8002494 <begin+0xd50>)
 8002488:	f005 fe0e 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_9, 	C_BLACK);
 800248c:	2200      	movs	r2, #0
 800248e:	2109      	movs	r1, #9
 8002490:	e02a      	b.n	80024e8 <begin+0xda4>
 8002492:	bf00      	nop
 8002494:	200003d0 	.word	0x200003d0
 8002498:	0800bac8 	.word	0x0800bac8
 800249c:	080124ec 	.word	0x080124ec
 80024a0:	20000684 	.word	0x20000684
 80024a4:	0800bad0 	.word	0x0800bad0
 80024a8:	20000698 	.word	0x20000698
 80024ac:	0800bae4 	.word	0x0800bae4
 80024b0:	200006ac 	.word	0x200006ac
 80024b4:	0800baec 	.word	0x0800baec
 80024b8:	200006c0 	.word	0x200006c0
 80024bc:	080124d8 	.word	0x080124d8
 80024c0:	0800baf4 	.word	0x0800baf4
 80024c4:	200006d4 	.word	0x200006d4
 80024c8:	0800bafc 	.word	0x0800bafc
 80024cc:	200006e8 	.word	0x200006e8
 80024d0:	0800ba4c 	.word	0x0800ba4c
 80024d4:	200006fc 	.word	0x200006fc
 80024d8:	0800ba3c 	.word	0x0800ba3c
 80024dc:	20000710 	.word	0x20000710
 80024e0:	0800bb04 	.word	0x0800bb04
 80024e4:	20000724 	.word	0x20000724
 80024e8:	48c1      	ldr	r0, [pc, #772]	; (80027f0 <begin+0x10ac>)
 80024ea:	f005 fd5e 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_9, C_WHITE);
 80024ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f2:	2109      	movs	r1, #9
 80024f4:	48be      	ldr	r0, [pc, #760]	; (80027f0 <begin+0x10ac>)
 80024f6:	f005 fd2d 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_9, "Temp");
 80024fa:	4abe      	ldr	r2, [pc, #760]	; (80027f4 <begin+0x10b0>)
 80024fc:	2109      	movs	r1, #9
 80024fe:	48bc      	ldr	r0, [pc, #752]	; (80027f0 <begin+0x10ac>)
 8002500:	f005 fd7e 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_9);
 8002504:	2109      	movs	r1, #9
 8002506:	48ba      	ldr	r0, [pc, #744]	; (80027f0 <begin+0x10ac>)
 8002508:	f005 fcfc 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_2, &dummy_text_10, TXB_ID_10, 115,145,210,185);
 800250c:	23b9      	movs	r3, #185	; 0xb9
 800250e:	9302      	str	r3, [sp, #8]
 8002510:	23d2      	movs	r3, #210	; 0xd2
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	2391      	movs	r3, #145	; 0x91
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2373      	movs	r3, #115	; 0x73
 800251a:	220a      	movs	r2, #10
 800251c:	49b6      	ldr	r1, [pc, #728]	; (80027f8 <begin+0x10b4>)
 800251e:	48b4      	ldr	r0, [pc, #720]	; (80027f0 <begin+0x10ac>)
 8002520:	f005 fc70 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_10, &FONT_12X20);
 8002524:	4ab5      	ldr	r2, [pc, #724]	; (80027fc <begin+0x10b8>)
 8002526:	210a      	movs	r1, #10
 8002528:	48b1      	ldr	r0, [pc, #708]	; (80027f0 <begin+0x10ac>)
 800252a:	f005 fd93 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_10, ALIGN_CENTER);
 800252e:	2212      	movs	r2, #18
 8002530:	210a      	movs	r1, #10
 8002532:	48af      	ldr	r0, [pc, #700]	; (80027f0 <begin+0x10ac>)
 8002534:	f005 fdb8 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_10, 	C_ORANGE);
 8002538:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 800253c:	210a      	movs	r1, #10
 800253e:	48ac      	ldr	r0, [pc, #688]	; (80027f0 <begin+0x10ac>)
 8002540:	f005 fd33 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_10, C_BLACK);
 8002544:	2200      	movs	r2, #0
 8002546:	210a      	movs	r1, #10
 8002548:	48a9      	ldr	r0, [pc, #676]	; (80027f0 <begin+0x10ac>)
 800254a:	f005 fd03 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_10, "000W");
 800254e:	4aac      	ldr	r2, [pc, #688]	; (8002800 <begin+0x10bc>)
 8002550:	210a      	movs	r1, #10
 8002552:	48a7      	ldr	r0, [pc, #668]	; (80027f0 <begin+0x10ac>)
 8002554:	f005 fd54 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_10);
 8002558:	210a      	movs	r1, #10
 800255a:	48a5      	ldr	r0, [pc, #660]	; (80027f0 <begin+0x10ac>)
 800255c:	f005 fcd2 	bl	8007f04 <UG_TextboxShow>

		 	    UG_TextboxCreate(&window_page_2, &dummy_text_11, TXB_ID_11, 215,145,310,185);
 8002560:	23b9      	movs	r3, #185	; 0xb9
 8002562:	9302      	str	r3, [sp, #8]
 8002564:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	2391      	movs	r3, #145	; 0x91
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	23d7      	movs	r3, #215	; 0xd7
 8002570:	220b      	movs	r2, #11
 8002572:	49a4      	ldr	r1, [pc, #656]	; (8002804 <begin+0x10c0>)
 8002574:	489e      	ldr	r0, [pc, #632]	; (80027f0 <begin+0x10ac>)
 8002576:	f005 fc45 	bl	8007e04 <UG_TextboxCreate>
		 	  	UG_TextboxSetFont(&window_page_2, TXB_ID_11, &FONT_12X20);
 800257a:	4aa0      	ldr	r2, [pc, #640]	; (80027fc <begin+0x10b8>)
 800257c:	210b      	movs	r1, #11
 800257e:	489c      	ldr	r0, [pc, #624]	; (80027f0 <begin+0x10ac>)
 8002580:	f005 fd68 	bl	8008054 <UG_TextboxSetFont>
		 	  	UG_TextboxSetAlignment(&window_page_2, TXB_ID_11, ALIGN_CENTER);
 8002584:	2212      	movs	r2, #18
 8002586:	210b      	movs	r1, #11
 8002588:	4899      	ldr	r0, [pc, #612]	; (80027f0 <begin+0x10ac>)
 800258a:	f005 fd8d 	bl	80080a8 <UG_TextboxSetAlignment>
		 	  	UG_TextboxSetBackColor(&window_page_2, TXB_ID_11, 	C_ORANGE);
 800258e:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 8002592:	210b      	movs	r1, #11
 8002594:	4896      	ldr	r0, [pc, #600]	; (80027f0 <begin+0x10ac>)
 8002596:	f005 fd08 	bl	8007faa <UG_TextboxSetBackColor>
		 	    UG_TextboxSetForeColor(&window_page_2, TXB_ID_11, C_BLACK);
 800259a:	2200      	movs	r2, #0
 800259c:	210b      	movs	r1, #11
 800259e:	4894      	ldr	r0, [pc, #592]	; (80027f0 <begin+0x10ac>)
 80025a0:	f005 fcd8 	bl	8007f54 <UG_TextboxSetForeColor>
		 	    UG_TextboxSetText(&window_page_2, TXB_ID_11, "50 C");
 80025a4:	4a98      	ldr	r2, [pc, #608]	; (8002808 <begin+0x10c4>)
 80025a6:	210b      	movs	r1, #11
 80025a8:	4891      	ldr	r0, [pc, #580]	; (80027f0 <begin+0x10ac>)
 80025aa:	f005 fd29 	bl	8008000 <UG_TextboxSetText>
		 	  	UG_TextboxShow(&window_page_2, TXB_ID_11);
 80025ae:	210b      	movs	r1, #11
 80025b0:	488f      	ldr	r0, [pc, #572]	; (80027f0 <begin+0x10ac>)
 80025b2:	f005 fca7 	bl	8007f04 <UG_TextboxShow>




	//Logo
		 		UG_WindowCreate(&LOGO, obj_buff_window_logo, MAX_OBJECTS_WIN_GRAPH, window_logo_callback);
 80025b6:	4b95      	ldr	r3, [pc, #596]	; (800280c <begin+0x10c8>)
 80025b8:	2214      	movs	r2, #20
 80025ba:	4995      	ldr	r1, [pc, #596]	; (8002810 <begin+0x10cc>)
 80025bc:	4895      	ldr	r0, [pc, #596]	; (8002814 <begin+0x10d0>)
 80025be:	f005 f86f 	bl	80076a0 <UG_WindowCreate>
				UG_WindowSetStyle(&LOGO, WND_STYLE_2D | WND_STYLE_HIDE_TITLE);
 80025c2:	2100      	movs	r1, #0
 80025c4:	4893      	ldr	r0, [pc, #588]	; (8002814 <begin+0x10d0>)
 80025c6:	f005 fa04 	bl	80079d2 <UG_WindowSetStyle>
				UG_WindowSetBackColor(&LOGO, C_BLACK);
 80025ca:	2100      	movs	r1, #0
 80025cc:	4891      	ldr	r0, [pc, #580]	; (8002814 <begin+0x10d0>)
 80025ce:	f005 f91b 	bl	8007808 <UG_WindowSetBackColor>

				UG_ImageCreate(&LOGO, &image_1, IMG_ID_1,105, 50, 245,74);
 80025d2:	234a      	movs	r3, #74	; 0x4a
 80025d4:	9302      	str	r3, [sp, #8]
 80025d6:	23f5      	movs	r3, #245	; 0xf5
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	2332      	movs	r3, #50	; 0x32
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2369      	movs	r3, #105	; 0x69
 80025e0:	2201      	movs	r2, #1
 80025e2:	498d      	ldr	r1, [pc, #564]	; (8002818 <begin+0x10d4>)
 80025e4:	488b      	ldr	r0, [pc, #556]	; (8002814 <begin+0x10d0>)
 80025e6:	f005 fe5d 	bl	80082a4 <UG_ImageCreate>
				UG_ImageSetBMP(&LOGO, IMG_ID_1, &logo_FNIRSI);
 80025ea:	4a8c      	ldr	r2, [pc, #560]	; (800281c <begin+0x10d8>)
 80025ec:	2101      	movs	r1, #1
 80025ee:	4889      	ldr	r0, [pc, #548]	; (8002814 <begin+0x10d0>)
 80025f0:	f005 feb6 	bl	8008360 <UG_ImageSetBMP>

				UG_TextboxCreate(&LOGO, &website_graphic, TXB_ID_0, 1, 116, 318, 154);
 80025f4:	239a      	movs	r3, #154	; 0x9a
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	2374      	movs	r3, #116	; 0x74
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2301      	movs	r3, #1
 8002604:	2200      	movs	r2, #0
 8002606:	4986      	ldr	r1, [pc, #536]	; (8002820 <begin+0x10dc>)
 8002608:	4882      	ldr	r0, [pc, #520]	; (8002814 <begin+0x10d0>)
 800260a:	f005 fbfb 	bl	8007e04 <UG_TextboxCreate>
				UG_TextboxSetFont(&LOGO, TXB_ID_0, &FONT_10X16);
 800260e:	4a85      	ldr	r2, [pc, #532]	; (8002824 <begin+0x10e0>)
 8002610:	2100      	movs	r1, #0
 8002612:	4880      	ldr	r0, [pc, #512]	; (8002814 <begin+0x10d0>)
 8002614:	f005 fd1e 	bl	8008054 <UG_TextboxSetFont>
				UG_TextboxSetAlignment(&LOGO, TXB_ID_0, ALIGN_CENTER);
 8002618:	2212      	movs	r2, #18
 800261a:	2100      	movs	r1, #0
 800261c:	487d      	ldr	r0, [pc, #500]	; (8002814 <begin+0x10d0>)
 800261e:	f005 fd43 	bl	80080a8 <UG_TextboxSetAlignment>
				UG_TextboxSetBackColor(&LOGO, TXB_ID_0, C_BLACK);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	487b      	ldr	r0, [pc, #492]	; (8002814 <begin+0x10d0>)
 8002628:	f005 fcbf 	bl	8007faa <UG_TextboxSetBackColor>
				UG_TextboxSetForeColor(&LOGO, TXB_ID_0, C_WHITE);
 800262c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002630:	2100      	movs	r1, #0
 8002632:	4878      	ldr	r0, [pc, #480]	; (8002814 <begin+0x10d0>)
 8002634:	f005 fc8e 	bl	8007f54 <UG_TextboxSetForeColor>
				UG_TextboxSetText(&LOGO, TXB_ID_0, "http://www.fnirsi.cn");
 8002638:	4a7b      	ldr	r2, [pc, #492]	; (8002828 <begin+0x10e4>)
 800263a:	2100      	movs	r1, #0
 800263c:	4875      	ldr	r0, [pc, #468]	; (8002814 <begin+0x10d0>)
 800263e:	f005 fcdf 	bl	8008000 <UG_TextboxSetText>
				UG_TextboxShow(&LOGO, TXB_ID_0);
 8002642:	2100      	movs	r1, #0
 8002644:	4873      	ldr	r0, [pc, #460]	; (8002814 <begin+0x10d0>)
 8002646:	f005 fc5d 	bl	8007f04 <UG_TextboxShow>

				UG_TextboxCreate(&LOGO, &WD_graphic, TXB_ID_1, 90, 85, 230, 115);
 800264a:	2373      	movs	r3, #115	; 0x73
 800264c:	9302      	str	r3, [sp, #8]
 800264e:	23e6      	movs	r3, #230	; 0xe6
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	2355      	movs	r3, #85	; 0x55
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	235a      	movs	r3, #90	; 0x5a
 8002658:	2201      	movs	r2, #1
 800265a:	4974      	ldr	r1, [pc, #464]	; (800282c <begin+0x10e8>)
 800265c:	486d      	ldr	r0, [pc, #436]	; (8002814 <begin+0x10d0>)
 800265e:	f005 fbd1 	bl	8007e04 <UG_TextboxCreate>
				UG_TextboxSetFont(&LOGO, TXB_ID_1, &FONT_12X20);
 8002662:	4a66      	ldr	r2, [pc, #408]	; (80027fc <begin+0x10b8>)
 8002664:	2101      	movs	r1, #1
 8002666:	486b      	ldr	r0, [pc, #428]	; (8002814 <begin+0x10d0>)
 8002668:	f005 fcf4 	bl	8008054 <UG_TextboxSetFont>
				UG_TextboxSetAlignment(&LOGO, TXB_ID_1, ALIGN_CENTER);
 800266c:	2212      	movs	r2, #18
 800266e:	2101      	movs	r1, #1
 8002670:	4868      	ldr	r0, [pc, #416]	; (8002814 <begin+0x10d0>)
 8002672:	f005 fd19 	bl	80080a8 <UG_TextboxSetAlignment>
				UG_TextboxSetBackColor(&LOGO, TXB_ID_1, C_YELLOW);
 8002676:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800267a:	2101      	movs	r1, #1
 800267c:	4865      	ldr	r0, [pc, #404]	; (8002814 <begin+0x10d0>)
 800267e:	f005 fc94 	bl	8007faa <UG_TextboxSetBackColor>
				UG_TextboxSetForeColor(&LOGO, TXB_ID_1, C_BLACK);
 8002682:	2200      	movs	r2, #0
 8002684:	2101      	movs	r1, #1
 8002686:	4863      	ldr	r0, [pc, #396]	; (8002814 <begin+0x10d0>)
 8002688:	f005 fc64 	bl	8007f54 <UG_TextboxSetForeColor>
				UG_TextboxSetText(&LOGO, TXB_ID_1, "WD-02");
 800268c:	4a68      	ldr	r2, [pc, #416]	; (8002830 <begin+0x10ec>)
 800268e:	2101      	movs	r1, #1
 8002690:	4860      	ldr	r0, [pc, #384]	; (8002814 <begin+0x10d0>)
 8002692:	f005 fcb5 	bl	8008000 <UG_TextboxSetText>
				UG_TextboxShow(&LOGO, TXB_ID_1);
 8002696:	2101      	movs	r1, #1
 8002698:	485e      	ldr	r0, [pc, #376]	; (8002814 <begin+0x10d0>)
 800269a:	f005 fc33 	bl	8007f04 <UG_TextboxShow>
///////////////////////page 3

					 //page 3
								UG_WindowCreate(&window_page_3, obj_buff_window_page_3, MAX_OBJECTS_WIN_PAGE_3, window_page_3_callback);
 800269e:	4b65      	ldr	r3, [pc, #404]	; (8002834 <begin+0x10f0>)
 80026a0:	221a      	movs	r2, #26
 80026a2:	4965      	ldr	r1, [pc, #404]	; (8002838 <begin+0x10f4>)
 80026a4:	4865      	ldr	r0, [pc, #404]	; (800283c <begin+0x10f8>)
 80026a6:	f004 fffb 	bl	80076a0 <UG_WindowCreate>
								UG_WindowSetStyle(&window_page_3, WND_STYLE_2D | WND_STYLE_HIDE_TITLE);
 80026aa:	2100      	movs	r1, #0
 80026ac:	4863      	ldr	r0, [pc, #396]	; (800283c <begin+0x10f8>)
 80026ae:	f005 f990 	bl	80079d2 <UG_WindowSetStyle>
								UG_WindowSetBackColor(&window_page_3, C_BLACK);
 80026b2:	2100      	movs	r1, #0
 80026b4:	4861      	ldr	r0, [pc, #388]	; (800283c <begin+0x10f8>)
 80026b6:	f005 f8a7 	bl	8007808 <UG_WindowSetBackColor>
								/////////////power mode //
								UG_TextboxCreate(&window_page_3, &textbox_pe, TXB_ID_0, 5, 5, 65, 27);
 80026ba:	231b      	movs	r3, #27
 80026bc:	9302      	str	r3, [sp, #8]
 80026be:	2341      	movs	r3, #65	; 0x41
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	2305      	movs	r3, #5
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	2305      	movs	r3, #5
 80026c8:	2200      	movs	r2, #0
 80026ca:	495d      	ldr	r1, [pc, #372]	; (8002840 <begin+0x10fc>)
 80026cc:	485b      	ldr	r0, [pc, #364]	; (800283c <begin+0x10f8>)
 80026ce:	f005 fb99 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_0, &FONT_10X16);
 80026d2:	4a54      	ldr	r2, [pc, #336]	; (8002824 <begin+0x10e0>)
 80026d4:	2100      	movs	r1, #0
 80026d6:	4859      	ldr	r0, [pc, #356]	; (800283c <begin+0x10f8>)
 80026d8:	f005 fcbc 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_0, ALIGN_CENTER);
 80026dc:	2212      	movs	r2, #18
 80026de:	2100      	movs	r1, #0
 80026e0:	4856      	ldr	r0, [pc, #344]	; (800283c <begin+0x10f8>)
 80026e2:	f005 fce1 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_0, C_YELLOW);
 80026e6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80026ea:	2100      	movs	r1, #0
 80026ec:	4853      	ldr	r0, [pc, #332]	; (800283c <begin+0x10f8>)
 80026ee:	f005 fc5c 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_0, C_BLACK);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2100      	movs	r1, #0
 80026f6:	4851      	ldr	r0, [pc, #324]	; (800283c <begin+0x10f8>)
 80026f8:	f005 fc2c 	bl	8007f54 <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_0, "PE2.0");
 80026fc:	4a51      	ldr	r2, [pc, #324]	; (8002844 <begin+0x1100>)
 80026fe:	2100      	movs	r1, #0
 8002700:	484e      	ldr	r0, [pc, #312]	; (800283c <begin+0x10f8>)
 8002702:	f005 fc7d 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_0);
 8002706:	2100      	movs	r1, #0
 8002708:	484c      	ldr	r0, [pc, #304]	; (800283c <begin+0x10f8>)
 800270a:	f005 fbfb 	bl	8007f04 <UG_TextboxShow>


				            ///
								UG_TextboxCreate(&window_page_3, &textbox_temp, TXB_ID_1, 180, 5, 225, 27);
 800270e:	231b      	movs	r3, #27
 8002710:	9302      	str	r3, [sp, #8]
 8002712:	23e1      	movs	r3, #225	; 0xe1
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	2305      	movs	r3, #5
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	23b4      	movs	r3, #180	; 0xb4
 800271c:	2201      	movs	r2, #1
 800271e:	494a      	ldr	r1, [pc, #296]	; (8002848 <begin+0x1104>)
 8002720:	4846      	ldr	r0, [pc, #280]	; (800283c <begin+0x10f8>)
 8002722:	f005 fb6f 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_1, &FONT_10X16);
 8002726:	4a3f      	ldr	r2, [pc, #252]	; (8002824 <begin+0x10e0>)
 8002728:	2101      	movs	r1, #1
 800272a:	4844      	ldr	r0, [pc, #272]	; (800283c <begin+0x10f8>)
 800272c:	f005 fc92 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_1, ALIGN_CENTER);
 8002730:	2212      	movs	r2, #18
 8002732:	2101      	movs	r1, #1
 8002734:	4841      	ldr	r0, [pc, #260]	; (800283c <begin+0x10f8>)
 8002736:	f005 fcb7 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_1, C_YELLOW);
 800273a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800273e:	2101      	movs	r1, #1
 8002740:	483e      	ldr	r0, [pc, #248]	; (800283c <begin+0x10f8>)
 8002742:	f005 fc32 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_1, C_BLACK);
 8002746:	2200      	movs	r2, #0
 8002748:	2101      	movs	r1, #1
 800274a:	483c      	ldr	r0, [pc, #240]	; (800283c <begin+0x10f8>)
 800274c:	f005 fc02 	bl	8007f54 <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_1, "TEMP");
 8002750:	4a3e      	ldr	r2, [pc, #248]	; (800284c <begin+0x1108>)
 8002752:	2101      	movs	r1, #1
 8002754:	4839      	ldr	r0, [pc, #228]	; (800283c <begin+0x10f8>)
 8002756:	f005 fc53 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_1);
 800275a:	2101      	movs	r1, #1
 800275c:	4837      	ldr	r0, [pc, #220]	; (800283c <begin+0x10f8>)
 800275e:	f005 fbd1 	bl	8007f04 <UG_TextboxShow>

								// temp value
								UG_TextboxCreate(&window_page_3, &textbox_temp_value, TXB_ID_2, 230, 5, 290, 27);
 8002762:	231b      	movs	r3, #27
 8002764:	9302      	str	r3, [sp, #8]
 8002766:	f44f 7391 	mov.w	r3, #290	; 0x122
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	2305      	movs	r3, #5
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	23e6      	movs	r3, #230	; 0xe6
 8002772:	2202      	movs	r2, #2
 8002774:	4936      	ldr	r1, [pc, #216]	; (8002850 <begin+0x110c>)
 8002776:	4831      	ldr	r0, [pc, #196]	; (800283c <begin+0x10f8>)
 8002778:	f005 fb44 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_2, &FONT_10X16);
 800277c:	4a29      	ldr	r2, [pc, #164]	; (8002824 <begin+0x10e0>)
 800277e:	2102      	movs	r1, #2
 8002780:	482e      	ldr	r0, [pc, #184]	; (800283c <begin+0x10f8>)
 8002782:	f005 fc67 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_2, ALIGN_CENTER);
 8002786:	2212      	movs	r2, #18
 8002788:	2102      	movs	r1, #2
 800278a:	482c      	ldr	r0, [pc, #176]	; (800283c <begin+0x10f8>)
 800278c:	f005 fc8c 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_2, C_BLACK);
 8002790:	2200      	movs	r2, #0
 8002792:	2102      	movs	r1, #2
 8002794:	4829      	ldr	r0, [pc, #164]	; (800283c <begin+0x10f8>)
 8002796:	f005 fc08 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_2, C_YELLOW);
 800279a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800279e:	2102      	movs	r1, #2
 80027a0:	4826      	ldr	r0, [pc, #152]	; (800283c <begin+0x10f8>)
 80027a2:	f005 fbd7 	bl	8007f54 <UG_TextboxSetForeColor>

								UG_TextboxShow(&window_page_3, TXB_ID_2);
 80027a6:	2102      	movs	r1, #2
 80027a8:	4824      	ldr	r0, [pc, #144]	; (800283c <begin+0x10f8>)
 80027aa:	f005 fbab 	bl	8007f04 <UG_TextboxShow>

								// temp symbol
								UG_TextboxCreate(&window_page_3, &textbox_temp_symbol, TXB_ID_3, 295, 5, 310, 27);
 80027ae:	231b      	movs	r3, #27
 80027b0:	9302      	str	r3, [sp, #8]
 80027b2:	f44f 739b 	mov.w	r3, #310	; 0x136
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	2305      	movs	r3, #5
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f240 1327 	movw	r3, #295	; 0x127
 80027c0:	2203      	movs	r2, #3
 80027c2:	4924      	ldr	r1, [pc, #144]	; (8002854 <begin+0x1110>)
 80027c4:	481d      	ldr	r0, [pc, #116]	; (800283c <begin+0x10f8>)
 80027c6:	f005 fb1d 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_3, &FONT_10X16);
 80027ca:	4a16      	ldr	r2, [pc, #88]	; (8002824 <begin+0x10e0>)
 80027cc:	2103      	movs	r1, #3
 80027ce:	481b      	ldr	r0, [pc, #108]	; (800283c <begin+0x10f8>)
 80027d0:	f005 fc40 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_3, ALIGN_CENTER);
 80027d4:	2212      	movs	r2, #18
 80027d6:	2103      	movs	r1, #3
 80027d8:	4818      	ldr	r0, [pc, #96]	; (800283c <begin+0x10f8>)
 80027da:	f005 fc65 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_3, C_BLACK);
 80027de:	2200      	movs	r2, #0
 80027e0:	2103      	movs	r1, #3
 80027e2:	4816      	ldr	r0, [pc, #88]	; (800283c <begin+0x10f8>)
 80027e4:	f005 fbe1 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_3, C_YELLOW);
 80027e8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80027ec:	2103      	movs	r1, #3
 80027ee:	e033      	b.n	8002858 <begin+0x1114>
 80027f0:	200003d0 	.word	0x200003d0
 80027f4:	0800bb0c 	.word	0x0800bb0c
 80027f8:	20000738 	.word	0x20000738
 80027fc:	080124ec 	.word	0x080124ec
 8002800:	0800bb14 	.word	0x0800bb14
 8002804:	2000074c 	.word	0x2000074c
 8002808:	0800bb1c 	.word	0x0800bb1c
 800280c:	0800306d 	.word	0x0800306d
 8002810:	20000df4 	.word	0x20000df4
 8002814:	20000dc0 	.word	0x20000dc0
 8002818:	20001074 	.word	0x20001074
 800281c:	0800bb9c 	.word	0x0800bb9c
 8002820:	200003bc 	.word	0x200003bc
 8002824:	080124d8 	.word	0x080124d8
 8002828:	0800bb24 	.word	0x0800bb24
 800282c:	200003a8 	.word	0x200003a8
 8002830:	0800bb3c 	.word	0x0800bb3c
 8002834:	08003411 	.word	0x08003411
 8002838:	200010b0 	.word	0x200010b0
 800283c:	2000107c 	.word	0x2000107c
 8002840:	200013f0 	.word	0x200013f0
 8002844:	0800bb44 	.word	0x0800bb44
 8002848:	20001404 	.word	0x20001404
 800284c:	0800bb4c 	.word	0x0800bb4c
 8002850:	20001418 	.word	0x20001418
 8002854:	2000142c 	.word	0x2000142c
 8002858:	48c2      	ldr	r0, [pc, #776]	; (8002b64 <begin+0x1420>)
 800285a:	f005 fb7b 	bl	8007f54 <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_3, "C");
 800285e:	4ac2      	ldr	r2, [pc, #776]	; (8002b68 <begin+0x1424>)
 8002860:	2103      	movs	r1, #3
 8002862:	48c0      	ldr	r0, [pc, #768]	; (8002b64 <begin+0x1420>)
 8002864:	f005 fbcc 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_3);
 8002868:	2103      	movs	r1, #3
 800286a:	48be      	ldr	r0, [pc, #760]	; (8002b64 <begin+0x1420>)
 800286c:	f005 fb4a 	bl	8007f04 <UG_TextboxShow>

								//usbc symbol
								UG_TextboxCreate(&window_page_3, &textbox_usbc, TXB_ID_4, 5, 32, 50, 59);
 8002870:	233b      	movs	r3, #59	; 0x3b
 8002872:	9302      	str	r3, [sp, #8]
 8002874:	2332      	movs	r3, #50	; 0x32
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	2320      	movs	r3, #32
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2305      	movs	r3, #5
 800287e:	2204      	movs	r2, #4
 8002880:	49ba      	ldr	r1, [pc, #744]	; (8002b6c <begin+0x1428>)
 8002882:	48b8      	ldr	r0, [pc, #736]	; (8002b64 <begin+0x1420>)
 8002884:	f005 fabe 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_4, &FONT_10X16);
 8002888:	4ab9      	ldr	r2, [pc, #740]	; (8002b70 <begin+0x142c>)
 800288a:	2104      	movs	r1, #4
 800288c:	48b5      	ldr	r0, [pc, #724]	; (8002b64 <begin+0x1420>)
 800288e:	f005 fbe1 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_4, ALIGN_CENTER);
 8002892:	2212      	movs	r2, #18
 8002894:	2104      	movs	r1, #4
 8002896:	48b3      	ldr	r0, [pc, #716]	; (8002b64 <begin+0x1420>)
 8002898:	f005 fc06 	bl	80080a8 <UG_TextboxSetAlignment>

								UG_TextboxSetForeColor(&window_page_3, TXB_ID_4, C_BLACK);
 800289c:	2200      	movs	r2, #0
 800289e:	2104      	movs	r1, #4
 80028a0:	48b0      	ldr	r0, [pc, #704]	; (8002b64 <begin+0x1420>)
 80028a2:	f005 fb57 	bl	8007f54 <UG_TextboxSetForeColor>

								UG_TextboxSetText(&window_page_3, TXB_ID_4, "USBC");
 80028a6:	4ab3      	ldr	r2, [pc, #716]	; (8002b74 <begin+0x1430>)
 80028a8:	2104      	movs	r1, #4
 80028aa:	48ae      	ldr	r0, [pc, #696]	; (8002b64 <begin+0x1420>)
 80028ac:	f005 fba8 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_4);
 80028b0:	2104      	movs	r1, #4
 80028b2:	48ac      	ldr	r0, [pc, #688]	; (8002b64 <begin+0x1420>)
 80028b4:	f005 fb26 	bl	8007f04 <UG_TextboxShow>

								// usbc timer
								UG_TextboxCreate(&window_page_3, &textbox_usbc_timer, TXB_ID_25, 55, 32, 145, 59);
 80028b8:	233b      	movs	r3, #59	; 0x3b
 80028ba:	9302      	str	r3, [sp, #8]
 80028bc:	2391      	movs	r3, #145	; 0x91
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	2320      	movs	r3, #32
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2337      	movs	r3, #55	; 0x37
 80028c6:	2219      	movs	r2, #25
 80028c8:	49ab      	ldr	r1, [pc, #684]	; (8002b78 <begin+0x1434>)
 80028ca:	48a6      	ldr	r0, [pc, #664]	; (8002b64 <begin+0x1420>)
 80028cc:	f005 fa9a 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_25, &FONT_10X16);
 80028d0:	4aa7      	ldr	r2, [pc, #668]	; (8002b70 <begin+0x142c>)
 80028d2:	2119      	movs	r1, #25
 80028d4:	48a3      	ldr	r0, [pc, #652]	; (8002b64 <begin+0x1420>)
 80028d6:	f005 fbbd 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_25, ALIGN_CENTER);
 80028da:	2212      	movs	r2, #18
 80028dc:	2119      	movs	r1, #25
 80028de:	48a1      	ldr	r0, [pc, #644]	; (8002b64 <begin+0x1420>)
 80028e0:	f005 fbe2 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_25, C_LIGHT_SLATE_GRAY);
 80028e4:	f247 4232 	movw	r2, #29746	; 0x7432
 80028e8:	2119      	movs	r1, #25
 80028ea:	489e      	ldr	r0, [pc, #632]	; (8002b64 <begin+0x1420>)
 80028ec:	f005 fb5d 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_25, C_WHITE_SMOKE);
 80028f0:	f64e 729d 	movw	r2, #61341	; 0xef9d
 80028f4:	2119      	movs	r1, #25
 80028f6:	489b      	ldr	r0, [pc, #620]	; (8002b64 <begin+0x1420>)
 80028f8:	f005 fb2c 	bl	8007f54 <UG_TextboxSetForeColor>


								UG_TextboxShow(&window_page_3, TXB_ID_25);
 80028fc:	2119      	movs	r1, #25
 80028fe:	4899      	ldr	r0, [pc, #612]	; (8002b64 <begin+0x1420>)
 8002900:	f005 fb00 	bl	8007f04 <UG_TextboxShow>


								//usba symbol
								UG_TextboxCreate(&window_page_3, &textbox_usba, TXB_ID_5, 175, 32, 215, 59);
 8002904:	233b      	movs	r3, #59	; 0x3b
 8002906:	9302      	str	r3, [sp, #8]
 8002908:	23d7      	movs	r3, #215	; 0xd7
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	2320      	movs	r3, #32
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	23af      	movs	r3, #175	; 0xaf
 8002912:	2205      	movs	r2, #5
 8002914:	4999      	ldr	r1, [pc, #612]	; (8002b7c <begin+0x1438>)
 8002916:	4893      	ldr	r0, [pc, #588]	; (8002b64 <begin+0x1420>)
 8002918:	f005 fa74 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_5, &FONT_10X16);
 800291c:	4a94      	ldr	r2, [pc, #592]	; (8002b70 <begin+0x142c>)
 800291e:	2105      	movs	r1, #5
 8002920:	4890      	ldr	r0, [pc, #576]	; (8002b64 <begin+0x1420>)
 8002922:	f005 fb97 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_5, ALIGN_CENTER);
 8002926:	2212      	movs	r2, #18
 8002928:	2105      	movs	r1, #5
 800292a:	488e      	ldr	r0, [pc, #568]	; (8002b64 <begin+0x1420>)
 800292c:	f005 fbbc 	bl	80080a8 <UG_TextboxSetAlignment>


								UG_TextboxSetForeColor(&window_page_3, TXB_ID_5, C_BLACK);
 8002930:	2200      	movs	r2, #0
 8002932:	2105      	movs	r1, #5
 8002934:	488b      	ldr	r0, [pc, #556]	; (8002b64 <begin+0x1420>)
 8002936:	f005 fb0d 	bl	8007f54 <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_5, "USBA");
 800293a:	4a91      	ldr	r2, [pc, #580]	; (8002b80 <begin+0x143c>)
 800293c:	2105      	movs	r1, #5
 800293e:	4889      	ldr	r0, [pc, #548]	; (8002b64 <begin+0x1420>)
 8002940:	f005 fb5e 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_5);
 8002944:	2105      	movs	r1, #5
 8002946:	4887      	ldr	r0, [pc, #540]	; (8002b64 <begin+0x1420>)
 8002948:	f005 fadc 	bl	8007f04 <UG_TextboxShow>

								// usba timer
								UG_TextboxCreate(&window_page_3, &textbox_usba_timer, TXB_ID_26, 220, 32, 310, 59);
 800294c:	233b      	movs	r3, #59	; 0x3b
 800294e:	9302      	str	r3, [sp, #8]
 8002950:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	2320      	movs	r3, #32
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	23dc      	movs	r3, #220	; 0xdc
 800295c:	221a      	movs	r2, #26
 800295e:	4989      	ldr	r1, [pc, #548]	; (8002b84 <begin+0x1440>)
 8002960:	4880      	ldr	r0, [pc, #512]	; (8002b64 <begin+0x1420>)
 8002962:	f005 fa4f 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_26, &FONT_10X16);
 8002966:	4a82      	ldr	r2, [pc, #520]	; (8002b70 <begin+0x142c>)
 8002968:	211a      	movs	r1, #26
 800296a:	487e      	ldr	r0, [pc, #504]	; (8002b64 <begin+0x1420>)
 800296c:	f005 fb72 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_26, ALIGN_CENTER);
 8002970:	2212      	movs	r2, #18
 8002972:	211a      	movs	r1, #26
 8002974:	487b      	ldr	r0, [pc, #492]	; (8002b64 <begin+0x1420>)
 8002976:	f005 fb97 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_26, C_LIGHT_SLATE_GRAY);
 800297a:	f247 4232 	movw	r2, #29746	; 0x7432
 800297e:	211a      	movs	r1, #26
 8002980:	4878      	ldr	r0, [pc, #480]	; (8002b64 <begin+0x1420>)
 8002982:	f005 fb12 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_26, C_WHITE_SMOKE);
 8002986:	f64e 729d 	movw	r2, #61341	; 0xef9d
 800298a:	211a      	movs	r1, #26
 800298c:	4875      	ldr	r0, [pc, #468]	; (8002b64 <begin+0x1420>)
 800298e:	f005 fae1 	bl	8007f54 <UG_TextboxSetForeColor>


								UG_TextboxShow(&window_page_3, TXB_ID_26);
 8002992:	211a      	movs	r1, #26
 8002994:	4873      	ldr	r0, [pc, #460]	; (8002b64 <begin+0x1420>)
 8002996:	f005 fab5 	bl	8007f04 <UG_TextboxShow>




								//usbc voltage value
								UG_TextboxCreate(&window_page_3, &textbox_page3_usbc_voltage_value, TXB_ID_6, 5, 64, 130, 104);
 800299a:	2368      	movs	r3, #104	; 0x68
 800299c:	9302      	str	r3, [sp, #8]
 800299e:	2382      	movs	r3, #130	; 0x82
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	2340      	movs	r3, #64	; 0x40
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2305      	movs	r3, #5
 80029a8:	2206      	movs	r2, #6
 80029aa:	4977      	ldr	r1, [pc, #476]	; (8002b88 <begin+0x1444>)
 80029ac:	486d      	ldr	r0, [pc, #436]	; (8002b64 <begin+0x1420>)
 80029ae:	f005 fa29 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_6, &FONT_24X40);
 80029b2:	4a76      	ldr	r2, [pc, #472]	; (8002b8c <begin+0x1448>)
 80029b4:	2106      	movs	r1, #6
 80029b6:	486b      	ldr	r0, [pc, #428]	; (8002b64 <begin+0x1420>)
 80029b8:	f005 fb4c 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_6, ALIGN_CENTER);
 80029bc:	2212      	movs	r2, #18
 80029be:	2106      	movs	r1, #6
 80029c0:	4868      	ldr	r0, [pc, #416]	; (8002b64 <begin+0x1420>)
 80029c2:	f005 fb71 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_6, C_YELLOW_GREEN);
 80029c6:	f249 6246 	movw	r2, #38470	; 0x9646
 80029ca:	2106      	movs	r1, #6
 80029cc:	4865      	ldr	r0, [pc, #404]	; (8002b64 <begin+0x1420>)
 80029ce:	f005 faec 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_6, C_WHITE);
 80029d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029d6:	2106      	movs	r1, #6
 80029d8:	4862      	ldr	r0, [pc, #392]	; (8002b64 <begin+0x1420>)
 80029da:	f005 fabb 	bl	8007f54 <UG_TextboxSetForeColor>

								UG_TextboxShow(&window_page_3, TXB_ID_6);
 80029de:	2106      	movs	r1, #6
 80029e0:	4860      	ldr	r0, [pc, #384]	; (8002b64 <begin+0x1420>)
 80029e2:	f005 fa8f 	bl	8007f04 <UG_TextboxShow>

								//usbc voltage symbol
								UG_TextboxCreate(&window_page_3, &textbox_page3_usbc_voltage_symbol, TXB_ID_7, 130, 64, 145, 104);
 80029e6:	2368      	movs	r3, #104	; 0x68
 80029e8:	9302      	str	r3, [sp, #8]
 80029ea:	2391      	movs	r3, #145	; 0x91
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	2340      	movs	r3, #64	; 0x40
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2382      	movs	r3, #130	; 0x82
 80029f4:	2207      	movs	r2, #7
 80029f6:	4966      	ldr	r1, [pc, #408]	; (8002b90 <begin+0x144c>)
 80029f8:	485a      	ldr	r0, [pc, #360]	; (8002b64 <begin+0x1420>)
 80029fa:	f005 fa03 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_7, &FONT_10X16);
 80029fe:	4a5c      	ldr	r2, [pc, #368]	; (8002b70 <begin+0x142c>)
 8002a00:	2107      	movs	r1, #7
 8002a02:	4858      	ldr	r0, [pc, #352]	; (8002b64 <begin+0x1420>)
 8002a04:	f005 fb26 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_7, ALIGN_V_BOTTOM);
 8002a08:	2220      	movs	r2, #32
 8002a0a:	2107      	movs	r1, #7
 8002a0c:	4855      	ldr	r0, [pc, #340]	; (8002b64 <begin+0x1420>)
 8002a0e:	f005 fb4b 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_7, C_YELLOW_GREEN);
 8002a12:	f249 6246 	movw	r2, #38470	; 0x9646
 8002a16:	2107      	movs	r1, #7
 8002a18:	4852      	ldr	r0, [pc, #328]	; (8002b64 <begin+0x1420>)
 8002a1a:	f005 fac6 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_7, C_WHITE);
 8002a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a22:	2107      	movs	r1, #7
 8002a24:	484f      	ldr	r0, [pc, #316]	; (8002b64 <begin+0x1420>)
 8002a26:	f005 fa95 	bl	8007f54 <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_7, "V");
 8002a2a:	4a5a      	ldr	r2, [pc, #360]	; (8002b94 <begin+0x1450>)
 8002a2c:	2107      	movs	r1, #7
 8002a2e:	484d      	ldr	r0, [pc, #308]	; (8002b64 <begin+0x1420>)
 8002a30:	f005 fae6 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_7);
 8002a34:	2107      	movs	r1, #7
 8002a36:	484b      	ldr	r0, [pc, #300]	; (8002b64 <begin+0x1420>)
 8002a38:	f005 fa64 	bl	8007f04 <UG_TextboxShow>


								//usba voltage value
								UG_TextboxCreate(&window_page_3, &textbox_page3_usba_voltage_value, TXB_ID_8, 175, 64, 300, 104);
 8002a3c:	2368      	movs	r3, #104	; 0x68
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	2340      	movs	r3, #64	; 0x40
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	23af      	movs	r3, #175	; 0xaf
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	4952      	ldr	r1, [pc, #328]	; (8002b98 <begin+0x1454>)
 8002a50:	4844      	ldr	r0, [pc, #272]	; (8002b64 <begin+0x1420>)
 8002a52:	f005 f9d7 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_8, &FONT_24X40);
 8002a56:	4a4d      	ldr	r2, [pc, #308]	; (8002b8c <begin+0x1448>)
 8002a58:	2108      	movs	r1, #8
 8002a5a:	4842      	ldr	r0, [pc, #264]	; (8002b64 <begin+0x1420>)
 8002a5c:	f005 fafa 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_8, ALIGN_CENTER);
 8002a60:	2212      	movs	r2, #18
 8002a62:	2108      	movs	r1, #8
 8002a64:	483f      	ldr	r0, [pc, #252]	; (8002b64 <begin+0x1420>)
 8002a66:	f005 fb1f 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_8, C_YELLOW_GREEN);
 8002a6a:	f249 6246 	movw	r2, #38470	; 0x9646
 8002a6e:	2108      	movs	r1, #8
 8002a70:	483c      	ldr	r0, [pc, #240]	; (8002b64 <begin+0x1420>)
 8002a72:	f005 fa9a 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_8, C_WHITE);
 8002a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a7a:	2108      	movs	r1, #8
 8002a7c:	4839      	ldr	r0, [pc, #228]	; (8002b64 <begin+0x1420>)
 8002a7e:	f005 fa69 	bl	8007f54 <UG_TextboxSetForeColor>



								UG_TextboxShow(&window_page_3, TXB_ID_8);
 8002a82:	2108      	movs	r1, #8
 8002a84:	4837      	ldr	r0, [pc, #220]	; (8002b64 <begin+0x1420>)
 8002a86:	f005 fa3d 	bl	8007f04 <UG_TextboxShow>

								//usba voltage symbol
								UG_TextboxCreate(&window_page_3, &textbox_page3_usba_voltage_symbol, TXB_ID_9, 300, 64, 310, 104);
 8002a8a:	2368      	movs	r3, #104	; 0x68
 8002a8c:	9302      	str	r3, [sp, #8]
 8002a8e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	2340      	movs	r3, #64	; 0x40
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002a9c:	2209      	movs	r2, #9
 8002a9e:	493f      	ldr	r1, [pc, #252]	; (8002b9c <begin+0x1458>)
 8002aa0:	4830      	ldr	r0, [pc, #192]	; (8002b64 <begin+0x1420>)
 8002aa2:	f005 f9af 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_9, &FONT_10X16);
 8002aa6:	4a32      	ldr	r2, [pc, #200]	; (8002b70 <begin+0x142c>)
 8002aa8:	2109      	movs	r1, #9
 8002aaa:	482e      	ldr	r0, [pc, #184]	; (8002b64 <begin+0x1420>)
 8002aac:	f005 fad2 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_9, ALIGN_V_BOTTOM);
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	2109      	movs	r1, #9
 8002ab4:	482b      	ldr	r0, [pc, #172]	; (8002b64 <begin+0x1420>)
 8002ab6:	f005 faf7 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_9, C_YELLOW_GREEN);
 8002aba:	f249 6246 	movw	r2, #38470	; 0x9646
 8002abe:	2109      	movs	r1, #9
 8002ac0:	4828      	ldr	r0, [pc, #160]	; (8002b64 <begin+0x1420>)
 8002ac2:	f005 fa72 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_9, C_WHITE);
 8002ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aca:	2109      	movs	r1, #9
 8002acc:	4825      	ldr	r0, [pc, #148]	; (8002b64 <begin+0x1420>)
 8002ace:	f005 fa41 	bl	8007f54 <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_9, "V");
 8002ad2:	4a30      	ldr	r2, [pc, #192]	; (8002b94 <begin+0x1450>)
 8002ad4:	2109      	movs	r1, #9
 8002ad6:	4823      	ldr	r0, [pc, #140]	; (8002b64 <begin+0x1420>)
 8002ad8:	f005 fa92 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_9);
 8002adc:	2109      	movs	r1, #9
 8002ade:	4821      	ldr	r0, [pc, #132]	; (8002b64 <begin+0x1420>)
 8002ae0:	f005 fa10 	bl	8007f04 <UG_TextboxShow>


								//usbc current value
								UG_TextboxCreate(&window_page_3, &textbox_page3_usbc_current_value, TXB_ID_10, 5, 109, 130, 149);
 8002ae4:	2395      	movs	r3, #149	; 0x95
 8002ae6:	9302      	str	r3, [sp, #8]
 8002ae8:	2382      	movs	r3, #130	; 0x82
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	236d      	movs	r3, #109	; 0x6d
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	2305      	movs	r3, #5
 8002af2:	220a      	movs	r2, #10
 8002af4:	492a      	ldr	r1, [pc, #168]	; (8002ba0 <begin+0x145c>)
 8002af6:	481b      	ldr	r0, [pc, #108]	; (8002b64 <begin+0x1420>)
 8002af8:	f005 f984 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_10, &FONT_24X40);
 8002afc:	4a23      	ldr	r2, [pc, #140]	; (8002b8c <begin+0x1448>)
 8002afe:	210a      	movs	r1, #10
 8002b00:	4818      	ldr	r0, [pc, #96]	; (8002b64 <begin+0x1420>)
 8002b02:	f005 faa7 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_10, ALIGN_CENTER);
 8002b06:	2212      	movs	r2, #18
 8002b08:	210a      	movs	r1, #10
 8002b0a:	4816      	ldr	r0, [pc, #88]	; (8002b64 <begin+0x1420>)
 8002b0c:	f005 facc 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_10, C_BROWN);
 8002b10:	f24a 1245 	movw	r2, #41285	; 0xa145
 8002b14:	210a      	movs	r1, #10
 8002b16:	4813      	ldr	r0, [pc, #76]	; (8002b64 <begin+0x1420>)
 8002b18:	f005 fa47 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_10, C_WHITE);
 8002b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b20:	210a      	movs	r1, #10
 8002b22:	4810      	ldr	r0, [pc, #64]	; (8002b64 <begin+0x1420>)
 8002b24:	f005 fa16 	bl	8007f54 <UG_TextboxSetForeColor>


								UG_TextboxShow(&window_page_3, TXB_ID_10);
 8002b28:	210a      	movs	r1, #10
 8002b2a:	480e      	ldr	r0, [pc, #56]	; (8002b64 <begin+0x1420>)
 8002b2c:	f005 f9ea 	bl	8007f04 <UG_TextboxShow>

								//usbc current symbol
								UG_TextboxCreate(&window_page_3, &textbox_page3_usbc_current_symbol, TXB_ID_11, 130, 109, 145, 149);
 8002b30:	2395      	movs	r3, #149	; 0x95
 8002b32:	9302      	str	r3, [sp, #8]
 8002b34:	2391      	movs	r3, #145	; 0x91
 8002b36:	9301      	str	r3, [sp, #4]
 8002b38:	236d      	movs	r3, #109	; 0x6d
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	2382      	movs	r3, #130	; 0x82
 8002b3e:	220b      	movs	r2, #11
 8002b40:	4918      	ldr	r1, [pc, #96]	; (8002ba4 <begin+0x1460>)
 8002b42:	4808      	ldr	r0, [pc, #32]	; (8002b64 <begin+0x1420>)
 8002b44:	f005 f95e 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_11, &FONT_10X16);
 8002b48:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <begin+0x142c>)
 8002b4a:	210b      	movs	r1, #11
 8002b4c:	4805      	ldr	r0, [pc, #20]	; (8002b64 <begin+0x1420>)
 8002b4e:	f005 fa81 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_11, ALIGN_V_BOTTOM);
 8002b52:	2220      	movs	r2, #32
 8002b54:	210b      	movs	r1, #11
 8002b56:	4803      	ldr	r0, [pc, #12]	; (8002b64 <begin+0x1420>)
 8002b58:	f005 faa6 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_11, C_BROWN);
 8002b5c:	f24a 1245 	movw	r2, #41285	; 0xa145
 8002b60:	210b      	movs	r1, #11
 8002b62:	e021      	b.n	8002ba8 <begin+0x1464>
 8002b64:	2000107c 	.word	0x2000107c
 8002b68:	0800bb54 	.word	0x0800bb54
 8002b6c:	20001440 	.word	0x20001440
 8002b70:	080124d8 	.word	0x080124d8
 8002b74:	0800bb58 	.word	0x0800bb58
 8002b78:	20001454 	.word	0x20001454
 8002b7c:	20001468 	.word	0x20001468
 8002b80:	0800bb60 	.word	0x0800bb60
 8002b84:	2000147c 	.word	0x2000147c
 8002b88:	20001490 	.word	0x20001490
 8002b8c:	08012500 	.word	0x08012500
 8002b90:	200014cc 	.word	0x200014cc
 8002b94:	0800ba6c 	.word	0x0800ba6c
 8002b98:	20001508 	.word	0x20001508
 8002b9c:	20001544 	.word	0x20001544
 8002ba0:	200014a4 	.word	0x200014a4
 8002ba4:	200014e0 	.word	0x200014e0
 8002ba8:	48c1      	ldr	r0, [pc, #772]	; (8002eb0 <begin+0x176c>)
 8002baa:	f005 f9fe 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_11, C_WHITE);
 8002bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bb2:	210b      	movs	r1, #11
 8002bb4:	48be      	ldr	r0, [pc, #760]	; (8002eb0 <begin+0x176c>)
 8002bb6:	f005 f9cd 	bl	8007f54 <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_11, "A");
 8002bba:	4abe      	ldr	r2, [pc, #760]	; (8002eb4 <begin+0x1770>)
 8002bbc:	210b      	movs	r1, #11
 8002bbe:	48bc      	ldr	r0, [pc, #752]	; (8002eb0 <begin+0x176c>)
 8002bc0:	f005 fa1e 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_11);
 8002bc4:	210b      	movs	r1, #11
 8002bc6:	48ba      	ldr	r0, [pc, #744]	; (8002eb0 <begin+0x176c>)
 8002bc8:	f005 f99c 	bl	8007f04 <UG_TextboxShow>


								//usba current value
								UG_TextboxCreate(&window_page_3, &textbox_page3_usba_current_value, TXB_ID_12, 175, 109, 300, 149);
 8002bcc:	2395      	movs	r3, #149	; 0x95
 8002bce:	9302      	str	r3, [sp, #8]
 8002bd0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	236d      	movs	r3, #109	; 0x6d
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	23af      	movs	r3, #175	; 0xaf
 8002bdc:	220c      	movs	r2, #12
 8002bde:	49b6      	ldr	r1, [pc, #728]	; (8002eb8 <begin+0x1774>)
 8002be0:	48b3      	ldr	r0, [pc, #716]	; (8002eb0 <begin+0x176c>)
 8002be2:	f005 f90f 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_12, &FONT_24X40);
 8002be6:	4ab5      	ldr	r2, [pc, #724]	; (8002ebc <begin+0x1778>)
 8002be8:	210c      	movs	r1, #12
 8002bea:	48b1      	ldr	r0, [pc, #708]	; (8002eb0 <begin+0x176c>)
 8002bec:	f005 fa32 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_12, ALIGN_CENTER);
 8002bf0:	2212      	movs	r2, #18
 8002bf2:	210c      	movs	r1, #12
 8002bf4:	48ae      	ldr	r0, [pc, #696]	; (8002eb0 <begin+0x176c>)
 8002bf6:	f005 fa57 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_12, C_BROWN);
 8002bfa:	f24a 1245 	movw	r2, #41285	; 0xa145
 8002bfe:	210c      	movs	r1, #12
 8002c00:	48ab      	ldr	r0, [pc, #684]	; (8002eb0 <begin+0x176c>)
 8002c02:	f005 f9d2 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_12, C_WHITE);
 8002c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c0a:	210c      	movs	r1, #12
 8002c0c:	48a8      	ldr	r0, [pc, #672]	; (8002eb0 <begin+0x176c>)
 8002c0e:	f005 f9a1 	bl	8007f54 <UG_TextboxSetForeColor>

								UG_TextboxShow(&window_page_3, TXB_ID_12);
 8002c12:	210c      	movs	r1, #12
 8002c14:	48a6      	ldr	r0, [pc, #664]	; (8002eb0 <begin+0x176c>)
 8002c16:	f005 f975 	bl	8007f04 <UG_TextboxShow>

								//usba current symbol
								UG_TextboxCreate(&window_page_3, &textbox_page3_usba_current_symbol, TXB_ID_13, 300, 109, 310, 149);
 8002c1a:	2395      	movs	r3, #149	; 0x95
 8002c1c:	9302      	str	r3, [sp, #8]
 8002c1e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	236d      	movs	r3, #109	; 0x6d
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002c2c:	220d      	movs	r2, #13
 8002c2e:	49a4      	ldr	r1, [pc, #656]	; (8002ec0 <begin+0x177c>)
 8002c30:	489f      	ldr	r0, [pc, #636]	; (8002eb0 <begin+0x176c>)
 8002c32:	f005 f8e7 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_13, &FONT_10X16);
 8002c36:	4aa3      	ldr	r2, [pc, #652]	; (8002ec4 <begin+0x1780>)
 8002c38:	210d      	movs	r1, #13
 8002c3a:	489d      	ldr	r0, [pc, #628]	; (8002eb0 <begin+0x176c>)
 8002c3c:	f005 fa0a 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_13, ALIGN_V_BOTTOM);
 8002c40:	2220      	movs	r2, #32
 8002c42:	210d      	movs	r1, #13
 8002c44:	489a      	ldr	r0, [pc, #616]	; (8002eb0 <begin+0x176c>)
 8002c46:	f005 fa2f 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_13, C_BROWN);
 8002c4a:	f24a 1245 	movw	r2, #41285	; 0xa145
 8002c4e:	210d      	movs	r1, #13
 8002c50:	4897      	ldr	r0, [pc, #604]	; (8002eb0 <begin+0x176c>)
 8002c52:	f005 f9aa 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_13, C_WHITE);
 8002c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c5a:	210d      	movs	r1, #13
 8002c5c:	4894      	ldr	r0, [pc, #592]	; (8002eb0 <begin+0x176c>)
 8002c5e:	f005 f979 	bl	8007f54 <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_13, "A");
 8002c62:	4a94      	ldr	r2, [pc, #592]	; (8002eb4 <begin+0x1770>)
 8002c64:	210d      	movs	r1, #13
 8002c66:	4892      	ldr	r0, [pc, #584]	; (8002eb0 <begin+0x176c>)
 8002c68:	f005 f9ca 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_13);
 8002c6c:	210d      	movs	r1, #13
 8002c6e:	4890      	ldr	r0, [pc, #576]	; (8002eb0 <begin+0x176c>)
 8002c70:	f005 f948 	bl	8007f04 <UG_TextboxShow>


								//usbc watt value
								UG_TextboxCreate(&window_page_3, &textbox_page3_usbc_watt_value, TXB_ID_14, 5, 154, 130, 194);
 8002c74:	23c2      	movs	r3, #194	; 0xc2
 8002c76:	9302      	str	r3, [sp, #8]
 8002c78:	2382      	movs	r3, #130	; 0x82
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	239a      	movs	r3, #154	; 0x9a
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2305      	movs	r3, #5
 8002c82:	220e      	movs	r2, #14
 8002c84:	4990      	ldr	r1, [pc, #576]	; (8002ec8 <begin+0x1784>)
 8002c86:	488a      	ldr	r0, [pc, #552]	; (8002eb0 <begin+0x176c>)
 8002c88:	f005 f8bc 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_14, &FONT_24X40);
 8002c8c:	4a8b      	ldr	r2, [pc, #556]	; (8002ebc <begin+0x1778>)
 8002c8e:	210e      	movs	r1, #14
 8002c90:	4887      	ldr	r0, [pc, #540]	; (8002eb0 <begin+0x176c>)
 8002c92:	f005 f9df 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_14, ALIGN_CENTER);
 8002c96:	2212      	movs	r2, #18
 8002c98:	210e      	movs	r1, #14
 8002c9a:	4885      	ldr	r0, [pc, #532]	; (8002eb0 <begin+0x176c>)
 8002c9c:	f005 fa04 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_14, C_INDIGO);
 8002ca0:	f644 020f 	movw	r2, #18447	; 0x480f
 8002ca4:	210e      	movs	r1, #14
 8002ca6:	4882      	ldr	r0, [pc, #520]	; (8002eb0 <begin+0x176c>)
 8002ca8:	f005 f97f 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_14, C_WHITE);
 8002cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cb0:	210e      	movs	r1, #14
 8002cb2:	487f      	ldr	r0, [pc, #508]	; (8002eb0 <begin+0x176c>)
 8002cb4:	f005 f94e 	bl	8007f54 <UG_TextboxSetForeColor>

								UG_TextboxShow(&window_page_3, TXB_ID_14);
 8002cb8:	210e      	movs	r1, #14
 8002cba:	487d      	ldr	r0, [pc, #500]	; (8002eb0 <begin+0x176c>)
 8002cbc:	f005 f922 	bl	8007f04 <UG_TextboxShow>

								//usbc watt symbol
								UG_TextboxCreate(&window_page_3, &textbox_page3_usbc_watt_symbol, TXB_ID_15, 130, 154, 145, 194);
 8002cc0:	23c2      	movs	r3, #194	; 0xc2
 8002cc2:	9302      	str	r3, [sp, #8]
 8002cc4:	2391      	movs	r3, #145	; 0x91
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	239a      	movs	r3, #154	; 0x9a
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2382      	movs	r3, #130	; 0x82
 8002cce:	220f      	movs	r2, #15
 8002cd0:	497e      	ldr	r1, [pc, #504]	; (8002ecc <begin+0x1788>)
 8002cd2:	4877      	ldr	r0, [pc, #476]	; (8002eb0 <begin+0x176c>)
 8002cd4:	f005 f896 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_15, &FONT_10X16);
 8002cd8:	4a7a      	ldr	r2, [pc, #488]	; (8002ec4 <begin+0x1780>)
 8002cda:	210f      	movs	r1, #15
 8002cdc:	4874      	ldr	r0, [pc, #464]	; (8002eb0 <begin+0x176c>)
 8002cde:	f005 f9b9 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_15, ALIGN_V_BOTTOM);
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	210f      	movs	r1, #15
 8002ce6:	4872      	ldr	r0, [pc, #456]	; (8002eb0 <begin+0x176c>)
 8002ce8:	f005 f9de 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_15, C_INDIGO);
 8002cec:	f644 020f 	movw	r2, #18447	; 0x480f
 8002cf0:	210f      	movs	r1, #15
 8002cf2:	486f      	ldr	r0, [pc, #444]	; (8002eb0 <begin+0x176c>)
 8002cf4:	f005 f959 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_15, C_WHITE);
 8002cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cfc:	210f      	movs	r1, #15
 8002cfe:	486c      	ldr	r0, [pc, #432]	; (8002eb0 <begin+0x176c>)
 8002d00:	f005 f928 	bl	8007f54 <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_15, "W");
 8002d04:	4a72      	ldr	r2, [pc, #456]	; (8002ed0 <begin+0x178c>)
 8002d06:	210f      	movs	r1, #15
 8002d08:	4869      	ldr	r0, [pc, #420]	; (8002eb0 <begin+0x176c>)
 8002d0a:	f005 f979 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_15);
 8002d0e:	210f      	movs	r1, #15
 8002d10:	4867      	ldr	r0, [pc, #412]	; (8002eb0 <begin+0x176c>)
 8002d12:	f005 f8f7 	bl	8007f04 <UG_TextboxShow>


								//usba watt value
								UG_TextboxCreate(&window_page_3, &textbox_page3_usba_watt_value, TXB_ID_16, 175, 154, 300, 194);
 8002d16:	23c2      	movs	r3, #194	; 0xc2
 8002d18:	9302      	str	r3, [sp, #8]
 8002d1a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	239a      	movs	r3, #154	; 0x9a
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	23af      	movs	r3, #175	; 0xaf
 8002d26:	2210      	movs	r2, #16
 8002d28:	496a      	ldr	r1, [pc, #424]	; (8002ed4 <begin+0x1790>)
 8002d2a:	4861      	ldr	r0, [pc, #388]	; (8002eb0 <begin+0x176c>)
 8002d2c:	f005 f86a 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_16, &FONT_24X40);
 8002d30:	4a62      	ldr	r2, [pc, #392]	; (8002ebc <begin+0x1778>)
 8002d32:	2110      	movs	r1, #16
 8002d34:	485e      	ldr	r0, [pc, #376]	; (8002eb0 <begin+0x176c>)
 8002d36:	f005 f98d 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_16, ALIGN_CENTER);
 8002d3a:	2212      	movs	r2, #18
 8002d3c:	2110      	movs	r1, #16
 8002d3e:	485c      	ldr	r0, [pc, #368]	; (8002eb0 <begin+0x176c>)
 8002d40:	f005 f9b2 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_16, C_INDIGO);
 8002d44:	f644 020f 	movw	r2, #18447	; 0x480f
 8002d48:	2110      	movs	r1, #16
 8002d4a:	4859      	ldr	r0, [pc, #356]	; (8002eb0 <begin+0x176c>)
 8002d4c:	f005 f92d 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_16, C_WHITE);
 8002d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d54:	2110      	movs	r1, #16
 8002d56:	4856      	ldr	r0, [pc, #344]	; (8002eb0 <begin+0x176c>)
 8002d58:	f005 f8fc 	bl	8007f54 <UG_TextboxSetForeColor>


								UG_TextboxShow(&window_page_3, TXB_ID_16);
 8002d5c:	2110      	movs	r1, #16
 8002d5e:	4854      	ldr	r0, [pc, #336]	; (8002eb0 <begin+0x176c>)
 8002d60:	f005 f8d0 	bl	8007f04 <UG_TextboxShow>

								//usba watt symbol
								UG_TextboxCreate(&window_page_3, &textbox_page3_usba_watt_symbol, TXB_ID_17, 300, 154, 310, 194);
 8002d64:	23c2      	movs	r3, #194	; 0xc2
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	239a      	movs	r3, #154	; 0x9a
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002d76:	2211      	movs	r2, #17
 8002d78:	4957      	ldr	r1, [pc, #348]	; (8002ed8 <begin+0x1794>)
 8002d7a:	484d      	ldr	r0, [pc, #308]	; (8002eb0 <begin+0x176c>)
 8002d7c:	f005 f842 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_17, &FONT_10X16);
 8002d80:	4a50      	ldr	r2, [pc, #320]	; (8002ec4 <begin+0x1780>)
 8002d82:	2111      	movs	r1, #17
 8002d84:	484a      	ldr	r0, [pc, #296]	; (8002eb0 <begin+0x176c>)
 8002d86:	f005 f965 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_17, ALIGN_V_BOTTOM);
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	2111      	movs	r1, #17
 8002d8e:	4848      	ldr	r0, [pc, #288]	; (8002eb0 <begin+0x176c>)
 8002d90:	f005 f98a 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_17, C_INDIGO);
 8002d94:	f644 020f 	movw	r2, #18447	; 0x480f
 8002d98:	2111      	movs	r1, #17
 8002d9a:	4845      	ldr	r0, [pc, #276]	; (8002eb0 <begin+0x176c>)
 8002d9c:	f005 f905 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_17, C_WHITE);
 8002da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002da4:	2111      	movs	r1, #17
 8002da6:	4842      	ldr	r0, [pc, #264]	; (8002eb0 <begin+0x176c>)
 8002da8:	f005 f8d4 	bl	8007f54 <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_17, "W");
 8002dac:	4a48      	ldr	r2, [pc, #288]	; (8002ed0 <begin+0x178c>)
 8002dae:	2111      	movs	r1, #17
 8002db0:	483f      	ldr	r0, [pc, #252]	; (8002eb0 <begin+0x176c>)
 8002db2:	f005 f925 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_17);
 8002db6:	2111      	movs	r1, #17
 8002db8:	483d      	ldr	r0, [pc, #244]	; (8002eb0 <begin+0x176c>)
 8002dba:	f005 f8a3 	bl	8007f04 <UG_TextboxShow>

								// ok
								UG_TextboxCreate(&window_page_3, &textbox_page3_ok_symbol, TXB_ID_18, 15, 200, 65, 235);
 8002dbe:	23eb      	movs	r3, #235	; 0xeb
 8002dc0:	9302      	str	r3, [sp, #8]
 8002dc2:	2341      	movs	r3, #65	; 0x41
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	23c8      	movs	r3, #200	; 0xc8
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	230f      	movs	r3, #15
 8002dcc:	2212      	movs	r2, #18
 8002dce:	4943      	ldr	r1, [pc, #268]	; (8002edc <begin+0x1798>)
 8002dd0:	4837      	ldr	r0, [pc, #220]	; (8002eb0 <begin+0x176c>)
 8002dd2:	f005 f817 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_18, &FONT_10X16);
 8002dd6:	4a3b      	ldr	r2, [pc, #236]	; (8002ec4 <begin+0x1780>)
 8002dd8:	2112      	movs	r1, #18
 8002dda:	4835      	ldr	r0, [pc, #212]	; (8002eb0 <begin+0x176c>)
 8002ddc:	f005 f93a 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_18, ALIGN_CENTER);
 8002de0:	2212      	movs	r2, #18
 8002de2:	2112      	movs	r1, #18
 8002de4:	4832      	ldr	r0, [pc, #200]	; (8002eb0 <begin+0x176c>)
 8002de6:	f005 f95f 	bl	80080a8 <UG_TextboxSetAlignment>

								UG_TextboxSetForeColor(&window_page_3, TXB_ID_18, C_BLACK);
 8002dea:	2200      	movs	r2, #0
 8002dec:	2112      	movs	r1, #18
 8002dee:	4830      	ldr	r0, [pc, #192]	; (8002eb0 <begin+0x176c>)
 8002df0:	f005 f8b0 	bl	8007f54 <UG_TextboxSetForeColor>

								UG_TextboxSetText(&window_page_3, TXB_ID_18, "OK");
 8002df4:	4a3a      	ldr	r2, [pc, #232]	; (8002ee0 <begin+0x179c>)
 8002df6:	2112      	movs	r1, #18
 8002df8:	482d      	ldr	r0, [pc, #180]	; (8002eb0 <begin+0x176c>)
 8002dfa:	f005 f901 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_18);
 8002dfe:	2112      	movs	r1, #18
 8002e00:	482b      	ldr	r0, [pc, #172]	; (8002eb0 <begin+0x176c>)
 8002e02:	f005 f87f 	bl	8007f04 <UG_TextboxShow>

								// cv
								UG_TextboxCreate(&window_page_3, &textbox_page3_cv_symbol, TXB_ID_19, 70, 200, 95, 235);
 8002e06:	23eb      	movs	r3, #235	; 0xeb
 8002e08:	9302      	str	r3, [sp, #8]
 8002e0a:	235f      	movs	r3, #95	; 0x5f
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	23c8      	movs	r3, #200	; 0xc8
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	2346      	movs	r3, #70	; 0x46
 8002e14:	2213      	movs	r2, #19
 8002e16:	4933      	ldr	r1, [pc, #204]	; (8002ee4 <begin+0x17a0>)
 8002e18:	4825      	ldr	r0, [pc, #148]	; (8002eb0 <begin+0x176c>)
 8002e1a:	f004 fff3 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_19, &FONT_10X16);
 8002e1e:	4a29      	ldr	r2, [pc, #164]	; (8002ec4 <begin+0x1780>)
 8002e20:	2113      	movs	r1, #19
 8002e22:	4823      	ldr	r0, [pc, #140]	; (8002eb0 <begin+0x176c>)
 8002e24:	f005 f916 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_19, ALIGN_CENTER);
 8002e28:	2212      	movs	r2, #18
 8002e2a:	2113      	movs	r1, #19
 8002e2c:	4820      	ldr	r0, [pc, #128]	; (8002eb0 <begin+0x176c>)
 8002e2e:	f005 f93b 	bl	80080a8 <UG_TextboxSetAlignment>


								UG_TextboxSetForeColor(&window_page_3, TXB_ID_19, C_BLACK);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2113      	movs	r1, #19
 8002e36:	481e      	ldr	r0, [pc, #120]	; (8002eb0 <begin+0x176c>)
 8002e38:	f005 f88c 	bl	8007f54 <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_19, "CV");
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <begin+0x17a4>)
 8002e3e:	2113      	movs	r1, #19
 8002e40:	481b      	ldr	r0, [pc, #108]	; (8002eb0 <begin+0x176c>)
 8002e42:	f005 f8dd 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_19);
 8002e46:	2113      	movs	r1, #19
 8002e48:	4819      	ldr	r0, [pc, #100]	; (8002eb0 <begin+0x176c>)
 8002e4a:	f005 f85b 	bl	8007f04 <UG_TextboxShow>
								// cc
								UG_TextboxCreate(&window_page_3, &textbox_page3_cc_symbol, TXB_ID_20, 100, 200, 125, 235);
 8002e4e:	23eb      	movs	r3, #235	; 0xeb
 8002e50:	9302      	str	r3, [sp, #8]
 8002e52:	237d      	movs	r3, #125	; 0x7d
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	23c8      	movs	r3, #200	; 0xc8
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2364      	movs	r3, #100	; 0x64
 8002e5c:	2214      	movs	r2, #20
 8002e5e:	4923      	ldr	r1, [pc, #140]	; (8002eec <begin+0x17a8>)
 8002e60:	4813      	ldr	r0, [pc, #76]	; (8002eb0 <begin+0x176c>)
 8002e62:	f004 ffcf 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_20, &FONT_10X16);
 8002e66:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <begin+0x1780>)
 8002e68:	2114      	movs	r1, #20
 8002e6a:	4811      	ldr	r0, [pc, #68]	; (8002eb0 <begin+0x176c>)
 8002e6c:	f005 f8f2 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_20, ALIGN_CENTER);
 8002e70:	2212      	movs	r2, #18
 8002e72:	2114      	movs	r1, #20
 8002e74:	480e      	ldr	r0, [pc, #56]	; (8002eb0 <begin+0x176c>)
 8002e76:	f005 f917 	bl	80080a8 <UG_TextboxSetAlignment>

								UG_TextboxSetForeColor(&window_page_3, TXB_ID_20, C_BLACK);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2114      	movs	r1, #20
 8002e7e:	480c      	ldr	r0, [pc, #48]	; (8002eb0 <begin+0x176c>)
 8002e80:	f005 f868 	bl	8007f54 <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_20, "CC");
 8002e84:	4a1a      	ldr	r2, [pc, #104]	; (8002ef0 <begin+0x17ac>)
 8002e86:	2114      	movs	r1, #20
 8002e88:	4809      	ldr	r0, [pc, #36]	; (8002eb0 <begin+0x176c>)
 8002e8a:	f005 f8b9 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_20);
 8002e8e:	2114      	movs	r1, #20
 8002e90:	4807      	ldr	r0, [pc, #28]	; (8002eb0 <begin+0x176c>)
 8002e92:	f005 f837 	bl	8007f04 <UG_TextboxShow>

								// output voltage
								UG_TextboxCreate(&window_page_3, &textbox_page3_output_voltage_value, TXB_ID_21, 130, 200, 185, 235);
 8002e96:	23eb      	movs	r3, #235	; 0xeb
 8002e98:	9302      	str	r3, [sp, #8]
 8002e9a:	23b9      	movs	r3, #185	; 0xb9
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	23c8      	movs	r3, #200	; 0xc8
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2382      	movs	r3, #130	; 0x82
 8002ea4:	2215      	movs	r2, #21
 8002ea6:	4913      	ldr	r1, [pc, #76]	; (8002ef4 <begin+0x17b0>)
 8002ea8:	4801      	ldr	r0, [pc, #4]	; (8002eb0 <begin+0x176c>)
 8002eaa:	f004 ffab 	bl	8007e04 <UG_TextboxCreate>
 8002eae:	e023      	b.n	8002ef8 <begin+0x17b4>
 8002eb0:	2000107c 	.word	0x2000107c
 8002eb4:	0800bb68 	.word	0x0800bb68
 8002eb8:	2000151c 	.word	0x2000151c
 8002ebc:	08012500 	.word	0x08012500
 8002ec0:	20001558 	.word	0x20001558
 8002ec4:	080124d8 	.word	0x080124d8
 8002ec8:	200014b8 	.word	0x200014b8
 8002ecc:	200014f4 	.word	0x200014f4
 8002ed0:	0800ba94 	.word	0x0800ba94
 8002ed4:	20001530 	.word	0x20001530
 8002ed8:	2000156c 	.word	0x2000156c
 8002edc:	20001580 	.word	0x20001580
 8002ee0:	0800ba28 	.word	0x0800ba28
 8002ee4:	20001594 	.word	0x20001594
 8002ee8:	0800ba2c 	.word	0x0800ba2c
 8002eec:	200015a8 	.word	0x200015a8
 8002ef0:	0800ba30 	.word	0x0800ba30
 8002ef4:	200015bc 	.word	0x200015bc
								UG_TextboxSetFont(&window_page_3, TXB_ID_21, &FONT_10X16);
 8002ef8:	4a4c      	ldr	r2, [pc, #304]	; (800302c <begin+0x18e8>)
 8002efa:	2115      	movs	r1, #21
 8002efc:	484c      	ldr	r0, [pc, #304]	; (8003030 <begin+0x18ec>)
 8002efe:	f005 f8a9 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_21, ALIGN_CENTER);
 8002f02:	2212      	movs	r2, #18
 8002f04:	2115      	movs	r1, #21
 8002f06:	484a      	ldr	r0, [pc, #296]	; (8003030 <begin+0x18ec>)
 8002f08:	f005 f8ce 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_21, C_BLACK);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2115      	movs	r1, #21
 8002f10:	4847      	ldr	r0, [pc, #284]	; (8003030 <begin+0x18ec>)
 8002f12:	f005 f84a 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_21, C_WHITE);
 8002f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f1a:	2115      	movs	r1, #21
 8002f1c:	4844      	ldr	r0, [pc, #272]	; (8003030 <begin+0x18ec>)
 8002f1e:	f005 f819 	bl	8007f54 <UG_TextboxSetForeColor>


								UG_TextboxShow(&window_page_3, TXB_ID_21);
 8002f22:	2115      	movs	r1, #21
 8002f24:	4842      	ldr	r0, [pc, #264]	; (8003030 <begin+0x18ec>)
 8002f26:	f004 ffed 	bl	8007f04 <UG_TextboxShow>
								// output voltage symbol
								UG_TextboxCreate(&window_page_3, &textbox_page3_output_voltage_symbol, TXB_ID_22, 190, 200, 205, 235);
 8002f2a:	23eb      	movs	r3, #235	; 0xeb
 8002f2c:	9302      	str	r3, [sp, #8]
 8002f2e:	23cd      	movs	r3, #205	; 0xcd
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	23c8      	movs	r3, #200	; 0xc8
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	23be      	movs	r3, #190	; 0xbe
 8002f38:	2216      	movs	r2, #22
 8002f3a:	493e      	ldr	r1, [pc, #248]	; (8003034 <begin+0x18f0>)
 8002f3c:	483c      	ldr	r0, [pc, #240]	; (8003030 <begin+0x18ec>)
 8002f3e:	f004 ff61 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_22, &FONT_10X16);
 8002f42:	4a3a      	ldr	r2, [pc, #232]	; (800302c <begin+0x18e8>)
 8002f44:	2116      	movs	r1, #22
 8002f46:	483a      	ldr	r0, [pc, #232]	; (8003030 <begin+0x18ec>)
 8002f48:	f005 f884 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_22, ALIGN_CENTER);
 8002f4c:	2212      	movs	r2, #18
 8002f4e:	2116      	movs	r1, #22
 8002f50:	4837      	ldr	r0, [pc, #220]	; (8003030 <begin+0x18ec>)
 8002f52:	f005 f8a9 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_22, C_BLACK);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2116      	movs	r1, #22
 8002f5a:	4835      	ldr	r0, [pc, #212]	; (8003030 <begin+0x18ec>)
 8002f5c:	f005 f825 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_22, C_WHITE);
 8002f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f64:	2116      	movs	r1, #22
 8002f66:	4832      	ldr	r0, [pc, #200]	; (8003030 <begin+0x18ec>)
 8002f68:	f004 fff4 	bl	8007f54 <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_22, "V");
 8002f6c:	4a32      	ldr	r2, [pc, #200]	; (8003038 <begin+0x18f4>)
 8002f6e:	2116      	movs	r1, #22
 8002f70:	482f      	ldr	r0, [pc, #188]	; (8003030 <begin+0x18ec>)
 8002f72:	f005 f845 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_22);
 8002f76:	2116      	movs	r1, #22
 8002f78:	482d      	ldr	r0, [pc, #180]	; (8003030 <begin+0x18ec>)
 8002f7a:	f004 ffc3 	bl	8007f04 <UG_TextboxShow>


								// output current
								UG_TextboxCreate(&window_page_3, &textbox_page3_output_current_value, TXB_ID_23, 210, 200, 265, 235);
 8002f7e:	23eb      	movs	r3, #235	; 0xeb
 8002f80:	9302      	str	r3, [sp, #8]
 8002f82:	f240 1309 	movw	r3, #265	; 0x109
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	23c8      	movs	r3, #200	; 0xc8
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	23d2      	movs	r3, #210	; 0xd2
 8002f8e:	2217      	movs	r2, #23
 8002f90:	492a      	ldr	r1, [pc, #168]	; (800303c <begin+0x18f8>)
 8002f92:	4827      	ldr	r0, [pc, #156]	; (8003030 <begin+0x18ec>)
 8002f94:	f004 ff36 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_23, &FONT_10X16);
 8002f98:	4a24      	ldr	r2, [pc, #144]	; (800302c <begin+0x18e8>)
 8002f9a:	2117      	movs	r1, #23
 8002f9c:	4824      	ldr	r0, [pc, #144]	; (8003030 <begin+0x18ec>)
 8002f9e:	f005 f859 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_23, ALIGN_CENTER);
 8002fa2:	2212      	movs	r2, #18
 8002fa4:	2117      	movs	r1, #23
 8002fa6:	4822      	ldr	r0, [pc, #136]	; (8003030 <begin+0x18ec>)
 8002fa8:	f005 f87e 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_23, C_RED);
 8002fac:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002fb0:	2117      	movs	r1, #23
 8002fb2:	481f      	ldr	r0, [pc, #124]	; (8003030 <begin+0x18ec>)
 8002fb4:	f004 fff9 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_23, C_WHITE);
 8002fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fbc:	2117      	movs	r1, #23
 8002fbe:	481c      	ldr	r0, [pc, #112]	; (8003030 <begin+0x18ec>)
 8002fc0:	f004 ffc8 	bl	8007f54 <UG_TextboxSetForeColor>

								UG_TextboxShow(&window_page_3, TXB_ID_23);
 8002fc4:	2117      	movs	r1, #23
 8002fc6:	481a      	ldr	r0, [pc, #104]	; (8003030 <begin+0x18ec>)
 8002fc8:	f004 ff9c 	bl	8007f04 <UG_TextboxShow>
								// output current symbol
								UG_TextboxCreate(&window_page_3, &textbox_page3_output_current_symbol, TXB_ID_24, 290, 200, 315, 235);
 8002fcc:	23eb      	movs	r3, #235	; 0xeb
 8002fce:	9302      	str	r3, [sp, #8]
 8002fd0:	f240 133b 	movw	r3, #315	; 0x13b
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	23c8      	movs	r3, #200	; 0xc8
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	f44f 7391 	mov.w	r3, #290	; 0x122
 8002fde:	2218      	movs	r2, #24
 8002fe0:	4917      	ldr	r1, [pc, #92]	; (8003040 <begin+0x18fc>)
 8002fe2:	4813      	ldr	r0, [pc, #76]	; (8003030 <begin+0x18ec>)
 8002fe4:	f004 ff0e 	bl	8007e04 <UG_TextboxCreate>
								UG_TextboxSetFont(&window_page_3, TXB_ID_24, &FONT_10X16);
 8002fe8:	4a10      	ldr	r2, [pc, #64]	; (800302c <begin+0x18e8>)
 8002fea:	2118      	movs	r1, #24
 8002fec:	4810      	ldr	r0, [pc, #64]	; (8003030 <begin+0x18ec>)
 8002fee:	f005 f831 	bl	8008054 <UG_TextboxSetFont>
								UG_TextboxSetAlignment(&window_page_3, TXB_ID_24, ALIGN_CENTER);
 8002ff2:	2212      	movs	r2, #18
 8002ff4:	2118      	movs	r1, #24
 8002ff6:	480e      	ldr	r0, [pc, #56]	; (8003030 <begin+0x18ec>)
 8002ff8:	f005 f856 	bl	80080a8 <UG_TextboxSetAlignment>
								UG_TextboxSetBackColor(&window_page_3, TXB_ID_24, C_BLACK);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2118      	movs	r1, #24
 8003000:	480b      	ldr	r0, [pc, #44]	; (8003030 <begin+0x18ec>)
 8003002:	f004 ffd2 	bl	8007faa <UG_TextboxSetBackColor>
								UG_TextboxSetForeColor(&window_page_3, TXB_ID_24, C_WHITE);
 8003006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800300a:	2118      	movs	r1, #24
 800300c:	4808      	ldr	r0, [pc, #32]	; (8003030 <begin+0x18ec>)
 800300e:	f004 ffa1 	bl	8007f54 <UG_TextboxSetForeColor>
								UG_TextboxSetText(&window_page_3, TXB_ID_24, "A");
 8003012:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <begin+0x1900>)
 8003014:	2118      	movs	r1, #24
 8003016:	4806      	ldr	r0, [pc, #24]	; (8003030 <begin+0x18ec>)
 8003018:	f004 fff2 	bl	8008000 <UG_TextboxSetText>
								UG_TextboxShow(&window_page_3, TXB_ID_24);
 800301c:	2118      	movs	r1, #24
 800301e:	4804      	ldr	r0, [pc, #16]	; (8003030 <begin+0x18ec>)
 8003020:	f004 ff70 	bl	8007f04 <UG_TextboxShow>





}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	080124d8 	.word	0x080124d8
 8003030:	2000107c 	.word	0x2000107c
 8003034:	200015e4 	.word	0x200015e4
 8003038:	0800ba6c 	.word	0x0800ba6c
 800303c:	200015d0 	.word	0x200015d0
 8003040:	200015f8 	.word	0x200015f8
 8003044:	0800bb68 	.word	0x0800bb68

08003048 <window_page_1_callback>:



void window_page_1_callback(UG_MESSAGE *msg){
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <window_page_0_callback>:
void window_page_0_callback(UG_MESSAGE *msg){}
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <window_logo_callback>:

void window_logo_callback(UG_MESSAGE *msg){}
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <window_page_2_callback>:

void window_page_2_callback(UG_MESSAGE *msg){}
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003094:	f000 fdc6 	bl	8003c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003098:	f000 f836 	bl	8003108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800309c:	f000 f8f6 	bl	800328c <MX_GPIO_Init>
  MX_TIM2_Init();
 80030a0:	f000 f8a6 	bl	80031f0 <MX_TIM2_Init>
  MX_I2C1_Init();
 80030a4:	f000 f876 	bl	8003194 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SW3516_init();
 80030a8:	f7fe f812 	bl	80010d0 <SW3516_init>


  sw3516_read();
 80030ac:	f7fe f974 	bl	8001398 <sw3516_read>



  Display_Init();
 80030b0:	f005 fac4 	bl	800863c <Display_Init>
  begin();
 80030b4:	f7fe fb46 	bl	8001744 <begin>
//HAL_Delay(500);
 // Page_logo();
//  Page_0();
//  Page_1();
//  Page_2();
  Page_3();
 80030b8:	f7fe fb1a 	bl	80016f0 <Page_3>

  HAL_Delay(5000);
 80030bc:	f241 3088 	movw	r0, #5000	; 0x1388
 80030c0:	f000 fe12 	bl	8003ce8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim2);
 80030c4:	480c      	ldr	r0, [pc, #48]	; (80030f8 <main+0x68>)
 80030c6:	f002 fd4b 	bl	8005b60 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(read_sw3516_flag){
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <main+0x6c>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0fb      	beq.n	80030ca <main+0x3a>

		  sw3516_previous= sw3516_current;
 80030d2:	4a0b      	ldr	r2, [pc, #44]	; (8003100 <main+0x70>)
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <main+0x74>)
 80030d6:	4614      	mov	r4, r2
 80030d8:	461d      	mov	r5, r3
 80030da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80030e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  sw3516_read();
 80030e6:	f7fe f957 	bl	8001398 <sw3516_read>

		  usb_charging_page_msg();
 80030ea:	f7fe f96d 	bl	80013c8 <usb_charging_page_msg>
		  read_sw3516_flag=0;
 80030ee:	4b03      	ldr	r3, [pc, #12]	; (80030fc <main+0x6c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
	  if(read_sw3516_flag){
 80030f4:	e7e9      	b.n	80030ca <main+0x3a>
 80030f6:	bf00      	nop
 80030f8:	20001660 	.word	0x20001660
 80030fc:	200016a8 	.word	0x200016a8
 8003100:	20000210 	.word	0x20000210
 8003104:	20000230 	.word	0x20000230

08003108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b090      	sub	sp, #64	; 0x40
 800310c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800310e:	f107 0318 	add.w	r3, r7, #24
 8003112:	2228      	movs	r2, #40	; 0x28
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f005 fd96 	bl	8008c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800311c:	1d3b      	adds	r3, r7, #4
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	60da      	str	r2, [r3, #12]
 8003128:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800312a:	2301      	movs	r3, #1
 800312c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800312e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003132:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003134:	2300      	movs	r3, #0
 8003136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003138:	2301      	movs	r3, #1
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800313c:	2302      	movs	r3, #2
 800313e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003144:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003146:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800314a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800314c:	f107 0318 	add.w	r3, r7, #24
 8003150:	4618      	mov	r0, r3
 8003152:	f002 f8af 	bl	80052b4 <HAL_RCC_OscConfig>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800315c:	f000 f952 	bl	8003404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003160:	230f      	movs	r3, #15
 8003162:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003164:	2302      	movs	r3, #2
 8003166:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800316c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003170:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003176:	1d3b      	adds	r3, r7, #4
 8003178:	2102      	movs	r1, #2
 800317a:	4618      	mov	r0, r3
 800317c:	f002 fb1c 	bl	80057b8 <HAL_RCC_ClockConfig>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003186:	f000 f93d 	bl	8003404 <Error_Handler>
  }
}
 800318a:	bf00      	nop
 800318c:	3740      	adds	r7, #64	; 0x40
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003198:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <MX_I2C1_Init+0x50>)
 800319a:	4a13      	ldr	r2, [pc, #76]	; (80031e8 <MX_I2C1_Init+0x54>)
 800319c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800319e:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031a0:	4a12      	ldr	r2, [pc, #72]	; (80031ec <MX_I2C1_Init+0x58>)
 80031a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031c4:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031d0:	4804      	ldr	r0, [pc, #16]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031d2:	f001 f86f 	bl	80042b4 <HAL_I2C_Init>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031dc:	f000 f912 	bl	8003404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	2000160c 	.word	0x2000160c
 80031e8:	40005400 	.word	0x40005400
 80031ec:	000186a0 	.word	0x000186a0

080031f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031f6:	f107 0308 	add.w	r3, r7, #8
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003204:	463b      	mov	r3, r7
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800320c:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <MX_TIM2_Init+0x98>)
 800320e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003212:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8003214:	4b1c      	ldr	r3, [pc, #112]	; (8003288 <MX_TIM2_Init+0x98>)
 8003216:	f242 7210 	movw	r2, #10000	; 0x2710
 800321a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800321c:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <MX_TIM2_Init+0x98>)
 800321e:	2200      	movs	r2, #0
 8003220:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200;
 8003222:	4b19      	ldr	r3, [pc, #100]	; (8003288 <MX_TIM2_Init+0x98>)
 8003224:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8003228:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800322a:	4b17      	ldr	r3, [pc, #92]	; (8003288 <MX_TIM2_Init+0x98>)
 800322c:	2200      	movs	r2, #0
 800322e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003230:	4b15      	ldr	r3, [pc, #84]	; (8003288 <MX_TIM2_Init+0x98>)
 8003232:	2280      	movs	r2, #128	; 0x80
 8003234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003236:	4814      	ldr	r0, [pc, #80]	; (8003288 <MX_TIM2_Init+0x98>)
 8003238:	f002 fc42 	bl	8005ac0 <HAL_TIM_Base_Init>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003242:	f000 f8df 	bl	8003404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800324a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800324c:	f107 0308 	add.w	r3, r7, #8
 8003250:	4619      	mov	r1, r3
 8003252:	480d      	ldr	r0, [pc, #52]	; (8003288 <MX_TIM2_Init+0x98>)
 8003254:	f002 fdde 	bl	8005e14 <HAL_TIM_ConfigClockSource>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800325e:	f000 f8d1 	bl	8003404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003262:	2300      	movs	r3, #0
 8003264:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800326a:	463b      	mov	r3, r7
 800326c:	4619      	mov	r1, r3
 800326e:	4806      	ldr	r0, [pc, #24]	; (8003288 <MX_TIM2_Init+0x98>)
 8003270:	f002 ffb0 	bl	80061d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800327a:	f000 f8c3 	bl	8003404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800327e:	bf00      	nop
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20001660 	.word	0x20001660

0800328c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003292:	f107 0310 	add.w	r3, r7, #16
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a0:	4b47      	ldr	r3, [pc, #284]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	4a46      	ldr	r2, [pc, #280]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032a6:	f043 0310 	orr.w	r3, r3, #16
 80032aa:	6193      	str	r3, [r2, #24]
 80032ac:	4b44      	ldr	r3, [pc, #272]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032b8:	4b41      	ldr	r3, [pc, #260]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	4a40      	ldr	r2, [pc, #256]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032be:	f043 0320 	orr.w	r3, r3, #32
 80032c2:	6193      	str	r3, [r2, #24]
 80032c4:	4b3e      	ldr	r3, [pc, #248]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d0:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	4a3a      	ldr	r2, [pc, #232]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032d6:	f043 0304 	orr.w	r3, r3, #4
 80032da:	6193      	str	r3, [r2, #24]
 80032dc:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e8:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	4a34      	ldr	r2, [pc, #208]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032ee:	f043 0308 	orr.w	r3, r3, #8
 80032f2:	6193      	str	r3, [r2, #24]
 80032f4:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|LCD_WR_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8003300:	2200      	movs	r2, #0
 8003302:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8003306:	482f      	ldr	r0, [pc, #188]	; (80033c4 <MX_GPIO_Init+0x138>)
 8003308:	f000 ffa4 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LCD_RD_Pin|LCD_D2_Pin|LCD_D3_Pin
 800330c:	2200      	movs	r2, #0
 800330e:	f64f 7103 	movw	r1, #65283	; 0xff03
 8003312:	482d      	ldr	r0, [pc, #180]	; (80033c8 <MX_GPIO_Init+0x13c>)
 8003314:	f000 ff9e 	bl	8004254 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
                          |LCD_D0_Pin|LCD_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ENC_push_button_Pin */
  GPIO_InitStruct.Pin = ENC_push_button_Pin;
 8003318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800331e:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <MX_GPIO_Init+0x140>)
 8003320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003322:	2301      	movs	r3, #1
 8003324:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_push_button_GPIO_Port, &GPIO_InitStruct);
 8003326:	f107 0310 	add.w	r3, r7, #16
 800332a:	4619      	mov	r1, r3
 800332c:	4828      	ldr	r0, [pc, #160]	; (80033d0 <MX_GPIO_Init+0x144>)
 800332e:	f000 fe0d 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003332:	2320      	movs	r3, #32
 8003334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003336:	2301      	movs	r3, #1
 8003338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333e:	2302      	movs	r3, #2
 8003340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003342:	f107 0310 	add.w	r3, r7, #16
 8003346:	4619      	mov	r1, r3
 8003348:	481e      	ldr	r0, [pc, #120]	; (80033c4 <MX_GPIO_Init+0x138>)
 800334a:	f000 fdff 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LCD_RD_Pin LCD_D2_Pin LCD_D3_Pin
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D0_Pin
                           LCD_D1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RD_Pin|LCD_D2_Pin|LCD_D3_Pin
 800334e:	f647 7303 	movw	r3, #32515	; 0x7f03
 8003352:	613b      	str	r3, [r7, #16]
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D0_Pin
                          |LCD_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003354:	2301      	movs	r3, #1
 8003356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800335c:	2303      	movs	r3, #3
 800335e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	4619      	mov	r1, r3
 8003366:	4818      	ldr	r0, [pc, #96]	; (80033c8 <MX_GPIO_Init+0x13c>)
 8003368:	f000 fdf0 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 800336c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003372:	2301      	movs	r3, #1
 8003374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2302      	movs	r3, #2
 800337c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 800337e:	f107 0310 	add.w	r3, r7, #16
 8003382:	4619      	mov	r1, r3
 8003384:	4810      	ldr	r0, [pc, #64]	; (80033c8 <MX_GPIO_Init+0x13c>)
 8003386:	f000 fde1 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_WR_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_WR_Pin|LCD_DC_Pin|LCD_CS_Pin;
 800338a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800338e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003390:	2301      	movs	r3, #1
 8003392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003398:	2303      	movs	r3, #3
 800339a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339c:	f107 0310 	add.w	r3, r7, #16
 80033a0:	4619      	mov	r1, r3
 80033a2:	4808      	ldr	r0, [pc, #32]	; (80033c4 <MX_GPIO_Init+0x138>)
 80033a4:	f000 fdd2 	bl	8003f4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80033a8:	2200      	movs	r2, #0
 80033aa:	2100      	movs	r1, #0
 80033ac:	2028      	movs	r0, #40	; 0x28
 80033ae:	f000 fd96 	bl	8003ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80033b2:	2028      	movs	r0, #40	; 0x28
 80033b4:	f000 fdaf 	bl	8003f16 <HAL_NVIC_EnableIRQ>

}
 80033b8:	bf00      	nop
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40010800 	.word	0x40010800
 80033c8:	40010c00 	.word	0x40010c00
 80033cc:	10210000 	.word	0x10210000
 80033d0:	40011000 	.word	0x40011000

080033d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	80fb      	strh	r3, [r7, #6]
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//		HAL_TIM_Base_Start_IT(&htim2);
//		state = 0;
//
//	}
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]


     read_sw3516_flag=1;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
	 //convert_ADC(&current.currentA, &current.currentC, &current.voltagein, &current.voltageout, &current.temperature);
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr
 8003400:	200016a8 	.word	0x200016a8

08003404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003408:	b672      	cpsid	i
}
 800340a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800340c:	e7fe      	b.n	800340c <Error_Handler+0x8>
	...

08003410 <window_page_3_callback>:
#include "stdio.h"


int hour_value,mint,sec=0;

void window_page_3_callback(UG_MESSAGE *msg){
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b085      	sub	sp, #20
 8003414:	af02      	add	r7, sp, #8
 8003416:	6078      	str	r0, [r7, #4]



	if(msg->type==MSG_TYPE_OBJECT){
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b02      	cmp	r3, #2
 800341e:	f040 8235 	bne.w	800388c <window_page_3_callback+0x47c>

		if(msg->id==OBJ_TYPE_TEXTBOX){
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	785b      	ldrb	r3, [r3, #1]
 8003426:	2b02      	cmp	r3, #2
 8003428:	f040 8230 	bne.w	800388c <window_page_3_callback+0x47c>
		switch (msg->sub_id){
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	789b      	ldrb	r3, [r3, #2]
 8003430:	2b1a      	cmp	r3, #26
 8003432:	f200 822e 	bhi.w	8003892 <window_page_3_callback+0x482>
 8003436:	a201      	add	r2, pc, #4	; (adr r2, 800343c <window_page_3_callback+0x2c>)
 8003438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343c:	08003891 	.word	0x08003891
 8003440:	08003893 	.word	0x08003893
 8003444:	080034a9 	.word	0x080034a9
 8003448:	08003893 	.word	0x08003893
 800344c:	080034cb 	.word	0x080034cb
 8003450:	080034ef 	.word	0x080034ef
 8003454:	08003513 	.word	0x08003513
 8003458:	08003893 	.word	0x08003893
 800345c:	08003553 	.word	0x08003553
 8003460:	08003893 	.word	0x08003893
 8003464:	08003593 	.word	0x08003593
 8003468:	08003893 	.word	0x08003893
 800346c:	080035d3 	.word	0x080035d3
 8003470:	08003893 	.word	0x08003893
 8003474:	08003613 	.word	0x08003613
 8003478:	08003893 	.word	0x08003893
 800347c:	0800366d 	.word	0x0800366d
 8003480:	08003893 	.word	0x08003893
 8003484:	080036c7 	.word	0x080036c7
 8003488:	080036eb 	.word	0x080036eb
 800348c:	0800370f 	.word	0x0800370f
 8003490:	08003751 	.word	0x08003751
 8003494:	08003893 	.word	0x08003893
 8003498:	08003791 	.word	0x08003791
 800349c:	08003893 	.word	0x08003893
 80034a0:	0800379d 	.word	0x0800379d
 80034a4:	08003815 	.word	0x08003815
		{
			break;
		}
		case 2:           //temperature value
				{
					sprintf(char_buffer,"%.02f",sw3516_current.temperature);
 80034a8:	4ba2      	ldr	r3, [pc, #648]	; (8003734 <window_page_3_callback+0x324>)
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fc ffbb 	bl	8000428 <__aeabi_f2d>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	49a0      	ldr	r1, [pc, #640]	; (8003738 <window_page_3_callback+0x328>)
 80034b8:	48a0      	ldr	r0, [pc, #640]	; (800373c <window_page_3_callback+0x32c>)
 80034ba:	f006 f82d 	bl	8009518 <siprintf>
												UG_TextboxSetText(&window_page_3, TXB_ID_2, char_buffer);
 80034be:	4a9f      	ldr	r2, [pc, #636]	; (800373c <window_page_3_callback+0x32c>)
 80034c0:	2102      	movs	r1, #2
 80034c2:	489f      	ldr	r0, [pc, #636]	; (8003740 <window_page_3_callback+0x330>)
 80034c4:	f004 fd9c 	bl	8008000 <UG_TextboxSetText>
					break;
 80034c8:	e1e3      	b.n	8003892 <window_page_3_callback+0x482>
				}
		case 4:          //usbc
				{
					if(sw3516_current.status_USBC){
 80034ca:	4b9a      	ldr	r3, [pc, #616]	; (8003734 <window_page_3_callback+0x324>)
 80034cc:	7d5b      	ldrb	r3, [r3, #21]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d006      	beq.n	80034e0 <window_page_3_callback+0xd0>
					UG_TextboxSetBackColor(&window_page_3, TXB_ID_4, C_YELLOW);
 80034d2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80034d6:	2104      	movs	r1, #4
 80034d8:	4899      	ldr	r0, [pc, #612]	; (8003740 <window_page_3_callback+0x330>)
 80034da:	f004 fd66 	bl	8007faa <UG_TextboxSetBackColor>
					}
					else{
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_4, C_LIGHT_GRAY);

					}
					break;
 80034de:	e1d8      	b.n	8003892 <window_page_3_callback+0x482>
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_4, C_LIGHT_GRAY);
 80034e0:	f64c 6299 	movw	r2, #52889	; 0xce99
 80034e4:	2104      	movs	r1, #4
 80034e6:	4896      	ldr	r0, [pc, #600]	; (8003740 <window_page_3_callback+0x330>)
 80034e8:	f004 fd5f 	bl	8007faa <UG_TextboxSetBackColor>
					break;
 80034ec:	e1d1      	b.n	8003892 <window_page_3_callback+0x482>
						}
		case 5:           //usba
				{
					if(sw3516_current.status_USBA){
 80034ee:	4b91      	ldr	r3, [pc, #580]	; (8003734 <window_page_3_callback+0x324>)
 80034f0:	7d1b      	ldrb	r3, [r3, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d006      	beq.n	8003504 <window_page_3_callback+0xf4>
					   UG_TextboxSetBackColor(&window_page_3, TXB_ID_5, C_YELLOW);
 80034f6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80034fa:	2105      	movs	r1, #5
 80034fc:	4890      	ldr	r0, [pc, #576]	; (8003740 <window_page_3_callback+0x330>)
 80034fe:	f004 fd54 	bl	8007faa <UG_TextboxSetBackColor>
												}
					else{
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_5, C_LIGHT_GRAY);

												}
					break;
 8003502:	e1c6      	b.n	8003892 <window_page_3_callback+0x482>
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_5, C_LIGHT_GRAY);
 8003504:	f64c 6299 	movw	r2, #52889	; 0xce99
 8003508:	2105      	movs	r1, #5
 800350a:	488d      	ldr	r0, [pc, #564]	; (8003740 <window_page_3_callback+0x330>)
 800350c:	f004 fd4d 	bl	8007faa <UG_TextboxSetBackColor>
					break;
 8003510:	e1bf      	b.n	8003892 <window_page_3_callback+0x482>

				}
		case 6:          // voltage usbc
		{
			if(sw3516_current.status_USBC){
 8003512:	4b88      	ldr	r3, [pc, #544]	; (8003734 <window_page_3_callback+0x324>)
 8003514:	7d5b      	ldrb	r3, [r3, #21]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d015      	beq.n	8003546 <window_page_3_callback+0x136>
				sprintf(char_buffer,"%.02f",(sw3516_current.voltageout/1000));
 800351a:	4b86      	ldr	r3, [pc, #536]	; (8003734 <window_page_3_callback+0x324>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4989      	ldr	r1, [pc, #548]	; (8003744 <window_page_3_callback+0x334>)
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd fcc3 	bl	8000eac <__aeabi_fdiv>
 8003526:	4603      	mov	r3, r0
 8003528:	4618      	mov	r0, r3
 800352a:	f7fc ff7d 	bl	8000428 <__aeabi_f2d>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4981      	ldr	r1, [pc, #516]	; (8003738 <window_page_3_callback+0x328>)
 8003534:	4881      	ldr	r0, [pc, #516]	; (800373c <window_page_3_callback+0x32c>)
 8003536:	f005 ffef 	bl	8009518 <siprintf>
				UG_TextboxSetText(&window_page_3, TXB_ID_6, char_buffer);
 800353a:	4a80      	ldr	r2, [pc, #512]	; (800373c <window_page_3_callback+0x32c>)
 800353c:	2106      	movs	r1, #6
 800353e:	4880      	ldr	r0, [pc, #512]	; (8003740 <window_page_3_callback+0x330>)
 8003540:	f004 fd5e 	bl	8008000 <UG_TextboxSetText>
			}
			else
			{
				UG_TextboxSetText(&window_page_3, TXB_ID_6, "00.00");
			}
					break;
 8003544:	e1a5      	b.n	8003892 <window_page_3_callback+0x482>
				UG_TextboxSetText(&window_page_3, TXB_ID_6, "00.00");
 8003546:	4a80      	ldr	r2, [pc, #512]	; (8003748 <window_page_3_callback+0x338>)
 8003548:	2106      	movs	r1, #6
 800354a:	487d      	ldr	r0, [pc, #500]	; (8003740 <window_page_3_callback+0x330>)
 800354c:	f004 fd58 	bl	8008000 <UG_TextboxSetText>
					break;
 8003550:	e19f      	b.n	8003892 <window_page_3_callback+0x482>
		}
		case 8:        // voltage usba
				{
					if(sw3516_current.status_USBA){
 8003552:	4b78      	ldr	r3, [pc, #480]	; (8003734 <window_page_3_callback+0x324>)
 8003554:	7d1b      	ldrb	r3, [r3, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d015      	beq.n	8003586 <window_page_3_callback+0x176>
						sprintf(char_buffer,"%.02f",(sw3516_current.voltageout/1000));
 800355a:	4b76      	ldr	r3, [pc, #472]	; (8003734 <window_page_3_callback+0x324>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	4979      	ldr	r1, [pc, #484]	; (8003744 <window_page_3_callback+0x334>)
 8003560:	4618      	mov	r0, r3
 8003562:	f7fd fca3 	bl	8000eac <__aeabi_fdiv>
 8003566:	4603      	mov	r3, r0
 8003568:	4618      	mov	r0, r3
 800356a:	f7fc ff5d 	bl	8000428 <__aeabi_f2d>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4971      	ldr	r1, [pc, #452]	; (8003738 <window_page_3_callback+0x328>)
 8003574:	4871      	ldr	r0, [pc, #452]	; (800373c <window_page_3_callback+0x32c>)
 8003576:	f005 ffcf 	bl	8009518 <siprintf>
						UG_TextboxSetText(&window_page_3, TXB_ID_8, char_buffer);
 800357a:	4a70      	ldr	r2, [pc, #448]	; (800373c <window_page_3_callback+0x32c>)
 800357c:	2108      	movs	r1, #8
 800357e:	4870      	ldr	r0, [pc, #448]	; (8003740 <window_page_3_callback+0x330>)
 8003580:	f004 fd3e 	bl	8008000 <UG_TextboxSetText>
					}
					else
					{
						UG_TextboxSetText(&window_page_3, TXB_ID_8, "00.00");
					}
					break;
 8003584:	e185      	b.n	8003892 <window_page_3_callback+0x482>
						UG_TextboxSetText(&window_page_3, TXB_ID_8, "00.00");
 8003586:	4a70      	ldr	r2, [pc, #448]	; (8003748 <window_page_3_callback+0x338>)
 8003588:	2108      	movs	r1, #8
 800358a:	486d      	ldr	r0, [pc, #436]	; (8003740 <window_page_3_callback+0x330>)
 800358c:	f004 fd38 	bl	8008000 <UG_TextboxSetText>
					break;
 8003590:	e17f      	b.n	8003892 <window_page_3_callback+0x482>
				}

		case 10:      // current usbc
				{
					if(sw3516_current.status_USBC){
 8003592:	4b68      	ldr	r3, [pc, #416]	; (8003734 <window_page_3_callback+0x324>)
 8003594:	7d5b      	ldrb	r3, [r3, #21]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d015      	beq.n	80035c6 <window_page_3_callback+0x1b6>
						sprintf(char_buffer,"%.02f",(sw3516_current.currentC/1000));
 800359a:	4b66      	ldr	r3, [pc, #408]	; (8003734 <window_page_3_callback+0x324>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4969      	ldr	r1, [pc, #420]	; (8003744 <window_page_3_callback+0x334>)
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fd fc83 	bl	8000eac <__aeabi_fdiv>
 80035a6:	4603      	mov	r3, r0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fc ff3d 	bl	8000428 <__aeabi_f2d>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4961      	ldr	r1, [pc, #388]	; (8003738 <window_page_3_callback+0x328>)
 80035b4:	4861      	ldr	r0, [pc, #388]	; (800373c <window_page_3_callback+0x32c>)
 80035b6:	f005 ffaf 	bl	8009518 <siprintf>
						UG_TextboxSetText(&window_page_3, TXB_ID_10, char_buffer);
 80035ba:	4a60      	ldr	r2, [pc, #384]	; (800373c <window_page_3_callback+0x32c>)
 80035bc:	210a      	movs	r1, #10
 80035be:	4860      	ldr	r0, [pc, #384]	; (8003740 <window_page_3_callback+0x330>)
 80035c0:	f004 fd1e 	bl	8008000 <UG_TextboxSetText>
					}
					else
					{
						UG_TextboxSetText(&window_page_3, TXB_ID_10, "00.00");
					}
					break;
 80035c4:	e165      	b.n	8003892 <window_page_3_callback+0x482>
						UG_TextboxSetText(&window_page_3, TXB_ID_10, "00.00");
 80035c6:	4a60      	ldr	r2, [pc, #384]	; (8003748 <window_page_3_callback+0x338>)
 80035c8:	210a      	movs	r1, #10
 80035ca:	485d      	ldr	r0, [pc, #372]	; (8003740 <window_page_3_callback+0x330>)
 80035cc:	f004 fd18 	bl	8008000 <UG_TextboxSetText>
					break;
 80035d0:	e15f      	b.n	8003892 <window_page_3_callback+0x482>
						}

		case 12:    // current usb
		{
			if(sw3516_current.status_USBA){
 80035d2:	4b58      	ldr	r3, [pc, #352]	; (8003734 <window_page_3_callback+0x324>)
 80035d4:	7d1b      	ldrb	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d015      	beq.n	8003606 <window_page_3_callback+0x1f6>
				sprintf(char_buffer,"%.02f",(sw3516_current.currentA/1000));
 80035da:	4b56      	ldr	r3, [pc, #344]	; (8003734 <window_page_3_callback+0x324>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4959      	ldr	r1, [pc, #356]	; (8003744 <window_page_3_callback+0x334>)
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fd fc63 	bl	8000eac <__aeabi_fdiv>
 80035e6:	4603      	mov	r3, r0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fc ff1d 	bl	8000428 <__aeabi_f2d>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4951      	ldr	r1, [pc, #324]	; (8003738 <window_page_3_callback+0x328>)
 80035f4:	4851      	ldr	r0, [pc, #324]	; (800373c <window_page_3_callback+0x32c>)
 80035f6:	f005 ff8f 	bl	8009518 <siprintf>
				UG_TextboxSetText(&window_page_3, TXB_ID_12, char_buffer);
 80035fa:	4a50      	ldr	r2, [pc, #320]	; (800373c <window_page_3_callback+0x32c>)
 80035fc:	210c      	movs	r1, #12
 80035fe:	4850      	ldr	r0, [pc, #320]	; (8003740 <window_page_3_callback+0x330>)
 8003600:	f004 fcfe 	bl	8008000 <UG_TextboxSetText>
			else
			{
				UG_TextboxSetText(&window_page_3, TXB_ID_12, "00.00");
			}

			break;
 8003604:	e145      	b.n	8003892 <window_page_3_callback+0x482>
				UG_TextboxSetText(&window_page_3, TXB_ID_12, "00.00");
 8003606:	4a50      	ldr	r2, [pc, #320]	; (8003748 <window_page_3_callback+0x338>)
 8003608:	210c      	movs	r1, #12
 800360a:	484d      	ldr	r0, [pc, #308]	; (8003740 <window_page_3_callback+0x330>)
 800360c:	f004 fcf8 	bl	8008000 <UG_TextboxSetText>
			break;
 8003610:	e13f      	b.n	8003892 <window_page_3_callback+0x482>
		}

		case 14:  // watta usbc
				{
					if(sw3516_current.status_USBC){
 8003612:	4b48      	ldr	r3, [pc, #288]	; (8003734 <window_page_3_callback+0x324>)
 8003614:	7d5b      	ldrb	r3, [r3, #21]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d022      	beq.n	8003660 <window_page_3_callback+0x250>
						sprintf(char_buffer,"%.02f",(sw3516_current.voltageout/1000)*(sw3516_current.currentC/1000));
 800361a:	4b46      	ldr	r3, [pc, #280]	; (8003734 <window_page_3_callback+0x324>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	4949      	ldr	r1, [pc, #292]	; (8003744 <window_page_3_callback+0x334>)
 8003620:	4618      	mov	r0, r3
 8003622:	f7fd fc43 	bl	8000eac <__aeabi_fdiv>
 8003626:	4603      	mov	r3, r0
 8003628:	461c      	mov	r4, r3
 800362a:	4b42      	ldr	r3, [pc, #264]	; (8003734 <window_page_3_callback+0x324>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4945      	ldr	r1, [pc, #276]	; (8003744 <window_page_3_callback+0x334>)
 8003630:	4618      	mov	r0, r3
 8003632:	f7fd fc3b 	bl	8000eac <__aeabi_fdiv>
 8003636:	4603      	mov	r3, r0
 8003638:	4619      	mov	r1, r3
 800363a:	4620      	mov	r0, r4
 800363c:	f7fd fb82 	bl	8000d44 <__aeabi_fmul>
 8003640:	4603      	mov	r3, r0
 8003642:	4618      	mov	r0, r3
 8003644:	f7fc fef0 	bl	8000428 <__aeabi_f2d>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	493a      	ldr	r1, [pc, #232]	; (8003738 <window_page_3_callback+0x328>)
 800364e:	483b      	ldr	r0, [pc, #236]	; (800373c <window_page_3_callback+0x32c>)
 8003650:	f005 ff62 	bl	8009518 <siprintf>
						UG_TextboxSetText(&window_page_3, TXB_ID_14, char_buffer);
 8003654:	4a39      	ldr	r2, [pc, #228]	; (800373c <window_page_3_callback+0x32c>)
 8003656:	210e      	movs	r1, #14
 8003658:	4839      	ldr	r0, [pc, #228]	; (8003740 <window_page_3_callback+0x330>)
 800365a:	f004 fcd1 	bl	8008000 <UG_TextboxSetText>
					else
					{
						UG_TextboxSetText(&window_page_3, TXB_ID_14, "00.00");
					}

					break;
 800365e:	e118      	b.n	8003892 <window_page_3_callback+0x482>
						UG_TextboxSetText(&window_page_3, TXB_ID_14, "00.00");
 8003660:	4a39      	ldr	r2, [pc, #228]	; (8003748 <window_page_3_callback+0x338>)
 8003662:	210e      	movs	r1, #14
 8003664:	4836      	ldr	r0, [pc, #216]	; (8003740 <window_page_3_callback+0x330>)
 8003666:	f004 fccb 	bl	8008000 <UG_TextboxSetText>
					break;
 800366a:	e112      	b.n	8003892 <window_page_3_callback+0x482>
				}

		case 16:   //watt usba
				{
					if(sw3516_current.status_USBA){
 800366c:	4b31      	ldr	r3, [pc, #196]	; (8003734 <window_page_3_callback+0x324>)
 800366e:	7d1b      	ldrb	r3, [r3, #20]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d022      	beq.n	80036ba <window_page_3_callback+0x2aa>
						sprintf(char_buffer,"%.02f",(sw3516_current.voltageout/1000)*(sw3516_current.currentA/1000));
 8003674:	4b2f      	ldr	r3, [pc, #188]	; (8003734 <window_page_3_callback+0x324>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4932      	ldr	r1, [pc, #200]	; (8003744 <window_page_3_callback+0x334>)
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd fc16 	bl	8000eac <__aeabi_fdiv>
 8003680:	4603      	mov	r3, r0
 8003682:	461c      	mov	r4, r3
 8003684:	4b2b      	ldr	r3, [pc, #172]	; (8003734 <window_page_3_callback+0x324>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	492e      	ldr	r1, [pc, #184]	; (8003744 <window_page_3_callback+0x334>)
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd fc0e 	bl	8000eac <__aeabi_fdiv>
 8003690:	4603      	mov	r3, r0
 8003692:	4619      	mov	r1, r3
 8003694:	4620      	mov	r0, r4
 8003696:	f7fd fb55 	bl	8000d44 <__aeabi_fmul>
 800369a:	4603      	mov	r3, r0
 800369c:	4618      	mov	r0, r3
 800369e:	f7fc fec3 	bl	8000428 <__aeabi_f2d>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4924      	ldr	r1, [pc, #144]	; (8003738 <window_page_3_callback+0x328>)
 80036a8:	4824      	ldr	r0, [pc, #144]	; (800373c <window_page_3_callback+0x32c>)
 80036aa:	f005 ff35 	bl	8009518 <siprintf>
						UG_TextboxSetText(&window_page_3, TXB_ID_16, char_buffer);
 80036ae:	4a23      	ldr	r2, [pc, #140]	; (800373c <window_page_3_callback+0x32c>)
 80036b0:	2110      	movs	r1, #16
 80036b2:	4823      	ldr	r0, [pc, #140]	; (8003740 <window_page_3_callback+0x330>)
 80036b4:	f004 fca4 	bl	8008000 <UG_TextboxSetText>
					}
					else
					{
						UG_TextboxSetText(&window_page_3, TXB_ID_16, "00.00");
					}
					break;
 80036b8:	e0eb      	b.n	8003892 <window_page_3_callback+0x482>
						UG_TextboxSetText(&window_page_3, TXB_ID_16, "00.00");
 80036ba:	4a23      	ldr	r2, [pc, #140]	; (8003748 <window_page_3_callback+0x338>)
 80036bc:	2110      	movs	r1, #16
 80036be:	4820      	ldr	r0, [pc, #128]	; (8003740 <window_page_3_callback+0x330>)
 80036c0:	f004 fc9e 	bl	8008000 <UG_TextboxSetText>
					break;
 80036c4:	e0e5      	b.n	8003892 <window_page_3_callback+0x482>
						}

		case 18:   // OK status
		{
			if(buck_convertor_current.status_ok ==1){
 80036c6:	4b21      	ldr	r3, [pc, #132]	; (800374c <window_page_3_callback+0x33c>)
 80036c8:	7e9b      	ldrb	r3, [r3, #26]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d106      	bne.n	80036dc <window_page_3_callback+0x2cc>
				UG_TextboxSetBackColor(&window_page_3, TXB_ID_18, C_GREEN);
 80036ce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80036d2:	2112      	movs	r1, #18
 80036d4:	481a      	ldr	r0, [pc, #104]	; (8003740 <window_page_3_callback+0x330>)
 80036d6:	f004 fc68 	bl	8007faa <UG_TextboxSetBackColor>
			}
			else
			{
				UG_TextboxSetBackColor(&window_page_3, TXB_ID_18, C_RED);
			}
			break;
 80036da:	e0da      	b.n	8003892 <window_page_3_callback+0x482>
				UG_TextboxSetBackColor(&window_page_3, TXB_ID_18, C_RED);
 80036dc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80036e0:	2112      	movs	r1, #18
 80036e2:	4817      	ldr	r0, [pc, #92]	; (8003740 <window_page_3_callback+0x330>)
 80036e4:	f004 fc61 	bl	8007faa <UG_TextboxSetBackColor>
			break;
 80036e8:	e0d3      	b.n	8003892 <window_page_3_callback+0x482>
		}
		case 19:  // cv status
				{
					if(buck_convertor_current.status_cv ==1){
 80036ea:	4b18      	ldr	r3, [pc, #96]	; (800374c <window_page_3_callback+0x33c>)
 80036ec:	7e1b      	ldrb	r3, [r3, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d006      	beq.n	8003700 <window_page_3_callback+0x2f0>
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_19, C_YELLOW);
 80036f2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80036f6:	2113      	movs	r1, #19
 80036f8:	4811      	ldr	r0, [pc, #68]	; (8003740 <window_page_3_callback+0x330>)
 80036fa:	f004 fc56 	bl	8007faa <UG_TextboxSetBackColor>
					}
					else
					{
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_19, C_LIGHT_GRAY);
					}
					break;
 80036fe:	e0c8      	b.n	8003892 <window_page_3_callback+0x482>
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_19, C_LIGHT_GRAY);
 8003700:	f64c 6299 	movw	r2, #52889	; 0xce99
 8003704:	2113      	movs	r1, #19
 8003706:	480e      	ldr	r0, [pc, #56]	; (8003740 <window_page_3_callback+0x330>)
 8003708:	f004 fc4f 	bl	8007faa <UG_TextboxSetBackColor>
					break;
 800370c:	e0c1      	b.n	8003892 <window_page_3_callback+0x482>
				}
		case 20:  //cc status
				{
					if(buck_convertor_current.status_cv ==1){
 800370e:	4b0f      	ldr	r3, [pc, #60]	; (800374c <window_page_3_callback+0x33c>)
 8003710:	7e1b      	ldrb	r3, [r3, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d006      	beq.n	8003724 <window_page_3_callback+0x314>
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_20, C_YELLOW);
 8003716:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800371a:	2114      	movs	r1, #20
 800371c:	4808      	ldr	r0, [pc, #32]	; (8003740 <window_page_3_callback+0x330>)
 800371e:	f004 fc44 	bl	8007faa <UG_TextboxSetBackColor>
					}
					else
					{
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_20, C_LIGHT_GRAY);
					}
					break;
 8003722:	e0b6      	b.n	8003892 <window_page_3_callback+0x482>
						UG_TextboxSetBackColor(&window_page_3, TXB_ID_20, C_LIGHT_GRAY);
 8003724:	f64c 6299 	movw	r2, #52889	; 0xce99
 8003728:	2114      	movs	r1, #20
 800372a:	4805      	ldr	r0, [pc, #20]	; (8003740 <window_page_3_callback+0x330>)
 800372c:	f004 fc3d 	bl	8007faa <UG_TextboxSetBackColor>
					break;
 8003730:	e0af      	b.n	8003892 <window_page_3_callback+0x482>
 8003732:	bf00      	nop
 8003734:	20000230 	.word	0x20000230
 8003738:	0800bb6c 	.word	0x0800bb6c
 800373c:	20000288 	.word	0x20000288
 8003740:	2000107c 	.word	0x2000107c
 8003744:	447a0000 	.word	0x447a0000
 8003748:	0800bb74 	.word	0x0800bb74
 800374c:	20000250 	.word	0x20000250
				}
		case 21:   // buck voltage value
				{
					if(buck_convertor_current.buck_on_off){
 8003750:	4b52      	ldr	r3, [pc, #328]	; (800389c <window_page_3_callback+0x48c>)
 8003752:	7edb      	ldrb	r3, [r3, #27]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d015      	beq.n	8003784 <window_page_3_callback+0x374>
						sprintf(char_buffer,"%.02f",(buck_convertor_current.voltageout_output/1000));
 8003758:	4b50      	ldr	r3, [pc, #320]	; (800389c <window_page_3_callback+0x48c>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4950      	ldr	r1, [pc, #320]	; (80038a0 <window_page_3_callback+0x490>)
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd fba4 	bl	8000eac <__aeabi_fdiv>
 8003764:	4603      	mov	r3, r0
 8003766:	4618      	mov	r0, r3
 8003768:	f7fc fe5e 	bl	8000428 <__aeabi_f2d>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	494c      	ldr	r1, [pc, #304]	; (80038a4 <window_page_3_callback+0x494>)
 8003772:	484d      	ldr	r0, [pc, #308]	; (80038a8 <window_page_3_callback+0x498>)
 8003774:	f005 fed0 	bl	8009518 <siprintf>
						UG_TextboxSetText(&window_page_3, TXB_ID_21, char_buffer);
 8003778:	4a4b      	ldr	r2, [pc, #300]	; (80038a8 <window_page_3_callback+0x498>)
 800377a:	2115      	movs	r1, #21
 800377c:	484b      	ldr	r0, [pc, #300]	; (80038ac <window_page_3_callback+0x49c>)
 800377e:	f004 fc3f 	bl	8008000 <UG_TextboxSetText>
					}
					else
					{
						UG_TextboxSetText(&window_page_3, TXB_ID_21, "00.00");
					}
					break;
 8003782:	e086      	b.n	8003892 <window_page_3_callback+0x482>
						UG_TextboxSetText(&window_page_3, TXB_ID_21, "00.00");
 8003784:	4a4a      	ldr	r2, [pc, #296]	; (80038b0 <window_page_3_callback+0x4a0>)
 8003786:	2115      	movs	r1, #21
 8003788:	4848      	ldr	r0, [pc, #288]	; (80038ac <window_page_3_callback+0x49c>)
 800378a:	f004 fc39 	bl	8008000 <UG_TextboxSetText>
					break;
 800378e:	e080      	b.n	8003892 <window_page_3_callback+0x482>
//					}
//					else
//					{
//						UG_TextboxSetText(&window_page_3, TXB_ID_23, "00.00");
//					}
					UG_TextboxSetText(&window_page_3, TXB_ID_23, "00.00");
 8003790:	4a47      	ldr	r2, [pc, #284]	; (80038b0 <window_page_3_callback+0x4a0>)
 8003792:	2117      	movs	r1, #23
 8003794:	4845      	ldr	r0, [pc, #276]	; (80038ac <window_page_3_callback+0x49c>)
 8003796:	f004 fc33 	bl	8008000 <UG_TextboxSetText>
					break;
 800379a:	e07a      	b.n	8003892 <window_page_3_callback+0x482>

				}
		case 25:{
				hour_value=(int)(sw3516_current.time_in_secs_C)/3600;
 800379c:	4b45      	ldr	r3, [pc, #276]	; (80038b4 <window_page_3_callback+0x4a4>)
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	4a45      	ldr	r2, [pc, #276]	; (80038b8 <window_page_3_callback+0x4a8>)
 80037a2:	fb82 1203 	smull	r1, r2, r2, r3
 80037a6:	441a      	add	r2, r3
 80037a8:	12d2      	asrs	r2, r2, #11
 80037aa:	17db      	asrs	r3, r3, #31
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	4a43      	ldr	r2, [pc, #268]	; (80038bc <window_page_3_callback+0x4ac>)
 80037b0:	6013      	str	r3, [r2, #0]

				mint=(int)((sw3516_current.time_in_secs_C%3600)/60);
 80037b2:	4b40      	ldr	r3, [pc, #256]	; (80038b4 <window_page_3_callback+0x4a4>)
 80037b4:	69da      	ldr	r2, [r3, #28]
 80037b6:	4b40      	ldr	r3, [pc, #256]	; (80038b8 <window_page_3_callback+0x4a8>)
 80037b8:	fba3 1302 	umull	r1, r3, r3, r2
 80037bc:	0adb      	lsrs	r3, r3, #11
 80037be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	4a3d      	ldr	r2, [pc, #244]	; (80038c0 <window_page_3_callback+0x4b0>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	461a      	mov	r2, r3
 80037d2:	4b3c      	ldr	r3, [pc, #240]	; (80038c4 <window_page_3_callback+0x4b4>)
 80037d4:	601a      	str	r2, [r3, #0]
				sec=(sw3516_current.time_in_secs_C)%60;
 80037d6:	4b37      	ldr	r3, [pc, #220]	; (80038b4 <window_page_3_callback+0x4a4>)
 80037d8:	69d9      	ldr	r1, [r3, #28]
 80037da:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <window_page_3_callback+0x4b0>)
 80037dc:	fba3 2301 	umull	r2, r3, r3, r1
 80037e0:	095a      	lsrs	r2, r3, #5
 80037e2:	4613      	mov	r3, r2
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	1aca      	subs	r2, r1, r3
 80037ec:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <window_page_3_callback+0x4b8>)
 80037ee:	601a      	str	r2, [r3, #0]

				sprintf(char_buffer,"%02d:%02d:%02d",hour_value,mint,sec);
 80037f0:	4b32      	ldr	r3, [pc, #200]	; (80038bc <window_page_3_callback+0x4ac>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <window_page_3_callback+0x4b4>)
 80037f6:	6819      	ldr	r1, [r3, #0]
 80037f8:	4b33      	ldr	r3, [pc, #204]	; (80038c8 <window_page_3_callback+0x4b8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	460b      	mov	r3, r1
 8003800:	4932      	ldr	r1, [pc, #200]	; (80038cc <window_page_3_callback+0x4bc>)
 8003802:	4829      	ldr	r0, [pc, #164]	; (80038a8 <window_page_3_callback+0x498>)
 8003804:	f005 fe88 	bl	8009518 <siprintf>
			UG_TextboxSetText(&window_page_3, TXB_ID_25, char_buffer);
 8003808:	4a27      	ldr	r2, [pc, #156]	; (80038a8 <window_page_3_callback+0x498>)
 800380a:	2119      	movs	r1, #25
 800380c:	4827      	ldr	r0, [pc, #156]	; (80038ac <window_page_3_callback+0x49c>)
 800380e:	f004 fbf7 	bl	8008000 <UG_TextboxSetText>
			break;
 8003812:	e03e      	b.n	8003892 <window_page_3_callback+0x482>
		}

		case 26:{
			hour_value=(int)(sw3516_current.time_in_secs_A)/3600;
 8003814:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <window_page_3_callback+0x4a4>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	4a27      	ldr	r2, [pc, #156]	; (80038b8 <window_page_3_callback+0x4a8>)
 800381a:	fb82 1203 	smull	r1, r2, r2, r3
 800381e:	441a      	add	r2, r3
 8003820:	12d2      	asrs	r2, r2, #11
 8003822:	17db      	asrs	r3, r3, #31
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	4a25      	ldr	r2, [pc, #148]	; (80038bc <window_page_3_callback+0x4ac>)
 8003828:	6013      	str	r3, [r2, #0]
			mint=(int)((sw3516_current.time_in_secs_A%3600)/60);
 800382a:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <window_page_3_callback+0x4a4>)
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	4b22      	ldr	r3, [pc, #136]	; (80038b8 <window_page_3_callback+0x4a8>)
 8003830:	fba3 1302 	umull	r1, r3, r3, r2
 8003834:	0adb      	lsrs	r3, r3, #11
 8003836:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	4a1f      	ldr	r2, [pc, #124]	; (80038c0 <window_page_3_callback+0x4b0>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	461a      	mov	r2, r3
 800384a:	4b1e      	ldr	r3, [pc, #120]	; (80038c4 <window_page_3_callback+0x4b4>)
 800384c:	601a      	str	r2, [r3, #0]
			sec=(sw3516_current.time_in_secs_A)%60;
 800384e:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <window_page_3_callback+0x4a4>)
 8003850:	6999      	ldr	r1, [r3, #24]
 8003852:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <window_page_3_callback+0x4b0>)
 8003854:	fba3 2301 	umull	r2, r3, r3, r1
 8003858:	095a      	lsrs	r2, r3, #5
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	1aca      	subs	r2, r1, r3
 8003864:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <window_page_3_callback+0x4b8>)
 8003866:	601a      	str	r2, [r3, #0]
			sprintf(char_buffer,"%02d:%02d:%02d",hour_value,mint,sec);
 8003868:	4b14      	ldr	r3, [pc, #80]	; (80038bc <window_page_3_callback+0x4ac>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <window_page_3_callback+0x4b4>)
 800386e:	6819      	ldr	r1, [r3, #0]
 8003870:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <window_page_3_callback+0x4b8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	460b      	mov	r3, r1
 8003878:	4914      	ldr	r1, [pc, #80]	; (80038cc <window_page_3_callback+0x4bc>)
 800387a:	480b      	ldr	r0, [pc, #44]	; (80038a8 <window_page_3_callback+0x498>)
 800387c:	f005 fe4c 	bl	8009518 <siprintf>
			UG_TextboxSetText(&window_page_3, TXB_ID_26, char_buffer);
 8003880:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <window_page_3_callback+0x498>)
 8003882:	211a      	movs	r1, #26
 8003884:	4809      	ldr	r0, [pc, #36]	; (80038ac <window_page_3_callback+0x49c>)
 8003886:	f004 fbbb 	bl	8008000 <UG_TextboxSetText>
			break;
 800388a:	e002      	b.n	8003892 <window_page_3_callback+0x482>





		}
 800388c:	bf00      	nop
 800388e:	e000      	b.n	8003892 <window_page_3_callback+0x482>
			break;
 8003890:	bf00      	nop
   //
   //
   //
   //     }

   }
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	bd90      	pop	{r4, r7, pc}
 800389a:	bf00      	nop
 800389c:	20000250 	.word	0x20000250
 80038a0:	447a0000 	.word	0x447a0000
 80038a4:	0800bb6c 	.word	0x0800bb6c
 80038a8:	20000288 	.word	0x20000288
 80038ac:	2000107c 	.word	0x2000107c
 80038b0:	0800bb74 	.word	0x0800bb74
 80038b4:	20000230 	.word	0x20000230
 80038b8:	91a2b3c5 	.word	0x91a2b3c5
 80038bc:	200016ac 	.word	0x200016ac
 80038c0:	88888889 	.word	0x88888889
 80038c4:	200016b0 	.word	0x200016b0
 80038c8:	200016b4 	.word	0x200016b4
 80038cc:	0800bb7c 	.word	0x0800bb7c

080038d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80038d6:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <HAL_MspInit+0x40>)
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	4a0d      	ldr	r2, [pc, #52]	; (8003910 <HAL_MspInit+0x40>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	6193      	str	r3, [r2, #24]
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_MspInit+0x40>)
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038ee:	4b08      	ldr	r3, [pc, #32]	; (8003910 <HAL_MspInit+0x40>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	4a07      	ldr	r2, [pc, #28]	; (8003910 <HAL_MspInit+0x40>)
 80038f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f8:	61d3      	str	r3, [r2, #28]
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_MspInit+0x40>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr
 8003910:	40021000 	.word	0x40021000

08003914 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391c:	f107 0310 	add.w	r3, r7, #16
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a15      	ldr	r2, [pc, #84]	; (8003984 <HAL_I2C_MspInit+0x70>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d123      	bne.n	800397c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003934:	4b14      	ldr	r3, [pc, #80]	; (8003988 <HAL_I2C_MspInit+0x74>)
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	4a13      	ldr	r2, [pc, #76]	; (8003988 <HAL_I2C_MspInit+0x74>)
 800393a:	f043 0308 	orr.w	r3, r3, #8
 800393e:	6193      	str	r3, [r2, #24]
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_I2C_MspInit+0x74>)
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800394c:	23c0      	movs	r3, #192	; 0xc0
 800394e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003950:	2312      	movs	r3, #18
 8003952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003954:	2303      	movs	r3, #3
 8003956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003958:	f107 0310 	add.w	r3, r7, #16
 800395c:	4619      	mov	r1, r3
 800395e:	480b      	ldr	r0, [pc, #44]	; (800398c <HAL_I2C_MspInit+0x78>)
 8003960:	f000 faf4 	bl	8003f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003964:	4b08      	ldr	r3, [pc, #32]	; (8003988 <HAL_I2C_MspInit+0x74>)
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	4a07      	ldr	r2, [pc, #28]	; (8003988 <HAL_I2C_MspInit+0x74>)
 800396a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800396e:	61d3      	str	r3, [r2, #28]
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_I2C_MspInit+0x74>)
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800397c:	bf00      	nop
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40005400 	.word	0x40005400
 8003988:	40021000 	.word	0x40021000
 800398c:	40010c00 	.word	0x40010c00

08003990 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d113      	bne.n	80039ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <HAL_TIM_Base_MspInit+0x44>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	4a0b      	ldr	r2, [pc, #44]	; (80039d4 <HAL_TIM_Base_MspInit+0x44>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	61d3      	str	r3, [r2, #28]
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_TIM_Base_MspInit+0x44>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2100      	movs	r1, #0
 80039be:	201c      	movs	r0, #28
 80039c0:	f000 fa8d 	bl	8003ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039c4:	201c      	movs	r0, #28
 80039c6:	f000 faa6 	bl	8003f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000

080039d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039dc:	e7fe      	b.n	80039dc <NMI_Handler+0x4>

080039de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039e2:	e7fe      	b.n	80039e2 <HardFault_Handler+0x4>

080039e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039e8:	e7fe      	b.n	80039e8 <MemManage_Handler+0x4>

080039ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039ea:	b480      	push	{r7}
 80039ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039ee:	e7fe      	b.n	80039ee <BusFault_Handler+0x4>

080039f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039f4:	e7fe      	b.n	80039f4 <UsageFault_Handler+0x4>

080039f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039f6:	b480      	push	{r7}
 80039f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr

08003a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a1e:	f000 f947 	bl	8003cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <TIM2_IRQHandler+0x10>)
 8003a2e:	f002 f8e9 	bl	8005c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20001660 	.word	0x20001660

08003a3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_push_button_Pin);
 8003a40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a44:	f000 fc1e 	bl	8004284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a48:	bf00      	nop
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
	return 1;
 8003a50:	2301      	movs	r3, #1
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <_kill>:

int _kill(int pid, int sig)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a64:	f005 f8c6 	bl	8008bf4 <__errno>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2216      	movs	r2, #22
 8003a6c:	601a      	str	r2, [r3, #0]
	return -1;
 8003a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <_exit>:

void _exit (int status)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff ffe7 	bl	8003a5a <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a8c:	e7fe      	b.n	8003a8c <_exit+0x12>

08003a8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b086      	sub	sp, #24
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	e00a      	b.n	8003ab6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003aa0:	f3af 8000 	nop.w
 8003aa4:	4601      	mov	r1, r0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	60ba      	str	r2, [r7, #8]
 8003aac:	b2ca      	uxtb	r2, r1
 8003aae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	dbf0      	blt.n	8003aa0 <_read+0x12>
	}

return len;
 8003abe:	687b      	ldr	r3, [r7, #4]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	e009      	b.n	8003aee <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	60ba      	str	r2, [r7, #8]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	3301      	adds	r3, #1
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	dbf1      	blt.n	8003ada <_write+0x12>
	}
	return len;
 8003af6:	687b      	ldr	r3, [r7, #4]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <_close>:

int _close(int file)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	return -1;
 8003b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b26:	605a      	str	r2, [r3, #4]
	return 0;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <_isatty>:

int _isatty(int file)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	return 1;
 8003b3c:	2301      	movs	r3, #1
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
	return 0;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b68:	4a14      	ldr	r2, [pc, #80]	; (8003bbc <_sbrk+0x5c>)
 8003b6a:	4b15      	ldr	r3, [pc, #84]	; (8003bc0 <_sbrk+0x60>)
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b74:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <_sbrk+0x64>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <_sbrk+0x64>)
 8003b7e:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <_sbrk+0x68>)
 8003b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <_sbrk+0x64>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d207      	bcs.n	8003ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b90:	f005 f830 	bl	8008bf4 <__errno>
 8003b94:	4603      	mov	r3, r0
 8003b96:	220c      	movs	r2, #12
 8003b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b9e:	e009      	b.n	8003bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ba0:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <_sbrk+0x64>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ba6:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <_sbrk+0x64>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	4a05      	ldr	r2, [pc, #20]	; (8003bc4 <_sbrk+0x64>)
 8003bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20005000 	.word	0x20005000
 8003bc0:	00000400 	.word	0x00000400
 8003bc4:	200016b8 	.word	0x200016b8
 8003bc8:	20001750 	.word	0x20001750

08003bcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bd0:	bf00      	nop
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bd8:	480c      	ldr	r0, [pc, #48]	; (8003c0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bda:	490d      	ldr	r1, [pc, #52]	; (8003c10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bdc:	4a0d      	ldr	r2, [pc, #52]	; (8003c14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003be0:	e002      	b.n	8003be8 <LoopCopyDataInit>

08003be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003be6:	3304      	adds	r3, #4

08003be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bec:	d3f9      	bcc.n	8003be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bee:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bf0:	4c0a      	ldr	r4, [pc, #40]	; (8003c1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bf4:	e001      	b.n	8003bfa <LoopFillZerobss>

08003bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bf8:	3204      	adds	r2, #4

08003bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bfc:	d3fb      	bcc.n	8003bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003bfe:	f7ff ffe5 	bl	8003bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c02:	f004 fffd 	bl	8008c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c06:	f7ff fa43 	bl	8003090 <main>
  bx lr
 8003c0a:	4770      	bx	lr
  ldr r0, =_sdata
 8003c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c10:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003c14:	0801290c 	.word	0x0801290c
  ldr r2, =_sbss
 8003c18:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003c1c:	2000174c 	.word	0x2000174c

08003c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c20:	e7fe      	b.n	8003c20 <ADC1_2_IRQHandler>
	...

08003c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c28:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <HAL_Init+0x28>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <HAL_Init+0x28>)
 8003c2e:	f043 0310 	orr.w	r3, r3, #16
 8003c32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c34:	2003      	movs	r0, #3
 8003c36:	f000 f947 	bl	8003ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c3a:	200f      	movs	r0, #15
 8003c3c:	f000 f808 	bl	8003c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c40:	f7ff fe46 	bl	80038d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40022000 	.word	0x40022000

08003c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c58:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <HAL_InitTick+0x54>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <HAL_InitTick+0x58>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	4619      	mov	r1, r3
 8003c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f95f 	bl	8003f32 <HAL_SYSTICK_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e00e      	b.n	8003c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b0f      	cmp	r3, #15
 8003c82:	d80a      	bhi.n	8003c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c84:	2200      	movs	r2, #0
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c8c:	f000 f927 	bl	8003ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c90:	4a06      	ldr	r2, [pc, #24]	; (8003cac <HAL_InitTick+0x5c>)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e000      	b.n	8003c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000008 	.word	0x20000008
 8003ca8:	20000010 	.word	0x20000010
 8003cac:	2000000c 	.word	0x2000000c

08003cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_IncTick+0x1c>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_IncTick+0x20>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	4a03      	ldr	r2, [pc, #12]	; (8003cd0 <HAL_IncTick+0x20>)
 8003cc2:	6013      	str	r3, [r2, #0]
}
 8003cc4:	bf00      	nop
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	20000010 	.word	0x20000010
 8003cd0:	200016bc 	.word	0x200016bc

08003cd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cd8:	4b02      	ldr	r3, [pc, #8]	; (8003ce4 <HAL_GetTick+0x10>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	200016bc 	.word	0x200016bc

08003ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cf0:	f7ff fff0 	bl	8003cd4 <HAL_GetTick>
 8003cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d00:	d005      	beq.n	8003d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <HAL_Delay+0x44>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d0e:	bf00      	nop
 8003d10:	f7ff ffe0 	bl	8003cd4 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d8f7      	bhi.n	8003d10 <HAL_Delay+0x28>
  {
  }
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000010 	.word	0x20000010

08003d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <__NVIC_SetPriorityGrouping+0x44>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d62:	4a04      	ldr	r2, [pc, #16]	; (8003d74 <__NVIC_SetPriorityGrouping+0x44>)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	60d3      	str	r3, [r2, #12]
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	e000ed00 	.word	0xe000ed00

08003d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <__NVIC_GetPriorityGrouping+0x18>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	0a1b      	lsrs	r3, r3, #8
 8003d82:	f003 0307 	and.w	r3, r3, #7
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000ed00 	.word	0xe000ed00

08003d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	db0b      	blt.n	8003dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	f003 021f 	and.w	r2, r3, #31
 8003dac:	4906      	ldr	r1, [pc, #24]	; (8003dc8 <__NVIC_EnableIRQ+0x34>)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	2001      	movs	r0, #1
 8003db6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	e000e100 	.word	0xe000e100

08003dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	6039      	str	r1, [r7, #0]
 8003dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	db0a      	blt.n	8003df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	490c      	ldr	r1, [pc, #48]	; (8003e18 <__NVIC_SetPriority+0x4c>)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	0112      	lsls	r2, r2, #4
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	440b      	add	r3, r1
 8003df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003df4:	e00a      	b.n	8003e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4908      	ldr	r1, [pc, #32]	; (8003e1c <__NVIC_SetPriority+0x50>)
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	3b04      	subs	r3, #4
 8003e04:	0112      	lsls	r2, r2, #4
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	440b      	add	r3, r1
 8003e0a:	761a      	strb	r2, [r3, #24]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	e000e100 	.word	0xe000e100
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b089      	sub	sp, #36	; 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f1c3 0307 	rsb	r3, r3, #7
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	bf28      	it	cs
 8003e3e:	2304      	movcs	r3, #4
 8003e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3304      	adds	r3, #4
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	d902      	bls.n	8003e50 <NVIC_EncodePriority+0x30>
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3b03      	subs	r3, #3
 8003e4e:	e000      	b.n	8003e52 <NVIC_EncodePriority+0x32>
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	401a      	ands	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e72:	43d9      	mvns	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e78:	4313      	orrs	r3, r2
         );
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3724      	adds	r7, #36	; 0x24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e94:	d301      	bcc.n	8003e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e96:	2301      	movs	r3, #1
 8003e98:	e00f      	b.n	8003eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <SysTick_Config+0x40>)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ea2:	210f      	movs	r1, #15
 8003ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ea8:	f7ff ff90 	bl	8003dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <SysTick_Config+0x40>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eb2:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <SysTick_Config+0x40>)
 8003eb4:	2207      	movs	r2, #7
 8003eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	e000e010 	.word	0xe000e010

08003ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff ff2d 	bl	8003d30 <__NVIC_SetPriorityGrouping>
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b086      	sub	sp, #24
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ef0:	f7ff ff42 	bl	8003d78 <__NVIC_GetPriorityGrouping>
 8003ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	6978      	ldr	r0, [r7, #20]
 8003efc:	f7ff ff90 	bl	8003e20 <NVIC_EncodePriority>
 8003f00:	4602      	mov	r2, r0
 8003f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff ff5f 	bl	8003dcc <__NVIC_SetPriority>
}
 8003f0e:	bf00      	nop
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff35 	bl	8003d94 <__NVIC_EnableIRQ>
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff ffa2 	bl	8003e84 <SysTick_Config>
 8003f40:	4603      	mov	r3, r0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b08b      	sub	sp, #44	; 0x2c
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f56:	2300      	movs	r3, #0
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f5e:	e169      	b.n	8004234 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f60:	2201      	movs	r2, #1
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	f040 8158 	bne.w	800422e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4a9a      	ldr	r2, [pc, #616]	; (80041ec <HAL_GPIO_Init+0x2a0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d05e      	beq.n	8004046 <HAL_GPIO_Init+0xfa>
 8003f88:	4a98      	ldr	r2, [pc, #608]	; (80041ec <HAL_GPIO_Init+0x2a0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d875      	bhi.n	800407a <HAL_GPIO_Init+0x12e>
 8003f8e:	4a98      	ldr	r2, [pc, #608]	; (80041f0 <HAL_GPIO_Init+0x2a4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d058      	beq.n	8004046 <HAL_GPIO_Init+0xfa>
 8003f94:	4a96      	ldr	r2, [pc, #600]	; (80041f0 <HAL_GPIO_Init+0x2a4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d86f      	bhi.n	800407a <HAL_GPIO_Init+0x12e>
 8003f9a:	4a96      	ldr	r2, [pc, #600]	; (80041f4 <HAL_GPIO_Init+0x2a8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d052      	beq.n	8004046 <HAL_GPIO_Init+0xfa>
 8003fa0:	4a94      	ldr	r2, [pc, #592]	; (80041f4 <HAL_GPIO_Init+0x2a8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d869      	bhi.n	800407a <HAL_GPIO_Init+0x12e>
 8003fa6:	4a94      	ldr	r2, [pc, #592]	; (80041f8 <HAL_GPIO_Init+0x2ac>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d04c      	beq.n	8004046 <HAL_GPIO_Init+0xfa>
 8003fac:	4a92      	ldr	r2, [pc, #584]	; (80041f8 <HAL_GPIO_Init+0x2ac>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d863      	bhi.n	800407a <HAL_GPIO_Init+0x12e>
 8003fb2:	4a92      	ldr	r2, [pc, #584]	; (80041fc <HAL_GPIO_Init+0x2b0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d046      	beq.n	8004046 <HAL_GPIO_Init+0xfa>
 8003fb8:	4a90      	ldr	r2, [pc, #576]	; (80041fc <HAL_GPIO_Init+0x2b0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d85d      	bhi.n	800407a <HAL_GPIO_Init+0x12e>
 8003fbe:	2b12      	cmp	r3, #18
 8003fc0:	d82a      	bhi.n	8004018 <HAL_GPIO_Init+0xcc>
 8003fc2:	2b12      	cmp	r3, #18
 8003fc4:	d859      	bhi.n	800407a <HAL_GPIO_Init+0x12e>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <HAL_GPIO_Init+0x80>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08004047 	.word	0x08004047
 8003fd0:	08004021 	.word	0x08004021
 8003fd4:	08004033 	.word	0x08004033
 8003fd8:	08004075 	.word	0x08004075
 8003fdc:	0800407b 	.word	0x0800407b
 8003fe0:	0800407b 	.word	0x0800407b
 8003fe4:	0800407b 	.word	0x0800407b
 8003fe8:	0800407b 	.word	0x0800407b
 8003fec:	0800407b 	.word	0x0800407b
 8003ff0:	0800407b 	.word	0x0800407b
 8003ff4:	0800407b 	.word	0x0800407b
 8003ff8:	0800407b 	.word	0x0800407b
 8003ffc:	0800407b 	.word	0x0800407b
 8004000:	0800407b 	.word	0x0800407b
 8004004:	0800407b 	.word	0x0800407b
 8004008:	0800407b 	.word	0x0800407b
 800400c:	0800407b 	.word	0x0800407b
 8004010:	08004029 	.word	0x08004029
 8004014:	0800403d 	.word	0x0800403d
 8004018:	4a79      	ldr	r2, [pc, #484]	; (8004200 <HAL_GPIO_Init+0x2b4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800401e:	e02c      	b.n	800407a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	623b      	str	r3, [r7, #32]
          break;
 8004026:	e029      	b.n	800407c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	3304      	adds	r3, #4
 800402e:	623b      	str	r3, [r7, #32]
          break;
 8004030:	e024      	b.n	800407c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	3308      	adds	r3, #8
 8004038:	623b      	str	r3, [r7, #32]
          break;
 800403a:	e01f      	b.n	800407c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	330c      	adds	r3, #12
 8004042:	623b      	str	r3, [r7, #32]
          break;
 8004044:	e01a      	b.n	800407c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800404e:	2304      	movs	r3, #4
 8004050:	623b      	str	r3, [r7, #32]
          break;
 8004052:	e013      	b.n	800407c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d105      	bne.n	8004068 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800405c:	2308      	movs	r3, #8
 800405e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	611a      	str	r2, [r3, #16]
          break;
 8004066:	e009      	b.n	800407c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004068:	2308      	movs	r3, #8
 800406a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	615a      	str	r2, [r3, #20]
          break;
 8004072:	e003      	b.n	800407c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004074:	2300      	movs	r3, #0
 8004076:	623b      	str	r3, [r7, #32]
          break;
 8004078:	e000      	b.n	800407c <HAL_GPIO_Init+0x130>
          break;
 800407a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2bff      	cmp	r3, #255	; 0xff
 8004080:	d801      	bhi.n	8004086 <HAL_GPIO_Init+0x13a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	e001      	b.n	800408a <HAL_GPIO_Init+0x13e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3304      	adds	r3, #4
 800408a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2bff      	cmp	r3, #255	; 0xff
 8004090:	d802      	bhi.n	8004098 <HAL_GPIO_Init+0x14c>
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	e002      	b.n	800409e <HAL_GPIO_Init+0x152>
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	3b08      	subs	r3, #8
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	210f      	movs	r1, #15
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	401a      	ands	r2, r3
 80040b0:	6a39      	ldr	r1, [r7, #32]
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	fa01 f303 	lsl.w	r3, r1, r3
 80040b8:	431a      	orrs	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80b1 	beq.w	800422e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040cc:	4b4d      	ldr	r3, [pc, #308]	; (8004204 <HAL_GPIO_Init+0x2b8>)
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	4a4c      	ldr	r2, [pc, #304]	; (8004204 <HAL_GPIO_Init+0x2b8>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	6193      	str	r3, [r2, #24]
 80040d8:	4b4a      	ldr	r3, [pc, #296]	; (8004204 <HAL_GPIO_Init+0x2b8>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040e4:	4a48      	ldr	r2, [pc, #288]	; (8004208 <HAL_GPIO_Init+0x2bc>)
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	089b      	lsrs	r3, r3, #2
 80040ea:	3302      	adds	r3, #2
 80040ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	220f      	movs	r2, #15
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4013      	ands	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a40      	ldr	r2, [pc, #256]	; (800420c <HAL_GPIO_Init+0x2c0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d013      	beq.n	8004138 <HAL_GPIO_Init+0x1ec>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a3f      	ldr	r2, [pc, #252]	; (8004210 <HAL_GPIO_Init+0x2c4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00d      	beq.n	8004134 <HAL_GPIO_Init+0x1e8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a3e      	ldr	r2, [pc, #248]	; (8004214 <HAL_GPIO_Init+0x2c8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d007      	beq.n	8004130 <HAL_GPIO_Init+0x1e4>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a3d      	ldr	r2, [pc, #244]	; (8004218 <HAL_GPIO_Init+0x2cc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d101      	bne.n	800412c <HAL_GPIO_Init+0x1e0>
 8004128:	2303      	movs	r3, #3
 800412a:	e006      	b.n	800413a <HAL_GPIO_Init+0x1ee>
 800412c:	2304      	movs	r3, #4
 800412e:	e004      	b.n	800413a <HAL_GPIO_Init+0x1ee>
 8004130:	2302      	movs	r3, #2
 8004132:	e002      	b.n	800413a <HAL_GPIO_Init+0x1ee>
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <HAL_GPIO_Init+0x1ee>
 8004138:	2300      	movs	r3, #0
 800413a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413c:	f002 0203 	and.w	r2, r2, #3
 8004140:	0092      	lsls	r2, r2, #2
 8004142:	4093      	lsls	r3, r2
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800414a:	492f      	ldr	r1, [pc, #188]	; (8004208 <HAL_GPIO_Init+0x2bc>)
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	089b      	lsrs	r3, r3, #2
 8004150:	3302      	adds	r3, #2
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d006      	beq.n	8004172 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004164:	4b2d      	ldr	r3, [pc, #180]	; (800421c <HAL_GPIO_Init+0x2d0>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	492c      	ldr	r1, [pc, #176]	; (800421c <HAL_GPIO_Init+0x2d0>)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	4313      	orrs	r3, r2
 800416e:	600b      	str	r3, [r1, #0]
 8004170:	e006      	b.n	8004180 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004172:	4b2a      	ldr	r3, [pc, #168]	; (800421c <HAL_GPIO_Init+0x2d0>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	43db      	mvns	r3, r3
 800417a:	4928      	ldr	r1, [pc, #160]	; (800421c <HAL_GPIO_Init+0x2d0>)
 800417c:	4013      	ands	r3, r2
 800417e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d006      	beq.n	800419a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800418c:	4b23      	ldr	r3, [pc, #140]	; (800421c <HAL_GPIO_Init+0x2d0>)
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	4922      	ldr	r1, [pc, #136]	; (800421c <HAL_GPIO_Init+0x2d0>)
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]
 8004198:	e006      	b.n	80041a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_GPIO_Init+0x2d0>)
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	43db      	mvns	r3, r3
 80041a2:	491e      	ldr	r1, [pc, #120]	; (800421c <HAL_GPIO_Init+0x2d0>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d006      	beq.n	80041c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041b4:	4b19      	ldr	r3, [pc, #100]	; (800421c <HAL_GPIO_Init+0x2d0>)
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	4918      	ldr	r1, [pc, #96]	; (800421c <HAL_GPIO_Init+0x2d0>)
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]
 80041c0:	e006      	b.n	80041d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041c2:	4b16      	ldr	r3, [pc, #88]	; (800421c <HAL_GPIO_Init+0x2d0>)
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	43db      	mvns	r3, r3
 80041ca:	4914      	ldr	r1, [pc, #80]	; (800421c <HAL_GPIO_Init+0x2d0>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d021      	beq.n	8004220 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <HAL_GPIO_Init+0x2d0>)
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	490e      	ldr	r1, [pc, #56]	; (800421c <HAL_GPIO_Init+0x2d0>)
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60cb      	str	r3, [r1, #12]
 80041e8:	e021      	b.n	800422e <HAL_GPIO_Init+0x2e2>
 80041ea:	bf00      	nop
 80041ec:	10320000 	.word	0x10320000
 80041f0:	10310000 	.word	0x10310000
 80041f4:	10220000 	.word	0x10220000
 80041f8:	10210000 	.word	0x10210000
 80041fc:	10120000 	.word	0x10120000
 8004200:	10110000 	.word	0x10110000
 8004204:	40021000 	.word	0x40021000
 8004208:	40010000 	.word	0x40010000
 800420c:	40010800 	.word	0x40010800
 8004210:	40010c00 	.word	0x40010c00
 8004214:	40011000 	.word	0x40011000
 8004218:	40011400 	.word	0x40011400
 800421c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_GPIO_Init+0x304>)
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	43db      	mvns	r3, r3
 8004228:	4909      	ldr	r1, [pc, #36]	; (8004250 <HAL_GPIO_Init+0x304>)
 800422a:	4013      	ands	r3, r2
 800422c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	3301      	adds	r3, #1
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	fa22 f303 	lsr.w	r3, r2, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	f47f ae8e 	bne.w	8003f60 <HAL_GPIO_Init+0x14>
  }
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop
 8004248:	372c      	adds	r7, #44	; 0x2c
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr
 8004250:	40010400 	.word	0x40010400

08004254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]
 8004260:	4613      	mov	r3, r2
 8004262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004264:	787b      	ldrb	r3, [r7, #1]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800426a:	887a      	ldrh	r2, [r7, #2]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004270:	e003      	b.n	800427a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004272:	887b      	ldrh	r3, [r7, #2]
 8004274:	041a      	lsls	r2, r3, #16
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	611a      	str	r2, [r3, #16]
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	4013      	ands	r3, r2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800429a:	4a05      	ldr	r2, [pc, #20]	; (80042b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff f896 	bl	80033d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40010400 	.word	0x40010400

080042b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e12b      	b.n	800451e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff fb1a 	bl	8003914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2224      	movs	r2, #36	; 0x24
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004318:	f001 fba0 	bl	8005a5c <HAL_RCC_GetPCLK1Freq>
 800431c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4a81      	ldr	r2, [pc, #516]	; (8004528 <HAL_I2C_Init+0x274>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d807      	bhi.n	8004338 <HAL_I2C_Init+0x84>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a80      	ldr	r2, [pc, #512]	; (800452c <HAL_I2C_Init+0x278>)
 800432c:	4293      	cmp	r3, r2
 800432e:	bf94      	ite	ls
 8004330:	2301      	movls	r3, #1
 8004332:	2300      	movhi	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	e006      	b.n	8004346 <HAL_I2C_Init+0x92>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a7d      	ldr	r2, [pc, #500]	; (8004530 <HAL_I2C_Init+0x27c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	bf94      	ite	ls
 8004340:	2301      	movls	r3, #1
 8004342:	2300      	movhi	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0e7      	b.n	800451e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4a78      	ldr	r2, [pc, #480]	; (8004534 <HAL_I2C_Init+0x280>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	0c9b      	lsrs	r3, r3, #18
 8004358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	4a6a      	ldr	r2, [pc, #424]	; (8004528 <HAL_I2C_Init+0x274>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d802      	bhi.n	8004388 <HAL_I2C_Init+0xd4>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3301      	adds	r3, #1
 8004386:	e009      	b.n	800439c <HAL_I2C_Init+0xe8>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	4a69      	ldr	r2, [pc, #420]	; (8004538 <HAL_I2C_Init+0x284>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	099b      	lsrs	r3, r3, #6
 800439a:	3301      	adds	r3, #1
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	495c      	ldr	r1, [pc, #368]	; (8004528 <HAL_I2C_Init+0x274>)
 80043b8:	428b      	cmp	r3, r1
 80043ba:	d819      	bhi.n	80043f0 <HAL_I2C_Init+0x13c>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1e59      	subs	r1, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ca:	1c59      	adds	r1, r3, #1
 80043cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043d0:	400b      	ands	r3, r1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_I2C_Init+0x138>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1e59      	subs	r1, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e4:	3301      	adds	r3, #1
 80043e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ea:	e051      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 80043ec:	2304      	movs	r3, #4
 80043ee:	e04f      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d111      	bne.n	800441c <HAL_I2C_Init+0x168>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1e58      	subs	r0, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	440b      	add	r3, r1
 8004406:	fbb0 f3f3 	udiv	r3, r0, r3
 800440a:	3301      	adds	r3, #1
 800440c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf0c      	ite	eq
 8004414:	2301      	moveq	r3, #1
 8004416:	2300      	movne	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e012      	b.n	8004442 <HAL_I2C_Init+0x18e>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1e58      	subs	r0, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	0099      	lsls	r1, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004432:	3301      	adds	r3, #1
 8004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_I2C_Init+0x196>
 8004446:	2301      	movs	r3, #1
 8004448:	e022      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10e      	bne.n	8004470 <HAL_I2C_Init+0x1bc>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1e58      	subs	r0, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6859      	ldr	r1, [r3, #4]
 800445a:	460b      	mov	r3, r1
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	440b      	add	r3, r1
 8004460:	fbb0 f3f3 	udiv	r3, r0, r3
 8004464:	3301      	adds	r3, #1
 8004466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800446e:	e00f      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1e58      	subs	r0, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6859      	ldr	r1, [r3, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	0099      	lsls	r1, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	fbb0 f3f3 	udiv	r3, r0, r3
 8004486:	3301      	adds	r3, #1
 8004488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	6809      	ldr	r1, [r1, #0]
 8004494:	4313      	orrs	r3, r2
 8004496:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6911      	ldr	r1, [r2, #16]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68d2      	ldr	r2, [r2, #12]
 80044ca:	4311      	orrs	r1, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	000186a0 	.word	0x000186a0
 800452c:	001e847f 	.word	0x001e847f
 8004530:	003d08ff 	.word	0x003d08ff
 8004534:	431bde83 	.word	0x431bde83
 8004538:	10624dd3 	.word	0x10624dd3

0800453c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	4608      	mov	r0, r1
 8004546:	4611      	mov	r1, r2
 8004548:	461a      	mov	r2, r3
 800454a:	4603      	mov	r3, r0
 800454c:	817b      	strh	r3, [r7, #10]
 800454e:	460b      	mov	r3, r1
 8004550:	813b      	strh	r3, [r7, #8]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004556:	f7ff fbbd 	bl	8003cd4 <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b20      	cmp	r3, #32
 8004566:	f040 80d9 	bne.w	800471c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	2319      	movs	r3, #25
 8004570:	2201      	movs	r2, #1
 8004572:	496d      	ldr	r1, [pc, #436]	; (8004728 <HAL_I2C_Mem_Write+0x1ec>)
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fcc1 	bl	8004efc <I2C_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
 8004582:	e0cc      	b.n	800471e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_I2C_Mem_Write+0x56>
 800458e:	2302      	movs	r3, #2
 8004590:	e0c5      	b.n	800471e <HAL_I2C_Mem_Write+0x1e2>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d007      	beq.n	80045b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2221      	movs	r2, #33	; 0x21
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2240      	movs	r2, #64	; 0x40
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a3a      	ldr	r2, [r7, #32]
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a4d      	ldr	r2, [pc, #308]	; (800472c <HAL_I2C_Mem_Write+0x1f0>)
 80045f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045fa:	88f8      	ldrh	r0, [r7, #6]
 80045fc:	893a      	ldrh	r2, [r7, #8]
 80045fe:	8979      	ldrh	r1, [r7, #10]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	4603      	mov	r3, r0
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 faf8 	bl	8004c00 <I2C_RequestMemoryWrite>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d052      	beq.n	80046bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e081      	b.n	800471e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fd42 	bl	80050a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00d      	beq.n	8004646 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	2b04      	cmp	r3, #4
 8004630:	d107      	bne.n	8004642 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004640:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e06b      	b.n	800471e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	781a      	ldrb	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b04      	cmp	r3, #4
 8004682:	d11b      	bne.n	80046bc <HAL_I2C_Mem_Write+0x180>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004688:	2b00      	cmp	r3, #0
 800468a:	d017      	beq.n	80046bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1aa      	bne.n	800461a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 fd2e 	bl	800512a <I2C_WaitOnBTFFlagUntilTimeout>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00d      	beq.n	80046f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d107      	bne.n	80046ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e016      	b.n	800471e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	e000      	b.n	800471e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800471c:	2302      	movs	r3, #2
  }
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	00100002 	.word	0x00100002
 800472c:	ffff0000 	.word	0xffff0000

08004730 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08c      	sub	sp, #48	; 0x30
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	4608      	mov	r0, r1
 800473a:	4611      	mov	r1, r2
 800473c:	461a      	mov	r2, r3
 800473e:	4603      	mov	r3, r0
 8004740:	817b      	strh	r3, [r7, #10]
 8004742:	460b      	mov	r3, r1
 8004744:	813b      	strh	r3, [r7, #8]
 8004746:	4613      	mov	r3, r2
 8004748:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800474e:	f7ff fac1 	bl	8003cd4 <HAL_GetTick>
 8004752:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b20      	cmp	r3, #32
 800475e:	f040 8244 	bne.w	8004bea <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	2319      	movs	r3, #25
 8004768:	2201      	movs	r2, #1
 800476a:	4982      	ldr	r1, [pc, #520]	; (8004974 <HAL_I2C_Mem_Read+0x244>)
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fbc5 	bl	8004efc <I2C_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004778:	2302      	movs	r3, #2
 800477a:	e237      	b.n	8004bec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_I2C_Mem_Read+0x5a>
 8004786:	2302      	movs	r3, #2
 8004788:	e230      	b.n	8004bec <HAL_I2C_Mem_Read+0x4bc>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b01      	cmp	r3, #1
 800479e:	d007      	beq.n	80047b0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2222      	movs	r2, #34	; 0x22
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2240      	movs	r2, #64	; 0x40
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80047e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a62      	ldr	r2, [pc, #392]	; (8004978 <HAL_I2C_Mem_Read+0x248>)
 80047f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047f2:	88f8      	ldrh	r0, [r7, #6]
 80047f4:	893a      	ldrh	r2, [r7, #8]
 80047f6:	8979      	ldrh	r1, [r7, #10]
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	4603      	mov	r3, r0
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 fa92 	bl	8004d2c <I2C_RequestMemoryRead>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e1ec      	b.n	8004bec <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	2b00      	cmp	r3, #0
 8004818:	d113      	bne.n	8004842 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e1c0      	b.n	8004bc4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004846:	2b01      	cmp	r3, #1
 8004848:	d11e      	bne.n	8004888 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004858:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800485a:	b672      	cpsid	i
}
 800485c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485e:	2300      	movs	r3, #0
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004882:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004884:	b662      	cpsie	i
}
 8004886:	e035      	b.n	80048f4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488c:	2b02      	cmp	r3, #2
 800488e:	d11e      	bne.n	80048ce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800489e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80048a0:	b672      	cpsid	i
}
 80048a2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80048ca:	b662      	cpsie	i
}
 80048cc:	e012      	b.n	80048f4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048dc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80048f4:	e166      	b.n	8004bc4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	f200 811f 	bhi.w	8004b3e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004904:	2b01      	cmp	r3, #1
 8004906:	d123      	bne.n	8004950 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fc4d 	bl	80051ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e167      	b.n	8004bec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800494e:	e139      	b.n	8004bc4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004954:	2b02      	cmp	r3, #2
 8004956:	d152      	bne.n	80049fe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495e:	2200      	movs	r2, #0
 8004960:	4906      	ldr	r1, [pc, #24]	; (800497c <HAL_I2C_Mem_Read+0x24c>)
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 faca 	bl	8004efc <I2C_WaitOnFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e13c      	b.n	8004bec <HAL_I2C_Mem_Read+0x4bc>
 8004972:	bf00      	nop
 8004974:	00100002 	.word	0x00100002
 8004978:	ffff0000 	.word	0xffff0000
 800497c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004980:	b672      	cpsid	i
}
 8004982:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80049c6:	b662      	cpsie	i
}
 80049c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049fc:	e0e2      	b.n	8004bc4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a04:	2200      	movs	r2, #0
 8004a06:	497b      	ldr	r1, [pc, #492]	; (8004bf4 <HAL_I2C_Mem_Read+0x4c4>)
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fa77 	bl	8004efc <I2C_WaitOnFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0e9      	b.n	8004bec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a28:	b672      	cpsid	i
}
 8004a2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a5e:	4b66      	ldr	r3, [pc, #408]	; (8004bf8 <HAL_I2C_Mem_Read+0x4c8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	08db      	lsrs	r3, r3, #3
 8004a64:	4a65      	ldr	r2, [pc, #404]	; (8004bfc <HAL_I2C_Mem_Read+0x4cc>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	0a1a      	lsrs	r2, r3, #8
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	00da      	lsls	r2, r3, #3
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d118      	bne.n	8004ab6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f043 0220 	orr.w	r2, r3, #32
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004aa6:	b662      	cpsie	i
}
 8004aa8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e09a      	b.n	8004bec <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d1d9      	bne.n	8004a78 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004b06:	b662      	cpsie	i
}
 8004b08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b3c:	e042      	b.n	8004bc4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fb32 	bl	80051ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e04c      	b.n	8004bec <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d118      	bne.n	8004bc4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f47f ae94 	bne.w	80048f6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e000      	b.n	8004bec <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004bea:	2302      	movs	r3, #2
  }
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3728      	adds	r7, #40	; 0x28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	00010004 	.word	0x00010004
 8004bf8:	20000008 	.word	0x20000008
 8004bfc:	14f8b589 	.word	0x14f8b589

08004c00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	4608      	mov	r0, r1
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4603      	mov	r3, r0
 8004c10:	817b      	strh	r3, [r7, #10]
 8004c12:	460b      	mov	r3, r1
 8004c14:	813b      	strh	r3, [r7, #8]
 8004c16:	4613      	mov	r3, r2
 8004c18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f960 	bl	8004efc <I2C_WaitOnFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00d      	beq.n	8004c5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c50:	d103      	bne.n	8004c5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e05f      	b.n	8004d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c5e:	897b      	ldrh	r3, [r7, #10]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	6a3a      	ldr	r2, [r7, #32]
 8004c72:	492d      	ldr	r1, [pc, #180]	; (8004d28 <I2C_RequestMemoryWrite+0x128>)
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f998 	bl	8004faa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e04c      	b.n	8004d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9c:	6a39      	ldr	r1, [r7, #32]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fa02 	bl	80050a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00d      	beq.n	8004cc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d107      	bne.n	8004cc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e02b      	b.n	8004d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d105      	bne.n	8004cd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ccc:	893b      	ldrh	r3, [r7, #8]
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	611a      	str	r2, [r3, #16]
 8004cd6:	e021      	b.n	8004d1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cd8:	893b      	ldrh	r3, [r7, #8]
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce8:	6a39      	ldr	r1, [r7, #32]
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 f9dc 	bl	80050a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00d      	beq.n	8004d12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d107      	bne.n	8004d0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e005      	b.n	8004d1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d12:	893b      	ldrh	r3, [r7, #8]
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	00010002 	.word	0x00010002

08004d2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	4608      	mov	r0, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	817b      	strh	r3, [r7, #10]
 8004d3e:	460b      	mov	r3, r1
 8004d40:	813b      	strh	r3, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f8c2 	bl	8004efc <I2C_WaitOnFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00d      	beq.n	8004d9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d8c:	d103      	bne.n	8004d96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e0aa      	b.n	8004ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d9a:	897b      	ldrh	r3, [r7, #10]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004da8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	6a3a      	ldr	r2, [r7, #32]
 8004dae:	4952      	ldr	r1, [pc, #328]	; (8004ef8 <I2C_RequestMemoryRead+0x1cc>)
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 f8fa 	bl	8004faa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e097      	b.n	8004ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd8:	6a39      	ldr	r1, [r7, #32]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f964 	bl	80050a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00d      	beq.n	8004e02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d107      	bne.n	8004dfe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e076      	b.n	8004ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d105      	bne.n	8004e14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e08:	893b      	ldrh	r3, [r7, #8]
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	611a      	str	r2, [r3, #16]
 8004e12:	e021      	b.n	8004e58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e14:	893b      	ldrh	r3, [r7, #8]
 8004e16:	0a1b      	lsrs	r3, r3, #8
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e24:	6a39      	ldr	r1, [r7, #32]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f93e 	bl	80050a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00d      	beq.n	8004e4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d107      	bne.n	8004e4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e050      	b.n	8004ef0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e4e:	893b      	ldrh	r3, [r7, #8]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5a:	6a39      	ldr	r1, [r7, #32]
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f923 	bl	80050a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00d      	beq.n	8004e84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d107      	bne.n	8004e80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e035      	b.n	8004ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f82b 	bl	8004efc <I2C_WaitOnFlagUntilTimeout>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00d      	beq.n	8004ec8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eba:	d103      	bne.n	8004ec4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e013      	b.n	8004ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ec8:	897b      	ldrh	r3, [r7, #10]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	6a3a      	ldr	r2, [r7, #32]
 8004edc:	4906      	ldr	r1, [pc, #24]	; (8004ef8 <I2C_RequestMemoryRead+0x1cc>)
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f863 	bl	8004faa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	00010002 	.word	0x00010002

08004efc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f0c:	e025      	b.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f14:	d021      	beq.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f16:	f7fe fedd 	bl	8003cd4 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d302      	bcc.n	8004f2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d116      	bne.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	f043 0220 	orr.w	r2, r3, #32
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e023      	b.n	8004fa2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	0c1b      	lsrs	r3, r3, #16
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d10d      	bne.n	8004f80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	43da      	mvns	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bf0c      	ite	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	2300      	movne	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	e00c      	b.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	43da      	mvns	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bf0c      	ite	eq
 8004f92:	2301      	moveq	r3, #1
 8004f94:	2300      	movne	r3, #0
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	79fb      	ldrb	r3, [r7, #7]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d0b6      	beq.n	8004f0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fb8:	e051      	b.n	800505e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc8:	d123      	bne.n	8005012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fe2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f043 0204 	orr.w	r2, r3, #4
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e046      	b.n	80050a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005018:	d021      	beq.n	800505e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501a:	f7fe fe5b 	bl	8003cd4 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	429a      	cmp	r2, r3
 8005028:	d302      	bcc.n	8005030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d116      	bne.n	800505e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f043 0220 	orr.w	r2, r3, #32
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e020      	b.n	80050a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	0c1b      	lsrs	r3, r3, #16
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	d10c      	bne.n	8005082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	43da      	mvns	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4013      	ands	r3, r2
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	bf14      	ite	ne
 800507a:	2301      	movne	r3, #1
 800507c:	2300      	moveq	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	e00b      	b.n	800509a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	43da      	mvns	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4013      	ands	r3, r2
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf14      	ite	ne
 8005094:	2301      	movne	r3, #1
 8005096:	2300      	moveq	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d18d      	bne.n	8004fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050b4:	e02d      	b.n	8005112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f8ce 	bl	8005258 <I2C_IsAcknowledgeFailed>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e02d      	b.n	8005122 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050cc:	d021      	beq.n	8005112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ce:	f7fe fe01 	bl	8003cd4 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d302      	bcc.n	80050e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d116      	bne.n	8005112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f043 0220 	orr.w	r2, r3, #32
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e007      	b.n	8005122 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511c:	2b80      	cmp	r3, #128	; 0x80
 800511e:	d1ca      	bne.n	80050b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005136:	e02d      	b.n	8005194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f88d 	bl	8005258 <I2C_IsAcknowledgeFailed>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e02d      	b.n	80051a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800514e:	d021      	beq.n	8005194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005150:	f7fe fdc0 	bl	8003cd4 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	429a      	cmp	r2, r3
 800515e:	d302      	bcc.n	8005166 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d116      	bne.n	8005194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	f043 0220 	orr.w	r2, r3, #32
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e007      	b.n	80051a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d1ca      	bne.n	8005138 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051b8:	e042      	b.n	8005240 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b10      	cmp	r3, #16
 80051c6:	d119      	bne.n	80051fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0210 	mvn.w	r2, #16
 80051d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e029      	b.n	8005250 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fc:	f7fe fd6a 	bl	8003cd4 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	429a      	cmp	r2, r3
 800520a:	d302      	bcc.n	8005212 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d116      	bne.n	8005240 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	f043 0220 	orr.w	r2, r3, #32
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e007      	b.n	8005250 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524a:	2b40      	cmp	r3, #64	; 0x40
 800524c:	d1b5      	bne.n	80051ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526e:	d11b      	bne.n	80052a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005278:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	f043 0204 	orr.w	r2, r3, #4
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr

080052b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e272      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8087 	beq.w	80053e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052d4:	4b92      	ldr	r3, [pc, #584]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f003 030c 	and.w	r3, r3, #12
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d00c      	beq.n	80052fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052e0:	4b8f      	ldr	r3, [pc, #572]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f003 030c 	and.w	r3, r3, #12
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d112      	bne.n	8005312 <HAL_RCC_OscConfig+0x5e>
 80052ec:	4b8c      	ldr	r3, [pc, #560]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f8:	d10b      	bne.n	8005312 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fa:	4b89      	ldr	r3, [pc, #548]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d06c      	beq.n	80053e0 <HAL_RCC_OscConfig+0x12c>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d168      	bne.n	80053e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e24c      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531a:	d106      	bne.n	800532a <HAL_RCC_OscConfig+0x76>
 800531c:	4b80      	ldr	r3, [pc, #512]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a7f      	ldr	r2, [pc, #508]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	e02e      	b.n	8005388 <HAL_RCC_OscConfig+0xd4>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10c      	bne.n	800534c <HAL_RCC_OscConfig+0x98>
 8005332:	4b7b      	ldr	r3, [pc, #492]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a7a      	ldr	r2, [pc, #488]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	4b78      	ldr	r3, [pc, #480]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a77      	ldr	r2, [pc, #476]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	e01d      	b.n	8005388 <HAL_RCC_OscConfig+0xd4>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005354:	d10c      	bne.n	8005370 <HAL_RCC_OscConfig+0xbc>
 8005356:	4b72      	ldr	r3, [pc, #456]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a71      	ldr	r2, [pc, #452]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 800535c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	4b6f      	ldr	r3, [pc, #444]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a6e      	ldr	r2, [pc, #440]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	e00b      	b.n	8005388 <HAL_RCC_OscConfig+0xd4>
 8005370:	4b6b      	ldr	r3, [pc, #428]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a6a      	ldr	r2, [pc, #424]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	4b68      	ldr	r3, [pc, #416]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a67      	ldr	r2, [pc, #412]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005386:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d013      	beq.n	80053b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005390:	f7fe fca0 	bl	8003cd4 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005398:	f7fe fc9c 	bl	8003cd4 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b64      	cmp	r3, #100	; 0x64
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e200      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053aa:	4b5d      	ldr	r3, [pc, #372]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCC_OscConfig+0xe4>
 80053b6:	e014      	b.n	80053e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b8:	f7fe fc8c 	bl	8003cd4 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c0:	f7fe fc88 	bl	8003cd4 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b64      	cmp	r3, #100	; 0x64
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e1ec      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053d2:	4b53      	ldr	r3, [pc, #332]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x10c>
 80053de:	e000      	b.n	80053e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d063      	beq.n	80054b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053ee:	4b4c      	ldr	r3, [pc, #304]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f003 030c 	and.w	r3, r3, #12
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00b      	beq.n	8005412 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80053fa:	4b49      	ldr	r3, [pc, #292]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f003 030c 	and.w	r3, r3, #12
 8005402:	2b08      	cmp	r3, #8
 8005404:	d11c      	bne.n	8005440 <HAL_RCC_OscConfig+0x18c>
 8005406:	4b46      	ldr	r3, [pc, #280]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d116      	bne.n	8005440 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005412:	4b43      	ldr	r3, [pc, #268]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_RCC_OscConfig+0x176>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d001      	beq.n	800542a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e1c0      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542a:	4b3d      	ldr	r3, [pc, #244]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	4939      	ldr	r1, [pc, #228]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 800543a:	4313      	orrs	r3, r2
 800543c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800543e:	e03a      	b.n	80054b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d020      	beq.n	800548a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005448:	4b36      	ldr	r3, [pc, #216]	; (8005524 <HAL_RCC_OscConfig+0x270>)
 800544a:	2201      	movs	r2, #1
 800544c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544e:	f7fe fc41 	bl	8003cd4 <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005456:	f7fe fc3d 	bl	8003cd4 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e1a1      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005468:	4b2d      	ldr	r3, [pc, #180]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0f0      	beq.n	8005456 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005474:	4b2a      	ldr	r3, [pc, #168]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	4927      	ldr	r1, [pc, #156]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 8005484:	4313      	orrs	r3, r2
 8005486:	600b      	str	r3, [r1, #0]
 8005488:	e015      	b.n	80054b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800548a:	4b26      	ldr	r3, [pc, #152]	; (8005524 <HAL_RCC_OscConfig+0x270>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005490:	f7fe fc20 	bl	8003cd4 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005498:	f7fe fc1c 	bl	8003cd4 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e180      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054aa:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d03a      	beq.n	8005538 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d019      	beq.n	80054fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ca:	4b17      	ldr	r3, [pc, #92]	; (8005528 <HAL_RCC_OscConfig+0x274>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d0:	f7fe fc00 	bl	8003cd4 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d8:	f7fe fbfc 	bl	8003cd4 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e160      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ea:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <HAL_RCC_OscConfig+0x26c>)
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80054f6:	2001      	movs	r0, #1
 80054f8:	f000 fac4 	bl	8005a84 <RCC_Delay>
 80054fc:	e01c      	b.n	8005538 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054fe:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <HAL_RCC_OscConfig+0x274>)
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005504:	f7fe fbe6 	bl	8003cd4 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800550a:	e00f      	b.n	800552c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800550c:	f7fe fbe2 	bl	8003cd4 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d908      	bls.n	800552c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e146      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
 800551e:	bf00      	nop
 8005520:	40021000 	.word	0x40021000
 8005524:	42420000 	.word	0x42420000
 8005528:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800552c:	4b92      	ldr	r3, [pc, #584]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e9      	bne.n	800550c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 80a6 	beq.w	8005692 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005546:	2300      	movs	r3, #0
 8005548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800554a:	4b8b      	ldr	r3, [pc, #556]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10d      	bne.n	8005572 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005556:	4b88      	ldr	r3, [pc, #544]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	4a87      	ldr	r2, [pc, #540]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 800555c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005560:	61d3      	str	r3, [r2, #28]
 8005562:	4b85      	ldr	r3, [pc, #532]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800556e:	2301      	movs	r3, #1
 8005570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005572:	4b82      	ldr	r3, [pc, #520]	; (800577c <HAL_RCC_OscConfig+0x4c8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d118      	bne.n	80055b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800557e:	4b7f      	ldr	r3, [pc, #508]	; (800577c <HAL_RCC_OscConfig+0x4c8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a7e      	ldr	r2, [pc, #504]	; (800577c <HAL_RCC_OscConfig+0x4c8>)
 8005584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800558a:	f7fe fba3 	bl	8003cd4 <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005592:	f7fe fb9f 	bl	8003cd4 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b64      	cmp	r3, #100	; 0x64
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e103      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a4:	4b75      	ldr	r3, [pc, #468]	; (800577c <HAL_RCC_OscConfig+0x4c8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0f0      	beq.n	8005592 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d106      	bne.n	80055c6 <HAL_RCC_OscConfig+0x312>
 80055b8:	4b6f      	ldr	r3, [pc, #444]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	4a6e      	ldr	r2, [pc, #440]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	6213      	str	r3, [r2, #32]
 80055c4:	e02d      	b.n	8005622 <HAL_RCC_OscConfig+0x36e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10c      	bne.n	80055e8 <HAL_RCC_OscConfig+0x334>
 80055ce:	4b6a      	ldr	r3, [pc, #424]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	4a69      	ldr	r2, [pc, #420]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	6213      	str	r3, [r2, #32]
 80055da:	4b67      	ldr	r3, [pc, #412]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	4a66      	ldr	r2, [pc, #408]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 80055e0:	f023 0304 	bic.w	r3, r3, #4
 80055e4:	6213      	str	r3, [r2, #32]
 80055e6:	e01c      	b.n	8005622 <HAL_RCC_OscConfig+0x36e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	2b05      	cmp	r3, #5
 80055ee:	d10c      	bne.n	800560a <HAL_RCC_OscConfig+0x356>
 80055f0:	4b61      	ldr	r3, [pc, #388]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	4a60      	ldr	r2, [pc, #384]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 80055f6:	f043 0304 	orr.w	r3, r3, #4
 80055fa:	6213      	str	r3, [r2, #32]
 80055fc:	4b5e      	ldr	r3, [pc, #376]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	4a5d      	ldr	r2, [pc, #372]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	6213      	str	r3, [r2, #32]
 8005608:	e00b      	b.n	8005622 <HAL_RCC_OscConfig+0x36e>
 800560a:	4b5b      	ldr	r3, [pc, #364]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	4a5a      	ldr	r2, [pc, #360]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 8005610:	f023 0301 	bic.w	r3, r3, #1
 8005614:	6213      	str	r3, [r2, #32]
 8005616:	4b58      	ldr	r3, [pc, #352]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	4a57      	ldr	r2, [pc, #348]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 800561c:	f023 0304 	bic.w	r3, r3, #4
 8005620:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d015      	beq.n	8005656 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562a:	f7fe fb53 	bl	8003cd4 <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005630:	e00a      	b.n	8005648 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005632:	f7fe fb4f 	bl	8003cd4 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005640:	4293      	cmp	r3, r2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e0b1      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005648:	4b4b      	ldr	r3, [pc, #300]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0ee      	beq.n	8005632 <HAL_RCC_OscConfig+0x37e>
 8005654:	e014      	b.n	8005680 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005656:	f7fe fb3d 	bl	8003cd4 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800565c:	e00a      	b.n	8005674 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565e:	f7fe fb39 	bl	8003cd4 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	f241 3288 	movw	r2, #5000	; 0x1388
 800566c:	4293      	cmp	r3, r2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e09b      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005674:	4b40      	ldr	r3, [pc, #256]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1ee      	bne.n	800565e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d105      	bne.n	8005692 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005686:	4b3c      	ldr	r3, [pc, #240]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	4a3b      	ldr	r2, [pc, #236]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 800568c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005690:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 8087 	beq.w	80057aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800569c:	4b36      	ldr	r3, [pc, #216]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f003 030c 	and.w	r3, r3, #12
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d061      	beq.n	800576c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d146      	bne.n	800573e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b0:	4b33      	ldr	r3, [pc, #204]	; (8005780 <HAL_RCC_OscConfig+0x4cc>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b6:	f7fe fb0d 	bl	8003cd4 <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056be:	f7fe fb09 	bl	8003cd4 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e06d      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056d0:	4b29      	ldr	r3, [pc, #164]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f0      	bne.n	80056be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e4:	d108      	bne.n	80056f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056e6:	4b24      	ldr	r3, [pc, #144]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	4921      	ldr	r1, [pc, #132]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056f8:	4b1f      	ldr	r3, [pc, #124]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a19      	ldr	r1, [r3, #32]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	430b      	orrs	r3, r1
 800570a:	491b      	ldr	r1, [pc, #108]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 800570c:	4313      	orrs	r3, r2
 800570e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005710:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <HAL_RCC_OscConfig+0x4cc>)
 8005712:	2201      	movs	r2, #1
 8005714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005716:	f7fe fadd 	bl	8003cd4 <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800571c:	e008      	b.n	8005730 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800571e:	f7fe fad9 	bl	8003cd4 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e03d      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005730:	4b11      	ldr	r3, [pc, #68]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0f0      	beq.n	800571e <HAL_RCC_OscConfig+0x46a>
 800573c:	e035      	b.n	80057aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800573e:	4b10      	ldr	r3, [pc, #64]	; (8005780 <HAL_RCC_OscConfig+0x4cc>)
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005744:	f7fe fac6 	bl	8003cd4 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800574c:	f7fe fac2 	bl	8003cd4 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e026      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <HAL_RCC_OscConfig+0x4c4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1f0      	bne.n	800574c <HAL_RCC_OscConfig+0x498>
 800576a:	e01e      	b.n	80057aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d107      	bne.n	8005784 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e019      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
 8005778:	40021000 	.word	0x40021000
 800577c:	40007000 	.word	0x40007000
 8005780:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005784:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <HAL_RCC_OscConfig+0x500>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	429a      	cmp	r2, r3
 8005796:	d106      	bne.n	80057a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d001      	beq.n	80057aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40021000 	.word	0x40021000

080057b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0d0      	b.n	800596e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057cc:	4b6a      	ldr	r3, [pc, #424]	; (8005978 <HAL_RCC_ClockConfig+0x1c0>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d910      	bls.n	80057fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057da:	4b67      	ldr	r3, [pc, #412]	; (8005978 <HAL_RCC_ClockConfig+0x1c0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f023 0207 	bic.w	r2, r3, #7
 80057e2:	4965      	ldr	r1, [pc, #404]	; (8005978 <HAL_RCC_ClockConfig+0x1c0>)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ea:	4b63      	ldr	r3, [pc, #396]	; (8005978 <HAL_RCC_ClockConfig+0x1c0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d001      	beq.n	80057fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0b8      	b.n	800596e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d020      	beq.n	800584a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d005      	beq.n	8005820 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005814:	4b59      	ldr	r3, [pc, #356]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4a58      	ldr	r2, [pc, #352]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 800581a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800581e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800582c:	4b53      	ldr	r3, [pc, #332]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	4a52      	ldr	r2, [pc, #328]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 8005832:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005836:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005838:	4b50      	ldr	r3, [pc, #320]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	494d      	ldr	r1, [pc, #308]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 8005846:	4313      	orrs	r3, r2
 8005848:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d040      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d107      	bne.n	800586e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585e:	4b47      	ldr	r3, [pc, #284]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d115      	bne.n	8005896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e07f      	b.n	800596e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d107      	bne.n	8005886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005876:	4b41      	ldr	r3, [pc, #260]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e073      	b.n	800596e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005886:	4b3d      	ldr	r3, [pc, #244]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e06b      	b.n	800596e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005896:	4b39      	ldr	r3, [pc, #228]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f023 0203 	bic.w	r2, r3, #3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	4936      	ldr	r1, [pc, #216]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058a8:	f7fe fa14 	bl	8003cd4 <HAL_GetTick>
 80058ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ae:	e00a      	b.n	80058c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b0:	f7fe fa10 	bl	8003cd4 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80058be:	4293      	cmp	r3, r2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e053      	b.n	800596e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c6:	4b2d      	ldr	r3, [pc, #180]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f003 020c 	and.w	r2, r3, #12
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d1eb      	bne.n	80058b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058d8:	4b27      	ldr	r3, [pc, #156]	; (8005978 <HAL_RCC_ClockConfig+0x1c0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d210      	bcs.n	8005908 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e6:	4b24      	ldr	r3, [pc, #144]	; (8005978 <HAL_RCC_ClockConfig+0x1c0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f023 0207 	bic.w	r2, r3, #7
 80058ee:	4922      	ldr	r1, [pc, #136]	; (8005978 <HAL_RCC_ClockConfig+0x1c0>)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f6:	4b20      	ldr	r3, [pc, #128]	; (8005978 <HAL_RCC_ClockConfig+0x1c0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d001      	beq.n	8005908 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e032      	b.n	800596e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005914:	4b19      	ldr	r3, [pc, #100]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4916      	ldr	r1, [pc, #88]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 8005922:	4313      	orrs	r3, r2
 8005924:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005932:	4b12      	ldr	r3, [pc, #72]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	490e      	ldr	r1, [pc, #56]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 8005942:	4313      	orrs	r3, r2
 8005944:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005946:	f000 f821 	bl	800598c <HAL_RCC_GetSysClockFreq>
 800594a:	4602      	mov	r2, r0
 800594c:	4b0b      	ldr	r3, [pc, #44]	; (800597c <HAL_RCC_ClockConfig+0x1c4>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	091b      	lsrs	r3, r3, #4
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	490a      	ldr	r1, [pc, #40]	; (8005980 <HAL_RCC_ClockConfig+0x1c8>)
 8005958:	5ccb      	ldrb	r3, [r1, r3]
 800595a:	fa22 f303 	lsr.w	r3, r2, r3
 800595e:	4a09      	ldr	r2, [pc, #36]	; (8005984 <HAL_RCC_ClockConfig+0x1cc>)
 8005960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005962:	4b09      	ldr	r3, [pc, #36]	; (8005988 <HAL_RCC_ClockConfig+0x1d0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f7fe f972 	bl	8003c50 <HAL_InitTick>

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40022000 	.word	0x40022000
 800597c:	40021000 	.word	0x40021000
 8005980:	0800d5e8 	.word	0x0800d5e8
 8005984:	20000008 	.word	0x20000008
 8005988:	2000000c 	.word	0x2000000c

0800598c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800598c:	b490      	push	{r4, r7}
 800598e:	b08a      	sub	sp, #40	; 0x28
 8005990:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005992:	4b29      	ldr	r3, [pc, #164]	; (8005a38 <HAL_RCC_GetSysClockFreq+0xac>)
 8005994:	1d3c      	adds	r4, r7, #4
 8005996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800599c:	f240 2301 	movw	r3, #513	; 0x201
 80059a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
 80059a6:	2300      	movs	r3, #0
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	2300      	movs	r3, #0
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80059b6:	4b21      	ldr	r3, [pc, #132]	; (8005a3c <HAL_RCC_GetSysClockFreq+0xb0>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	f003 030c 	and.w	r3, r3, #12
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d002      	beq.n	80059cc <HAL_RCC_GetSysClockFreq+0x40>
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d003      	beq.n	80059d2 <HAL_RCC_GetSysClockFreq+0x46>
 80059ca:	e02b      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059cc:	4b1c      	ldr	r3, [pc, #112]	; (8005a40 <HAL_RCC_GetSysClockFreq+0xb4>)
 80059ce:	623b      	str	r3, [r7, #32]
      break;
 80059d0:	e02b      	b.n	8005a2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	0c9b      	lsrs	r3, r3, #18
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	3328      	adds	r3, #40	; 0x28
 80059dc:	443b      	add	r3, r7
 80059de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80059e2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d012      	beq.n	8005a14 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059ee:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <HAL_RCC_GetSysClockFreq+0xb0>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	0c5b      	lsrs	r3, r3, #17
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	3328      	adds	r3, #40	; 0x28
 80059fa:	443b      	add	r3, r7
 80059fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005a00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	4a0e      	ldr	r2, [pc, #56]	; (8005a40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005a06:	fb03 f202 	mul.w	r2, r3, r2
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
 8005a12:	e004      	b.n	8005a1e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	4a0b      	ldr	r2, [pc, #44]	; (8005a44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a18:	fb02 f303 	mul.w	r3, r2, r3
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	623b      	str	r3, [r7, #32]
      break;
 8005a22:	e002      	b.n	8005a2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005a26:	623b      	str	r3, [r7, #32]
      break;
 8005a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3728      	adds	r7, #40	; 0x28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bc90      	pop	{r4, r7}
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	0800bb8c 	.word	0x0800bb8c
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	007a1200 	.word	0x007a1200
 8005a44:	003d0900 	.word	0x003d0900

08005a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a4c:	4b02      	ldr	r3, [pc, #8]	; (8005a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr
 8005a58:	20000008 	.word	0x20000008

08005a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a60:	f7ff fff2 	bl	8005a48 <HAL_RCC_GetHCLKFreq>
 8005a64:	4602      	mov	r2, r0
 8005a66:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	0a1b      	lsrs	r3, r3, #8
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	4903      	ldr	r1, [pc, #12]	; (8005a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a72:	5ccb      	ldrb	r3, [r1, r3]
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	0800d5f8 	.word	0x0800d5f8

08005a84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <RCC_Delay+0x34>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <RCC_Delay+0x38>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	0a5b      	lsrs	r3, r3, #9
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	fb02 f303 	mul.w	r3, r2, r3
 8005a9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005aa0:	bf00      	nop
  }
  while (Delay --);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	1e5a      	subs	r2, r3, #1
 8005aa6:	60fa      	str	r2, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1f9      	bne.n	8005aa0 <RCC_Delay+0x1c>
}
 8005aac:	bf00      	nop
 8005aae:	bf00      	nop
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr
 8005ab8:	20000008 	.word	0x20000008
 8005abc:	10624dd3 	.word	0x10624dd3

08005ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e041      	b.n	8005b56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d106      	bne.n	8005aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fd ff52 	bl	8003990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3304      	adds	r3, #4
 8005afc:	4619      	mov	r1, r3
 8005afe:	4610      	mov	r0, r2
 8005b00:	f000 fa70 	bl	8005fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d001      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e03a      	b.n	8005bee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0201 	orr.w	r2, r2, #1
 8005b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <HAL_TIM_Base_Start_IT+0x98>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00e      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x58>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba2:	d009      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x58>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a14      	ldr	r2, [pc, #80]	; (8005bfc <HAL_TIM_Base_Start_IT+0x9c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x58>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a13      	ldr	r2, [pc, #76]	; (8005c00 <HAL_TIM_Base_Start_IT+0xa0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d111      	bne.n	8005bdc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b06      	cmp	r3, #6
 8005bc8:	d010      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0201 	orr.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bda:	e007      	b.n	8005bec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr
 8005bf8:	40012c00 	.word	0x40012c00
 8005bfc:	40000400 	.word	0x40000400
 8005c00:	40000800 	.word	0x40000800

08005c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d122      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d11b      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0202 	mvn.w	r2, #2
 8005c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f9b1 	bl	8005fae <HAL_TIM_IC_CaptureCallback>
 8005c4c:	e005      	b.n	8005c5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f9a4 	bl	8005f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f9b3 	bl	8005fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d122      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	d11b      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0204 	mvn.w	r2, #4
 8005c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f987 	bl	8005fae <HAL_TIM_IC_CaptureCallback>
 8005ca0:	e005      	b.n	8005cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f97a 	bl	8005f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f989 	bl	8005fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d122      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d11b      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0208 	mvn.w	r2, #8
 8005cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2204      	movs	r2, #4
 8005cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f95d 	bl	8005fae <HAL_TIM_IC_CaptureCallback>
 8005cf4:	e005      	b.n	8005d02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f950 	bl	8005f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f95f 	bl	8005fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	2b10      	cmp	r3, #16
 8005d14:	d122      	bne.n	8005d5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0310 	and.w	r3, r3, #16
 8005d20:	2b10      	cmp	r3, #16
 8005d22:	d11b      	bne.n	8005d5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f06f 0210 	mvn.w	r2, #16
 8005d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2208      	movs	r2, #8
 8005d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f933 	bl	8005fae <HAL_TIM_IC_CaptureCallback>
 8005d48:	e005      	b.n	8005d56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f926 	bl	8005f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f935 	bl	8005fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d10e      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d107      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0201 	mvn.w	r2, #1
 8005d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7fd fb30 	bl	80033e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d92:	2b80      	cmp	r3, #128	; 0x80
 8005d94:	d10e      	bne.n	8005db4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da0:	2b80      	cmp	r3, #128	; 0x80
 8005da2:	d107      	bne.n	8005db4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fa77 	bl	80062a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dbe:	2b40      	cmp	r3, #64	; 0x40
 8005dc0:	d10e      	bne.n	8005de0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dcc:	2b40      	cmp	r3, #64	; 0x40
 8005dce:	d107      	bne.n	8005de0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f8f9 	bl	8005fd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b20      	cmp	r3, #32
 8005dec:	d10e      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d107      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f06f 0220 	mvn.w	r2, #32
 8005e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa42 	bl	8006290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e0c:	bf00      	nop
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_TIM_ConfigClockSource+0x18>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e0b3      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x180>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e64:	d03e      	beq.n	8005ee4 <HAL_TIM_ConfigClockSource+0xd0>
 8005e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6a:	f200 8087 	bhi.w	8005f7c <HAL_TIM_ConfigClockSource+0x168>
 8005e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e72:	f000 8085 	beq.w	8005f80 <HAL_TIM_ConfigClockSource+0x16c>
 8005e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7a:	d87f      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x168>
 8005e7c:	2b70      	cmp	r3, #112	; 0x70
 8005e7e:	d01a      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0xa2>
 8005e80:	2b70      	cmp	r3, #112	; 0x70
 8005e82:	d87b      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x168>
 8005e84:	2b60      	cmp	r3, #96	; 0x60
 8005e86:	d050      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x116>
 8005e88:	2b60      	cmp	r3, #96	; 0x60
 8005e8a:	d877      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x168>
 8005e8c:	2b50      	cmp	r3, #80	; 0x50
 8005e8e:	d03c      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0xf6>
 8005e90:	2b50      	cmp	r3, #80	; 0x50
 8005e92:	d873      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x168>
 8005e94:	2b40      	cmp	r3, #64	; 0x40
 8005e96:	d058      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x136>
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d86f      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x168>
 8005e9c:	2b30      	cmp	r3, #48	; 0x30
 8005e9e:	d064      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x156>
 8005ea0:	2b30      	cmp	r3, #48	; 0x30
 8005ea2:	d86b      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x168>
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d060      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x156>
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d867      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x168>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d05c      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x156>
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d05a      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005eb4:	e062      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6899      	ldr	r1, [r3, #8]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f000 f966 	bl	8006196 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ed8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	609a      	str	r2, [r3, #8]
      break;
 8005ee2:	e04e      	b.n	8005f82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6818      	ldr	r0, [r3, #0]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	6899      	ldr	r1, [r3, #8]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f000 f94f 	bl	8006196 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f06:	609a      	str	r2, [r3, #8]
      break;
 8005f08:	e03b      	b.n	8005f82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	6859      	ldr	r1, [r3, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	461a      	mov	r2, r3
 8005f18:	f000 f8c6 	bl	80060a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2150      	movs	r1, #80	; 0x50
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 f91d 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 8005f28:	e02b      	b.n	8005f82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6859      	ldr	r1, [r3, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	461a      	mov	r2, r3
 8005f38:	f000 f8e4 	bl	8006104 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2160      	movs	r1, #96	; 0x60
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 f90d 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 8005f48:	e01b      	b.n	8005f82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6859      	ldr	r1, [r3, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f000 f8a6 	bl	80060a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2140      	movs	r1, #64	; 0x40
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 f8fd 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 8005f68:	e00b      	b.n	8005f82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f000 f8f4 	bl	8006162 <TIM_ITRx_SetConfig>
        break;
 8005f7a:	e002      	b.n	8005f82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f7c:	bf00      	nop
 8005f7e:	e000      	b.n	8005f82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr

08005fae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bc80      	pop	{r7}
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bc80      	pop	{r7}
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr

08005fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a29      	ldr	r2, [pc, #164]	; (800609c <TIM_Base_SetConfig+0xb8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00b      	beq.n	8006014 <TIM_Base_SetConfig+0x30>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006002:	d007      	beq.n	8006014 <TIM_Base_SetConfig+0x30>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a26      	ldr	r2, [pc, #152]	; (80060a0 <TIM_Base_SetConfig+0xbc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d003      	beq.n	8006014 <TIM_Base_SetConfig+0x30>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a25      	ldr	r2, [pc, #148]	; (80060a4 <TIM_Base_SetConfig+0xc0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d108      	bne.n	8006026 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a1c      	ldr	r2, [pc, #112]	; (800609c <TIM_Base_SetConfig+0xb8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00b      	beq.n	8006046 <TIM_Base_SetConfig+0x62>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006034:	d007      	beq.n	8006046 <TIM_Base_SetConfig+0x62>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a19      	ldr	r2, [pc, #100]	; (80060a0 <TIM_Base_SetConfig+0xbc>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_Base_SetConfig+0x62>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a18      	ldr	r2, [pc, #96]	; (80060a4 <TIM_Base_SetConfig+0xc0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d108      	bne.n	8006058 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a07      	ldr	r2, [pc, #28]	; (800609c <TIM_Base_SetConfig+0xb8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d103      	bne.n	800608c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	615a      	str	r2, [r3, #20]
}
 8006092:	bf00      	nop
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr
 800609c:	40012c00 	.word	0x40012c00
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800

080060a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	f023 0201 	bic.w	r2, r3, #1
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f023 030a 	bic.w	r3, r3, #10
 80060e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	621a      	str	r2, [r3, #32]
}
 80060fa:	bf00      	nop
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	f023 0210 	bic.w	r2, r3, #16
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800612e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	031b      	lsls	r3, r3, #12
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006140:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	621a      	str	r2, [r3, #32]
}
 8006158:	bf00      	nop
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr

08006162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	f043 0307 	orr.w	r3, r3, #7
 8006184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	609a      	str	r2, [r3, #8]
}
 800618c:	bf00      	nop
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr

08006196 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006196:	b480      	push	{r7}
 8006198:	b087      	sub	sp, #28
 800619a:	af00      	add	r7, sp, #0
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
 80061a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	021a      	lsls	r2, r3, #8
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	431a      	orrs	r2, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	4313      	orrs	r3, r2
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	609a      	str	r2, [r3, #8]
}
 80061ca:	bf00      	nop
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr

080061d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e046      	b.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a16      	ldr	r2, [pc, #88]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00e      	beq.n	800624e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006238:	d009      	beq.n	800624e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a12      	ldr	r2, [pc, #72]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a10      	ldr	r2, [pc, #64]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d10c      	bne.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	4313      	orrs	r3, r2
 800625e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	bc80      	pop	{r7}
 8006282:	4770      	bx	lr
 8006284:	40012c00 	.word	0x40012c00
 8006288:	40000400 	.word	0x40000400
 800628c:	40000800 	.word	0x40000800

08006290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	bc80      	pop	{r7}
 80062a0:	4770      	bx	lr

080062a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bc80      	pop	{r7}
 80062b2:	4770      	bx	lr

080062b4 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	4611      	mov	r1, r2
 80062c0:	461a      	mov	r2, r3
 80062c2:	460b      	mov	r3, r1
 80062c4:	80fb      	strh	r3, [r7, #6]
 80062c6:	4613      	mov	r3, r2
 80062c8:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	88fa      	ldrh	r2, [r7, #6]
 80062d4:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	88ba      	ldrh	r2, [r7, #4]
 80062da:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2204      	movs	r2, #4
 80062e0:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2204      	movs	r2, #4
 80062e6:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b29b      	uxth	r3, r3
 8006300:	b21a      	sxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006314:	b29b      	uxth	r3, r3
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29b      	uxth	r3, r3
 800631e:	b21a      	sxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	83da      	strh	r2, [r3, #30]
   g->char_h_space = 1;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   g->char_v_space = 1;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   g->font.p = NULL;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	62da      	str	r2, [r3, #44]	; 0x2c
   g->font.char_height = 0;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	869a      	strh	r2, [r3, #52]	; 0x34
   g->font.char_width = 0;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	865a      	strh	r2, [r3, #50]	; 0x32
   g->font.start_char = 0;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	86da      	strh	r2, [r3, #54]	; 0x36
   g->font.end_char = 0;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	871a      	strh	r2, [r3, #56]	; 0x38
   g->font.widths = NULL;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	63da      	str	r2, [r3, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8006372:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800637c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   g->back_color = C_BLACK;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   g->next_window = NULL;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800639a:	2300      	movs	r3, #0
 800639c:	75fb      	strb	r3, [r7, #23]
 800639e:	e010      	b.n	80063c2 <UG_Init+0x10e>
   {
      g->driver[i].driver = NULL;
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	3309      	adds	r3, #9
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4413      	add	r3, r2
 80063aa:	2200      	movs	r2, #0
 80063ac:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 80063ae:	7dfb      	ldrb	r3, [r7, #23]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	3309      	adds	r3, #9
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	4413      	add	r3, r2
 80063b8:	2200      	movs	r2, #0
 80063ba:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
 80063be:	3301      	adds	r3, #1
 80063c0:	75fb      	strb	r3, [r7, #23]
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d9eb      	bls.n	80063a0 <UG_Init+0xec>
   }

   gui = g;
 80063c8:	4a04      	ldr	r2, [pc, #16]	; (80063dc <UG_Init+0x128>)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6013      	str	r3, [r2, #0]
   return 1;
 80063ce:	2301      	movs	r3, #1
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	200016c0 	.word	0x200016c0

080063e0 <UG_FillFrame>:
{
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
}

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80063e0:	b5b0      	push	{r4, r5, r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	4604      	mov	r4, r0
 80063e8:	4608      	mov	r0, r1
 80063ea:	4611      	mov	r1, r2
 80063ec:	461a      	mov	r2, r3
 80063ee:	4623      	mov	r3, r4
 80063f0:	80fb      	strh	r3, [r7, #6]
 80063f2:	4603      	mov	r3, r0
 80063f4:	80bb      	strh	r3, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	807b      	strh	r3, [r7, #2]
 80063fa:	4613      	mov	r3, r2
 80063fc:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80063fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006406:	429a      	cmp	r2, r3
 8006408:	da05      	bge.n	8006416 <UG_FillFrame+0x36>
   {
      n = x2;
 800640a:	887b      	ldrh	r3, [r7, #2]
 800640c:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 800640e:	88fb      	ldrh	r3, [r7, #6]
 8006410:	807b      	strh	r3, [r7, #2]
      x1 = n;
 8006412:	89fb      	ldrh	r3, [r7, #14]
 8006414:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 8006416:	f9b7 2000 	ldrsh.w	r2, [r7]
 800641a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800641e:	429a      	cmp	r2, r3
 8006420:	da05      	bge.n	800642e <UG_FillFrame+0x4e>
   {
      n = y2;
 8006422:	883b      	ldrh	r3, [r7, #0]
 8006424:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 8006426:	88bb      	ldrh	r3, [r7, #4]
 8006428:	803b      	strh	r3, [r7, #0]
      y1 = n;
 800642a:	89fb      	ldrh	r3, [r7, #14]
 800642c:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800642e:	4b23      	ldr	r3, [pc, #140]	; (80064bc <UG_FillFrame+0xdc>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d012      	beq.n	8006464 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800643e:	4b1f      	ldr	r3, [pc, #124]	; (80064bc <UG_FillFrame+0xdc>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006444:	461d      	mov	r5, r3
 8006446:	f9b7 4000 	ldrsh.w	r4, [r7]
 800644a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800644e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006452:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006456:	8c3b      	ldrh	r3, [r7, #32]
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	4623      	mov	r3, r4
 800645c:	47a8      	blx	r5
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d027      	beq.n	80064b4 <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 8006464:	88bb      	ldrh	r3, [r7, #4]
 8006466:	81bb      	strh	r3, [r7, #12]
 8006468:	e01d      	b.n	80064a6 <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	81fb      	strh	r3, [r7, #14]
 800646e:	e00e      	b.n	800648e <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 8006470:	4b12      	ldr	r3, [pc, #72]	; (80064bc <UG_FillFrame+0xdc>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	8c3a      	ldrh	r2, [r7, #32]
 8006478:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800647c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8006480:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8006482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006486:	b29b      	uxth	r3, r3
 8006488:	3301      	adds	r3, #1
 800648a:	b29b      	uxth	r3, r3
 800648c:	81fb      	strh	r3, [r7, #14]
 800648e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006492:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006496:	429a      	cmp	r2, r3
 8006498:	ddea      	ble.n	8006470 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800649a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3301      	adds	r3, #1
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	81bb      	strh	r3, [r7, #12]
 80064a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80064aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	dddb      	ble.n	800646a <UG_FillFrame+0x8a>
 80064b2:	e000      	b.n	80064b6 <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80064b4:	bf00      	nop
      }
   }
}
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bdb0      	pop	{r4, r5, r7, pc}
 80064bc:	200016c0 	.word	0x200016c0

080064c0 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80064c0:	b5b0      	push	{r4, r5, r7, lr}
 80064c2:	b08a      	sub	sp, #40	; 0x28
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	4604      	mov	r4, r0
 80064c8:	4608      	mov	r0, r1
 80064ca:	4611      	mov	r1, r2
 80064cc:	461a      	mov	r2, r3
 80064ce:	4623      	mov	r3, r4
 80064d0:	80fb      	strh	r3, [r7, #6]
 80064d2:	4603      	mov	r3, r0
 80064d4:	80bb      	strh	r3, [r7, #4]
 80064d6:	460b      	mov	r3, r1
 80064d8:	807b      	strh	r3, [r7, #2]
 80064da:	4613      	mov	r3, r2
 80064dc:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 80064de:	4b65      	ldr	r3, [pc, #404]	; (8006674 <UG_DrawLine+0x1b4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d013      	beq.n	8006516 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80064ee:	4b61      	ldr	r3, [pc, #388]	; (8006674 <UG_DrawLine+0x1b4>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f4:	461d      	mov	r5, r3
 80064f6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80064fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80064fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006502:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006506:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	4623      	mov	r3, r4
 800650c:	47a8      	blx	r5
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 80ab 	beq.w	800666c <UG_DrawLine+0x1ac>
   }

   dx = x2 - x1;
 8006516:	887a      	ldrh	r2, [r7, #2]
 8006518:	88fb      	ldrh	r3, [r7, #6]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	b29b      	uxth	r3, r3
 800651e:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8006520:	883a      	ldrh	r2, [r7, #0]
 8006522:	88bb      	ldrh	r3, [r7, #4]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	b29b      	uxth	r3, r3
 8006528:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 800652a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	bfb8      	it	lt
 8006532:	425b      	neglt	r3, r3
 8006534:	b29b      	uxth	r3, r3
 8006536:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8006538:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800653c:	2b00      	cmp	r3, #0
 800653e:	bfb8      	it	lt
 8006540:	425b      	neglt	r3, r3
 8006542:	b29b      	uxth	r3, r3
 8006544:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8006546:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800654a:	2b00      	cmp	r3, #0
 800654c:	dd01      	ble.n	8006552 <UG_DrawLine+0x92>
 800654e:	2301      	movs	r3, #1
 8006550:	e001      	b.n	8006556 <UG_DrawLine+0x96>
 8006552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006556:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8006558:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800655c:	2b00      	cmp	r3, #0
 800655e:	dd01      	ble.n	8006564 <UG_DrawLine+0xa4>
 8006560:	2301      	movs	r3, #1
 8006562:	e001      	b.n	8006568 <UG_DrawLine+0xa8>
 8006564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006568:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 800656a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800656e:	105b      	asrs	r3, r3, #1
 8006570:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8006572:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006576:	105b      	asrs	r3, r3, #1
 8006578:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 800657e:	88bb      	ldrh	r3, [r7, #4]
 8006580:	82fb      	strh	r3, [r7, #22]

   gui->pset(drawx, drawy,c);
 8006582:	4b3c      	ldr	r3, [pc, #240]	; (8006674 <UG_DrawLine+0x1b4>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800658a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800658e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8006592:	4798      	blx	r3

   if( dxabs >= dyabs )
 8006594:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006598:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800659c:	429a      	cmp	r2, r3
 800659e:	db32      	blt.n	8006606 <UG_DrawLine+0x146>
   {
      for( n=0; n<dxabs; n++ )
 80065a0:	2300      	movs	r3, #0
 80065a2:	83fb      	strh	r3, [r7, #30]
 80065a4:	e028      	b.n	80065f8 <UG_DrawLine+0x138>
      {
         y += dyabs;
 80065a6:	8b7a      	ldrh	r2, [r7, #26]
 80065a8:	89fb      	ldrh	r3, [r7, #14]
 80065aa:	4413      	add	r3, r2
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 80065b0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80065b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	db09      	blt.n	80065d0 <UG_DrawLine+0x110>
         {
            y -= dxabs;
 80065bc:	8b7a      	ldrh	r2, [r7, #26]
 80065be:	8a3b      	ldrh	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 80065c6:	8afa      	ldrh	r2, [r7, #22]
 80065c8:	897b      	ldrh	r3, [r7, #10]
 80065ca:	4413      	add	r3, r2
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 80065d0:	8b3a      	ldrh	r2, [r7, #24]
 80065d2:	89bb      	ldrh	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	833b      	strh	r3, [r7, #24]
         gui->pset(drawx, drawy,c);
 80065da:	4b26      	ldr	r3, [pc, #152]	; (8006674 <UG_DrawLine+0x1b4>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80065e2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80065e6:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80065ea:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 80065ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3301      	adds	r3, #1
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	83fb      	strh	r3, [r7, #30]
 80065f8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80065fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006600:	429a      	cmp	r2, r3
 8006602:	dbd0      	blt.n	80065a6 <UG_DrawLine+0xe6>
 8006604:	e033      	b.n	800666e <UG_DrawLine+0x1ae>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8006606:	2300      	movs	r3, #0
 8006608:	83fb      	strh	r3, [r7, #30]
 800660a:	e028      	b.n	800665e <UG_DrawLine+0x19e>
      {
         x += dxabs;
 800660c:	8bba      	ldrh	r2, [r7, #28]
 800660e:	8a3b      	ldrh	r3, [r7, #16]
 8006610:	4413      	add	r3, r2
 8006612:	b29b      	uxth	r3, r3
 8006614:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8006616:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800661a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800661e:	429a      	cmp	r2, r3
 8006620:	db09      	blt.n	8006636 <UG_DrawLine+0x176>
         {
            x -= dyabs;
 8006622:	8bba      	ldrh	r2, [r7, #28]
 8006624:	89fb      	ldrh	r3, [r7, #14]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	b29b      	uxth	r3, r3
 800662a:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 800662c:	8b3a      	ldrh	r2, [r7, #24]
 800662e:	89bb      	ldrh	r3, [r7, #12]
 8006630:	4413      	add	r3, r2
 8006632:	b29b      	uxth	r3, r3
 8006634:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8006636:	8afa      	ldrh	r2, [r7, #22]
 8006638:	897b      	ldrh	r3, [r7, #10]
 800663a:	4413      	add	r3, r2
 800663c:	b29b      	uxth	r3, r3
 800663e:	82fb      	strh	r3, [r7, #22]
         gui->pset(drawx, drawy,c);
 8006640:	4b0c      	ldr	r3, [pc, #48]	; (8006674 <UG_DrawLine+0x1b4>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006648:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800664c:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8006650:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8006652:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006656:	b29b      	uxth	r3, r3
 8006658:	3301      	adds	r3, #1
 800665a:	b29b      	uxth	r3, r3
 800665c:	83fb      	strh	r3, [r7, #30]
 800665e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8006662:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006666:	429a      	cmp	r2, r3
 8006668:	dbd0      	blt.n	800660c <UG_DrawLine+0x14c>
 800666a:	e000      	b.n	800666e <UG_DrawLine+0x1ae>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800666c:	bf00      	nop
      }
   }  
}
 800666e:	3720      	adds	r7, #32
 8006670:	46bd      	mov	sp, r7
 8006672:	bdb0      	pop	{r4, r5, r7, pc}
 8006674:	200016c0 	.word	0x200016c0

08006678 <UG_GetXDim>:
{
   gui->back_color = c;
}

UG_S16 UG_GetXDim( void )
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
   return gui->x_dim;
 800667c:	4b03      	ldr	r3, [pc, #12]	; (800668c <UG_GetXDim+0x14>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8006684:	4618      	mov	r0, r3
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr
 800668c:	200016c0 	.word	0x200016c0

08006690 <UG_GetYDim>:

UG_S16 UG_GetYDim( void )
{
 8006690:	b480      	push	{r7}
 8006692:	af00      	add	r7, sp, #0
   return gui->y_dim;
 8006694:	4b03      	ldr	r3, [pc, #12]	; (80066a4 <UG_GetYDim+0x14>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
}
 800669c:	4618      	mov	r0, r3
 800669e:	46bd      	mov	sp, r7
 80066a0:	bc80      	pop	{r7}
 80066a2:	4770      	bx	lr
 80066a4:	200016c0 	.word	0x200016c0

080066a8 <_UG_PutChar>:

/* -------------------------------------------------------------------------------- */
/* -- INTERNAL FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */
void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 80066a8:	b5b0      	push	{r4, r5, r7, lr}
 80066aa:	b08a      	sub	sp, #40	; 0x28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	461a      	mov	r2, r3
 80066b6:	4623      	mov	r3, r4
 80066b8:	71fb      	strb	r3, [r7, #7]
 80066ba:	4603      	mov	r3, r0
 80066bc:	80bb      	strh	r3, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	807b      	strh	r3, [r7, #2]
 80066c2:	4613      	mov	r3, r2
 80066c4:	803b      	strh	r3, [r7, #0]
   UG_U8 b,bt;
   UG_U32 index;
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 80066ca:	7e3b      	ldrb	r3, [r7, #24]
 80066cc:	2bfc      	cmp	r3, #252	; 0xfc
 80066ce:	dc77      	bgt.n	80067c0 <_UG_PutChar+0x118>
 80066d0:	2bd6      	cmp	r3, #214	; 0xd6
 80066d2:	da08      	bge.n	80066e6 <_UG_PutChar+0x3e>
 80066d4:	2bc4      	cmp	r3, #196	; 0xc4
 80066d6:	d06a      	beq.n	80067ae <_UG_PutChar+0x106>
 80066d8:	2bc4      	cmp	r3, #196	; 0xc4
 80066da:	dc71      	bgt.n	80067c0 <_UG_PutChar+0x118>
 80066dc:	2bb0      	cmp	r3, #176	; 0xb0
 80066de:	d06c      	beq.n	80067ba <_UG_PutChar+0x112>
 80066e0:	2bb5      	cmp	r3, #181	; 0xb5
 80066e2:	d067      	beq.n	80067b4 <_UG_PutChar+0x10c>
 80066e4:	e06c      	b.n	80067c0 <_UG_PutChar+0x118>
 80066e6:	3bd6      	subs	r3, #214	; 0xd6
 80066e8:	2b26      	cmp	r3, #38	; 0x26
 80066ea:	d869      	bhi.n	80067c0 <_UG_PutChar+0x118>
 80066ec:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <_UG_PutChar+0x4c>)
 80066ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f2:	bf00      	nop
 80066f4:	08006797 	.word	0x08006797
 80066f8:	080067c1 	.word	0x080067c1
 80066fc:	080067c1 	.word	0x080067c1
 8006700:	080067c1 	.word	0x080067c1
 8006704:	080067c1 	.word	0x080067c1
 8006708:	080067c1 	.word	0x080067c1
 800670c:	080067a3 	.word	0x080067a3
 8006710:	080067c1 	.word	0x080067c1
 8006714:	080067c1 	.word	0x080067c1
 8006718:	080067c1 	.word	0x080067c1
 800671c:	080067c1 	.word	0x080067c1
 8006720:	080067c1 	.word	0x080067c1
 8006724:	080067c1 	.word	0x080067c1
 8006728:	080067c1 	.word	0x080067c1
 800672c:	080067a9 	.word	0x080067a9
 8006730:	080067c1 	.word	0x080067c1
 8006734:	080067c1 	.word	0x080067c1
 8006738:	080067c1 	.word	0x080067c1
 800673c:	080067c1 	.word	0x080067c1
 8006740:	080067c1 	.word	0x080067c1
 8006744:	080067c1 	.word	0x080067c1
 8006748:	080067c1 	.word	0x080067c1
 800674c:	080067c1 	.word	0x080067c1
 8006750:	080067c1 	.word	0x080067c1
 8006754:	080067c1 	.word	0x080067c1
 8006758:	080067c1 	.word	0x080067c1
 800675c:	080067c1 	.word	0x080067c1
 8006760:	080067c1 	.word	0x080067c1
 8006764:	080067c1 	.word	0x080067c1
 8006768:	080067c1 	.word	0x080067c1
 800676c:	080067c1 	.word	0x080067c1
 8006770:	080067c1 	.word	0x080067c1
 8006774:	08006791 	.word	0x08006791
 8006778:	080067c1 	.word	0x080067c1
 800677c:	080067c1 	.word	0x080067c1
 8006780:	080067c1 	.word	0x080067c1
 8006784:	080067c1 	.word	0x080067c1
 8006788:	080067c1 	.word	0x080067c1
 800678c:	0800679d 	.word	0x0800679d
   {
      case 0xF6: bt = 0x94; break; // �
 8006790:	2394      	movs	r3, #148	; 0x94
 8006792:	763b      	strb	r3, [r7, #24]
 8006794:	e014      	b.n	80067c0 <_UG_PutChar+0x118>
      case 0xD6: bt = 0x99; break; // �
 8006796:	2399      	movs	r3, #153	; 0x99
 8006798:	763b      	strb	r3, [r7, #24]
 800679a:	e011      	b.n	80067c0 <_UG_PutChar+0x118>
      case 0xFC: bt = 0x81; break; // �
 800679c:	2381      	movs	r3, #129	; 0x81
 800679e:	763b      	strb	r3, [r7, #24]
 80067a0:	e00e      	b.n	80067c0 <_UG_PutChar+0x118>
      case 0xDC: bt = 0x9A; break; // �
 80067a2:	239a      	movs	r3, #154	; 0x9a
 80067a4:	763b      	strb	r3, [r7, #24]
 80067a6:	e00b      	b.n	80067c0 <_UG_PutChar+0x118>
      case 0xE4: bt = 0x84; break; // �
 80067a8:	2384      	movs	r3, #132	; 0x84
 80067aa:	763b      	strb	r3, [r7, #24]
 80067ac:	e008      	b.n	80067c0 <_UG_PutChar+0x118>
      case 0xC4: bt = 0x8E; break; // �
 80067ae:	238e      	movs	r3, #142	; 0x8e
 80067b0:	763b      	strb	r3, [r7, #24]
 80067b2:	e005      	b.n	80067c0 <_UG_PutChar+0x118>
      case 0xB5: bt = 0xE6; break; // �
 80067b4:	23e6      	movs	r3, #230	; 0xe6
 80067b6:	763b      	strb	r3, [r7, #24]
 80067b8:	e002      	b.n	80067c0 <_UG_PutChar+0x118>
      case 0xB0: bt = 0xF8; break; // �
 80067ba:	23f8      	movs	r3, #248	; 0xf8
 80067bc:	763b      	strb	r3, [r7, #24]
 80067be:	bf00      	nop
   }

   if (bt < font->start_char || bt > font->end_char) return;
 80067c0:	7e3b      	ldrb	r3, [r7, #24]
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c6:	895b      	ldrh	r3, [r3, #10]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	f0c0 81ef 	bcc.w	8006bac <_UG_PutChar+0x504>
 80067ce:	7e3b      	ldrb	r3, [r7, #24]
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d4:	899b      	ldrh	r3, [r3, #12]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	f200 81e8 	bhi.w	8006bac <_UG_PutChar+0x504>
   
   yo = y;
 80067dc:	887b      	ldrh	r3, [r7, #2]
 80067de:	83fb      	strh	r3, [r7, #30]
   bn = font->char_width;
 80067e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80067e6:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 80067e8:	8b7b      	ldrh	r3, [r7, #26]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 81e0 	beq.w	8006bb0 <_UG_PutChar+0x508>
   bn >>= 3;
 80067f0:	8b7b      	ldrh	r3, [r7, #26]
 80067f2:	08db      	lsrs	r3, r3, #3
 80067f4:	837b      	strh	r3, [r7, #26]
   if ( font->char_width % 8 ) bn++;
 80067f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <_UG_PutChar+0x166>
 8006808:	8b7b      	ldrh	r3, [r7, #26]
 800680a:	3301      	adds	r3, #1
 800680c:	837b      	strh	r3, [r7, #26]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 800680e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d009      	beq.n	800682a <_UG_PutChar+0x182>
 8006816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	7e3a      	ldrb	r2, [r7, #24]
 800681c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800681e:	8949      	ldrh	r1, [r1, #10]
 8006820:	1a52      	subs	r2, r2, r1
 8006822:	4413      	add	r3, r2
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	e003      	b.n	8006832 <_UG_PutChar+0x18a>
 800682a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006830:	b29b      	uxth	r3, r3
 8006832:	827b      	strh	r3, [r7, #18]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 8006834:	4b8a      	ldr	r3, [pc, #552]	; (8006a60 <_UG_PutChar+0x3b8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 80d8 	beq.w	80069f6 <_UG_PutChar+0x34e>
   {
	   //(void(*)(UG_COLOR))
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 8006846:	4b86      	ldr	r3, [pc, #536]	; (8006a60 <_UG_PutChar+0x3b8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684c:	461d      	mov	r5, r3
 800684e:	88ba      	ldrh	r2, [r7, #4]
 8006850:	8a7b      	ldrh	r3, [r7, #18]
 8006852:	4413      	add	r3, r2
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	b29b      	uxth	r3, r3
 800685a:	b21c      	sxth	r4, r3
 800685c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006862:	b29a      	uxth	r2, r3
 8006864:	887b      	ldrh	r3, [r7, #2]
 8006866:	4413      	add	r3, r2
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29b      	uxth	r3, r3
 800686e:	b21b      	sxth	r3, r3
 8006870:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8006874:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8006878:	4622      	mov	r2, r4
 800687a:	47a8      	blx	r5
 800687c:	4603      	mov	r3, r0
 800687e:	60fb      	str	r3, [r7, #12]
	   
      if (font->font_type == FONT_TYPE_1BPP)
 8006880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006882:	791b      	ldrb	r3, [r3, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d14d      	bne.n	8006924 <_UG_PutChar+0x27c>
	  {
	      index = (bt - font->start_char)* font->char_height * bn;
 8006888:	7e3b      	ldrb	r3, [r7, #24]
 800688a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800688c:	8952      	ldrh	r2, [r2, #10]
 800688e:	1a9b      	subs	r3, r3, r2
 8006890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006892:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8006896:	fb02 f303 	mul.w	r3, r2, r3
 800689a:	8b7a      	ldrh	r2, [r7, #26]
 800689c:	fb02 f303 	mul.w	r3, r2, r3
 80068a0:	617b      	str	r3, [r7, #20]
		  for( j=0;j<font->char_height;j++ )
 80068a2:	2300      	movs	r3, #0
 80068a4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80068a6:	e036      	b.n	8006916 <_UG_PutChar+0x26e>
		  {
			 c=actual_char_width;
 80068a8:	8a7b      	ldrh	r3, [r7, #18]
 80068aa:	83bb      	strh	r3, [r7, #28]
			 for( i=0;i<bn;i++ )
 80068ac:	2300      	movs	r3, #0
 80068ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80068b0:	e02a      	b.n	8006908 <_UG_PutChar+0x260>
			 {
				b = font->p[index++];
 80068b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	1c59      	adds	r1, r3, #1
 80068ba:	6179      	str	r1, [r7, #20]
 80068bc:	4413      	add	r3, r2
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	767b      	strb	r3, [r7, #25]
				for( k=0;(k<8) && c;k++ )
 80068c2:	2300      	movs	r3, #0
 80068c4:	847b      	strh	r3, [r7, #34]	; 0x22
 80068c6:	e016      	b.n	80068f6 <_UG_PutChar+0x24e>
				{
				   if( b & 0x01 )
 80068c8:	7e7b      	ldrb	r3, [r7, #25]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d004      	beq.n	80068dc <_UG_PutChar+0x234>
				   {
					  push_pixel(fc);
 80068d2:	883a      	ldrh	r2, [r7, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4610      	mov	r0, r2
 80068d8:	4798      	blx	r3
 80068da:	e003      	b.n	80068e4 <_UG_PutChar+0x23c>
				   }
				   else
				   {
					  push_pixel(bc);
 80068dc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4610      	mov	r0, r2
 80068e2:	4798      	blx	r3
				   }
				   b >>= 1;
 80068e4:	7e7b      	ldrb	r3, [r7, #25]
 80068e6:	085b      	lsrs	r3, r3, #1
 80068e8:	767b      	strb	r3, [r7, #25]
				   c--;
 80068ea:	8bbb      	ldrh	r3, [r7, #28]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	83bb      	strh	r3, [r7, #28]
				for( k=0;(k<8) && c;k++ )
 80068f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068f2:	3301      	adds	r3, #1
 80068f4:	847b      	strh	r3, [r7, #34]	; 0x22
 80068f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068f8:	2b07      	cmp	r3, #7
 80068fa:	d802      	bhi.n	8006902 <_UG_PutChar+0x25a>
 80068fc:	8bbb      	ldrh	r3, [r7, #28]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e2      	bne.n	80068c8 <_UG_PutChar+0x220>
			 for( i=0;i<bn;i++ )
 8006902:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006904:	3301      	adds	r3, #1
 8006906:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006908:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800690a:	8b7b      	ldrh	r3, [r7, #26]
 800690c:	429a      	cmp	r2, r3
 800690e:	d3d0      	bcc.n	80068b2 <_UG_PutChar+0x20a>
		  for( j=0;j<font->char_height;j++ )
 8006910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006912:	3301      	adds	r3, #1
 8006914:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800691a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800691e:	4293      	cmp	r3, r2
 8006920:	dbc2      	blt.n	80068a8 <_UG_PutChar+0x200>
 8006922:	e146      	b.n	8006bb2 <_UG_PutChar+0x50a>
				}
			 }
	 	 }
	  }
	  else if (font->font_type == FONT_TYPE_8BPP)
 8006924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006926:	791b      	ldrb	r3, [r3, #4]
 8006928:	2b01      	cmp	r3, #1
 800692a:	f040 8142 	bne.w	8006bb2 <_UG_PutChar+0x50a>
	  {
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 800692e:	7e3b      	ldrb	r3, [r7, #24]
 8006930:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006932:	8952      	ldrh	r2, [r2, #10]
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006938:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800693c:	fb02 f303 	mul.w	r3, r2, r3
 8006940:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006942:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 800694c:	2300      	movs	r3, #0
 800694e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006950:	e04a      	b.n	80069e8 <_UG_PutChar+0x340>
		   {
			  for( i=0;i<actual_char_width;i++ )
 8006952:	2300      	movs	r3, #0
 8006954:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006956:	e036      	b.n	80069c6 <_UG_PutChar+0x31e>
			  {
				 b = font->p[index++];
 8006958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	1c59      	adds	r1, r3, #1
 8006960:	6179      	str	r1, [r7, #20]
 8006962:	4413      	add	r3, r2
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	767b      	strb	r3, [r7, #25]
                                //Blue component                                                           //Green component                                            //Red component
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);  
 8006968:	883b      	ldrh	r3, [r7, #0]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	7e7a      	ldrb	r2, [r7, #25]
 800696e:	fb03 f202 	mul.w	r2, r3, r2
 8006972:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006974:	b2db      	uxtb	r3, r3
 8006976:	7e79      	ldrb	r1, [r7, #25]
 8006978:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 800697c:	fb01 f303 	mul.w	r3, r1, r3
 8006980:	4413      	add	r3, r2
 8006982:	121b      	asrs	r3, r3, #8
 8006984:	b21b      	sxth	r3, r3
 8006986:	b2db      	uxtb	r3, r3
 8006988:	b21a      	sxth	r2, r3
 800698a:	883b      	ldrh	r3, [r7, #0]
 800698c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006990:	7e79      	ldrb	r1, [r7, #25]
 8006992:	fb03 f101 	mul.w	r1, r3, r1
 8006996:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006998:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800699c:	7e78      	ldrb	r0, [r7, #25]
 800699e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80069a2:	fb00 f303 	mul.w	r3, r0, r3
 80069a6:	440b      	add	r3, r1
 80069a8:	121b      	asrs	r3, r3, #8
 80069aa:	b21b      	sxth	r3, r3
 80069ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069b0:	b21b      	sxth	r3, r3
 80069b2:	4313      	orrs	r3, r2
 80069b4:	b21b      	sxth	r3, r3
 80069b6:	823b      	strh	r3, [r7, #16]
				         
				 push_pixel(color);
 80069b8:	8a3a      	ldrh	r2, [r7, #16]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4610      	mov	r0, r2
 80069be:	4798      	blx	r3
			  for( i=0;i<actual_char_width;i++ )
 80069c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069c2:	3301      	adds	r3, #1
 80069c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80069c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80069c8:	8a7b      	ldrh	r3, [r7, #18]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d3c4      	bcc.n	8006958 <_UG_PutChar+0x2b0>
			  }
			  index += font->char_width - actual_char_width;
 80069ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80069d4:	461a      	mov	r2, r3
 80069d6:	8a7b      	ldrh	r3, [r7, #18]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	461a      	mov	r2, r3
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	4413      	add	r3, r2
 80069e0:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 80069e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069e4:	3301      	adds	r3, #1
 80069e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80069e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069ec:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80069f0:	4293      	cmp	r3, r2
 80069f2:	dbae      	blt.n	8006952 <_UG_PutChar+0x2aa>
 80069f4:	e0dd      	b.n	8006bb2 <_UG_PutChar+0x50a>
	  }
   }
   else
   {
	   /*Not accelerated output*/
	   if (font->font_type == FONT_TYPE_1BPP)
 80069f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f8:	791b      	ldrb	r3, [r3, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d161      	bne.n	8006ac2 <_UG_PutChar+0x41a>
	   {
         index = (bt - font->start_char)* font->char_height * bn;
 80069fe:	7e3b      	ldrb	r3, [r7, #24]
 8006a00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a02:	8952      	ldrh	r2, [r2, #10]
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a08:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8006a0c:	fb02 f303 	mul.w	r3, r2, r3
 8006a10:	8b7a      	ldrh	r2, [r7, #26]
 8006a12:	fb02 f303 	mul.w	r3, r2, r3
 8006a16:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 8006a18:	2300      	movs	r3, #0
 8006a1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a1c:	e04a      	b.n	8006ab4 <_UG_PutChar+0x40c>
         {
           xo = x;
 8006a1e:	88bb      	ldrh	r3, [r7, #4]
 8006a20:	843b      	strh	r3, [r7, #32]
           c=actual_char_width;
 8006a22:	8a7b      	ldrh	r3, [r7, #18]
 8006a24:	83bb      	strh	r3, [r7, #28]
           for( i=0;i<bn;i++ )
 8006a26:	2300      	movs	r3, #0
 8006a28:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a2a:	e039      	b.n	8006aa0 <_UG_PutChar+0x3f8>
           {
             b = font->p[index++];
 8006a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	1c59      	adds	r1, r3, #1
 8006a34:	6179      	str	r1, [r7, #20]
 8006a36:	4413      	add	r3, r2
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	767b      	strb	r3, [r7, #25]
             for( k=0;(k<8) && c;k++ )
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006a40:	e025      	b.n	8006a8e <_UG_PutChar+0x3e6>
             {
               if( b & 0x01 )
 8006a42:	7e7b      	ldrb	r3, [r7, #25]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00b      	beq.n	8006a64 <_UG_PutChar+0x3bc>
               {
                  gui->pset(xo,yo,fc);
 8006a4c:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <_UG_PutChar+0x3b8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8006a56:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8006a5a:	883a      	ldrh	r2, [r7, #0]
 8006a5c:	4798      	blx	r3
 8006a5e:	e00a      	b.n	8006a76 <_UG_PutChar+0x3ce>
 8006a60:	200016c0 	.word	0x200016c0
               }
               else
               {
                  gui->pset(xo,yo,bc);
 8006a64:	4b54      	ldr	r3, [pc, #336]	; (8006bb8 <_UG_PutChar+0x510>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8006a6e:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8006a72:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8006a74:	4798      	blx	r3
               }
               b >>= 1;
 8006a76:	7e7b      	ldrb	r3, [r7, #25]
 8006a78:	085b      	lsrs	r3, r3, #1
 8006a7a:	767b      	strb	r3, [r7, #25]
               xo++;
 8006a7c:	8c3b      	ldrh	r3, [r7, #32]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	843b      	strh	r3, [r7, #32]
               c--;
 8006a82:	8bbb      	ldrh	r3, [r7, #28]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	83bb      	strh	r3, [r7, #28]
             for( k=0;(k<8) && c;k++ )
 8006a88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	847b      	strh	r3, [r7, #34]	; 0x22
 8006a8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a90:	2b07      	cmp	r3, #7
 8006a92:	d802      	bhi.n	8006a9a <_UG_PutChar+0x3f2>
 8006a94:	8bbb      	ldrh	r3, [r7, #28]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1d3      	bne.n	8006a42 <_UG_PutChar+0x39a>
           for( i=0;i<bn;i++ )
 8006a9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006aa0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006aa2:	8b7b      	ldrh	r3, [r7, #26]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d3c1      	bcc.n	8006a2c <_UG_PutChar+0x384>
             }
           }
           yo++;
 8006aa8:	8bfb      	ldrh	r3, [r7, #30]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 8006aae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006ab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ab6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ab8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8006abc:	4293      	cmp	r3, r2
 8006abe:	dbae      	blt.n	8006a1e <_UG_PutChar+0x376>
 8006ac0:	e077      	b.n	8006bb2 <_UG_PutChar+0x50a>
         }
      }
      else if (font->font_type == FONT_TYPE_8BPP)
 8006ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac4:	791b      	ldrb	r3, [r3, #4]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d173      	bne.n	8006bb2 <_UG_PutChar+0x50a>
      {
         index = (bt - font->start_char)* font->char_height * font->char_width;
 8006aca:	7e3b      	ldrb	r3, [r7, #24]
 8006acc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ace:	8952      	ldrh	r2, [r2, #10]
 8006ad0:	1a9b      	subs	r3, r3, r2
 8006ad2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ad4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8006ad8:	fb02 f303 	mul.w	r3, r2, r3
 8006adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ade:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8006ae2:	fb02 f303 	mul.w	r3, r2, r3
 8006ae6:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 8006ae8:	2300      	movs	r3, #0
 8006aea:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006aec:	e057      	b.n	8006b9e <_UG_PutChar+0x4f6>
         {
            xo = x;
 8006aee:	88bb      	ldrh	r3, [r7, #4]
 8006af0:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 8006af2:	2300      	movs	r3, #0
 8006af4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006af6:	e03e      	b.n	8006b76 <_UG_PutChar+0x4ce>
            {
               b = font->p[index++];
 8006af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	1c59      	adds	r1, r3, #1
 8006b00:	6179      	str	r1, [r7, #20]
 8006b02:	4413      	add	r3, r2
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	767b      	strb	r3, [r7, #25]
            
                           //Blue component                                                           //Green component                                            //Red component
			   color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);  
 8006b08:	883b      	ldrh	r3, [r7, #0]
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	7e7a      	ldrb	r2, [r7, #25]
 8006b0e:	fb03 f202 	mul.w	r2, r3, r2
 8006b12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	7e79      	ldrb	r1, [r7, #25]
 8006b18:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8006b1c:	fb01 f303 	mul.w	r3, r1, r3
 8006b20:	4413      	add	r3, r2
 8006b22:	121b      	asrs	r3, r3, #8
 8006b24:	b21b      	sxth	r3, r3
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	b21a      	sxth	r2, r3
 8006b2a:	883b      	ldrh	r3, [r7, #0]
 8006b2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b30:	7e79      	ldrb	r1, [r7, #25]
 8006b32:	fb03 f101 	mul.w	r1, r3, r1
 8006b36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b3c:	7e78      	ldrb	r0, [r7, #25]
 8006b3e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8006b42:	fb00 f303 	mul.w	r3, r0, r3
 8006b46:	440b      	add	r3, r1
 8006b48:	121b      	asrs	r3, r3, #8
 8006b4a:	b21b      	sxth	r3, r3
 8006b4c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b50:	b21b      	sxth	r3, r3
 8006b52:	4313      	orrs	r3, r2
 8006b54:	b21b      	sxth	r3, r3
 8006b56:	823b      	strh	r3, [r7, #16]
               
               gui->pset(xo,yo,color);
 8006b58:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <_UG_PutChar+0x510>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8006b62:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8006b66:	8a3a      	ldrh	r2, [r7, #16]
 8006b68:	4798      	blx	r3
               xo++;
 8006b6a:	8c3b      	ldrh	r3, [r7, #32]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 8006b70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b72:	3301      	adds	r3, #1
 8006b74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006b76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b78:	8a7b      	ldrh	r3, [r7, #18]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d3bc      	bcc.n	8006af8 <_UG_PutChar+0x450>
            }
            index += font->char_width - actual_char_width;
 8006b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006b84:	461a      	mov	r2, r3
 8006b86:	8a7b      	ldrh	r3, [r7, #18]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	4413      	add	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]
            yo++;
 8006b92:	8bfb      	ldrh	r3, [r7, #30]
 8006b94:	3301      	adds	r3, #1
 8006b96:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 8006b98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ba0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ba2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	dba1      	blt.n	8006aee <_UG_PutChar+0x446>
 8006baa:	e002      	b.n	8006bb2 <_UG_PutChar+0x50a>
   if (bt < font->start_char || bt > font->end_char) return;
 8006bac:	bf00      	nop
 8006bae:	e000      	b.n	8006bb2 <_UG_PutChar+0x50a>
   if ( !bn ) return;
 8006bb0:	bf00      	nop
         }
      }
   }
}
 8006bb2:	3728      	adds	r7, #40	; 0x28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8006bb8:	200016c0 	.word	0x200016c0

08006bbc <_UG_PutText>:

void _UG_PutText(UG_TEXT* txt)
{
 8006bbc:	b5b0      	push	{r4, r5, r7, lr}
 8006bbe:	b08e      	sub	sp, #56	; 0x38
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	6078      	str	r0, [r7, #4]
   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	891b      	ldrh	r3, [r3, #8]
 8006bc8:	837b      	strh	r3, [r7, #26]
   UG_S16 ys=txt->a.ys;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	895b      	ldrh	r3, [r3, #10]
 8006bce:	833b      	strh	r3, [r7, #24]
   UG_S16 xe=txt->a.xe;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	899b      	ldrh	r3, [r3, #12]
 8006bd4:	82fb      	strh	r3, [r7, #22]
   UG_S16 ye=txt->a.ye;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	89db      	ldrh	r3, [r3, #14]
 8006bda:	82bb      	strh	r3, [r7, #20]
   UG_U8  align=txt->align;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	7d1b      	ldrb	r3, [r3, #20]
 8006be0:	74fb      	strb	r3, [r7, #19]
   UG_S16 char_width=txt->font->char_width;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	88db      	ldrh	r3, [r3, #6]
 8006be8:	823b      	strh	r3, [r7, #16]
   UG_S16 char_height=txt->font->char_height;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	891b      	ldrh	r3, [r3, #8]
 8006bf0:	81fb      	strh	r3, [r7, #14]
   UG_S16 char_h_space=txt->h_space;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	8adb      	ldrh	r3, [r3, #22]
 8006bf6:	81bb      	strh	r3, [r7, #12]
   UG_S16 char_v_space=txt->v_space;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	8b1b      	ldrh	r3, [r3, #24]
 8006bfc:	817b      	strh	r3, [r7, #10]

   char chr;

   char* str = txt->str;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	623b      	str	r3, [r7, #32]
   char* c = str;
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	61fb      	str	r3, [r7, #28]

   if ( txt->font->p == NULL ) return;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8108 	beq.w	8006e24 <_UG_PutText+0x268>
   if ( str == NULL ) return;
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 8106 	beq.w	8006e28 <_UG_PutText+0x26c>
   if ( (ye - ys) < txt->font->char_height ) return;
 8006c1c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006c20:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6852      	ldr	r2, [r2, #4]
 8006c2a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	f2c0 80fc 	blt.w	8006e2c <_UG_PutText+0x270>

   rc=1;
 8006c34:	2301      	movs	r3, #1
 8006c36:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	61fb      	str	r3, [r7, #28]
   while ( *c != 0 )
 8006c3c:	e009      	b.n	8006c52 <_UG_PutText+0x96>
   {
      if ( *c == '\n' ) rc++;
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b0a      	cmp	r3, #10
 8006c44:	d102      	bne.n	8006c4c <_UG_PutText+0x90>
 8006c46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c48:	3301      	adds	r3, #1
 8006c4a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      c++;
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	61fb      	str	r3, [r7, #28]
   while ( *c != 0 )
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1f1      	bne.n	8006c3e <_UG_PutText+0x82>
   }

   yp = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8006c5e:	7cfb      	ldrb	r3, [r7, #19]
 8006c60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01f      	beq.n	8006ca8 <_UG_PutText+0xec>
   {
      yp = ye - ys + 1;
 8006c68:	8aba      	ldrh	r2, [r7, #20]
 8006c6a:	8b3b      	ldrh	r3, [r7, #24]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	3301      	adds	r3, #1
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8006c76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c78:	89fb      	ldrh	r3, [r7, #14]
 8006c7a:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8006c7c:	fb01 f303 	mul.w	r3, r1, r3
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8006c88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	8979      	ldrh	r1, [r7, #10]
 8006c92:	fb01 f303 	mul.w	r3, r1, r3
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ) return;
 8006c9e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f2c0 80c4 	blt.w	8006e30 <_UG_PutText+0x274>
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8006ca8:	7cfb      	ldrb	r3, [r7, #19]
 8006caa:	f003 0310 	and.w	r3, r3, #16
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <_UG_PutText+0xfe>
 8006cb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006cb6:	105b      	asrs	r3, r3, #1
 8006cb8:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8006cba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006cbc:	8b3b      	ldrh	r3, [r7, #24]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	61fb      	str	r3, [r7, #28]
      wl = 0;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	857b      	strh	r3, [r7, #42]	; 0x2a
      while( (*c != 0) && (*c != '\n') )
 8006cd0:	e033      	b.n	8006d3a <_UG_PutText+0x17e>
      {
         if (*c < txt->font->start_char || *c > txt->font->end_char) {c++; continue;}
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	895b      	ldrh	r3, [r3, #10]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d307      	bcc.n	8006cf2 <_UG_PutText+0x136>
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	899b      	ldrh	r3, [r3, #12]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d903      	bls.n	8006cfa <_UG_PutText+0x13e>
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	e01f      	b.n	8006d3a <_UG_PutText+0x17e>
         sl++;
 8006cfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += (txt->font->widths ? txt->font->widths[*c - txt->font->start_char] : char_width) + char_h_space;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00d      	beq.n	8006d26 <_UG_PutText+0x16a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	7812      	ldrb	r2, [r2, #0]
 8006d14:	4611      	mov	r1, r2
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	6852      	ldr	r2, [r2, #4]
 8006d1a:	8952      	ldrh	r2, [r2, #10]
 8006d1c:	1a8a      	subs	r2, r1, r2
 8006d1e:	4413      	add	r3, r2
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	e000      	b.n	8006d28 <_UG_PutText+0x16c>
 8006d26:	8a3b      	ldrh	r3, [r7, #16]
 8006d28:	89ba      	ldrh	r2, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d30:	4413      	add	r3, r2
 8006d32:	857b      	strh	r3, [r7, #42]	; 0x2a
         c++;
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	3301      	adds	r3, #1
 8006d38:	61fb      	str	r3, [r7, #28]
      while( (*c != 0) && (*c != '\n') )
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <_UG_PutText+0x18e>
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b0a      	cmp	r3, #10
 8006d48:	d1c3      	bne.n	8006cd2 <_UG_PutText+0x116>
      }
      wl -= char_h_space;
 8006d4a:	89bb      	ldrh	r3, [r7, #12]
 8006d4c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8006d52:	8afa      	ldrh	r2, [r7, #22]
 8006d54:	8b7b      	ldrh	r3, [r7, #26]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8006d60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006d62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) return;
 8006d6a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	db60      	blt.n	8006e34 <_UG_PutText+0x278>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8006d72:	7cfb      	ldrb	r3, [r7, #19]
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <_UG_PutText+0x1c6>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006d80:	e008      	b.n	8006d94 <_UG_PutText+0x1d8>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8006d82:	7cfb      	ldrb	r3, [r7, #19]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <_UG_PutText+0x1d8>
 8006d8c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006d90:	105b      	asrs	r3, r3, #1
 8006d92:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8006d94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006d96:	8b7b      	ldrh	r3, [r7, #26]
 8006d98:	4413      	add	r3, r2
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	853b      	strh	r3, [r7, #40]	; 0x28

      while( (*str != '\n') )
 8006d9e:	e031      	b.n	8006e04 <_UG_PutText+0x248>
      {
         chr = *str++;
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	623a      	str	r2, [r7, #32]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	727b      	strb	r3, [r7, #9]
         if ( chr == 0 ) return;
 8006daa:	7a7b      	ldrb	r3, [r7, #9]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d043      	beq.n	8006e38 <_UG_PutText+0x27c>
         _UG_PutChar(chr,xp,yp,txt->fc,txt->bc,txt->font);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	8a1d      	ldrh	r5, [r3, #16]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8a5b      	ldrh	r3, [r3, #18]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6852      	ldr	r2, [r2, #4]
 8006dbc:	f9b7 4026 	ldrsh.w	r4, [r7, #38]	; 0x26
 8006dc0:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8006dc4:	7a78      	ldrb	r0, [r7, #9]
 8006dc6:	9201      	str	r2, [sp, #4]
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	462b      	mov	r3, r5
 8006dcc:	4622      	mov	r2, r4
 8006dce:	f7ff fc6b 	bl	80066a8 <_UG_PutChar>
         xp += (txt->font->widths ? txt->font->widths[chr - txt->font->start_char] : char_width) + char_h_space;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00b      	beq.n	8006df4 <_UG_PutText+0x238>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	7a7a      	ldrb	r2, [r7, #9]
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	6849      	ldr	r1, [r1, #4]
 8006de8:	8949      	ldrh	r1, [r1, #10]
 8006dea:	1a52      	subs	r2, r2, r1
 8006dec:	4413      	add	r3, r2
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	e000      	b.n	8006df6 <_UG_PutText+0x23a>
 8006df4:	8a3b      	ldrh	r3, [r7, #16]
 8006df6:	89ba      	ldrh	r2, [r7, #12]
 8006df8:	4413      	add	r3, r2
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006dfe:	4413      	add	r3, r2
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	853b      	strh	r3, [r7, #40]	; 0x28
      while( (*str != '\n') )
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b0a      	cmp	r3, #10
 8006e0a:	d1c9      	bne.n	8006da0 <_UG_PutText+0x1e4>
      }
      str++;
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	623b      	str	r3, [r7, #32]
      yp += char_height + char_v_space;
 8006e12:	89fa      	ldrh	r2, [r7, #14]
 8006e14:	897b      	ldrh	r3, [r7, #10]
 8006e16:	4413      	add	r3, r2
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e1c:	4413      	add	r3, r2
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8006e22:	e74f      	b.n	8006cc4 <_UG_PutText+0x108>
   if ( txt->font->p == NULL ) return;
 8006e24:	bf00      	nop
 8006e26:	e008      	b.n	8006e3a <_UG_PutText+0x27e>
   if ( str == NULL ) return;
 8006e28:	bf00      	nop
 8006e2a:	e006      	b.n	8006e3a <_UG_PutText+0x27e>
   if ( (ye - ys) < txt->font->char_height ) return;
 8006e2c:	bf00      	nop
 8006e2e:	e004      	b.n	8006e3a <_UG_PutText+0x27e>
      if ( yp < 0 ) return;
 8006e30:	bf00      	nop
 8006e32:	e002      	b.n	8006e3a <_UG_PutText+0x27e>
      if ( xp < 0 ) return;
 8006e34:	bf00      	nop
 8006e36:	e000      	b.n	8006e3a <_UG_PutText+0x27e>
         if ( chr == 0 ) return;
 8006e38:	bf00      	nop
   }
}
 8006e3a:	3730      	adds	r7, #48	; 0x30
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bdb0      	pop	{r4, r5, r7, pc}

08006e40 <_UG_GetFreeObject>:

UG_OBJECT* _UG_GetFreeObject( UG_WINDOW* wnd )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
 8006e52:	e016      	b.n	8006e82 <_UG_GetFreeObject+0x42>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	015b      	lsls	r3, r3, #5
 8006e5c:	4413      	add	r3, r2
 8006e5e:	60bb      	str	r3, [r7, #8]
      if ( (obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d007      	beq.n	8006e7c <_UG_GetFreeObject+0x3c>
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <_UG_GetFreeObject+0x3c>
      {
         /* Free object found! */
         return obj;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	e008      	b.n	8006e8e <_UG_GetFreeObject+0x4e>
   for(i=0;i<wnd->objcnt;i++)
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	73fb      	strb	r3, [r7, #15]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	7bfa      	ldrb	r2, [r7, #15]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d3e3      	bcc.n	8006e54 <_UG_GetFreeObject+0x14>
      }
   }
   return NULL;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <_UG_SearchObject>:

UG_OBJECT* _UG_SearchObject( UG_WINDOW* wnd, UG_U8 type, UG_U8 id )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70fb      	strb	r3, [r7, #3]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	70bb      	strb	r3, [r7, #2]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]
 8006eb2:	e020      	b.n	8006ef6 <_UG_SearchObject+0x5e>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	015b      	lsls	r3, r3, #5
 8006ebc:	4413      	add	r3, r2
 8006ebe:	60bb      	str	r3, [r7, #8]
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d111      	bne.n	8006ef0 <_UG_SearchObject+0x58>
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00b      	beq.n	8006ef0 <_UG_SearchObject+0x58>
      {
         if ( (obj->type == type) && (obj->id == id) )
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	7e1b      	ldrb	r3, [r3, #24]
 8006edc:	78fa      	ldrb	r2, [r7, #3]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d106      	bne.n	8006ef0 <_UG_SearchObject+0x58>
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	7e5b      	ldrb	r3, [r3, #25]
 8006ee6:	78ba      	ldrb	r2, [r7, #2]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d101      	bne.n	8006ef0 <_UG_SearchObject+0x58>
         {
            /* Requested object found! */
            return obj;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	e008      	b.n	8006f02 <_UG_SearchObject+0x6a>
   for(i=0;i<wnd->objcnt;i++)
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	7bfa      	ldrb	r2, [r7, #15]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d3d9      	bcc.n	8006eb4 <_UG_SearchObject+0x1c>
         }
      }
   }
   return NULL;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr

08006f0c <_UG_ProcessTouchData>:
   }
   return UG_RESULT_FAIL;
}

void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b089      	sub	sp, #36	; 0x24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8006f14:	4b5b      	ldr	r3, [pc, #364]	; (8007084 <_UG_ProcessTouchData+0x178>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	895b      	ldrh	r3, [r3, #10]
 8006f1a:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8006f1c:	4b59      	ldr	r3, [pc, #356]	; (8007084 <_UG_ProcessTouchData+0x178>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	899b      	ldrh	r3, [r3, #12]
 8006f22:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8006f24:	4b57      	ldr	r3, [pc, #348]	; (8007084 <_UG_ProcessTouchData+0x178>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	7a1b      	ldrb	r3, [r3, #8]
 8006f2a:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006f32:	2300      	movs	r3, #0
 8006f34:	83fb      	strh	r3, [r7, #30]
 8006f36:	e09a      	b.n	800706e <_UG_ProcessTouchData+0x162>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	8bfb      	ldrh	r3, [r7, #30]
 8006f3e:	015b      	lsls	r3, r3, #5
 8006f40:	4413      	add	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	785b      	ldrb	r3, [r3, #1]
 8006f4e:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f040 8083 	bne.w	8007062 <_UG_ProcessTouchData+0x156>
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d07d      	beq.n	8007062 <_UG_ProcessTouchData+0x156>
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	f003 0308 	and.w	r3, r3, #8
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d078      	beq.n	8007062 <_UG_ProcessTouchData+0x156>
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d173      	bne.n	8007062 <_UG_ProcessTouchData+0x156>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d047      	beq.n	8007010 <_UG_ProcessTouchData+0x104>
 8006f80:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f88:	d042      	beq.n	8007010 <_UG_ProcessTouchData+0x104>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8006f8a:	7f7b      	ldrb	r3, [r7, #29]
 8006f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d107      	bne.n	8006fa4 <_UG_ProcessTouchData+0x98>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8006f94:	7f7b      	ldrb	r3, [r7, #29]
 8006f96:	f043 0305 	orr.w	r3, r3, #5
 8006f9a:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CLICK_ON_OBJECT);
 8006f9c:	7f7b      	ldrb	r3, [r7, #29]
 8006f9e:	f003 0367 	and.w	r3, r3, #103	; 0x67
 8006fa2:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8006fa4:	7f7b      	ldrb	r3, [r7, #29]
 8006fa6:	f023 0320 	bic.w	r3, r3, #32
 8006faa:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006fb2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	db25      	blt.n	8007006 <_UG_ProcessTouchData+0xfa>
            {
               if ( xp <= obj->a_abs.xe )
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006fc0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	dc1e      	bgt.n	8007006 <_UG_ProcessTouchData+0xfa>
               {
                  if ( yp >= obj->a_abs.ys )
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006fce:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	db17      	blt.n	8007006 <_UG_ProcessTouchData+0xfa>
                  {
                     if ( yp <= obj->a_abs.ye )
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006fdc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	dc10      	bgt.n	8007006 <_UG_ProcessTouchData+0xfa>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8006fe4:	7f7b      	ldrb	r3, [r7, #29]
 8006fe6:	f043 0320 	orr.w	r3, r3, #32
 8006fea:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8006fec:	7f7b      	ldrb	r3, [r7, #29]
 8006fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d107      	bne.n	8007006 <_UG_ProcessTouchData+0xfa>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8006ff6:	7f7b      	ldrb	r3, [r7, #29]
 8006ff8:	f023 0304 	bic.w	r3, r3, #4
 8006ffc:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8006ffe:	7f7b      	ldrb	r3, [r7, #29]
 8007000:	f043 0302 	orr.w	r3, r3, #2
 8007004:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8007006:	7f7b      	ldrb	r3, [r7, #29]
 8007008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700c:	777b      	strb	r3, [r7, #29]
 800700e:	e028      	b.n	8007062 <_UG_ProcessTouchData+0x156>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8007010:	7f7b      	ldrb	r3, [r7, #29]
 8007012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d023      	beq.n	8007062 <_UG_ProcessTouchData+0x156>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 800701a:	7f7b      	ldrb	r3, [r7, #29]
 800701c:	f003 0320 	and.w	r3, r3, #32
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00d      	beq.n	8007040 <_UG_ProcessTouchData+0x134>
            {
               if ( objtouch & OBJ_TOUCH_STATE_PRESSED_ON_OBJECT ) objtouch |= OBJ_TOUCH_STATE_CLICK_ON_OBJECT;
 8007024:	7f7b      	ldrb	r3, [r7, #29]
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <_UG_ProcessTouchData+0x12a>
 800702e:	7f7b      	ldrb	r3, [r7, #29]
 8007030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007034:	777b      	strb	r3, [r7, #29]
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8007036:	7f7b      	ldrb	r3, [r7, #29]
 8007038:	f043 0308 	orr.w	r3, r3, #8
 800703c:	777b      	strb	r3, [r7, #29]
 800703e:	e003      	b.n	8007048 <_UG_ProcessTouchData+0x13c>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8007040:	7f7b      	ldrb	r3, [r7, #29]
 8007042:	f043 0310 	orr.w	r3, r3, #16
 8007046:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8007048:	7f7b      	ldrb	r3, [r7, #29]
 800704a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <_UG_ProcessTouchData+0x14e>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8007052:	7f7b      	ldrb	r3, [r7, #29]
 8007054:	f043 0301 	orr.w	r3, r3, #1
 8007058:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 800705a:	7f7b      	ldrb	r3, [r7, #29]
 800705c:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8007060:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	7f7a      	ldrb	r2, [r7, #29]
 8007066:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8007068:	8bfb      	ldrh	r3, [r7, #30]
 800706a:	3301      	adds	r3, #1
 800706c:	83fb      	strh	r3, [r7, #30]
 800706e:	8bfa      	ldrh	r2, [r7, #30]
 8007070:	8abb      	ldrh	r3, [r7, #20]
 8007072:	429a      	cmp	r2, r3
 8007074:	f4ff af60 	bcc.w	8006f38 <_UG_ProcessTouchData+0x2c>
   }
}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	3724      	adds	r7, #36	; 0x24
 800707e:	46bd      	mov	sp, r7
 8007080:	bc80      	pop	{r7}
 8007082:	4770      	bx	lr
 8007084:	200016c0 	.word	0x200016c0

08007088 <_UG_UpdateObjects>:

void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8007096:	2300      	movs	r3, #0
 8007098:	82fb      	strh	r3, [r7, #22]
 800709a:	e035      	b.n	8007108 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	8afb      	ldrh	r3, [r7, #22]
 80070a2:	015b      	lsls	r3, r3, #5
 80070a4:	4413      	add	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	785b      	ldrb	r3, [r3, #1]
 80070b2:	73bb      	strb	r3, [r7, #14]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d121      	bne.n	8007102 <_UG_UpdateObjects+0x7a>
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d01c      	beq.n	8007102 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d004      	beq.n	80070dc <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	6939      	ldr	r1, [r7, #16]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	4798      	blx	r3
         }
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00d      	beq.n	8007102 <_UG_UpdateObjects+0x7a>
 80070e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	da09      	bge.n	8007102 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	f003 0341 	and.w	r3, r3, #65	; 0x41
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	6939      	ldr	r1, [r7, #16]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8007102:	8afb      	ldrh	r3, [r7, #22]
 8007104:	3301      	adds	r3, #1
 8007106:	82fb      	strh	r3, [r7, #22]
 8007108:	8afa      	ldrh	r2, [r7, #22]
 800710a:	8abb      	ldrh	r3, [r7, #20]
 800710c:	429a      	cmp	r2, r3
 800710e:	d3c5      	bcc.n	800709c <_UG_UpdateObjects+0x14>
            }
         }
      }
   }
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <_UG_HandleEvents>:

void _UG_HandleEvents( UG_WINDOW* wnd )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8007124:	4b22      	ldr	r3, [pc, #136]	; (80071b0 <_UG_HandleEvents+0x94>)
 8007126:	2200      	movs	r2, #0
 8007128:	605a      	str	r2, [r3, #4]
   /* Handle window-related events */
   //ToDo


   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 800712a:	4b21      	ldr	r3, [pc, #132]	; (80071b0 <_UG_HandleEvents+0x94>)
 800712c:	2202      	movs	r2, #2
 800712e:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8007136:	2300      	movs	r3, #0
 8007138:	82fb      	strh	r3, [r7, #22]
 800713a:	e030      	b.n	800719e <_UG_HandleEvents+0x82>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	8afb      	ldrh	r3, [r7, #22]
 8007142:	015b      	lsls	r3, r3, #5
 8007144:	4413      	add	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]
      objstate = obj->state;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	74fb      	strb	r3, [r7, #19]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800714e:	7cfb      	ldrb	r3, [r7, #19]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d11f      	bne.n	8007198 <_UG_HandleEvents+0x7c>
 8007158:	7cfb      	ldrb	r3, [r7, #19]
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d01a      	beq.n	8007198 <_UG_HandleEvents+0x7c>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	7e9b      	ldrb	r3, [r3, #26]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d016      	beq.n	8007198 <_UG_HandleEvents+0x7c>
         {
            msg.src = &obj;
 800716a:	4a11      	ldr	r2, [pc, #68]	; (80071b0 <_UG_HandleEvents+0x94>)
 800716c:	f107 030c 	add.w	r3, r7, #12
 8007170:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	7e1a      	ldrb	r2, [r3, #24]
 8007176:	4b0e      	ldr	r3, [pc, #56]	; (80071b0 <_UG_HandleEvents+0x94>)
 8007178:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	7e5a      	ldrb	r2, [r3, #25]
 800717e:	4b0c      	ldr	r3, [pc, #48]	; (80071b0 <_UG_HandleEvents+0x94>)
 8007180:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	7e9a      	ldrb	r2, [r3, #26]
 8007186:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <_UG_HandleEvents+0x94>)
 8007188:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	4808      	ldr	r0, [pc, #32]	; (80071b0 <_UG_HandleEvents+0x94>)
 8007190:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8007198:	8afb      	ldrh	r3, [r7, #22]
 800719a:	3301      	adds	r3, #1
 800719c:	82fb      	strh	r3, [r7, #22]
 800719e:	8afa      	ldrh	r2, [r7, #22]
 80071a0:	8abb      	ldrh	r3, [r7, #20]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d3ca      	bcc.n	800713c <_UG_HandleEvents+0x20>
         }
      }
   }
}
 80071a6:	bf00      	nop
 80071a8:	bf00      	nop
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	200016c4 	.word	0x200016c4

080071b4 <_UG_DrawObjectFrame>:

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 80071b4:	b5b0      	push	{r4, r5, r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	461a      	mov	r2, r3
 80071c2:	4623      	mov	r3, r4
 80071c4:	80fb      	strh	r3, [r7, #6]
 80071c6:	4603      	mov	r3, r0
 80071c8:	80bb      	strh	r3, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	807b      	strh	r3, [r7, #2]
 80071ce:	4613      	mov	r3, r2
 80071d0:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 80071d2:	887b      	ldrh	r3, [r7, #2]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	b21c      	sxth	r4, r3
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	1c9a      	adds	r2, r3, #2
 80071de:	61ba      	str	r2, [r7, #24]
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80071e6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80071ea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	4613      	mov	r3, r2
 80071f2:	4622      	mov	r2, r4
 80071f4:	f7ff f964 	bl	80064c0 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 80071f8:	88bb      	ldrh	r3, [r7, #4]
 80071fa:	3301      	adds	r3, #1
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	b219      	sxth	r1, r3
 8007200:	883b      	ldrh	r3, [r7, #0]
 8007202:	3b01      	subs	r3, #1
 8007204:	b29b      	uxth	r3, r3
 8007206:	b21c      	sxth	r4, r3
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	1c9a      	adds	r2, r3, #2
 800720c:	61ba      	str	r2, [r7, #24]
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007214:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	4623      	mov	r3, r4
 800721c:	f7ff f950 	bl	80064c0 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	1c9a      	adds	r2, r3, #2
 8007224:	61ba      	str	r2, [r7, #24]
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	f9b7 4000 	ldrsh.w	r4, [r7]
 800722c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007230:	f9b7 1000 	ldrsh.w	r1, [r7]
 8007234:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	4623      	mov	r3, r4
 800723c:	f7ff f940 	bl	80064c0 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8007240:	883b      	ldrh	r3, [r7, #0]
 8007242:	3b01      	subs	r3, #1
 8007244:	b29b      	uxth	r3, r3
 8007246:	b21c      	sxth	r4, r3
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	1c9a      	adds	r2, r3, #2
 800724c:	61ba      	str	r2, [r7, #24]
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007254:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007258:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	4623      	mov	r3, r4
 8007260:	f7ff f92e 	bl	80064c0 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8007264:	88fb      	ldrh	r3, [r7, #6]
 8007266:	3301      	adds	r3, #1
 8007268:	b29b      	uxth	r3, r3
 800726a:	b218      	sxth	r0, r3
 800726c:	88bb      	ldrh	r3, [r7, #4]
 800726e:	3301      	adds	r3, #1
 8007270:	b29b      	uxth	r3, r3
 8007272:	b219      	sxth	r1, r3
 8007274:	887b      	ldrh	r3, [r7, #2]
 8007276:	3b02      	subs	r3, #2
 8007278:	b29b      	uxth	r3, r3
 800727a:	b21c      	sxth	r4, r3
 800727c:	88bb      	ldrh	r3, [r7, #4]
 800727e:	3301      	adds	r3, #1
 8007280:	b29b      	uxth	r3, r3
 8007282:	b21d      	sxth	r5, r3
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	1c9a      	adds	r2, r3, #2
 8007288:	61ba      	str	r2, [r7, #24]
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	462b      	mov	r3, r5
 8007290:	4622      	mov	r2, r4
 8007292:	f7ff f915 	bl	80064c0 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8007296:	88fb      	ldrh	r3, [r7, #6]
 8007298:	3301      	adds	r3, #1
 800729a:	b29b      	uxth	r3, r3
 800729c:	b218      	sxth	r0, r3
 800729e:	88bb      	ldrh	r3, [r7, #4]
 80072a0:	3302      	adds	r3, #2
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	b219      	sxth	r1, r3
 80072a6:	88fb      	ldrh	r3, [r7, #6]
 80072a8:	3301      	adds	r3, #1
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	b21c      	sxth	r4, r3
 80072ae:	883b      	ldrh	r3, [r7, #0]
 80072b0:	3b02      	subs	r3, #2
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	b21d      	sxth	r5, r3
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	1c9a      	adds	r2, r3, #2
 80072ba:	61ba      	str	r2, [r7, #24]
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	462b      	mov	r3, r5
 80072c2:	4622      	mov	r2, r4
 80072c4:	f7ff f8fc 	bl	80064c0 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 80072c8:	88fb      	ldrh	r3, [r7, #6]
 80072ca:	3301      	adds	r3, #1
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	b218      	sxth	r0, r3
 80072d0:	883b      	ldrh	r3, [r7, #0]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	b219      	sxth	r1, r3
 80072d8:	887b      	ldrh	r3, [r7, #2]
 80072da:	3b01      	subs	r3, #1
 80072dc:	b29b      	uxth	r3, r3
 80072de:	b21c      	sxth	r4, r3
 80072e0:	883b      	ldrh	r3, [r7, #0]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	b21d      	sxth	r5, r3
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	1c9a      	adds	r2, r3, #2
 80072ec:	61ba      	str	r2, [r7, #24]
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	462b      	mov	r3, r5
 80072f4:	4622      	mov	r2, r4
 80072f6:	f7ff f8e3 	bl	80064c0 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 80072fa:	887b      	ldrh	r3, [r7, #2]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29b      	uxth	r3, r3
 8007300:	b218      	sxth	r0, r3
 8007302:	88bb      	ldrh	r3, [r7, #4]
 8007304:	3301      	adds	r3, #1
 8007306:	b29b      	uxth	r3, r3
 8007308:	b219      	sxth	r1, r3
 800730a:	887b      	ldrh	r3, [r7, #2]
 800730c:	3b01      	subs	r3, #1
 800730e:	b29b      	uxth	r3, r3
 8007310:	b21c      	sxth	r4, r3
 8007312:	883b      	ldrh	r3, [r7, #0]
 8007314:	3b02      	subs	r3, #2
 8007316:	b29b      	uxth	r3, r3
 8007318:	b21d      	sxth	r5, r3
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	1c9a      	adds	r2, r3, #2
 800731e:	61ba      	str	r2, [r7, #24]
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	462b      	mov	r3, r5
 8007326:	4622      	mov	r2, r4
 8007328:	f7ff f8ca 	bl	80064c0 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 800732c:	88fb      	ldrh	r3, [r7, #6]
 800732e:	3302      	adds	r3, #2
 8007330:	b29b      	uxth	r3, r3
 8007332:	b218      	sxth	r0, r3
 8007334:	88bb      	ldrh	r3, [r7, #4]
 8007336:	3302      	adds	r3, #2
 8007338:	b29b      	uxth	r3, r3
 800733a:	b219      	sxth	r1, r3
 800733c:	887b      	ldrh	r3, [r7, #2]
 800733e:	3b03      	subs	r3, #3
 8007340:	b29b      	uxth	r3, r3
 8007342:	b21c      	sxth	r4, r3
 8007344:	88bb      	ldrh	r3, [r7, #4]
 8007346:	3302      	adds	r3, #2
 8007348:	b29b      	uxth	r3, r3
 800734a:	b21d      	sxth	r5, r3
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	1c9a      	adds	r2, r3, #2
 8007350:	61ba      	str	r2, [r7, #24]
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	462b      	mov	r3, r5
 8007358:	4622      	mov	r2, r4
 800735a:	f7ff f8b1 	bl	80064c0 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 800735e:	88fb      	ldrh	r3, [r7, #6]
 8007360:	3302      	adds	r3, #2
 8007362:	b29b      	uxth	r3, r3
 8007364:	b218      	sxth	r0, r3
 8007366:	88bb      	ldrh	r3, [r7, #4]
 8007368:	3303      	adds	r3, #3
 800736a:	b29b      	uxth	r3, r3
 800736c:	b219      	sxth	r1, r3
 800736e:	88fb      	ldrh	r3, [r7, #6]
 8007370:	3302      	adds	r3, #2
 8007372:	b29b      	uxth	r3, r3
 8007374:	b21c      	sxth	r4, r3
 8007376:	883b      	ldrh	r3, [r7, #0]
 8007378:	3b03      	subs	r3, #3
 800737a:	b29b      	uxth	r3, r3
 800737c:	b21d      	sxth	r5, r3
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	1c9a      	adds	r2, r3, #2
 8007382:	61ba      	str	r2, [r7, #24]
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	462b      	mov	r3, r5
 800738a:	4622      	mov	r2, r4
 800738c:	f7ff f898 	bl	80064c0 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8007390:	88fb      	ldrh	r3, [r7, #6]
 8007392:	3302      	adds	r3, #2
 8007394:	b29b      	uxth	r3, r3
 8007396:	b218      	sxth	r0, r3
 8007398:	883b      	ldrh	r3, [r7, #0]
 800739a:	3b02      	subs	r3, #2
 800739c:	b29b      	uxth	r3, r3
 800739e:	b219      	sxth	r1, r3
 80073a0:	887b      	ldrh	r3, [r7, #2]
 80073a2:	3b02      	subs	r3, #2
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	b21c      	sxth	r4, r3
 80073a8:	883b      	ldrh	r3, [r7, #0]
 80073aa:	3b02      	subs	r3, #2
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	b21d      	sxth	r5, r3
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	1c9a      	adds	r2, r3, #2
 80073b4:	61ba      	str	r2, [r7, #24]
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	462b      	mov	r3, r5
 80073bc:	4622      	mov	r2, r4
 80073be:	f7ff f87f 	bl	80064c0 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 80073c2:	887b      	ldrh	r3, [r7, #2]
 80073c4:	3b02      	subs	r3, #2
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	b218      	sxth	r0, r3
 80073ca:	88bb      	ldrh	r3, [r7, #4]
 80073cc:	3302      	adds	r3, #2
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	b219      	sxth	r1, r3
 80073d2:	887b      	ldrh	r3, [r7, #2]
 80073d4:	3b02      	subs	r3, #2
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	b21a      	sxth	r2, r3
 80073da:	883b      	ldrh	r3, [r7, #0]
 80073dc:	3b03      	subs	r3, #3
 80073de:	b29b      	uxth	r3, r3
 80073e0:	b21c      	sxth	r4, r3
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	4623      	mov	r3, r4
 80073ea:	f7ff f869 	bl	80064c0 <UG_DrawLine>
}
 80073ee:	bf00      	nop
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bdb0      	pop	{r4, r5, r7, pc}

080073f6 <_UG_SendObjectPrerenderEvent>:

#ifdef USE_PRERENDER_EVENT
void _UG_SendObjectPrerenderEvent(UG_WINDOW *wnd,UG_OBJECT *obj)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
	UG_MESSAGE msg;
	msg.event = OBJ_EVENT_PRERENDER;
 8007400:	2302      	movs	r3, #2
 8007402:	72fb      	strb	r3, [r7, #11]
	msg.type = MSG_TYPE_OBJECT;
 8007404:	2302      	movs	r3, #2
 8007406:	723b      	strb	r3, [r7, #8]
	msg.id = obj->type;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	7e1b      	ldrb	r3, [r3, #24]
 800740c:	727b      	strb	r3, [r7, #9]
	msg.sub_id = obj->id;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	7e5b      	ldrb	r3, [r3, #25]
 8007412:	72bb      	strb	r3, [r7, #10]
	msg.src = obj;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	60fb      	str	r3, [r7, #12]

	wnd->cb(&msg);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741c:	f107 0208 	add.w	r2, r7, #8
 8007420:	4610      	mov	r0, r2
 8007422:	4798      	blx	r3
}
 8007424:	bf00      	nop
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <_UG_SendObjectPostrenderEvent>:
#endif

#ifdef USE_POSTRENDER_EVENT
void _UG_SendObjectPostrenderEvent(UG_WINDOW *wnd,UG_OBJECT *obj)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
	UG_MESSAGE msg;
	msg.event = OBJ_EVENT_POSTRENDER;
 8007436:	2303      	movs	r3, #3
 8007438:	72fb      	strb	r3, [r7, #11]
	msg.type = MSG_TYPE_OBJECT;
 800743a:	2302      	movs	r3, #2
 800743c:	723b      	strb	r3, [r7, #8]
	msg.id = obj->type;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	7e1b      	ldrb	r3, [r3, #24]
 8007442:	727b      	strb	r3, [r7, #9]
	msg.sub_id = obj->id;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	7e5b      	ldrb	r3, [r3, #25]
 8007448:	72bb      	strb	r3, [r7, #10]
	msg.src = obj;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	60fb      	str	r3, [r7, #12]

	wnd->cb(&msg);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007452:	f107 0208 	add.w	r2, r7, #8
 8007456:	4610      	mov	r0, r2
 8007458:	4798      	blx	r3
}
 800745a:	bf00      	nop
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	4603      	mov	r3, r0
 800746c:	6039      	str	r1, [r7, #0]
 800746e:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	2b03      	cmp	r3, #3
 8007474:	d810      	bhi.n	8007498 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8007476:	4b0b      	ldr	r3, [pc, #44]	; (80074a4 <UG_DriverRegister+0x40>)
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	79fb      	ldrb	r3, [r7, #7]
 800747c:	3309      	adds	r3, #9
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	4413      	add	r3, r2
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8007486:	4b07      	ldr	r3, [pc, #28]	; (80074a4 <UG_DriverRegister+0x40>)
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	3309      	adds	r3, #9
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	4413      	add	r3, r2
 8007492:	2203      	movs	r2, #3
 8007494:	721a      	strb	r2, [r3, #8]
 8007496:	e000      	b.n	800749a <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8007498:	bf00      	nop
}
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	bc80      	pop	{r7}
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	200016c0 	.word	0x200016c0

080074a8 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_SATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_SATUS_WAIT_FOR_UPDATE;
 80074ae:	4b59      	ldr	r3, [pc, #356]	; (8007614 <UG_Update+0x16c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <UG_Update+0x2c>
 80074be:	4b55      	ldr	r3, [pc, #340]	; (8007614 <UG_Update+0x16c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80074c6:	4b53      	ldr	r3, [pc, #332]	; (8007614 <UG_Update+0x16c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0201 	bic.w	r2, r2, #1
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 80074d4:	4b4f      	ldr	r3, [pc, #316]	; (8007614 <UG_Update+0x16c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	4b4e      	ldr	r3, [pc, #312]	; (8007614 <UG_Update+0x16c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d071      	beq.n	80075c8 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 80074e4:	4b4b      	ldr	r3, [pc, #300]	; (8007614 <UG_Update+0x16c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d06c      	beq.n	80075c8 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 80074ee:	4b49      	ldr	r3, [pc, #292]	; (8007614 <UG_Update+0x16c>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4b48      	ldr	r3, [pc, #288]	; (8007614 <UG_Update+0x16c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6952      	ldr	r2, [r2, #20]
 80074f8:	619a      	str	r2, [r3, #24]
         gui->active_window = gui->next_window;
 80074fa:	4b46      	ldr	r3, [pc, #280]	; (8007614 <UG_Update+0x16c>)
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	4b45      	ldr	r3, [pc, #276]	; (8007614 <UG_Update+0x16c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6912      	ldr	r2, [r2, #16]
 8007504:	615a      	str	r2, [r3, #20]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8007506:	4b43      	ldr	r3, [pc, #268]	; (8007614 <UG_Update+0x16c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d045      	beq.n	800759c <UG_Update+0xf4>
 8007510:	4b40      	ldr	r3, [pc, #256]	; (8007614 <UG_Update+0x16c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	7d9b      	ldrb	r3, [r3, #22]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d03d      	beq.n	800759c <UG_Update+0xf4>
 8007520:	4b3c      	ldr	r3, [pc, #240]	; (8007614 <UG_Update+0x16c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	7a1b      	ldrb	r3, [r3, #8]
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d035      	beq.n	800759c <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8007530:	4b38      	ldr	r3, [pc, #224]	; (8007614 <UG_Update+0x16c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800753a:	4b36      	ldr	r3, [pc, #216]	; (8007614 <UG_Update+0x16c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007544:	429a      	cmp	r2, r3
 8007546:	d123      	bne.n	8007590 <UG_Update+0xe8>
 8007548:	4b32      	ldr	r3, [pc, #200]	; (8007614 <UG_Update+0x16c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007552:	4b30      	ldr	r3, [pc, #192]	; (8007614 <UG_Update+0x16c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800755c:	429a      	cmp	r2, r3
 800755e:	d117      	bne.n	8007590 <UG_Update+0xe8>
 8007560:	4b2c      	ldr	r3, [pc, #176]	; (8007614 <UG_Update+0x16c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800756a:	4b2a      	ldr	r3, [pc, #168]	; (8007614 <UG_Update+0x16c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007574:	429a      	cmp	r2, r3
 8007576:	d10b      	bne.n	8007590 <UG_Update+0xe8>
 8007578:	4b26      	ldr	r3, [pc, #152]	; (8007614 <UG_Update+0x16c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8007582:	4b24      	ldr	r3, [pc, #144]	; (8007614 <UG_Update+0x16c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800758c:	429a      	cmp	r2, r3
 800758e:	d005      	beq.n	800759c <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8007590:	4b20      	ldr	r3, [pc, #128]	; (8007614 <UG_Update+0x16c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 facc 	bl	8007b34 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 800759c:	4b1d      	ldr	r3, [pc, #116]	; (8007614 <UG_Update+0x16c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	7a1a      	ldrb	r2, [r3, #8]
 80075a4:	4b1b      	ldr	r3, [pc, #108]	; (8007614 <UG_Update+0x16c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 80075b2:	4b18      	ldr	r3, [pc, #96]	; (8007614 <UG_Update+0x16c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	7a1a      	ldrb	r2, [r3, #8]
 80075ba:	4b16      	ldr	r3, [pc, #88]	; (8007614 <UG_Update+0x16c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 80075c8:	4b12      	ldr	r3, [pc, #72]	; (8007614 <UG_Update+0x16c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d01b      	beq.n	800760a <UG_Update+0x162>
   {
      wnd = gui->active_window;
 80075d2:	4b10      	ldr	r3, [pc, #64]	; (8007614 <UG_Update+0x16c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	7a1b      	ldrb	r3, [r3, #8]
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fb4e 	bl	8007c88 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	7a1b      	ldrb	r3, [r3, #8]
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d008      	beq.n	800760a <UG_Update+0x162>
      {
         _UG_ProcessTouchData( wnd );
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff fc87 	bl	8006f0c <_UG_ProcessTouchData>
         _UG_UpdateObjects( wnd );
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff fd42 	bl	8007088 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff fd89 	bl	800711c <_UG_HandleEvents>
      }
   }
}
 800760a:	bf00      	nop
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200016c0 	.word	0x200016c0

08007618 <UG_DrawBMP>:
   while ( (UG_U8)gui->state & UG_SATUS_WAIT_FOR_UPDATE ){};
   #endif    
}

void UG_DrawBMP( UG_S16 xp, UG_S16 yp, UG_BMP* bmp )
{
 8007618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800761a:	b085      	sub	sp, #20
 800761c:	af02      	add	r7, sp, #8
 800761e:	4603      	mov	r3, r0
 8007620:	603a      	str	r2, [r7, #0]
 8007622:	80fb      	strh	r3, [r7, #6]
 8007624:	460b      	mov	r3, r1
 8007626:	80bb      	strh	r3, [r7, #4]


   if ( bmp->p == NULL ) return;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d030      	beq.n	8007692 <UG_DrawBMP+0x7a>
   }
#endif

#ifdef USE_COLOR_RGB565 // 16-bit colour 5*Red-6*Green-5*Blue

   if ( gui->driver[DRIVER_DRAW_IMAGE].state & DRIVER_ENABLED )
 8007630:	4b1a      	ldr	r3, [pc, #104]	; (800769c <UG_DrawBMP+0x84>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d029      	beq.n	8007694 <UG_DrawBMP+0x7c>
   {

    if( bmp->colors == BMP_RGB565 )       // This Hardware accelerator only works for 16BPP RGB565 BMP images
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	7a5b      	ldrb	r3, [r3, #9]
 8007644:	2b02      	cmp	r3, #2
 8007646:	d125      	bne.n	8007694 <UG_DrawBMP+0x7c>
       {
           if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint16_t *image, uint16_t pSize))gui->driver[DRIVER_DRAW_IMAGE].driver)(xp, yp, xp + bmp->width, yp + bmp->height, bmp->p, bmp->width * bmp->height) == UG_RESULT_OK ) return;
 8007648:	4b14      	ldr	r3, [pc, #80]	; (800769c <UG_DrawBMP+0x84>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800764e:	461e      	mov	r6, r3
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	889a      	ldrh	r2, [r3, #4]
 8007654:	88fb      	ldrh	r3, [r7, #6]
 8007656:	4413      	add	r3, r2
 8007658:	b29b      	uxth	r3, r3
 800765a:	b21c      	sxth	r4, r3
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	88da      	ldrh	r2, [r3, #6]
 8007660:	88bb      	ldrh	r3, [r7, #4]
 8007662:	4413      	add	r3, r2
 8007664:	b29b      	uxth	r3, r3
 8007666:	b21d      	sxth	r5, r3
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	8892      	ldrh	r2, [r2, #4]
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	88c9      	ldrh	r1, [r1, #6]
 8007674:	fb01 f202 	mul.w	r2, r1, r2
 8007678:	b292      	uxth	r2, r2
 800767a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800767e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007682:	9201      	str	r2, [sp, #4]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	462b      	mov	r3, r5
 8007688:	4622      	mov	r2, r4
 800768a:	47b0      	blx	r6
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	e000      	b.n	8007694 <UG_DrawBMP+0x7c>
   if ( bmp->p == NULL ) return;
 8007692:	bf00      	nop
         c = ((UG_COLOR)r<<16) | ((UG_COLOR)g<<8) | (UG_COLOR)b;
         UG_DrawPixel( xp++ , yp , c );
      }
      yp++;
   }*/
}
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800769a:	bf00      	nop
 800769c:	200016c0 	.word	0x200016c0

080076a0 <UG_WindowCreate>:

/* -------------------------------------------------------------------------------- */
/* -- WINDOW FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
UG_RESULT UG_WindowCreate( UG_WINDOW* wnd, UG_OBJECT* objlst, UG_U8 objcnt, void (*cb)( UG_MESSAGE* ) )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	4613      	mov	r3, r2
 80076ae:	71fb      	strb	r3, [r7, #7]
   UG_U8 i;
   UG_OBJECT* obj=NULL;
 80076b0:	2300      	movs	r3, #0
 80076b2:	613b      	str	r3, [r7, #16]

   if ( (wnd == NULL) || (objlst == NULL) || (objcnt == 0) ) return UG_RESULT_FAIL;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d005      	beq.n	80076c6 <UG_WindowCreate+0x26>
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <UG_WindowCreate+0x26>
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <UG_WindowCreate+0x2c>
 80076c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ca:	e073      	b.n	80077b4 <UG_WindowCreate+0x114>

   /* Initialize all objects of the window */
   for(i=0; i<objcnt; i++)
 80076cc:	2300      	movs	r3, #0
 80076ce:	75fb      	strb	r3, [r7, #23]
 80076d0:	e00d      	b.n	80076ee <UG_WindowCreate+0x4e>
   {
      obj = (UG_OBJECT*)&objlst[i];
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	015b      	lsls	r3, r3, #5
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	4413      	add	r3, r2
 80076da:	613b      	str	r3, [r7, #16]
      obj->state = OBJ_STATE_INIT;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	2203      	movs	r2, #3
 80076e0:	701a      	strb	r2, [r3, #0]
      obj->data = NULL;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	2200      	movs	r2, #0
 80076e6:	61da      	str	r2, [r3, #28]
   for(i=0; i<objcnt; i++)
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	3301      	adds	r3, #1
 80076ec:	75fb      	strb	r3, [r7, #23]
 80076ee:	7dfa      	ldrb	r2, [r7, #23]
 80076f0:	79fb      	ldrb	r3, [r7, #7]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d3ed      	bcc.n	80076d2 <UG_WindowCreate+0x32>
   }

   /* Initialize window */
   wnd->objcnt = objcnt;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	79fa      	ldrb	r2, [r7, #7]
 80076fa:	701a      	strb	r2, [r3, #0]
   wnd->objlst = objlst;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	605a      	str	r2, [r3, #4]
   wnd->state = WND_STATE_VALID;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2202      	movs	r2, #2
 8007706:	721a      	strb	r2, [r3, #8]
   #ifdef USE_COLOR_RGB888
   wnd->fc = 0x000000;
   wnd->bc = 0xF0F0F0;
   #endif
   #ifdef USE_COLOR_RGB565
   wnd->fc = 0x0000;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	815a      	strh	r2, [r3, #10]
   wnd->bc = 0xEF7D;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f64e 727d 	movw	r2, #61309	; 0xef7d
 8007714:	819a      	strh	r2, [r3, #12]
   #endif
   wnd->xs = 0;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	81da      	strh	r2, [r3, #14]
   wnd->ys = 0;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	821a      	strh	r2, [r3, #16]
   wnd->xe = UG_GetXDim()-1;
 8007722:	f7fe ffa9 	bl	8006678 <UG_GetXDim>
 8007726:	4603      	mov	r3, r0
 8007728:	b29b      	uxth	r3, r3
 800772a:	3b01      	subs	r3, #1
 800772c:	b29b      	uxth	r3, r3
 800772e:	b21a      	sxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	825a      	strh	r2, [r3, #18]
   wnd->ye = UG_GetYDim()-1;
 8007734:	f7fe ffac 	bl	8006690 <UG_GetYDim>
 8007738:	4603      	mov	r3, r0
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b01      	subs	r3, #1
 800773e:	b29b      	uxth	r3, r3
 8007740:	b21a      	sxth	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	829a      	strh	r2, [r3, #20]
   wnd->cb = cb;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	631a      	str	r2, [r3, #48]	; 0x30
   wnd->style = WND_STYLE_3D | WND_STYLE_SHOW_TITLE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2203      	movs	r2, #3
 8007750:	759a      	strb	r2, [r3, #22]

   /* Initialize window title-bar */
   wnd->title.str = NULL;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	619a      	str	r2, [r3, #24]
   if (gui != NULL) wnd->title.font = &gui->font;
 8007758:	4b18      	ldr	r3, [pc, #96]	; (80077bc <UG_WindowCreate+0x11c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d006      	beq.n	800776e <UG_WindowCreate+0xce>
 8007760:	4b16      	ldr	r3, [pc, #88]	; (80077bc <UG_WindowCreate+0x11c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	61da      	str	r2, [r3, #28]
 800776c:	e002      	b.n	8007774 <UG_WindowCreate+0xd4>
   else wnd->title.font = NULL;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	61da      	str	r2, [r3, #28]
   wnd->title.h_space = 2;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2202      	movs	r2, #2
 8007778:	f883 2020 	strb.w	r2, [r3, #32]
   wnd->title.v_space = 2;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   wnd->title.align = ALIGN_CENTER_LEFT;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2211      	movs	r2, #17
 8007788:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   wnd->title.fc = C_WHITE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007792:	849a      	strh	r2, [r3, #36]	; 0x24
   wnd->title.bc = C_BLUE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	221f      	movs	r2, #31
 8007798:	84da      	strh	r2, [r3, #38]	; 0x26
   wnd->title.ifc = C_WHITE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077a0:	851a      	strh	r2, [r3, #40]	; 0x28
   wnd->title.ibc = C_GRAY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f647 32ef 	movw	r2, #31727	; 0x7bef
 80077a8:	855a      	strh	r2, [r3, #42]	; 0x2a
   wnd->title.height = 15;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	220f      	movs	r2, #15
 80077ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

   return UG_RESULT_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	200016c0 	.word	0x200016c0

080077c0 <UG_WindowShow>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowShow( UG_WINDOW* wnd )
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d013      	beq.n	80077f6 <UG_WindowShow+0x36>
   {
      /* Force an update, even if this is the active window! */
      wnd->state |= WND_STATE_VISIBLE | WND_STATE_UPDATE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	7a1b      	ldrb	r3, [r3, #8]
 80077d2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	721a      	strb	r2, [r3, #8]
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	7a1b      	ldrb	r3, [r3, #8]
 80077e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	721a      	strb	r2, [r3, #8]
      gui->next_window = wnd;
 80077ea:	4b06      	ldr	r3, [pc, #24]	; (8007804 <UG_WindowShow+0x44>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	611a      	str	r2, [r3, #16]
      return UG_RESULT_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	e001      	b.n	80077fa <UG_WindowShow+0x3a>
   }
   return UG_RESULT_FAIL;
 80077f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	bc80      	pop	{r7}
 8007802:	4770      	bx	lr
 8007804:	200016c0 	.word	0x200016c0

08007808 <UG_WindowSetBackColor>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetBackColor( UG_WINDOW* wnd, UG_COLOR bc )
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d011      	beq.n	800783e <UG_WindowSetBackColor+0x36>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7a1b      	ldrb	r3, [r3, #8]
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00b      	beq.n	800783e <UG_WindowSetBackColor+0x36>
   {
      wnd->bc = bc;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	887a      	ldrh	r2, [r7, #2]
 800782a:	819a      	strh	r2, [r3, #12]
      wnd->state |= WND_STATE_UPDATE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	7a1b      	ldrb	r3, [r3, #8]
 8007830:	f043 0320 	orr.w	r3, r3, #32
 8007834:	b2da      	uxtb	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	e001      	b.n	8007842 <UG_WindowSetBackColor+0x3a>
   }
   return UG_RESULT_FAIL;
 800783e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr

0800784c <UG_WindowSetTitleTextColor>:

UG_RESULT UG_WindowSetTitleTextColor( UG_WINDOW* wnd, UG_COLOR c )
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d011      	beq.n	8007882 <UG_WindowSetTitleTextColor+0x36>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	7a1b      	ldrb	r3, [r3, #8]
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00b      	beq.n	8007882 <UG_WindowSetTitleTextColor+0x36>
   {
      wnd->title.fc = c;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	887a      	ldrh	r2, [r7, #2]
 800786e:	849a      	strh	r2, [r3, #36]	; 0x24
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	7a1b      	ldrb	r3, [r3, #8]
 8007874:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007878:	b2da      	uxtb	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	e001      	b.n	8007886 <UG_WindowSetTitleTextColor+0x3a>
   }
   return UG_RESULT_FAIL;
 8007882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007886:	4618      	mov	r0, r3
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	bc80      	pop	{r7}
 800788e:	4770      	bx	lr

08007890 <UG_WindowSetTitleColor>:

UG_RESULT UG_WindowSetTitleColor( UG_WINDOW* wnd, UG_COLOR c )
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d011      	beq.n	80078c6 <UG_WindowSetTitleColor+0x36>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	7a1b      	ldrb	r3, [r3, #8]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00b      	beq.n	80078c6 <UG_WindowSetTitleColor+0x36>
   {
      wnd->title.bc = c;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	887a      	ldrh	r2, [r7, #2]
 80078b2:	84da      	strh	r2, [r3, #38]	; 0x26
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	7a1b      	ldrb	r3, [r3, #8]
 80078b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	e001      	b.n	80078ca <UG_WindowSetTitleColor+0x3a>
   }
   return UG_RESULT_FAIL;
 80078c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bc80      	pop	{r7}
 80078d2:	4770      	bx	lr

080078d4 <UG_WindowSetTitleText>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleText( UG_WINDOW* wnd, char* str )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d011      	beq.n	8007908 <UG_WindowSetTitleText+0x34>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	7a1b      	ldrb	r3, [r3, #8]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00b      	beq.n	8007908 <UG_WindowSetTitleText+0x34>
   {
      wnd->title.str = str;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	619a      	str	r2, [r3, #24]
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	7a1b      	ldrb	r3, [r3, #8]
 80078fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	e001      	b.n	800790c <UG_WindowSetTitleText+0x38>
   }
   return UG_RESULT_FAIL;
 8007908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800790c:	4618      	mov	r0, r3
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	bc80      	pop	{r7}
 8007914:	4770      	bx	lr

08007916 <UG_WindowSetTitleTextFont>:

UG_RESULT UG_WindowSetTitleTextFont( UG_WINDOW* wnd, const UG_FONT* font )
{
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d02b      	beq.n	800797e <UG_WindowSetTitleTextFont+0x68>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	7a1b      	ldrb	r3, [r3, #8]
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d025      	beq.n	800797e <UG_WindowSetTitleTextFont+0x68>
   {
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	7a1b      	ldrb	r3, [r3, #8]
 8007936:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800793a:	b2da      	uxtb	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	721a      	strb	r2, [r3, #8]
      wnd->title.font = font;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	61da      	str	r2, [r3, #28]
      if ( wnd->title.height <= (font->char_height + 1) )
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800794c:	461a      	mov	r2, r3
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007954:	3301      	adds	r3, #1
 8007956:	429a      	cmp	r2, r3
 8007958:	dc0f      	bgt.n	800797a <UG_WindowSetTitleTextFont+0x64>
      {
         wnd->title.height = font->char_height + 2;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	3302      	adds	r3, #2
 8007964:	b2da      	uxtb	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	7a1b      	ldrb	r3, [r3, #8]
 8007970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007974:	b2da      	uxtb	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	721a      	strb	r2, [r3, #8]
      }
      return UG_RESULT_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	e001      	b.n	8007982 <UG_WindowSetTitleTextFont+0x6c>
   }
   return UG_RESULT_FAIL;
 800797e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007982:	4618      	mov	r0, r3
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	bc80      	pop	{r7}
 800798a:	4770      	bx	lr

0800798c <UG_WindowSetTitleTextAlignment>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleTextAlignment( UG_WINDOW* wnd, UG_U8 align )
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d012      	beq.n	80079c4 <UG_WindowSetTitleTextAlignment+0x38>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	7a1b      	ldrb	r3, [r3, #8]
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00c      	beq.n	80079c4 <UG_WindowSetTitleTextAlignment+0x38>
   {
      wnd->title.align = align;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	7a1b      	ldrb	r3, [r3, #8]
 80079b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	e001      	b.n	80079c8 <UG_WindowSetTitleTextAlignment+0x3c>
   }
   return UG_RESULT_FAIL;
 80079c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bc80      	pop	{r7}
 80079d0:	4770      	bx	lr

080079d2 <UG_WindowSetStyle>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetStyle( UG_WINDOW* wnd, UG_U8 style )
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d036      	beq.n	8007a52 <UG_WindowSetStyle+0x80>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	7a1b      	ldrb	r3, [r3, #8]
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d030      	beq.n	8007a52 <UG_WindowSetStyle+0x80>
   {
      /* 3D or 2D? */
      if ( style & WND_STYLE_3D )
 80079f0:	78fb      	ldrb	r3, [r7, #3]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d007      	beq.n	8007a0a <UG_WindowSetStyle+0x38>
      {
         wnd->style |= WND_STYLE_3D;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	7d9b      	ldrb	r3, [r3, #22]
 80079fe:	f043 0301 	orr.w	r3, r3, #1
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	759a      	strb	r2, [r3, #22]
 8007a08:	e006      	b.n	8007a18 <UG_WindowSetStyle+0x46>
      }
      else
      {
         wnd->style &= ~WND_STYLE_3D;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	7d9b      	ldrb	r3, [r3, #22]
 8007a0e:	f023 0301 	bic.w	r3, r3, #1
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	759a      	strb	r2, [r3, #22]
      }
      /* Show title-bar? */
      if ( style & WND_STYLE_SHOW_TITLE )
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d007      	beq.n	8007a32 <UG_WindowSetStyle+0x60>
      {
         wnd->style |= WND_STYLE_SHOW_TITLE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	7d9b      	ldrb	r3, [r3, #22]
 8007a26:	f043 0302 	orr.w	r3, r3, #2
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	759a      	strb	r2, [r3, #22]
 8007a30:	e006      	b.n	8007a40 <UG_WindowSetStyle+0x6e>
      }
      else
      {
         wnd->style &= ~WND_STYLE_SHOW_TITLE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	7d9b      	ldrb	r3, [r3, #22]
 8007a36:	f023 0302 	bic.w	r3, r3, #2
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	759a      	strb	r2, [r3, #22]
      }
      wnd->state |= WND_STATE_UPDATE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	7a1b      	ldrb	r3, [r3, #8]
 8007a44:	f043 0320 	orr.w	r3, r3, #32
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e001      	b.n	8007a56 <UG_WindowSetStyle+0x84>
   }
   return UG_RESULT_FAIL;
 8007a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bc80      	pop	{r7}
 8007a5e:	4770      	bx	lr

08007a60 <UG_WindowGetArea>:
   }
   return style;
}

UG_RESULT UG_WindowGetArea( UG_WINDOW* wnd, UG_AREA* a )
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d05a      	beq.n	8007b26 <UG_WindowGetArea+0xc6>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	7a1b      	ldrb	r3, [r3, #8]
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d054      	beq.n	8007b26 <UG_WindowGetArea+0xc6>
   {
      a->xs = wnd->xs;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	801a      	strh	r2, [r3, #0]
      a->ys = wnd->ys;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	805a      	strh	r2, [r3, #2]
      a->xe = wnd->xe;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	809a      	strh	r2, [r3, #4]
      a->ye = wnd->ye;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	80da      	strh	r2, [r3, #6]
      if ( wnd->style & WND_STYLE_3D )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	7d9b      	ldrb	r3, [r3, #22]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d023      	beq.n	8007af8 <UG_WindowGetArea+0x98>
      {
         a->xs+=3;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	3303      	adds	r3, #3
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	b21a      	sxth	r2, r3
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	801a      	strh	r2, [r3, #0]
         a->ys+=3;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	3303      	adds	r3, #3
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	b21a      	sxth	r2, r3
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	805a      	strh	r2, [r3, #2]
         a->xe-=3;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	3b03      	subs	r3, #3
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	b21a      	sxth	r2, r3
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	809a      	strh	r2, [r3, #4]
         a->ye-=3;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	3b03      	subs	r3, #3
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	b21a      	sxth	r2, r3
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	80da      	strh	r2, [r3, #6]
      }
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	7d9b      	ldrb	r3, [r3, #22]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00e      	beq.n	8007b22 <UG_WindowGetArea+0xc2>
      {
         a->ys+= wnd->title.height+1;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	4413      	add	r3, r2
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	3301      	adds	r3, #1
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	b21a      	sxth	r2, r3
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	805a      	strh	r2, [r3, #2]
      }
      return UG_RESULT_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	e001      	b.n	8007b2a <UG_WindowGetArea+0xca>
   }
   return UG_RESULT_FAIL;
 8007b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr

08007b34 <_UG_WindowDrawTitle>:
   }
   return h;
}

UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8007b34:	b590      	push	{r4, r7, lr}
 8007b36:	b08f      	sub	sp, #60	; 0x3c
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 809a 	beq.w	8007c78 <_UG_WindowDrawTitle+0x144>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	7a1b      	ldrb	r3, [r3, #8]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 8093 	beq.w	8007c78 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	89db      	ldrh	r3, [r3, #14]
 8007b56:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	8a1b      	ldrh	r3, [r3, #16]
 8007b5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	8a5b      	ldrh	r3, [r3, #18]
 8007b62:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	8a9b      	ldrh	r3, [r3, #20]
 8007b68:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	7d9b      	ldrb	r3, [r3, #22]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00f      	beq.n	8007b96 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8007b76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007b78:	3303      	adds	r3, #3
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8007b7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b80:	3303      	adds	r3, #3
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8007b86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007b88:	3b03      	subs	r3, #3
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8007b8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b90:	3b03      	subs	r3, #3
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8007b96:	4b3b      	ldr	r3, [pc, #236]	; (8007c84 <_UG_WindowDrawTitle+0x150>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d106      	bne.n	8007bb0 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ba6:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007bac:	83bb      	strh	r3, [r7, #28]
 8007bae:	e005      	b.n	8007bbc <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb4:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bba:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007bc6:	4413      	add	r3, r2
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	b21c      	sxth	r4, r3
 8007bd0:	8bfb      	ldrh	r3, [r7, #30]
 8007bd2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8007bd6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8007bda:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	4623      	mov	r3, r4
 8007be2:	f7fe fbfd 	bl	80063e0 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	69db      	ldr	r3, [r3, #28]
 8007bf0:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8007bf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bf4:	3303      	adds	r3, #3
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	b21b      	sxth	r3, r3
 8007bfa:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8007bfc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007bfe:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8007c00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007c02:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c0e:	4413      	add	r3, r2
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	b21b      	sxth	r3, r3
 8007c18:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007c20:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8007c2a:	b21b      	sxth	r3, r3
 8007c2c:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8007c34:	b21b      	sxth	r3, r3
 8007c36:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8007c38:	f107 030c 	add.w	r3, r7, #12
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe ffbd 	bl	8006bbc <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c4c:	4413      	add	r3, r2
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	b219      	sxth	r1, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c5c:	4413      	add	r3, r2
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	b21b      	sxth	r3, r3
 8007c62:	f649 5413 	movw	r4, #40211	; 0x9d13
 8007c66:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8007c6a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8007c6e:	9400      	str	r4, [sp, #0]
 8007c70:	f7fe fc26 	bl	80064c0 <UG_DrawLine>
      return UG_RESULT_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	e001      	b.n	8007c7c <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8007c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3734      	adds	r7, #52	; 0x34
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd90      	pop	{r4, r7, pc}
 8007c84:	200016c0 	.word	0x200016c0

08007c88 <_UG_WindowUpdate>:

void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8007c88:	b590      	push	{r4, r7, lr}
 8007c8a:	b089      	sub	sp, #36	; 0x24
 8007c8c:	af02      	add	r7, sp, #8
 8007c8e:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	89db      	ldrh	r3, [r3, #14]
 8007c94:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	8a1b      	ldrh	r3, [r3, #16]
 8007c9a:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	8a5b      	ldrh	r3, [r3, #18]
 8007ca0:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	8a9b      	ldrh	r3, [r3, #20]
 8007ca6:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	7a1b      	ldrb	r3, [r3, #8]
 8007cac:	f023 0320 	bic.w	r3, r3, #32
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	7a1b      	ldrb	r3, [r3, #8]
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 8084 	beq.w	8007dcc <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	7d9b      	ldrb	r3, [r3, #22]
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d021      	beq.n	8007d14 <_UG_WindowUpdate+0x8c>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	7a1b      	ldrb	r3, [r3, #8]
 8007cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d11b      	bne.n	8007d14 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8007cdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ce0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007ce4:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8007ce8:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8007cec:	4c43      	ldr	r4, [pc, #268]	; (8007dfc <_UG_WindowUpdate+0x174>)
 8007cee:	9400      	str	r4, [sp, #0]
 8007cf0:	f7ff fa60 	bl	80071b4 <_UG_DrawObjectFrame>
         xs+=3;
 8007cf4:	8abb      	ldrh	r3, [r7, #20]
 8007cf6:	3303      	adds	r3, #3
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8007cfc:	8a7b      	ldrh	r3, [r7, #18]
 8007cfe:	3303      	adds	r3, #3
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8007d04:	8a3b      	ldrh	r3, [r7, #16]
 8007d06:	3b03      	subs	r3, #3
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8007d0c:	89fb      	ldrh	r3, [r7, #14]
 8007d0e:	3b03      	subs	r3, #3
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	7d9b      	ldrb	r3, [r3, #22]
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01a      	beq.n	8007d56 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff ff07 	bl	8007b34 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	8a7b      	ldrh	r3, [r7, #18]
 8007d30:	4413      	add	r3, r2
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3301      	adds	r3, #1
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	7a1b      	ldrb	r3, [r3, #8]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d007      	beq.n	8007d56 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	7a1b      	ldrb	r3, [r3, #8]
 8007d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	721a      	strb	r2, [r3, #8]
            return;
 8007d54:	e04e      	b.n	8007df4 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	899b      	ldrh	r3, [r3, #12]
 8007d5a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8007d5e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007d62:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8007d66:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	f7fe fb37 	bl	80063e0 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8007d78:	2300      	movs	r3, #0
 8007d7a:	82fb      	strh	r3, [r7, #22]
 8007d7c:	e021      	b.n	8007dc2 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	8afb      	ldrh	r3, [r7, #22]
 8007d84:	015b      	lsls	r3, r3, #5
 8007d86:	4413      	add	r3, r2
 8007d88:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d112      	bne.n	8007dbc <_UG_WindowUpdate+0x134>
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00c      	beq.n	8007dbc <_UG_WindowUpdate+0x134>
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	f003 0308 	and.w	r3, r3, #8
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d006      	beq.n	8007dbc <_UG_WindowUpdate+0x134>
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8007dbc:	8afb      	ldrh	r3, [r7, #22]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	82fb      	strh	r3, [r7, #22]
 8007dc2:	8afa      	ldrh	r2, [r7, #22]
 8007dc4:	89bb      	ldrh	r3, [r7, #12]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d3d9      	bcc.n	8007d7e <_UG_WindowUpdate+0xf6>
 8007dca:	e013      	b.n	8007df4 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8007de4:	4b06      	ldr	r3, [pc, #24]	; (8007e00 <_UG_WindowUpdate+0x178>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	4623      	mov	r3, r4
 8007df0:	f7fe faf6 	bl	80063e0 <UG_FillFrame>
   }
}
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd90      	pop	{r4, r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	08012514 	.word	0x08012514
 8007e00:	200016c0 	.word	0x200016c0

08007e04 <UG_TextboxCreate>:

/* -------------------------------------------------------------------------------- */
/* -- TEXTBOX FUNCTIONS                                                          -- */
/* -------------------------------------------------------------------------------- */
UG_RESULT UG_TextboxCreate( UG_WINDOW* wnd, UG_TEXTBOX* txb, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	4611      	mov	r1, r2
 8007e10:	461a      	mov	r2, r3
 8007e12:	460b      	mov	r3, r1
 8007e14:	71fb      	strb	r3, [r7, #7]
 8007e16:	4613      	mov	r3, r2
 8007e18:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f7ff f810 	bl	8006e40 <_UG_GetFreeObject>
 8007e20:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d102      	bne.n	8007e2e <UG_TextboxCreate+0x2a>
 8007e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e2c:	e061      	b.n	8007ef2 <UG_TextboxCreate+0xee>

   /* Initialize object-specific parameters */
   txb->str = NULL;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	2200      	movs	r2, #0
 8007e32:	601a      	str	r2, [r3, #0]
   if (gui != NULL) txb->font = &gui->font;
 8007e34:	4b31      	ldr	r3, [pc, #196]	; (8007efc <UG_TextboxCreate+0xf8>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d006      	beq.n	8007e4a <UG_TextboxCreate+0x46>
 8007e3c:	4b2f      	ldr	r3, [pc, #188]	; (8007efc <UG_TextboxCreate+0xf8>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	605a      	str	r2, [r3, #4]
 8007e48:	e002      	b.n	8007e50 <UG_TextboxCreate+0x4c>
   else txb->font = NULL;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	605a      	str	r2, [r3, #4]
   txb->style = 0; /* reserved */
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2200      	movs	r2, #0
 8007e54:	721a      	strb	r2, [r3, #8]
   txb->fc = wnd->fc;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	895a      	ldrh	r2, [r3, #10]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	815a      	strh	r2, [r3, #10]
   txb->bc = wnd->bc;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	899a      	ldrh	r2, [r3, #12]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	819a      	strh	r2, [r3, #12]
   txb->align = ALIGN_CENTER;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2212      	movs	r2, #18
 8007e6a:	739a      	strb	r2, [r3, #14]
   txb->h_space = 0;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	73da      	strb	r2, [r3, #15]
   txb->v_space = 0;
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2200      	movs	r2, #0
 8007e76:	741a      	strb	r2, [r3, #16]

   /* Initialize standard object parameters */
   obj->update = _UG_TextboxUpdate;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	4a21      	ldr	r2, [pc, #132]	; (8007f00 <UG_TextboxCreate+0xfc>)
 8007e7c:	605a      	str	r2, [r3, #4]
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2200      	movs	r2, #0
 8007e82:	705a      	strb	r2, [r3, #1]
   obj->type = OBJ_TYPE_TEXTBOX;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2202      	movs	r2, #2
 8007e88:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	88ba      	ldrh	r2, [r7, #4]
 8007e94:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	8c3a      	ldrh	r2, [r7, #32]
 8007e9a:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ea0:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007ea6:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007eae:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007eb6:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ebe:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ec6:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	79fa      	ldrb	r2, [r7, #7]
 8007ecc:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)txb;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	f023 0301 	bic.w	r3, r3, #1
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	200016c0 	.word	0x200016c0
 8007f00:	080080ff 	.word	0x080080ff

08007f04 <UG_TextboxShow>:
{
   return _UG_DeleteObject( wnd, OBJ_TYPE_TEXTBOX, id );
}

UG_RESULT UG_TextboxShow( UG_WINDOW* wnd, UG_U8 id )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]
   UG_OBJECT* obj=NULL;
 8007f10:	2300      	movs	r3, #0
 8007f12:	60fb      	str	r3, [r7, #12]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	461a      	mov	r2, r3
 8007f18:	2102      	movs	r1, #2
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fe ffbc 	bl	8006e98 <_UG_SearchObject>
 8007f20:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d102      	bne.n	8007f2e <UG_TextboxShow+0x2a>
 8007f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f2c:	e00e      	b.n	8007f4c <UG_TextboxShow+0x48>

   obj->state |= OBJ_STATE_VISIBLE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	f043 0308 	orr.w	r3, r3, #8
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	701a      	strb	r2, [r3, #0]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f44:	b2da      	uxtb	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <UG_TextboxSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
 8007f60:	4613      	mov	r3, r2
 8007f62:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	2102      	movs	r1, #2
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7fe ff90 	bl	8006e98 <_UG_SearchObject>
 8007f78:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <UG_TextboxSetForeColor+0x32>
 8007f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f84:	e00d      	b.n	8007fa2 <UG_TextboxSetForeColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	60bb      	str	r3, [r7, #8]
   txb->fc = fc;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	883a      	ldrh	r2, [r7, #0]
 8007f90:	815a      	strh	r2, [r3, #10]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <UG_TextboxSetBackColor>:

UG_RESULT UG_TextboxSetBackColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR bc )
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70fb      	strb	r3, [r7, #3]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8007fc2:	78fb      	ldrb	r3, [r7, #3]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	2102      	movs	r1, #2
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7fe ff65 	bl	8006e98 <_UG_SearchObject>
 8007fce:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d102      	bne.n	8007fdc <UG_TextboxSetBackColor+0x32>
 8007fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fda:	e00d      	b.n	8007ff8 <UG_TextboxSetBackColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	60bb      	str	r3, [r7, #8]
   txb->bc = bc;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	883a      	ldrh	r2, [r7, #0]
 8007fe6:	819a      	strh	r2, [r3, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <UG_TextboxSetText>:

UG_RESULT UG_TextboxSetText( UG_WINDOW* wnd, UG_U8 id, char* str )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	460b      	mov	r3, r1
 800800a:	607a      	str	r2, [r7, #4]
 800800c:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 800800e:	2300      	movs	r3, #0
 8008010:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008016:	7afb      	ldrb	r3, [r7, #11]
 8008018:	461a      	mov	r2, r3
 800801a:	2102      	movs	r1, #2
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f7fe ff3b 	bl	8006e98 <_UG_SearchObject>
 8008022:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d102      	bne.n	8008030 <UG_TextboxSetText+0x30>
 800802a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800802e:	e00d      	b.n	800804c <UG_TextboxSetText+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	613b      	str	r3, [r7, #16]
   txb->str = str;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	601a      	str	r2, [r3, #0]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008044:	b2da      	uxtb	r2, r3
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <UG_TextboxSetFont>:

UG_RESULT UG_TextboxSetFont( UG_WINDOW* wnd, UG_U8 id, const UG_FONT* font )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	460b      	mov	r3, r1
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8008062:	2300      	movs	r3, #0
 8008064:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 8008066:	2300      	movs	r3, #0
 8008068:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 800806a:	7afb      	ldrb	r3, [r7, #11]
 800806c:	461a      	mov	r2, r3
 800806e:	2102      	movs	r1, #2
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7fe ff11 	bl	8006e98 <_UG_SearchObject>
 8008076:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d102      	bne.n	8008084 <UG_TextboxSetFont+0x30>
 800807e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008082:	e00d      	b.n	80080a0 <UG_TextboxSetFont+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	613b      	str	r3, [r7, #16]
   txb->font = font;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	605a      	str	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008098:	b2da      	uxtb	r2, r3
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <UG_TextboxSetAlignment>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetAlignment( UG_WINDOW* wnd, UG_U8 id, UG_U8 align )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
 80080b4:	4613      	mov	r3, r2
 80080b6:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 80080bc:	2300      	movs	r3, #0
 80080be:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	461a      	mov	r2, r3
 80080c4:	2102      	movs	r1, #2
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7fe fee6 	bl	8006e98 <_UG_SearchObject>
 80080cc:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d102      	bne.n	80080da <UG_TextboxSetAlignment+0x32>
 80080d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080d8:	e00d      	b.n	80080f6 <UG_TextboxSetAlignment+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	60bb      	str	r3, [r7, #8]
   txb->align = align;
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	78ba      	ldrb	r2, [r7, #2]
 80080e4:	739a      	strb	r2, [r3, #14]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <_UG_TextboxUpdate>:
   }
   return align;
}

void _UG_TextboxUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 80080fe:	b590      	push	{r4, r7, lr}
 8008100:	b08f      	sub	sp, #60	; 0x3c
 8008102:	af02      	add	r7, sp, #8
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
   UG_TEXTBOX* txb;
   UG_AREA a;
   UG_TEXT txt;

   /* Get object-specific data */
   txb = (UG_TEXTBOX*)(obj->data);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	62fb      	str	r3, [r7, #44]	; 0x2c
   /* Textbox doesn't support touch */

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	f003 0320 	and.w	r3, r3, #32
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 80c0 	beq.w	800829c <_UG_TextboxUpdate+0x19e>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	f003 0308 	and.w	r3, r3, #8
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 809c 	beq.w	8008262 <_UG_TextboxUpdate+0x164>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 80a7 	beq.w	8008286 <_UG_TextboxUpdate+0x188>
         {
            UG_WindowGetArea(wnd,&a);
 8008138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800813c:	4619      	mov	r1, r3
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff fc8e 	bl	8007a60 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800814a:	b29a      	uxth	r2, r3
 800814c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008150:	b29b      	uxth	r3, r3
 8008152:	4413      	add	r3, r2
 8008154:	b29b      	uxth	r3, r3
 8008156:	b21a      	sxth	r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008162:	b29a      	uxth	r2, r3
 8008164:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008168:	b29b      	uxth	r3, r3
 800816a:	4413      	add	r3, r2
 800816c:	b29b      	uxth	r3, r3
 800816e:	b21a      	sxth	r2, r3
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800817a:	b29a      	uxth	r2, r3
 800817c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008180:	b29b      	uxth	r3, r3
 8008182:	4413      	add	r3, r2
 8008184:	b29b      	uxth	r3, r3
 8008186:	b21a      	sxth	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008192:	b29a      	uxth	r2, r3
 8008194:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008198:	b29b      	uxth	r3, r3
 800819a:	4413      	add	r3, r2
 800819c:	b29b      	uxth	r3, r3
 800819e:	b21a      	sxth	r2, r3
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye >= wnd->ye ) return;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	da70      	bge.n	8008296 <_UG_TextboxUpdate+0x198>
            if ( obj->a_abs.xe >= wnd->xe ) return;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	da6a      	bge.n	800829a <_UG_TextboxUpdate+0x19c>
#ifdef USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7ff f915 	bl	80073f6 <_UG_SendObjectPrerenderEvent>
#endif

            txt.bc = txb->bc;
 80081cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ce:	899b      	ldrh	r3, [r3, #12]
 80081d0:	837b      	strh	r3, [r7, #26]
            txt.fc = txb->fc;
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	895b      	ldrh	r3, [r3, #10]
 80081d6:	833b      	strh	r3, [r7, #24]

            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, txt.bc);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 80081f0:	8b7b      	ldrh	r3, [r7, #26]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4623      	mov	r3, r4
 80081f6:	f7fe f8f3 	bl	80063e0 <UG_FillFrame>

            /* Draw Textbox text */
            txt.a.xs = obj->a_abs.xs;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008200:	823b      	strh	r3, [r7, #16]
            txt.a.ys = obj->a_abs.ys;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008208:	827b      	strh	r3, [r7, #18]
            txt.a.xe = obj->a_abs.xe;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008210:	82bb      	strh	r3, [r7, #20]
            txt.a.ye = obj->a_abs.ye;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008218:	82fb      	strh	r3, [r7, #22]
            txt.align = txb->align;
 800821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821c:	7b9b      	ldrb	r3, [r3, #14]
 800821e:	773b      	strb	r3, [r7, #28]
            txt.font = txb->font;
 8008220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	60fb      	str	r3, [r7, #12]
            txt.h_space = txb->h_space;
 8008226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008228:	f993 300f 	ldrsb.w	r3, [r3, #15]
 800822c:	b21b      	sxth	r3, r3
 800822e:	83fb      	strh	r3, [r7, #30]
            txt.v_space = txb->v_space;
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008232:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8008236:	b21b      	sxth	r3, r3
 8008238:	843b      	strh	r3, [r7, #32]
            txt.str = txb->str;
 800823a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	60bb      	str	r3, [r7, #8]
            _UG_PutText( &txt );
 8008240:	f107 0308 	add.w	r3, r7, #8
 8008244:	4618      	mov	r0, r3
 8008246:	f7fe fcb9 	bl	8006bbc <_UG_PutText>
            obj->state &= ~OBJ_STATE_REDRAW;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008252:	b2da      	uxtb	r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	701a      	strb	r2, [r3, #0]
#ifdef USE_POSTRENDER_EVENT
            _UG_SendObjectPostrenderEvent(wnd, obj);
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7ff f8e6 	bl	800742c <_UG_SendObjectPostrenderEvent>
 8008260:	e011      	b.n	8008286 <_UG_TextboxUpdate+0x188>
#endif
         }
      }
      else
      {
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	899b      	ldrh	r3, [r3, #12]
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	4623      	mov	r3, r4
 8008282:	f7fe f8ad 	bl	80063e0 <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	f023 0320 	bic.w	r3, r3, #32
 800828e:	b2da      	uxtb	r2, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	701a      	strb	r2, [r3, #0]
 8008294:	e002      	b.n	800829c <_UG_TextboxUpdate+0x19e>
            if ( obj->a_abs.ye >= wnd->ye ) return;
 8008296:	bf00      	nop
 8008298:	e000      	b.n	800829c <_UG_TextboxUpdate+0x19e>
            if ( obj->a_abs.xe >= wnd->xe ) return;
 800829a:	bf00      	nop
   }
}
 800829c:	3734      	adds	r7, #52	; 0x34
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd90      	pop	{r4, r7, pc}
	...

080082a4 <UG_ImageCreate>:

/* -------------------------------------------------------------------------------- */
/* -- IMAGE FUNCTIONS                                                            -- */
/* -------------------------------------------------------------------------------- */
UG_RESULT UG_ImageCreate( UG_WINDOW* wnd, UG_IMAGE* img, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	4611      	mov	r1, r2
 80082b0:	461a      	mov	r2, r3
 80082b2:	460b      	mov	r3, r1
 80082b4:	71fb      	strb	r3, [r7, #7]
 80082b6:	4613      	mov	r3, r2
 80082b8:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7fe fdc0 	bl	8006e40 <_UG_GetFreeObject>
 80082c0:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d102      	bne.n	80082ce <UG_ImageCreate+0x2a>
 80082c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082cc:	e042      	b.n	8008354 <UG_ImageCreate+0xb0>

   /* Initialize object-specific parameters */
   img->img = NULL;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	601a      	str	r2, [r3, #0]
   img->type = IMG_TYPE_BMP;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2201      	movs	r2, #1
 80082d8:	711a      	strb	r2, [r3, #4]

   /* Initialize standard object parameters */
   obj->update = _UG_ImageUpdate;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	4a1f      	ldr	r2, [pc, #124]	; (800835c <UG_ImageCreate+0xb8>)
 80082de:	605a      	str	r2, [r3, #4]
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	2200      	movs	r2, #0
 80082e4:	705a      	strb	r2, [r3, #1]
   obj->type = OBJ_TYPE_IMAGE;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2203      	movs	r2, #3
 80082ea:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	2200      	movs	r2, #0
 80082f0:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	88ba      	ldrh	r2, [r7, #4]
 80082f6:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	8c3a      	ldrh	r2, [r7, #32]
 80082fc:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008302:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008308:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008310:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008318:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008320:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008328:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	79fa      	ldrb	r2, [r7, #7]
 800832e:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 8008338:	b2da      	uxtb	r2, r3
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)img;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	f023 0301 	bic.w	r3, r3, #1
 800834c:	b2da      	uxtb	r2, r3
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	080083bb 	.word	0x080083bb

08008360 <UG_ImageSetBMP>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ImageSetBMP( UG_WINDOW* wnd, UG_U8 id, const UG_BMP* bmp )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	460b      	mov	r3, r1
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 800836e:	2300      	movs	r3, #0
 8008370:	617b      	str	r3, [r7, #20]
   UG_IMAGE* img=NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_IMAGE, id );
 8008376:	7afb      	ldrb	r3, [r7, #11]
 8008378:	461a      	mov	r2, r3
 800837a:	2103      	movs	r1, #3
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f7fe fd8b 	bl	8006e98 <_UG_SearchObject>
 8008382:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d102      	bne.n	8008390 <UG_ImageSetBMP+0x30>
 800838a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800838e:	e010      	b.n	80083b2 <UG_ImageSetBMP+0x52>

   img = (UG_IMAGE*)(obj->data);
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	613b      	str	r3, [r7, #16]
   img->img = (void*)bmp;
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	601a      	str	r2, [r3, #0]
   img->type = IMG_TYPE_BMP;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	2201      	movs	r2, #1
 80083a0:	711a      	strb	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3718      	adds	r7, #24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <_UG_ImageUpdate>:

void _UG_ImageUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 80083ba:	b590      	push	{r4, r7, lr}
 80083bc:	b089      	sub	sp, #36	; 0x24
 80083be:	af02      	add	r7, sp, #8
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
   UG_IMAGE* img;
   UG_AREA a;

   /* Get object-specific data */
   img = (UG_IMAGE*)(obj->data);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	617b      	str	r3, [r7, #20]
   /* Image doesn't support touch */

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	f003 0320 	and.w	r3, r3, #32
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 8096 	beq.w	8008504 <_UG_ImageUpdate+0x14a>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	f003 0308 	and.w	r3, r3, #8
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d072      	beq.n	80084ca <_UG_ImageUpdate+0x110>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d07e      	beq.n	80084ee <_UG_ImageUpdate+0x134>
         {
            UG_WindowGetArea(wnd,&a);
 80083f0:	f107 030c 	add.w	r3, r7, #12
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7ff fb32 	bl	8007a60 <UG_WindowGetArea>
            /* ToDo: more/better image features */
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008402:	b29a      	uxth	r2, r3
 8008404:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008408:	b29b      	uxth	r3, r3
 800840a:	4413      	add	r3, r2
 800840c:	b29b      	uxth	r3, r3
 800840e:	b21a      	sxth	r2, r3
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800841a:	b29a      	uxth	r2, r3
 800841c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008420:	b29b      	uxth	r3, r3
 8008422:	4413      	add	r3, r2
 8008424:	b29b      	uxth	r3, r3
 8008426:	b21a      	sxth	r2, r3
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xs + ((UG_BMP*)img->img)->width + a.xs;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008432:	b29a      	uxth	r2, r3
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	889b      	ldrh	r3, [r3, #4]
 800843a:	4413      	add	r3, r2
 800843c:	b29a      	uxth	r2, r3
 800843e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008442:	b29b      	uxth	r3, r3
 8008444:	4413      	add	r3, r2
 8008446:	b29b      	uxth	r3, r3
 8008448:	b21a      	sxth	r2, r3
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ys + ((UG_BMP*)img->img)->height + a.ys;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008454:	b29a      	uxth	r2, r3
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	88db      	ldrh	r3, [r3, #6]
 800845c:	4413      	add	r3, r2
 800845e:	b29a      	uxth	r2, r3
 8008460:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008464:	b29b      	uxth	r3, r3
 8008466:	4413      	add	r3, r2
 8008468:	b29b      	uxth	r3, r3
 800846a:	b21a      	sxth	r2, r3
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye >= wnd->ye ) return;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800847c:	429a      	cmp	r2, r3
 800847e:	da3e      	bge.n	80084fe <_UG_ImageUpdate+0x144>
            if ( obj->a_abs.xe >= wnd->xe ) return;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800848c:	429a      	cmp	r2, r3
 800848e:	da38      	bge.n	8008502 <_UG_ImageUpdate+0x148>

            /* Draw Image */
            if ( (img->img != NULL) && (img->type & IMG_TYPE_BMP) )
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d010      	beq.n	80084ba <_UG_ImageUpdate+0x100>
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	791b      	ldrb	r3, [r3, #4]
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00a      	beq.n	80084ba <_UG_ImageUpdate+0x100>
            {
               UG_DrawBMP(obj->a_abs.xs,obj->a_abs.ys,(UG_BMP*)img->img);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	461a      	mov	r2, r3
 80084b6:	f7ff f8af 	bl	8007618 <UG_DrawBMP>
            }

            obj->state &= ~OBJ_STATE_REDRAW;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	701a      	strb	r2, [r3, #0]
 80084c8:	e011      	b.n	80084ee <_UG_ImageUpdate+0x134>
         }
      }
      else
      {
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	899b      	ldrh	r3, [r3, #12]
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	4623      	mov	r3, r4
 80084ea:	f7fd ff79 	bl	80063e0 <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	f023 0320 	bic.w	r3, r3, #32
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	e002      	b.n	8008504 <_UG_ImageUpdate+0x14a>
            if ( obj->a_abs.ye >= wnd->ye ) return;
 80084fe:	bf00      	nop
 8008500:	e000      	b.n	8008504 <_UG_ImageUpdate+0x14a>
            if ( obj->a_abs.xe >= wnd->xe ) return;
 8008502:	bf00      	nop
   }
}
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	bd90      	pop	{r4, r7, pc}
	...

0800850c <parallelWriteDC0>:

#define HDP (DISPLAY_WIDTH - 1)
#define VDP (DISPLAY_HEIGHT - 1)
 UG_GUI guiST7735;
 uint8_t ivert_eightbit;
void parallelWriteDC0(uint8_t eightbit){
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	71fb      	strb	r3, [r7, #7]
//	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
//HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET); // idle = high
//HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET); // idle = high
//HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // low = command
//GPIOA->BSRR &=	0xFFFFF7FF;
GPIOA->BSRR |= 0x08000000;
 8008516:	4b12      	ldr	r3, [pc, #72]	; (8008560 <parallelWriteDC0+0x54>)
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	4a11      	ldr	r2, [pc, #68]	; (8008560 <parallelWriteDC0+0x54>)
 800851c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008520:	6113      	str	r3, [r2, #16]
//HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (eightbit & 16) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
//HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (eightbit & 32) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
//HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (eightbit & 64) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
//HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (eightbit & 128) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);

 ivert_eightbit = ~(eightbit);
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	43db      	mvns	r3, r3
 8008526:	b2da      	uxtb	r2, r3
 8008528:	4b0e      	ldr	r3, [pc, #56]	; (8008564 <parallelWriteDC0+0x58>)
 800852a:	701a      	strb	r2, [r3, #0]

GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 800852c:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <parallelWriteDC0+0x58>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	4a0d      	ldr	r2, [pc, #52]	; (8008568 <parallelWriteDC0+0x5c>)
 8008532:	061b      	lsls	r3, r3, #24
 8008534:	6113      	str	r3, [r2, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008536:	79fb      	ldrb	r3, [r7, #7]
 8008538:	4a0b      	ldr	r2, [pc, #44]	; (8008568 <parallelWriteDC0+0x5c>)
 800853a:	021b      	lsls	r3, r3, #8
 800853c:	6113      	str	r3, [r2, #16]


//GPIOA->BSRR &=	0xFFFFFEFF;
GPIOA->BSRR |= 0x01000000;
 800853e:	4b08      	ldr	r3, [pc, #32]	; (8008560 <parallelWriteDC0+0x54>)
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	4a07      	ldr	r2, [pc, #28]	; (8008560 <parallelWriteDC0+0x54>)
 8008544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008548:	6113      	str	r3, [r2, #16]
//GPIOA->BSRR &=	0xFEFFFFFF;
GPIOA->BSRR |= 0x00000100;
 800854a:	4b05      	ldr	r3, [pc, #20]	; (8008560 <parallelWriteDC0+0x54>)
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	4a04      	ldr	r2, [pc, #16]	; (8008560 <parallelWriteDC0+0x54>)
 8008550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008554:	6113      	str	r3, [r2, #16]
//HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
//HAL_Delay(1);
//opt_delay(1);
//HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET); // raising edge
//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}
 8008556:	bf00      	nop
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	bc80      	pop	{r7}
 800855e:	4770      	bx	lr
 8008560:	40010800 	.word	0x40010800
 8008564:	20001738 	.word	0x20001738
 8008568:	40010c00 	.word	0x40010c00

0800856c <parallelWriteDC1>:
void opt_delay(uint16_t i)
{
	while(i--);
}
void parallelWriteDC1(uint8_t eightbit){
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	71fb      	strb	r3, [r7, #7]
//	printf("GPIO_pin: data  ");
//	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
//HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET); // idle = high
//HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET); // idle = high
//HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET); // high = data
	GPIOA->BSRR |= 0x00000800;
 8008576:	4b12      	ldr	r3, [pc, #72]	; (80085c0 <parallelWriteDC1+0x54>)
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	4a11      	ldr	r2, [pc, #68]	; (80085c0 <parallelWriteDC1+0x54>)
 800857c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008580:	6113      	str	r3, [r2, #16]
//HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (eightbit & 32) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
//HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (eightbit & 64) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
//HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (eightbit & 128) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
//     printf ("eightbit: %X\n",eightbit);

 ivert_eightbit = ~(eightbit);
 8008582:	79fb      	ldrb	r3, [r7, #7]
 8008584:	43db      	mvns	r3, r3
 8008586:	b2da      	uxtb	r2, r3
 8008588:	4b0e      	ldr	r3, [pc, #56]	; (80085c4 <parallelWriteDC1+0x58>)
 800858a:	701a      	strb	r2, [r3, #0]

GPIOB->BSRR = (uint32_t)ivert_eightbit << 24u;
 800858c:	4b0d      	ldr	r3, [pc, #52]	; (80085c4 <parallelWriteDC1+0x58>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	4a0d      	ldr	r2, [pc, #52]	; (80085c8 <parallelWriteDC1+0x5c>)
 8008592:	061b      	lsls	r3, r3, #24
 8008594:	6113      	str	r3, [r2, #16]
GPIOB->BSRR =(uint32_t)eightbit << 8u;
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	4a0b      	ldr	r2, [pc, #44]	; (80085c8 <parallelWriteDC1+0x5c>)
 800859a:	021b      	lsls	r3, r3, #8
 800859c:	6113      	str	r3, [r2, #16]

GPIOA->BSRR |= 0x01000000;
 800859e:	4b08      	ldr	r3, [pc, #32]	; (80085c0 <parallelWriteDC1+0x54>)
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	4a07      	ldr	r2, [pc, #28]	; (80085c0 <parallelWriteDC1+0x54>)
 80085a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085a8:	6113      	str	r3, [r2, #16]
//GPIOA->BSRR &=	0xFEFFFFFF;
GPIOA->BSRR |= 0x00000100;
 80085aa:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <parallelWriteDC1+0x54>)
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	4a04      	ldr	r2, [pc, #16]	; (80085c0 <parallelWriteDC1+0x54>)
 80085b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085b4:	6113      	str	r3, [r2, #16]
//HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
//HAL_Delay(1);
//opt_delay(1);
//HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET); // raising edge
//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}
 80085b6:	bf00      	nop
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bc80      	pop	{r7}
 80085be:	4770      	bx	lr
 80085c0:	40010800 	.word	0x40010800
 80085c4:	20001738 	.word	0x20001738
 80085c8:	40010c00 	.word	0x40010c00

080085cc <parallelMultiWriteDC1>:

void parallelMultiWriteDC1(uint8_t *p_eightbit, int numItems) {
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]

	for (int i = 0; i < numItems; i++)
 80085d6:	2300      	movs	r3, #0
 80085d8:	60fb      	str	r3, [r7, #12]
 80085da:	e009      	b.n	80085f0 <parallelMultiWriteDC1+0x24>
	parallelWriteDC1(p_eightbit[i]);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	4413      	add	r3, r2
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7ff ffc1 	bl	800856c <parallelWriteDC1>
	for (int i = 0; i < numItems; i++)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	3301      	adds	r3, #1
 80085ee:	60fb      	str	r3, [r7, #12]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	dbf1      	blt.n	80085dc <parallelMultiWriteDC1+0x10>

}
 80085f8:	bf00      	nop
 80085fa:	bf00      	nop
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <Display_WriteCommand>:

 void Display_WriteCommand(uint8_t command)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b082      	sub	sp, #8
 8008606:	af00      	add	r7, sp, #0
 8008608:	4603      	mov	r3, r0
 800860a:	71fb      	strb	r3, [r7, #7]
    parallelWriteDC0(command);
 800860c:	79fb      	ldrb	r3, [r7, #7]
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff ff7c 	bl	800850c <parallelWriteDC0>
}
 8008614:	bf00      	nop
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <Display_WriteMultiData>:
{
    parallelWriteDC1(data);
}

 void Display_WriteMultiData(uint8_t *data, uint16_t size)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	460b      	mov	r3, r1
 8008626:	807b      	strh	r3, [r7, #2]
//	printf ("data: %X, %X, %X, %X\n",data[0],data[1],data[2],data[3]);
    parallelMultiWriteDC1(data, size);
 8008628:	887b      	ldrh	r3, [r7, #2]
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7ff ffcd 	bl	80085cc <parallelMultiWriteDC1>
}
 8008632:	bf00      	nop
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
	...

0800863c <Display_Init>:
    parallelWriteDC0(0x01);         //Software reset
    HAL_Delay(10);
}

void Display_Init()
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
//	HAL_Delay(5);
//	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
//	HAL_Delay(15);
//	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
	HAL_Delay(15);
 8008640:	200f      	movs	r0, #15
 8008642:	f7fb fb51 	bl	8003ce8 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8008646:	2200      	movs	r2, #0
 8008648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800864c:	4873      	ldr	r0, [pc, #460]	; (800881c <Display_Init+0x1e0>)
 800864e:	f7fb fe01 	bl	8004254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8008652:	2201      	movs	r2, #1
 8008654:	2102      	movs	r1, #2
 8008656:	4872      	ldr	r0, [pc, #456]	; (8008820 <Display_Init+0x1e4>)
 8008658:	f7fb fdfc 	bl	8004254 <HAL_GPIO_WritePin>


    parallelWriteDC0(0x01);   //Software Reset
 800865c:	2001      	movs	r0, #1
 800865e:	f7ff ff55 	bl	800850c <parallelWriteDC0>
    HAL_Delay(500);
 8008662:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008666:	f7fb fb3f 	bl	8003ce8 <HAL_Delay>
//    parallelWriteDC0(0x2c);   // Memory Write
//
//    HAL_Delay(50);

    //--------------display and color format setting ----------//
    parallelWriteDC0(0x11);
 800866a:	2011      	movs	r0, #17
 800866c:	f7ff ff4e 	bl	800850c <parallelWriteDC0>
    HAL_Delay(150);
 8008670:	2096      	movs	r0, #150	; 0x96
 8008672:	f7fb fb39 	bl	8003ce8 <HAL_Delay>
    parallelWriteDC0(0x36);
 8008676:	2036      	movs	r0, #54	; 0x36
 8008678:	f7ff ff48 	bl	800850c <parallelWriteDC0>
    parallelWriteDC1(0x60);  // rotate 90
 800867c:	2060      	movs	r0, #96	; 0x60
 800867e:	f7ff ff75 	bl	800856c <parallelWriteDC1>
    parallelWriteDC0(0x3a);
 8008682:	203a      	movs	r0, #58	; 0x3a
 8008684:	f7ff ff42 	bl	800850c <parallelWriteDC0>
    parallelWriteDC1(0x05);
 8008688:	2005      	movs	r0, #5
 800868a:	f7ff ff6f 	bl	800856c <parallelWriteDC1>
    //---------------------st7789 frame rate
    parallelWriteDC0(0xb2);
 800868e:	20b2      	movs	r0, #178	; 0xb2
 8008690:	f7ff ff3c 	bl	800850c <parallelWriteDC0>
    parallelWriteDC1(0x0c);
 8008694:	200c      	movs	r0, #12
 8008696:	f7ff ff69 	bl	800856c <parallelWriteDC1>
    parallelWriteDC1(0x0c);
 800869a:	200c      	movs	r0, #12
 800869c:	f7ff ff66 	bl	800856c <parallelWriteDC1>
    parallelWriteDC1(0x00);
 80086a0:	2000      	movs	r0, #0
 80086a2:	f7ff ff63 	bl	800856c <parallelWriteDC1>
    parallelWriteDC1(0x33);
 80086a6:	2033      	movs	r0, #51	; 0x33
 80086a8:	f7ff ff60 	bl	800856c <parallelWriteDC1>
    parallelWriteDC1(0x33);
 80086ac:	2033      	movs	r0, #51	; 0x33
 80086ae:	f7ff ff5d 	bl	800856c <parallelWriteDC1>
    parallelWriteDC0(0xb7);
 80086b2:	20b7      	movs	r0, #183	; 0xb7
 80086b4:	f7ff ff2a 	bl	800850c <parallelWriteDC0>
    parallelWriteDC1(0x35);
 80086b8:	2035      	movs	r0, #53	; 0x35
 80086ba:	f7ff ff57 	bl	800856c <parallelWriteDC1>
    //---------------------st7789 power setting
    parallelWriteDC0(0xbb);
 80086be:	20bb      	movs	r0, #187	; 0xbb
 80086c0:	f7ff ff24 	bl	800850c <parallelWriteDC0>
    parallelWriteDC1(0x28);
 80086c4:	2028      	movs	r0, #40	; 0x28
 80086c6:	f7ff ff51 	bl	800856c <parallelWriteDC1>
    parallelWriteDC0(0xc0);
 80086ca:	20c0      	movs	r0, #192	; 0xc0
 80086cc:	f7ff ff1e 	bl	800850c <parallelWriteDC0>
    parallelWriteDC1(0x2c);
 80086d0:	202c      	movs	r0, #44	; 0x2c
 80086d2:	f7ff ff4b 	bl	800856c <parallelWriteDC1>
    parallelWriteDC0(0xc2);
 80086d6:	20c2      	movs	r0, #194	; 0xc2
 80086d8:	f7ff ff18 	bl	800850c <parallelWriteDC0>
    parallelWriteDC1(0x01);
 80086dc:	2001      	movs	r0, #1
 80086de:	f7ff ff45 	bl	800856c <parallelWriteDC1>
    parallelWriteDC1(0xFF);
 80086e2:	20ff      	movs	r0, #255	; 0xff
 80086e4:	f7ff ff42 	bl	800856c <parallelWriteDC1>
    parallelWriteDC0(0xc3);
 80086e8:	20c3      	movs	r0, #195	; 0xc3
 80086ea:	f7ff ff0f 	bl	800850c <parallelWriteDC0>
    parallelWriteDC1(0x0b);
 80086ee:	200b      	movs	r0, #11
 80086f0:	f7ff ff3c 	bl	800856c <parallelWriteDC1>
    parallelWriteDC0(0xc4);
 80086f4:	20c4      	movs	r0, #196	; 0xc4
 80086f6:	f7ff ff09 	bl	800850c <parallelWriteDC0>
    parallelWriteDC1(0x20);
 80086fa:	2020      	movs	r0, #32
 80086fc:	f7ff ff36 	bl	800856c <parallelWriteDC1>
    parallelWriteDC0(0xc6);
 8008700:	20c6      	movs	r0, #198	; 0xc6
 8008702:	f7ff ff03 	bl	800850c <parallelWriteDC0>
    parallelWriteDC1(0x0f);
 8008706:	200f      	movs	r0, #15
 8008708:	f7ff ff30 	bl	800856c <parallelWriteDC1>
    parallelWriteDC0(0xd0);
 800870c:	20d0      	movs	r0, #208	; 0xd0
 800870e:	f7ff fefd 	bl	800850c <parallelWriteDC0>
    parallelWriteDC1(0xa4);
 8008712:	20a4      	movs	r0, #164	; 0xa4
 8008714:	f7ff ff2a 	bl	800856c <parallelWriteDC1>
    parallelWriteDC1(0xa1);
 8008718:	20a1      	movs	r0, #161	; 0xa1
 800871a:	f7ff ff27 	bl	800856c <parallelWriteDC1>
    //-------------st7789 gamma setting
    parallelWriteDC0(0xe0);
 800871e:	20e0      	movs	r0, #224	; 0xe0
 8008720:	f7ff fef4 	bl	800850c <parallelWriteDC0>
    	parallelWriteDC1(0xd0);
 8008724:	20d0      	movs	r0, #208	; 0xd0
 8008726:	f7ff ff21 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x01);
 800872a:	2001      	movs	r0, #1
 800872c:	f7ff ff1e 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x08);
 8008730:	2008      	movs	r0, #8
 8008732:	f7ff ff1b 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x0f);
 8008736:	200f      	movs	r0, #15
 8008738:	f7ff ff18 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x11);
 800873c:	2011      	movs	r0, #17
 800873e:	f7ff ff15 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x2a);
 8008742:	202a      	movs	r0, #42	; 0x2a
 8008744:	f7ff ff12 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x36);
 8008748:	2036      	movs	r0, #54	; 0x36
 800874a:	f7ff ff0f 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x55);
 800874e:	2055      	movs	r0, #85	; 0x55
 8008750:	f7ff ff0c 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x44);
 8008754:	2044      	movs	r0, #68	; 0x44
 8008756:	f7ff ff09 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x3a);
 800875a:	203a      	movs	r0, #58	; 0x3a
 800875c:	f7ff ff06 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x0b);
 8008760:	200b      	movs	r0, #11
 8008762:	f7ff ff03 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x06);
 8008766:	2006      	movs	r0, #6
 8008768:	f7ff ff00 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x11);
 800876c:	2011      	movs	r0, #17
 800876e:	f7ff fefd 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x20);
 8008772:	2020      	movs	r0, #32
 8008774:	f7ff fefa 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC0(0xe1);
 8008778:	20e1      	movs	r0, #225	; 0xe1
 800877a:	f7ff fec7 	bl	800850c <parallelWriteDC0>
    	parallelWriteDC1(0xd0);
 800877e:	20d0      	movs	r0, #208	; 0xd0
 8008780:	f7ff fef4 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x02);
 8008784:	2002      	movs	r0, #2
 8008786:	f7ff fef1 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x07);
 800878a:	2007      	movs	r0, #7
 800878c:	f7ff feee 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x0a);
 8008790:	200a      	movs	r0, #10
 8008792:	f7ff feeb 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x0b);
 8008796:	200b      	movs	r0, #11
 8008798:	f7ff fee8 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x18);
 800879c:	2018      	movs	r0, #24
 800879e:	f7ff fee5 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x34);
 80087a2:	2034      	movs	r0, #52	; 0x34
 80087a4:	f7ff fee2 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x43);
 80087a8:	2043      	movs	r0, #67	; 0x43
 80087aa:	f7ff fedf 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x4a);
 80087ae:	204a      	movs	r0, #74	; 0x4a
 80087b0:	f7ff fedc 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x2b);
 80087b4:	202b      	movs	r0, #43	; 0x2b
 80087b6:	f7ff fed9 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x1b);
 80087ba:	201b      	movs	r0, #27
 80087bc:	f7ff fed6 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x1c);
 80087c0:	201c      	movs	r0, #28
 80087c2:	f7ff fed3 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x22);
 80087c6:	2022      	movs	r0, #34	; 0x22
 80087c8:	f7ff fed0 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC1(0x1f);
 80087cc:	201f      	movs	r0, #31
 80087ce:	f7ff fecd 	bl	800856c <parallelWriteDC1>
    	parallelWriteDC0(0x29);
 80087d2:	2029      	movs	r0, #41	; 0x29
 80087d4:	f7ff fe9a 	bl	800850c <parallelWriteDC0>
    	parallelWriteDC0(0x2c);
 80087d8:	202c      	movs	r0, #44	; 0x2c
 80087da:	f7ff fe97 	bl	800850c <parallelWriteDC0>

    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80087de:	2201      	movs	r2, #1
 80087e0:	2101      	movs	r1, #1
 80087e2:	480f      	ldr	r0, [pc, #60]	; (8008820 <Display_Init+0x1e4>)
 80087e4:	f7fb fd36 	bl	8004254 <HAL_GPIO_WritePin>

    // Initialize global structure and set PSET to this.PSET.
    UG_Init(&guiST7735, Display_PSet, DISPLAY_WIDTH, DISPLAY_HEIGHT);
 80087e8:	23f0      	movs	r3, #240	; 0xf0
 80087ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80087ee:	490d      	ldr	r1, [pc, #52]	; (8008824 <Display_Init+0x1e8>)
 80087f0:	480d      	ldr	r0, [pc, #52]	; (8008828 <Display_Init+0x1ec>)
 80087f2:	f7fd fd5f 	bl	80062b4 <UG_Init>
    //
    guiST7735.desktop_color= C_BLACK;
 80087f6:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <Display_Init+0x1ec>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    // Register accelerators.
    UG_DriverRegister(DRIVER_FILL_FRAME, (void*)HW_FillFrame);
 80087fe:	490b      	ldr	r1, [pc, #44]	; (800882c <Display_Init+0x1f0>)
 8008800:	2001      	movs	r0, #1
 8008802:	f7fe fe2f 	bl	8007464 <UG_DriverRegister>
    UG_DriverRegister(DRIVER_DRAW_LINE, (void*)HW_DrawLine);
 8008806:	490a      	ldr	r1, [pc, #40]	; (8008830 <Display_Init+0x1f4>)
 8008808:	2000      	movs	r0, #0
 800880a:	f7fe fe2b 	bl	8007464 <UG_DriverRegister>
    UG_DriverRegister(DRIVER_DRAW_IMAGE, (void*)HW_DrawImage);
 800880e:	4909      	ldr	r1, [pc, #36]	; (8008834 <Display_Init+0x1f8>)
 8008810:	2003      	movs	r0, #3
 8008812:	f7fe fe27 	bl	8007464 <UG_DriverRegister>
}
 8008816:	bf00      	nop
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	40010800 	.word	0x40010800
 8008820:	40010c00 	.word	0x40010c00
 8008824:	080088ab 	.word	0x080088ab
 8008828:	200016cc 	.word	0x200016cc
 800882c:	08008925 	.word	0x08008925
 8008830:	080089ff 	.word	0x080089ff
 8008834:	08008aaf 	.word	0x08008aaf

08008838 <Display_WindowSet>:

void Display_WindowSet(unsigned int s_x,unsigned int e_x,unsigned int s_y,unsigned int e_y)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
    uint8_t data[4];

    data[0] = ((s_x)>>8);                   //SET start column address
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	0a1b      	lsrs	r3, r3, #8
 800884a:	b2db      	uxtb	r3, r3
 800884c:	753b      	strb	r3, [r7, #20]
    data[1] = (s_x);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	b2db      	uxtb	r3, r3
 8008852:	757b      	strb	r3, [r7, #21]
    data[2] = ((e_x)>>8);			        //SET end column address
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	0a1b      	lsrs	r3, r3, #8
 8008858:	b2db      	uxtb	r3, r3
 800885a:	75bb      	strb	r3, [r7, #22]
    data[3] = (e_x);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	75fb      	strb	r3, [r7, #23]
	Display_WriteCommand(0x2a);		        //SET column address
 8008862:	202a      	movs	r0, #42	; 0x2a
 8008864:	f7ff fecd 	bl	8008602 <Display_WriteCommand>
//	printf ("data: %X, %X, %X, %X\n",data[0],data[1],data[2],data[3]);
    Display_WriteMultiData(data, 4);
 8008868:	f107 0314 	add.w	r3, r7, #20
 800886c:	2104      	movs	r1, #4
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff fed4 	bl	800861c <Display_WriteMultiData>


    data[0] = ((s_y)>>8);                   //SET start row address
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	0a1b      	lsrs	r3, r3, #8
 8008878:	b2db      	uxtb	r3, r3
 800887a:	753b      	strb	r3, [r7, #20]
    data[1] = (s_y);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	b2db      	uxtb	r3, r3
 8008880:	757b      	strb	r3, [r7, #21]
    data[2] = ((e_y)>>8);			        //SET end row address
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	0a1b      	lsrs	r3, r3, #8
 8008886:	b2db      	uxtb	r3, r3
 8008888:	75bb      	strb	r3, [r7, #22]
    data[3] = (e_y);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	b2db      	uxtb	r3, r3
 800888e:	75fb      	strb	r3, [r7, #23]
	Display_WriteCommand(0x2b);		        //SET row address
 8008890:	202b      	movs	r0, #43	; 0x2b
 8008892:	f7ff feb6 	bl	8008602 <Display_WriteCommand>
    Display_WriteMultiData(data, 4);
 8008896:	f107 0314 	add.w	r3, r7, #20
 800889a:	2104      	movs	r1, #4
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff febd 	bl	800861c <Display_WriteMultiData>
}
 80088a2:	bf00      	nop
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <Display_PSet>:

void Display_PSet(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	4603      	mov	r3, r0
 80088b2:	80fb      	strh	r3, [r7, #6]
 80088b4:	460b      	mov	r3, r1
 80088b6:	80bb      	strh	r3, [r7, #4]
 80088b8:	4613      	mov	r3, r2
 80088ba:	807b      	strh	r3, [r7, #2]
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 80088bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	db2b      	blt.n	800891c <Display_PSet+0x72>
 80088c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088c8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80088cc:	da26      	bge.n	800891c <Display_PSet+0x72>
 80088ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	db22      	blt.n	800891c <Display_PSet+0x72>
 80088d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80088da:	2bef      	cmp	r3, #239	; 0xef
 80088dc:	dc1e      	bgt.n	800891c <Display_PSet+0x72>

    Display_WindowSet(x, x + 1, y, y + 1);
 80088de:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80088e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088e6:	3301      	adds	r3, #1
 80088e8:	4619      	mov	r1, r3
 80088ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80088ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80088f2:	3301      	adds	r3, #1
 80088f4:	f7ff ffa0 	bl	8008838 <Display_WindowSet>
    Display_WriteCommand(0x2c);
 80088f8:	202c      	movs	r0, #44	; 0x2c
 80088fa:	f7ff fe82 	bl	8008602 <Display_WriteCommand>
#endif
#ifdef USE_COLOR_RGB565 // 16-bit colour 5*Red-6*Green-5*Blue

        	uint8_t data[2];

            data[0] = (c >> 8);
 80088fe:	887b      	ldrh	r3, [r7, #2]
 8008900:	0a1b      	lsrs	r3, r3, #8
 8008902:	b29b      	uxth	r3, r3
 8008904:	b2db      	uxtb	r3, r3
 8008906:	733b      	strb	r3, [r7, #12]
            data[1] = (c);
 8008908:	887b      	ldrh	r3, [r7, #2]
 800890a:	b2db      	uxtb	r3, r3
 800890c:	737b      	strb	r3, [r7, #13]

            Display_WriteMultiData(data, 2);
 800890e:	f107 030c 	add.w	r3, r7, #12
 8008912:	2102      	movs	r1, #2
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff fe81 	bl	800861c <Display_WriteMultiData>
 800891a:	e000      	b.n	800891e <Display_PSet+0x74>
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 800891c:	bf00      	nop

#endif


}
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <HW_FillFrame>:

UG_RESULT HW_FillFrame(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 8008924:	b590      	push	{r4, r7, lr}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	4604      	mov	r4, r0
 800892c:	4608      	mov	r0, r1
 800892e:	4611      	mov	r1, r2
 8008930:	461a      	mov	r2, r3
 8008932:	4623      	mov	r3, r4
 8008934:	80fb      	strh	r3, [r7, #6]
 8008936:	4603      	mov	r3, r0
 8008938:	80bb      	strh	r3, [r7, #4]
 800893a:	460b      	mov	r3, r1
 800893c:	807b      	strh	r3, [r7, #2]
 800893e:	4613      	mov	r3, r2
 8008940:	803b      	strh	r3, [r7, #0]
    uint16_t loopx, loopy;

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008946:	2b00      	cmp	r3, #0
 8008948:	db0c      	blt.n	8008964 <HW_FillFrame+0x40>
 800894a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800894e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008952:	da07      	bge.n	8008964 <HW_FillFrame+0x40>
 8008954:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	db03      	blt.n	8008964 <HW_FillFrame+0x40>
 800895c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008960:	2bef      	cmp	r3, #239	; 0xef
 8008962:	dd02      	ble.n	800896a <HW_FillFrame+0x46>
 8008964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008968:	e045      	b.n	80089f6 <HW_FillFrame+0xd2>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 800896a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800896e:	2b00      	cmp	r3, #0
 8008970:	db0c      	blt.n	800898c <HW_FillFrame+0x68>
 8008972:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008976:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800897a:	da07      	bge.n	800898c <HW_FillFrame+0x68>
 800897c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008980:	2b00      	cmp	r3, #0
 8008982:	db03      	blt.n	800898c <HW_FillFrame+0x68>
 8008984:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008988:	2bef      	cmp	r3, #239	; 0xef
 800898a:	dd02      	ble.n	8008992 <HW_FillFrame+0x6e>
 800898c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008990:	e031      	b.n	80089f6 <HW_FillFrame+0xd2>

    Display_WindowSet(x1,x2,y1,y2);
 8008992:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008996:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800899a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800899e:	f9b7 3000 	ldrsh.w	r3, [r7]
 80089a2:	f7ff ff49 	bl	8008838 <Display_WindowSet>

    Display_WriteCommand(0x2c);
 80089a6:	202c      	movs	r0, #44	; 0x2c
 80089a8:	f7ff fe2b 	bl	8008602 <Display_WriteCommand>
    uint8_t data[2];

                              data[0] = (c >> 8);
 80089ac:	8c3b      	ldrh	r3, [r7, #32]
 80089ae:	0a1b      	lsrs	r3, r3, #8
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	723b      	strb	r3, [r7, #8]
                              data[1] = (c);
 80089b6:	8c3b      	ldrh	r3, [r7, #32]
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	727b      	strb	r3, [r7, #9]

    for (loopx = x1; loopx < x2 + 1; loopx++)
 80089bc:	88fb      	ldrh	r3, [r7, #6]
 80089be:	81fb      	strh	r3, [r7, #14]
 80089c0:	e013      	b.n	80089ea <HW_FillFrame+0xc6>
    {
        for (loopy = y1; loopy < y2 + 1; loopy++)
 80089c2:	88bb      	ldrh	r3, [r7, #4]
 80089c4:	81bb      	strh	r3, [r7, #12]
 80089c6:	e008      	b.n	80089da <HW_FillFrame+0xb6>
            Display_WriteMultiData(data, 3);
#endif
#ifdef USE_COLOR_RGB565 // 16-bit colour 5*Red-6*Green-5*Blue


            Display_WriteMultiData(data, 2);
 80089c8:	f107 0308 	add.w	r3, r7, #8
 80089cc:	2102      	movs	r1, #2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7ff fe24 	bl	800861c <Display_WriteMultiData>
        for (loopy = y1; loopy < y2 + 1; loopy++)
 80089d4:	89bb      	ldrh	r3, [r7, #12]
 80089d6:	3301      	adds	r3, #1
 80089d8:	81bb      	strh	r3, [r7, #12]
 80089da:	f9b7 2000 	ldrsh.w	r2, [r7]
 80089de:	89bb      	ldrh	r3, [r7, #12]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	daf1      	bge.n	80089c8 <HW_FillFrame+0xa4>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 80089e4:	89fb      	ldrh	r3, [r7, #14]
 80089e6:	3301      	adds	r3, #1
 80089e8:	81fb      	strh	r3, [r7, #14]
 80089ea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80089ee:	89fb      	ldrh	r3, [r7, #14]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	dae6      	bge.n	80089c2 <HW_FillFrame+0x9e>
#endif
        }
    }

    return UG_RESULT_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd90      	pop	{r4, r7, pc}

080089fe <HW_DrawLine>:

UG_RESULT HW_DrawLine( UG_S16 x1 , UG_S16 y1 , UG_S16 x2 , UG_S16 y2 , UG_COLOR c )
{
 80089fe:	b590      	push	{r4, r7, lr}
 8008a00:	b085      	sub	sp, #20
 8008a02:	af02      	add	r7, sp, #8
 8008a04:	4604      	mov	r4, r0
 8008a06:	4608      	mov	r0, r1
 8008a08:	4611      	mov	r1, r2
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	4623      	mov	r3, r4
 8008a0e:	80fb      	strh	r3, [r7, #6]
 8008a10:	4603      	mov	r3, r0
 8008a12:	80bb      	strh	r3, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	807b      	strh	r3, [r7, #2]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	803b      	strh	r3, [r7, #0]
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	db0c      	blt.n	8008a3e <HW_DrawLine+0x40>
 8008a24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a28:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008a2c:	da07      	bge.n	8008a3e <HW_DrawLine+0x40>
 8008a2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	db03      	blt.n	8008a3e <HW_DrawLine+0x40>
 8008a36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008a3a:	2bef      	cmp	r3, #239	; 0xef
 8008a3c:	dd02      	ble.n	8008a44 <HW_DrawLine+0x46>
 8008a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a42:	e030      	b.n	8008aa6 <HW_DrawLine+0xa8>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008a44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	db0c      	blt.n	8008a66 <HW_DrawLine+0x68>
 8008a4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008a50:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008a54:	da07      	bge.n	8008a66 <HW_DrawLine+0x68>
 8008a56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	db03      	blt.n	8008a66 <HW_DrawLine+0x68>
 8008a5e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008a62:	2bef      	cmp	r3, #239	; 0xef
 8008a64:	dd02      	ble.n	8008a6c <HW_DrawLine+0x6e>
 8008a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a6a:	e01c      	b.n	8008aa6 <HW_DrawLine+0xa8>

    // If it is a vertical or a horizontal line, draw it.
    // If not, then use original drawline routine.
    if ((x1 == x2) || (y1 == y2))
 8008a6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d005      	beq.n	8008a84 <HW_DrawLine+0x86>
 8008a78:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008a7c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d10e      	bne.n	8008aa2 <HW_DrawLine+0xa4>
    {
        HW_FillFrame(x1, y1, x2, y2, c);
 8008a84:	f9b7 4000 	ldrsh.w	r4, [r7]
 8008a88:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008a8c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008a90:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008a94:	8b3b      	ldrh	r3, [r7, #24]
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	4623      	mov	r3, r4
 8008a9a:	f7ff ff43 	bl	8008924 <HW_FillFrame>
        return UG_RESULT_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	e001      	b.n	8008aa6 <HW_DrawLine+0xa8>
    }

    return UG_RESULT_FAIL;
 8008aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd90      	pop	{r4, r7, pc}

08008aae <HW_DrawImage>:

UG_RESULT HW_DrawImage(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint16_t *image, uint16_t pSize)
{
 8008aae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ab2:	b089      	sub	sp, #36	; 0x24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	4611      	mov	r1, r2
 8008abc:	461a      	mov	r2, r3
 8008abe:	4633      	mov	r3, r6
 8008ac0:	80fb      	strh	r3, [r7, #6]
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	80bb      	strh	r3, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	807b      	strh	r3, [r7, #2]
 8008aca:	4613      	mov	r3, r2
 8008acc:	803b      	strh	r3, [r7, #0]
 8008ace:	466b      	mov	r3, sp
 8008ad0:	461e      	mov	r6, r3

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	db0c      	blt.n	8008af4 <HW_DrawImage+0x46>
 8008ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ade:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008ae2:	da07      	bge.n	8008af4 <HW_DrawImage+0x46>
 8008ae4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	db03      	blt.n	8008af4 <HW_DrawImage+0x46>
 8008aec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008af0:	2bef      	cmp	r3, #239	; 0xef
 8008af2:	dd02      	ble.n	8008afa <HW_DrawImage+0x4c>
 8008af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008af8:	e075      	b.n	8008be6 <HW_DrawImage+0x138>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8008afa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	db0c      	blt.n	8008b1c <HW_DrawImage+0x6e>
 8008b02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b06:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008b0a:	da07      	bge.n	8008b1c <HW_DrawImage+0x6e>
 8008b0c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	db03      	blt.n	8008b1c <HW_DrawImage+0x6e>
 8008b14:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008b18:	2bef      	cmp	r3, #239	; 0xef
 8008b1a:	dd02      	ble.n	8008b22 <HW_DrawImage+0x74>
 8008b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b20:	e061      	b.n	8008be6 <HW_DrawImage+0x138>

    Display_WindowSet(x1,x2,y1,y2);
 8008b22:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008b26:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8008b2a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008b2e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008b32:	f7ff fe81 	bl	8008838 <Display_WindowSet>
    Display_WriteMultiData(image, pSize*3);

#endif
#ifdef USE_COLOR_RGB565 // 16-bit colour 5*Red-6*Green-5*Blue

    Display_WriteCommand(0x2c);
 8008b36:	202c      	movs	r0, #44	; 0x2c
 8008b38:	f7ff fd63 	bl	8008602 <Display_WriteCommand>

    uint16_t i;
    uint16_t buffer[(pSize-1)];
 8008b3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008b40:	1e59      	subs	r1, r3, #1
 8008b42:	1e4b      	subs	r3, r1, #1
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	460a      	mov	r2, r1
 8008b48:	2300      	movs	r3, #0
 8008b4a:	4690      	mov	r8, r2
 8008b4c:	4699      	mov	r9, r3
 8008b4e:	f04f 0200 	mov.w	r2, #0
 8008b52:	f04f 0300 	mov.w	r3, #0
 8008b56:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8008b5a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8008b5e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8008b62:	460a      	mov	r2, r1
 8008b64:	2300      	movs	r3, #0
 8008b66:	4614      	mov	r4, r2
 8008b68:	461d      	mov	r5, r3
 8008b6a:	f04f 0200 	mov.w	r2, #0
 8008b6e:	f04f 0300 	mov.w	r3, #0
 8008b72:	012b      	lsls	r3, r5, #4
 8008b74:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8008b78:	0122      	lsls	r2, r4, #4
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	3307      	adds	r3, #7
 8008b80:	08db      	lsrs	r3, r3, #3
 8008b82:	00db      	lsls	r3, r3, #3
 8008b84:	ebad 0d03 	sub.w	sp, sp, r3
 8008b88:	466b      	mov	r3, sp
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	085b      	lsrs	r3, r3, #1
 8008b8e:	005b      	lsls	r3, r3, #1
 8008b90:	613b      	str	r3, [r7, #16]
    uint16_t *ptr = image;
 8008b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b94:	61fb      	str	r3, [r7, #28]
    uint8_t data[2];

    for(i=0 ;i < pSize; i++)
 8008b96:	2300      	movs	r3, #0
 8008b98:	837b      	strh	r3, [r7, #26]
 8008b9a:	e01e      	b.n	8008bda <HW_DrawImage+0x12c>
    {
    	buffer[i] = *(ptr++);
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	1c9a      	adds	r2, r3, #2
 8008ba0:	61fa      	str	r2, [r7, #28]
 8008ba2:	8b7a      	ldrh	r2, [r7, #26]
 8008ba4:	8819      	ldrh	r1, [r3, #0]
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            data[0] = (buffer[i] >> 8);
 8008bac:	8b7a      	ldrh	r2, [r7, #26]
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008bb4:	0a1b      	lsrs	r3, r3, #8
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	733b      	strb	r3, [r7, #12]
            data[1] = (buffer[i]);
 8008bbc:	8b7a      	ldrh	r2, [r7, #26]
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	737b      	strb	r3, [r7, #13]
 //           printf("data: %X, %X\n",data[0],data[1]);
            Display_WriteMultiData(data, 2);
 8008bc8:	f107 030c 	add.w	r3, r7, #12
 8008bcc:	2102      	movs	r1, #2
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff fd24 	bl	800861c <Display_WriteMultiData>
    for(i=0 ;i < pSize; i++)
 8008bd4:	8b7b      	ldrh	r3, [r7, #26]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	837b      	strh	r3, [r7, #26]
 8008bda:	8b7a      	ldrh	r2, [r7, #26]
 8008bdc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d3db      	bcc.n	8008b9c <HW_DrawImage+0xee>
    }
#endif
    return UG_RESULT_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	46b5      	mov	sp, r6
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3724      	adds	r7, #36	; 0x24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08008bf4 <__errno>:
 8008bf4:	4b01      	ldr	r3, [pc, #4]	; (8008bfc <__errno+0x8>)
 8008bf6:	6818      	ldr	r0, [r3, #0]
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	20000014 	.word	0x20000014

08008c00 <__libc_init_array>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	2600      	movs	r6, #0
 8008c04:	4d0c      	ldr	r5, [pc, #48]	; (8008c38 <__libc_init_array+0x38>)
 8008c06:	4c0d      	ldr	r4, [pc, #52]	; (8008c3c <__libc_init_array+0x3c>)
 8008c08:	1b64      	subs	r4, r4, r5
 8008c0a:	10a4      	asrs	r4, r4, #2
 8008c0c:	42a6      	cmp	r6, r4
 8008c0e:	d109      	bne.n	8008c24 <__libc_init_array+0x24>
 8008c10:	f002 fefa 	bl	800ba08 <_init>
 8008c14:	2600      	movs	r6, #0
 8008c16:	4d0a      	ldr	r5, [pc, #40]	; (8008c40 <__libc_init_array+0x40>)
 8008c18:	4c0a      	ldr	r4, [pc, #40]	; (8008c44 <__libc_init_array+0x44>)
 8008c1a:	1b64      	subs	r4, r4, r5
 8008c1c:	10a4      	asrs	r4, r4, #2
 8008c1e:	42a6      	cmp	r6, r4
 8008c20:	d105      	bne.n	8008c2e <__libc_init_array+0x2e>
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c28:	4798      	blx	r3
 8008c2a:	3601      	adds	r6, #1
 8008c2c:	e7ee      	b.n	8008c0c <__libc_init_array+0xc>
 8008c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c32:	4798      	blx	r3
 8008c34:	3601      	adds	r6, #1
 8008c36:	e7f2      	b.n	8008c1e <__libc_init_array+0x1e>
 8008c38:	08012904 	.word	0x08012904
 8008c3c:	08012904 	.word	0x08012904
 8008c40:	08012904 	.word	0x08012904
 8008c44:	08012908 	.word	0x08012908

08008c48 <memset>:
 8008c48:	4603      	mov	r3, r0
 8008c4a:	4402      	add	r2, r0
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d100      	bne.n	8008c52 <memset+0xa>
 8008c50:	4770      	bx	lr
 8008c52:	f803 1b01 	strb.w	r1, [r3], #1
 8008c56:	e7f9      	b.n	8008c4c <memset+0x4>

08008c58 <__cvt>:
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c5e:	461f      	mov	r7, r3
 8008c60:	bfbb      	ittet	lt
 8008c62:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008c66:	461f      	movlt	r7, r3
 8008c68:	2300      	movge	r3, #0
 8008c6a:	232d      	movlt	r3, #45	; 0x2d
 8008c6c:	b088      	sub	sp, #32
 8008c6e:	4614      	mov	r4, r2
 8008c70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c72:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008c74:	7013      	strb	r3, [r2, #0]
 8008c76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c78:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008c7c:	f023 0820 	bic.w	r8, r3, #32
 8008c80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c84:	d005      	beq.n	8008c92 <__cvt+0x3a>
 8008c86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008c8a:	d100      	bne.n	8008c8e <__cvt+0x36>
 8008c8c:	3501      	adds	r5, #1
 8008c8e:	2302      	movs	r3, #2
 8008c90:	e000      	b.n	8008c94 <__cvt+0x3c>
 8008c92:	2303      	movs	r3, #3
 8008c94:	aa07      	add	r2, sp, #28
 8008c96:	9204      	str	r2, [sp, #16]
 8008c98:	aa06      	add	r2, sp, #24
 8008c9a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008c9e:	e9cd 3500 	strd	r3, r5, [sp]
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	463b      	mov	r3, r7
 8008ca6:	f000 fce3 	bl	8009670 <_dtoa_r>
 8008caa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008cae:	4606      	mov	r6, r0
 8008cb0:	d102      	bne.n	8008cb8 <__cvt+0x60>
 8008cb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cb4:	07db      	lsls	r3, r3, #31
 8008cb6:	d522      	bpl.n	8008cfe <__cvt+0xa6>
 8008cb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cbc:	eb06 0905 	add.w	r9, r6, r5
 8008cc0:	d110      	bne.n	8008ce4 <__cvt+0x8c>
 8008cc2:	7833      	ldrb	r3, [r6, #0]
 8008cc4:	2b30      	cmp	r3, #48	; 0x30
 8008cc6:	d10a      	bne.n	8008cde <__cvt+0x86>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2300      	movs	r3, #0
 8008ccc:	4620      	mov	r0, r4
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7f7 fe6a 	bl	80009a8 <__aeabi_dcmpeq>
 8008cd4:	b918      	cbnz	r0, 8008cde <__cvt+0x86>
 8008cd6:	f1c5 0501 	rsb	r5, r5, #1
 8008cda:	f8ca 5000 	str.w	r5, [sl]
 8008cde:	f8da 3000 	ldr.w	r3, [sl]
 8008ce2:	4499      	add	r9, r3
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	4620      	mov	r0, r4
 8008cea:	4639      	mov	r1, r7
 8008cec:	f7f7 fe5c 	bl	80009a8 <__aeabi_dcmpeq>
 8008cf0:	b108      	cbz	r0, 8008cf6 <__cvt+0x9e>
 8008cf2:	f8cd 901c 	str.w	r9, [sp, #28]
 8008cf6:	2230      	movs	r2, #48	; 0x30
 8008cf8:	9b07      	ldr	r3, [sp, #28]
 8008cfa:	454b      	cmp	r3, r9
 8008cfc:	d307      	bcc.n	8008d0e <__cvt+0xb6>
 8008cfe:	4630      	mov	r0, r6
 8008d00:	9b07      	ldr	r3, [sp, #28]
 8008d02:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d04:	1b9b      	subs	r3, r3, r6
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	b008      	add	sp, #32
 8008d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0e:	1c59      	adds	r1, r3, #1
 8008d10:	9107      	str	r1, [sp, #28]
 8008d12:	701a      	strb	r2, [r3, #0]
 8008d14:	e7f0      	b.n	8008cf8 <__cvt+0xa0>

08008d16 <__exponent>:
 8008d16:	4603      	mov	r3, r0
 8008d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d1a:	2900      	cmp	r1, #0
 8008d1c:	f803 2b02 	strb.w	r2, [r3], #2
 8008d20:	bfb6      	itet	lt
 8008d22:	222d      	movlt	r2, #45	; 0x2d
 8008d24:	222b      	movge	r2, #43	; 0x2b
 8008d26:	4249      	neglt	r1, r1
 8008d28:	2909      	cmp	r1, #9
 8008d2a:	7042      	strb	r2, [r0, #1]
 8008d2c:	dd2b      	ble.n	8008d86 <__exponent+0x70>
 8008d2e:	f10d 0407 	add.w	r4, sp, #7
 8008d32:	46a4      	mov	ip, r4
 8008d34:	270a      	movs	r7, #10
 8008d36:	fb91 f6f7 	sdiv	r6, r1, r7
 8008d3a:	460a      	mov	r2, r1
 8008d3c:	46a6      	mov	lr, r4
 8008d3e:	fb07 1516 	mls	r5, r7, r6, r1
 8008d42:	2a63      	cmp	r2, #99	; 0x63
 8008d44:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008d48:	4631      	mov	r1, r6
 8008d4a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008d4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008d52:	dcf0      	bgt.n	8008d36 <__exponent+0x20>
 8008d54:	3130      	adds	r1, #48	; 0x30
 8008d56:	f1ae 0502 	sub.w	r5, lr, #2
 8008d5a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008d5e:	4629      	mov	r1, r5
 8008d60:	1c44      	adds	r4, r0, #1
 8008d62:	4561      	cmp	r1, ip
 8008d64:	d30a      	bcc.n	8008d7c <__exponent+0x66>
 8008d66:	f10d 0209 	add.w	r2, sp, #9
 8008d6a:	eba2 020e 	sub.w	r2, r2, lr
 8008d6e:	4565      	cmp	r5, ip
 8008d70:	bf88      	it	hi
 8008d72:	2200      	movhi	r2, #0
 8008d74:	4413      	add	r3, r2
 8008d76:	1a18      	subs	r0, r3, r0
 8008d78:	b003      	add	sp, #12
 8008d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d80:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008d84:	e7ed      	b.n	8008d62 <__exponent+0x4c>
 8008d86:	2330      	movs	r3, #48	; 0x30
 8008d88:	3130      	adds	r1, #48	; 0x30
 8008d8a:	7083      	strb	r3, [r0, #2]
 8008d8c:	70c1      	strb	r1, [r0, #3]
 8008d8e:	1d03      	adds	r3, r0, #4
 8008d90:	e7f1      	b.n	8008d76 <__exponent+0x60>
	...

08008d94 <_printf_float>:
 8008d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	b091      	sub	sp, #68	; 0x44
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008da0:	4616      	mov	r6, r2
 8008da2:	461f      	mov	r7, r3
 8008da4:	4605      	mov	r5, r0
 8008da6:	f001 fa51 	bl	800a24c <_localeconv_r>
 8008daa:	6803      	ldr	r3, [r0, #0]
 8008dac:	4618      	mov	r0, r3
 8008dae:	9309      	str	r3, [sp, #36]	; 0x24
 8008db0:	f7f7 f9ce 	bl	8000150 <strlen>
 8008db4:	2300      	movs	r3, #0
 8008db6:	930e      	str	r3, [sp, #56]	; 0x38
 8008db8:	f8d8 3000 	ldr.w	r3, [r8]
 8008dbc:	900a      	str	r0, [sp, #40]	; 0x28
 8008dbe:	3307      	adds	r3, #7
 8008dc0:	f023 0307 	bic.w	r3, r3, #7
 8008dc4:	f103 0208 	add.w	r2, r3, #8
 8008dc8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008dcc:	f8d4 b000 	ldr.w	fp, [r4]
 8008dd0:	f8c8 2000 	str.w	r2, [r8]
 8008dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ddc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008de0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008de4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dea:	4640      	mov	r0, r8
 8008dec:	4b9c      	ldr	r3, [pc, #624]	; (8009060 <_printf_float+0x2cc>)
 8008dee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008df0:	f7f7 fe0c 	bl	8000a0c <__aeabi_dcmpun>
 8008df4:	bb70      	cbnz	r0, 8008e54 <_printf_float+0xc0>
 8008df6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	4b98      	ldr	r3, [pc, #608]	; (8009060 <_printf_float+0x2cc>)
 8008dfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e00:	f7f7 fde6 	bl	80009d0 <__aeabi_dcmple>
 8008e04:	bb30      	cbnz	r0, 8008e54 <_printf_float+0xc0>
 8008e06:	2200      	movs	r2, #0
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	4651      	mov	r1, sl
 8008e0e:	f7f7 fdd5 	bl	80009bc <__aeabi_dcmplt>
 8008e12:	b110      	cbz	r0, 8008e1a <_printf_float+0x86>
 8008e14:	232d      	movs	r3, #45	; 0x2d
 8008e16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e1a:	4b92      	ldr	r3, [pc, #584]	; (8009064 <_printf_float+0x2d0>)
 8008e1c:	4892      	ldr	r0, [pc, #584]	; (8009068 <_printf_float+0x2d4>)
 8008e1e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008e22:	bf94      	ite	ls
 8008e24:	4698      	movls	r8, r3
 8008e26:	4680      	movhi	r8, r0
 8008e28:	2303      	movs	r3, #3
 8008e2a:	f04f 0a00 	mov.w	sl, #0
 8008e2e:	6123      	str	r3, [r4, #16]
 8008e30:	f02b 0304 	bic.w	r3, fp, #4
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	4633      	mov	r3, r6
 8008e38:	4621      	mov	r1, r4
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	9700      	str	r7, [sp, #0]
 8008e3e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008e40:	f000 f9d4 	bl	80091ec <_printf_common>
 8008e44:	3001      	adds	r0, #1
 8008e46:	f040 8090 	bne.w	8008f6a <_printf_float+0x1d6>
 8008e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e4e:	b011      	add	sp, #68	; 0x44
 8008e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e54:	4642      	mov	r2, r8
 8008e56:	4653      	mov	r3, sl
 8008e58:	4640      	mov	r0, r8
 8008e5a:	4651      	mov	r1, sl
 8008e5c:	f7f7 fdd6 	bl	8000a0c <__aeabi_dcmpun>
 8008e60:	b148      	cbz	r0, 8008e76 <_printf_float+0xe2>
 8008e62:	f1ba 0f00 	cmp.w	sl, #0
 8008e66:	bfb8      	it	lt
 8008e68:	232d      	movlt	r3, #45	; 0x2d
 8008e6a:	4880      	ldr	r0, [pc, #512]	; (800906c <_printf_float+0x2d8>)
 8008e6c:	bfb8      	it	lt
 8008e6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e72:	4b7f      	ldr	r3, [pc, #508]	; (8009070 <_printf_float+0x2dc>)
 8008e74:	e7d3      	b.n	8008e1e <_printf_float+0x8a>
 8008e76:	6863      	ldr	r3, [r4, #4]
 8008e78:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	d142      	bne.n	8008f06 <_printf_float+0x172>
 8008e80:	2306      	movs	r3, #6
 8008e82:	6063      	str	r3, [r4, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	9206      	str	r2, [sp, #24]
 8008e88:	aa0e      	add	r2, sp, #56	; 0x38
 8008e8a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008e8e:	aa0d      	add	r2, sp, #52	; 0x34
 8008e90:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008e94:	9203      	str	r2, [sp, #12]
 8008e96:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008e9a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008e9e:	6023      	str	r3, [r4, #0]
 8008ea0:	6863      	ldr	r3, [r4, #4]
 8008ea2:	4642      	mov	r2, r8
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	4653      	mov	r3, sl
 8008eaa:	910b      	str	r1, [sp, #44]	; 0x2c
 8008eac:	f7ff fed4 	bl	8008c58 <__cvt>
 8008eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eb2:	4680      	mov	r8, r0
 8008eb4:	2947      	cmp	r1, #71	; 0x47
 8008eb6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008eb8:	d108      	bne.n	8008ecc <_printf_float+0x138>
 8008eba:	1cc8      	adds	r0, r1, #3
 8008ebc:	db02      	blt.n	8008ec4 <_printf_float+0x130>
 8008ebe:	6863      	ldr	r3, [r4, #4]
 8008ec0:	4299      	cmp	r1, r3
 8008ec2:	dd40      	ble.n	8008f46 <_printf_float+0x1b2>
 8008ec4:	f1a9 0902 	sub.w	r9, r9, #2
 8008ec8:	fa5f f989 	uxtb.w	r9, r9
 8008ecc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ed0:	d81f      	bhi.n	8008f12 <_printf_float+0x17e>
 8008ed2:	464a      	mov	r2, r9
 8008ed4:	3901      	subs	r1, #1
 8008ed6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008eda:	910d      	str	r1, [sp, #52]	; 0x34
 8008edc:	f7ff ff1b 	bl	8008d16 <__exponent>
 8008ee0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ee2:	4682      	mov	sl, r0
 8008ee4:	1813      	adds	r3, r2, r0
 8008ee6:	2a01      	cmp	r2, #1
 8008ee8:	6123      	str	r3, [r4, #16]
 8008eea:	dc02      	bgt.n	8008ef2 <_printf_float+0x15e>
 8008eec:	6822      	ldr	r2, [r4, #0]
 8008eee:	07d2      	lsls	r2, r2, #31
 8008ef0:	d501      	bpl.n	8008ef6 <_printf_float+0x162>
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	6123      	str	r3, [r4, #16]
 8008ef6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d09b      	beq.n	8008e36 <_printf_float+0xa2>
 8008efe:	232d      	movs	r3, #45	; 0x2d
 8008f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f04:	e797      	b.n	8008e36 <_printf_float+0xa2>
 8008f06:	2947      	cmp	r1, #71	; 0x47
 8008f08:	d1bc      	bne.n	8008e84 <_printf_float+0xf0>
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1ba      	bne.n	8008e84 <_printf_float+0xf0>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e7b7      	b.n	8008e82 <_printf_float+0xee>
 8008f12:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008f16:	d118      	bne.n	8008f4a <_printf_float+0x1b6>
 8008f18:	2900      	cmp	r1, #0
 8008f1a:	6863      	ldr	r3, [r4, #4]
 8008f1c:	dd0b      	ble.n	8008f36 <_printf_float+0x1a2>
 8008f1e:	6121      	str	r1, [r4, #16]
 8008f20:	b913      	cbnz	r3, 8008f28 <_printf_float+0x194>
 8008f22:	6822      	ldr	r2, [r4, #0]
 8008f24:	07d0      	lsls	r0, r2, #31
 8008f26:	d502      	bpl.n	8008f2e <_printf_float+0x19a>
 8008f28:	3301      	adds	r3, #1
 8008f2a:	440b      	add	r3, r1
 8008f2c:	6123      	str	r3, [r4, #16]
 8008f2e:	f04f 0a00 	mov.w	sl, #0
 8008f32:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f34:	e7df      	b.n	8008ef6 <_printf_float+0x162>
 8008f36:	b913      	cbnz	r3, 8008f3e <_printf_float+0x1aa>
 8008f38:	6822      	ldr	r2, [r4, #0]
 8008f3a:	07d2      	lsls	r2, r2, #31
 8008f3c:	d501      	bpl.n	8008f42 <_printf_float+0x1ae>
 8008f3e:	3302      	adds	r3, #2
 8008f40:	e7f4      	b.n	8008f2c <_printf_float+0x198>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e7f2      	b.n	8008f2c <_printf_float+0x198>
 8008f46:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008f4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f4c:	4299      	cmp	r1, r3
 8008f4e:	db05      	blt.n	8008f5c <_printf_float+0x1c8>
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	6121      	str	r1, [r4, #16]
 8008f54:	07d8      	lsls	r0, r3, #31
 8008f56:	d5ea      	bpl.n	8008f2e <_printf_float+0x19a>
 8008f58:	1c4b      	adds	r3, r1, #1
 8008f5a:	e7e7      	b.n	8008f2c <_printf_float+0x198>
 8008f5c:	2900      	cmp	r1, #0
 8008f5e:	bfcc      	ite	gt
 8008f60:	2201      	movgt	r2, #1
 8008f62:	f1c1 0202 	rsble	r2, r1, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	e7e0      	b.n	8008f2c <_printf_float+0x198>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	055a      	lsls	r2, r3, #21
 8008f6e:	d407      	bmi.n	8008f80 <_printf_float+0x1ec>
 8008f70:	6923      	ldr	r3, [r4, #16]
 8008f72:	4642      	mov	r2, r8
 8008f74:	4631      	mov	r1, r6
 8008f76:	4628      	mov	r0, r5
 8008f78:	47b8      	blx	r7
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	d12b      	bne.n	8008fd6 <_printf_float+0x242>
 8008f7e:	e764      	b.n	8008e4a <_printf_float+0xb6>
 8008f80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008f84:	f240 80dd 	bls.w	8009142 <_printf_float+0x3ae>
 8008f88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f7f7 fd0a 	bl	80009a8 <__aeabi_dcmpeq>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d033      	beq.n	8009000 <_printf_float+0x26c>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	4a35      	ldr	r2, [pc, #212]	; (8009074 <_printf_float+0x2e0>)
 8008fa0:	47b8      	blx	r7
 8008fa2:	3001      	adds	r0, #1
 8008fa4:	f43f af51 	beq.w	8008e4a <_printf_float+0xb6>
 8008fa8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008fac:	429a      	cmp	r2, r3
 8008fae:	db02      	blt.n	8008fb6 <_printf_float+0x222>
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	07d8      	lsls	r0, r3, #31
 8008fb4:	d50f      	bpl.n	8008fd6 <_printf_float+0x242>
 8008fb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fba:	4631      	mov	r1, r6
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	47b8      	blx	r7
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	f43f af42 	beq.w	8008e4a <_printf_float+0xb6>
 8008fc6:	f04f 0800 	mov.w	r8, #0
 8008fca:	f104 091a 	add.w	r9, r4, #26
 8008fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	4543      	cmp	r3, r8
 8008fd4:	dc09      	bgt.n	8008fea <_printf_float+0x256>
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	079b      	lsls	r3, r3, #30
 8008fda:	f100 8102 	bmi.w	80091e2 <_printf_float+0x44e>
 8008fde:	68e0      	ldr	r0, [r4, #12]
 8008fe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fe2:	4298      	cmp	r0, r3
 8008fe4:	bfb8      	it	lt
 8008fe6:	4618      	movlt	r0, r3
 8008fe8:	e731      	b.n	8008e4e <_printf_float+0xba>
 8008fea:	2301      	movs	r3, #1
 8008fec:	464a      	mov	r2, r9
 8008fee:	4631      	mov	r1, r6
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b8      	blx	r7
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	f43f af28 	beq.w	8008e4a <_printf_float+0xb6>
 8008ffa:	f108 0801 	add.w	r8, r8, #1
 8008ffe:	e7e6      	b.n	8008fce <_printf_float+0x23a>
 8009000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009002:	2b00      	cmp	r3, #0
 8009004:	dc38      	bgt.n	8009078 <_printf_float+0x2e4>
 8009006:	2301      	movs	r3, #1
 8009008:	4631      	mov	r1, r6
 800900a:	4628      	mov	r0, r5
 800900c:	4a19      	ldr	r2, [pc, #100]	; (8009074 <_printf_float+0x2e0>)
 800900e:	47b8      	blx	r7
 8009010:	3001      	adds	r0, #1
 8009012:	f43f af1a 	beq.w	8008e4a <_printf_float+0xb6>
 8009016:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800901a:	4313      	orrs	r3, r2
 800901c:	d102      	bne.n	8009024 <_printf_float+0x290>
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	07d9      	lsls	r1, r3, #31
 8009022:	d5d8      	bpl.n	8008fd6 <_printf_float+0x242>
 8009024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009028:	4631      	mov	r1, r6
 800902a:	4628      	mov	r0, r5
 800902c:	47b8      	blx	r7
 800902e:	3001      	adds	r0, #1
 8009030:	f43f af0b 	beq.w	8008e4a <_printf_float+0xb6>
 8009034:	f04f 0900 	mov.w	r9, #0
 8009038:	f104 0a1a 	add.w	sl, r4, #26
 800903c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800903e:	425b      	negs	r3, r3
 8009040:	454b      	cmp	r3, r9
 8009042:	dc01      	bgt.n	8009048 <_printf_float+0x2b4>
 8009044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009046:	e794      	b.n	8008f72 <_printf_float+0x1de>
 8009048:	2301      	movs	r3, #1
 800904a:	4652      	mov	r2, sl
 800904c:	4631      	mov	r1, r6
 800904e:	4628      	mov	r0, r5
 8009050:	47b8      	blx	r7
 8009052:	3001      	adds	r0, #1
 8009054:	f43f aef9 	beq.w	8008e4a <_printf_float+0xb6>
 8009058:	f109 0901 	add.w	r9, r9, #1
 800905c:	e7ee      	b.n	800903c <_printf_float+0x2a8>
 800905e:	bf00      	nop
 8009060:	7fefffff 	.word	0x7fefffff
 8009064:	08012530 	.word	0x08012530
 8009068:	08012534 	.word	0x08012534
 800906c:	0801253c 	.word	0x0801253c
 8009070:	08012538 	.word	0x08012538
 8009074:	08012540 	.word	0x08012540
 8009078:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800907a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800907c:	429a      	cmp	r2, r3
 800907e:	bfa8      	it	ge
 8009080:	461a      	movge	r2, r3
 8009082:	2a00      	cmp	r2, #0
 8009084:	4691      	mov	r9, r2
 8009086:	dc37      	bgt.n	80090f8 <_printf_float+0x364>
 8009088:	f04f 0b00 	mov.w	fp, #0
 800908c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009090:	f104 021a 	add.w	r2, r4, #26
 8009094:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009098:	ebaa 0309 	sub.w	r3, sl, r9
 800909c:	455b      	cmp	r3, fp
 800909e:	dc33      	bgt.n	8009108 <_printf_float+0x374>
 80090a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80090a4:	429a      	cmp	r2, r3
 80090a6:	db3b      	blt.n	8009120 <_printf_float+0x38c>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	07da      	lsls	r2, r3, #31
 80090ac:	d438      	bmi.n	8009120 <_printf_float+0x38c>
 80090ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090b2:	eba3 020a 	sub.w	r2, r3, sl
 80090b6:	eba3 0901 	sub.w	r9, r3, r1
 80090ba:	4591      	cmp	r9, r2
 80090bc:	bfa8      	it	ge
 80090be:	4691      	movge	r9, r2
 80090c0:	f1b9 0f00 	cmp.w	r9, #0
 80090c4:	dc34      	bgt.n	8009130 <_printf_float+0x39c>
 80090c6:	f04f 0800 	mov.w	r8, #0
 80090ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090ce:	f104 0a1a 	add.w	sl, r4, #26
 80090d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80090d6:	1a9b      	subs	r3, r3, r2
 80090d8:	eba3 0309 	sub.w	r3, r3, r9
 80090dc:	4543      	cmp	r3, r8
 80090de:	f77f af7a 	ble.w	8008fd6 <_printf_float+0x242>
 80090e2:	2301      	movs	r3, #1
 80090e4:	4652      	mov	r2, sl
 80090e6:	4631      	mov	r1, r6
 80090e8:	4628      	mov	r0, r5
 80090ea:	47b8      	blx	r7
 80090ec:	3001      	adds	r0, #1
 80090ee:	f43f aeac 	beq.w	8008e4a <_printf_float+0xb6>
 80090f2:	f108 0801 	add.w	r8, r8, #1
 80090f6:	e7ec      	b.n	80090d2 <_printf_float+0x33e>
 80090f8:	4613      	mov	r3, r2
 80090fa:	4631      	mov	r1, r6
 80090fc:	4642      	mov	r2, r8
 80090fe:	4628      	mov	r0, r5
 8009100:	47b8      	blx	r7
 8009102:	3001      	adds	r0, #1
 8009104:	d1c0      	bne.n	8009088 <_printf_float+0x2f4>
 8009106:	e6a0      	b.n	8008e4a <_printf_float+0xb6>
 8009108:	2301      	movs	r3, #1
 800910a:	4631      	mov	r1, r6
 800910c:	4628      	mov	r0, r5
 800910e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009110:	47b8      	blx	r7
 8009112:	3001      	adds	r0, #1
 8009114:	f43f ae99 	beq.w	8008e4a <_printf_float+0xb6>
 8009118:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800911a:	f10b 0b01 	add.w	fp, fp, #1
 800911e:	e7b9      	b.n	8009094 <_printf_float+0x300>
 8009120:	4631      	mov	r1, r6
 8009122:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009126:	4628      	mov	r0, r5
 8009128:	47b8      	blx	r7
 800912a:	3001      	adds	r0, #1
 800912c:	d1bf      	bne.n	80090ae <_printf_float+0x31a>
 800912e:	e68c      	b.n	8008e4a <_printf_float+0xb6>
 8009130:	464b      	mov	r3, r9
 8009132:	4631      	mov	r1, r6
 8009134:	4628      	mov	r0, r5
 8009136:	eb08 020a 	add.w	r2, r8, sl
 800913a:	47b8      	blx	r7
 800913c:	3001      	adds	r0, #1
 800913e:	d1c2      	bne.n	80090c6 <_printf_float+0x332>
 8009140:	e683      	b.n	8008e4a <_printf_float+0xb6>
 8009142:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009144:	2a01      	cmp	r2, #1
 8009146:	dc01      	bgt.n	800914c <_printf_float+0x3b8>
 8009148:	07db      	lsls	r3, r3, #31
 800914a:	d537      	bpl.n	80091bc <_printf_float+0x428>
 800914c:	2301      	movs	r3, #1
 800914e:	4642      	mov	r2, r8
 8009150:	4631      	mov	r1, r6
 8009152:	4628      	mov	r0, r5
 8009154:	47b8      	blx	r7
 8009156:	3001      	adds	r0, #1
 8009158:	f43f ae77 	beq.w	8008e4a <_printf_float+0xb6>
 800915c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009160:	4631      	mov	r1, r6
 8009162:	4628      	mov	r0, r5
 8009164:	47b8      	blx	r7
 8009166:	3001      	adds	r0, #1
 8009168:	f43f ae6f 	beq.w	8008e4a <_printf_float+0xb6>
 800916c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009170:	2200      	movs	r2, #0
 8009172:	2300      	movs	r3, #0
 8009174:	f7f7 fc18 	bl	80009a8 <__aeabi_dcmpeq>
 8009178:	b9d8      	cbnz	r0, 80091b2 <_printf_float+0x41e>
 800917a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800917c:	f108 0201 	add.w	r2, r8, #1
 8009180:	3b01      	subs	r3, #1
 8009182:	4631      	mov	r1, r6
 8009184:	4628      	mov	r0, r5
 8009186:	47b8      	blx	r7
 8009188:	3001      	adds	r0, #1
 800918a:	d10e      	bne.n	80091aa <_printf_float+0x416>
 800918c:	e65d      	b.n	8008e4a <_printf_float+0xb6>
 800918e:	2301      	movs	r3, #1
 8009190:	464a      	mov	r2, r9
 8009192:	4631      	mov	r1, r6
 8009194:	4628      	mov	r0, r5
 8009196:	47b8      	blx	r7
 8009198:	3001      	adds	r0, #1
 800919a:	f43f ae56 	beq.w	8008e4a <_printf_float+0xb6>
 800919e:	f108 0801 	add.w	r8, r8, #1
 80091a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091a4:	3b01      	subs	r3, #1
 80091a6:	4543      	cmp	r3, r8
 80091a8:	dcf1      	bgt.n	800918e <_printf_float+0x3fa>
 80091aa:	4653      	mov	r3, sl
 80091ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80091b0:	e6e0      	b.n	8008f74 <_printf_float+0x1e0>
 80091b2:	f04f 0800 	mov.w	r8, #0
 80091b6:	f104 091a 	add.w	r9, r4, #26
 80091ba:	e7f2      	b.n	80091a2 <_printf_float+0x40e>
 80091bc:	2301      	movs	r3, #1
 80091be:	4642      	mov	r2, r8
 80091c0:	e7df      	b.n	8009182 <_printf_float+0x3ee>
 80091c2:	2301      	movs	r3, #1
 80091c4:	464a      	mov	r2, r9
 80091c6:	4631      	mov	r1, r6
 80091c8:	4628      	mov	r0, r5
 80091ca:	47b8      	blx	r7
 80091cc:	3001      	adds	r0, #1
 80091ce:	f43f ae3c 	beq.w	8008e4a <_printf_float+0xb6>
 80091d2:	f108 0801 	add.w	r8, r8, #1
 80091d6:	68e3      	ldr	r3, [r4, #12]
 80091d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80091da:	1a5b      	subs	r3, r3, r1
 80091dc:	4543      	cmp	r3, r8
 80091de:	dcf0      	bgt.n	80091c2 <_printf_float+0x42e>
 80091e0:	e6fd      	b.n	8008fde <_printf_float+0x24a>
 80091e2:	f04f 0800 	mov.w	r8, #0
 80091e6:	f104 0919 	add.w	r9, r4, #25
 80091ea:	e7f4      	b.n	80091d6 <_printf_float+0x442>

080091ec <_printf_common>:
 80091ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f0:	4616      	mov	r6, r2
 80091f2:	4699      	mov	r9, r3
 80091f4:	688a      	ldr	r2, [r1, #8]
 80091f6:	690b      	ldr	r3, [r1, #16]
 80091f8:	4607      	mov	r7, r0
 80091fa:	4293      	cmp	r3, r2
 80091fc:	bfb8      	it	lt
 80091fe:	4613      	movlt	r3, r2
 8009200:	6033      	str	r3, [r6, #0]
 8009202:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009206:	460c      	mov	r4, r1
 8009208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800920c:	b10a      	cbz	r2, 8009212 <_printf_common+0x26>
 800920e:	3301      	adds	r3, #1
 8009210:	6033      	str	r3, [r6, #0]
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	0699      	lsls	r1, r3, #26
 8009216:	bf42      	ittt	mi
 8009218:	6833      	ldrmi	r3, [r6, #0]
 800921a:	3302      	addmi	r3, #2
 800921c:	6033      	strmi	r3, [r6, #0]
 800921e:	6825      	ldr	r5, [r4, #0]
 8009220:	f015 0506 	ands.w	r5, r5, #6
 8009224:	d106      	bne.n	8009234 <_printf_common+0x48>
 8009226:	f104 0a19 	add.w	sl, r4, #25
 800922a:	68e3      	ldr	r3, [r4, #12]
 800922c:	6832      	ldr	r2, [r6, #0]
 800922e:	1a9b      	subs	r3, r3, r2
 8009230:	42ab      	cmp	r3, r5
 8009232:	dc28      	bgt.n	8009286 <_printf_common+0x9a>
 8009234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009238:	1e13      	subs	r3, r2, #0
 800923a:	6822      	ldr	r2, [r4, #0]
 800923c:	bf18      	it	ne
 800923e:	2301      	movne	r3, #1
 8009240:	0692      	lsls	r2, r2, #26
 8009242:	d42d      	bmi.n	80092a0 <_printf_common+0xb4>
 8009244:	4649      	mov	r1, r9
 8009246:	4638      	mov	r0, r7
 8009248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800924c:	47c0      	blx	r8
 800924e:	3001      	adds	r0, #1
 8009250:	d020      	beq.n	8009294 <_printf_common+0xa8>
 8009252:	6823      	ldr	r3, [r4, #0]
 8009254:	68e5      	ldr	r5, [r4, #12]
 8009256:	f003 0306 	and.w	r3, r3, #6
 800925a:	2b04      	cmp	r3, #4
 800925c:	bf18      	it	ne
 800925e:	2500      	movne	r5, #0
 8009260:	6832      	ldr	r2, [r6, #0]
 8009262:	f04f 0600 	mov.w	r6, #0
 8009266:	68a3      	ldr	r3, [r4, #8]
 8009268:	bf08      	it	eq
 800926a:	1aad      	subeq	r5, r5, r2
 800926c:	6922      	ldr	r2, [r4, #16]
 800926e:	bf08      	it	eq
 8009270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009274:	4293      	cmp	r3, r2
 8009276:	bfc4      	itt	gt
 8009278:	1a9b      	subgt	r3, r3, r2
 800927a:	18ed      	addgt	r5, r5, r3
 800927c:	341a      	adds	r4, #26
 800927e:	42b5      	cmp	r5, r6
 8009280:	d11a      	bne.n	80092b8 <_printf_common+0xcc>
 8009282:	2000      	movs	r0, #0
 8009284:	e008      	b.n	8009298 <_printf_common+0xac>
 8009286:	2301      	movs	r3, #1
 8009288:	4652      	mov	r2, sl
 800928a:	4649      	mov	r1, r9
 800928c:	4638      	mov	r0, r7
 800928e:	47c0      	blx	r8
 8009290:	3001      	adds	r0, #1
 8009292:	d103      	bne.n	800929c <_printf_common+0xb0>
 8009294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929c:	3501      	adds	r5, #1
 800929e:	e7c4      	b.n	800922a <_printf_common+0x3e>
 80092a0:	2030      	movs	r0, #48	; 0x30
 80092a2:	18e1      	adds	r1, r4, r3
 80092a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092ae:	4422      	add	r2, r4
 80092b0:	3302      	adds	r3, #2
 80092b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092b6:	e7c5      	b.n	8009244 <_printf_common+0x58>
 80092b8:	2301      	movs	r3, #1
 80092ba:	4622      	mov	r2, r4
 80092bc:	4649      	mov	r1, r9
 80092be:	4638      	mov	r0, r7
 80092c0:	47c0      	blx	r8
 80092c2:	3001      	adds	r0, #1
 80092c4:	d0e6      	beq.n	8009294 <_printf_common+0xa8>
 80092c6:	3601      	adds	r6, #1
 80092c8:	e7d9      	b.n	800927e <_printf_common+0x92>
	...

080092cc <_printf_i>:
 80092cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092d0:	7e0f      	ldrb	r7, [r1, #24]
 80092d2:	4691      	mov	r9, r2
 80092d4:	2f78      	cmp	r7, #120	; 0x78
 80092d6:	4680      	mov	r8, r0
 80092d8:	460c      	mov	r4, r1
 80092da:	469a      	mov	sl, r3
 80092dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092e2:	d807      	bhi.n	80092f4 <_printf_i+0x28>
 80092e4:	2f62      	cmp	r7, #98	; 0x62
 80092e6:	d80a      	bhi.n	80092fe <_printf_i+0x32>
 80092e8:	2f00      	cmp	r7, #0
 80092ea:	f000 80d9 	beq.w	80094a0 <_printf_i+0x1d4>
 80092ee:	2f58      	cmp	r7, #88	; 0x58
 80092f0:	f000 80a4 	beq.w	800943c <_printf_i+0x170>
 80092f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092fc:	e03a      	b.n	8009374 <_printf_i+0xa8>
 80092fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009302:	2b15      	cmp	r3, #21
 8009304:	d8f6      	bhi.n	80092f4 <_printf_i+0x28>
 8009306:	a101      	add	r1, pc, #4	; (adr r1, 800930c <_printf_i+0x40>)
 8009308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800930c:	08009365 	.word	0x08009365
 8009310:	08009379 	.word	0x08009379
 8009314:	080092f5 	.word	0x080092f5
 8009318:	080092f5 	.word	0x080092f5
 800931c:	080092f5 	.word	0x080092f5
 8009320:	080092f5 	.word	0x080092f5
 8009324:	08009379 	.word	0x08009379
 8009328:	080092f5 	.word	0x080092f5
 800932c:	080092f5 	.word	0x080092f5
 8009330:	080092f5 	.word	0x080092f5
 8009334:	080092f5 	.word	0x080092f5
 8009338:	08009487 	.word	0x08009487
 800933c:	080093a9 	.word	0x080093a9
 8009340:	08009469 	.word	0x08009469
 8009344:	080092f5 	.word	0x080092f5
 8009348:	080092f5 	.word	0x080092f5
 800934c:	080094a9 	.word	0x080094a9
 8009350:	080092f5 	.word	0x080092f5
 8009354:	080093a9 	.word	0x080093a9
 8009358:	080092f5 	.word	0x080092f5
 800935c:	080092f5 	.word	0x080092f5
 8009360:	08009471 	.word	0x08009471
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	1d1a      	adds	r2, r3, #4
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	602a      	str	r2, [r5, #0]
 800936c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009374:	2301      	movs	r3, #1
 8009376:	e0a4      	b.n	80094c2 <_printf_i+0x1f6>
 8009378:	6820      	ldr	r0, [r4, #0]
 800937a:	6829      	ldr	r1, [r5, #0]
 800937c:	0606      	lsls	r6, r0, #24
 800937e:	f101 0304 	add.w	r3, r1, #4
 8009382:	d50a      	bpl.n	800939a <_printf_i+0xce>
 8009384:	680e      	ldr	r6, [r1, #0]
 8009386:	602b      	str	r3, [r5, #0]
 8009388:	2e00      	cmp	r6, #0
 800938a:	da03      	bge.n	8009394 <_printf_i+0xc8>
 800938c:	232d      	movs	r3, #45	; 0x2d
 800938e:	4276      	negs	r6, r6
 8009390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009394:	230a      	movs	r3, #10
 8009396:	485e      	ldr	r0, [pc, #376]	; (8009510 <_printf_i+0x244>)
 8009398:	e019      	b.n	80093ce <_printf_i+0x102>
 800939a:	680e      	ldr	r6, [r1, #0]
 800939c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093a0:	602b      	str	r3, [r5, #0]
 80093a2:	bf18      	it	ne
 80093a4:	b236      	sxthne	r6, r6
 80093a6:	e7ef      	b.n	8009388 <_printf_i+0xbc>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	6820      	ldr	r0, [r4, #0]
 80093ac:	1d19      	adds	r1, r3, #4
 80093ae:	6029      	str	r1, [r5, #0]
 80093b0:	0601      	lsls	r1, r0, #24
 80093b2:	d501      	bpl.n	80093b8 <_printf_i+0xec>
 80093b4:	681e      	ldr	r6, [r3, #0]
 80093b6:	e002      	b.n	80093be <_printf_i+0xf2>
 80093b8:	0646      	lsls	r6, r0, #25
 80093ba:	d5fb      	bpl.n	80093b4 <_printf_i+0xe8>
 80093bc:	881e      	ldrh	r6, [r3, #0]
 80093be:	2f6f      	cmp	r7, #111	; 0x6f
 80093c0:	bf0c      	ite	eq
 80093c2:	2308      	moveq	r3, #8
 80093c4:	230a      	movne	r3, #10
 80093c6:	4852      	ldr	r0, [pc, #328]	; (8009510 <_printf_i+0x244>)
 80093c8:	2100      	movs	r1, #0
 80093ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093ce:	6865      	ldr	r5, [r4, #4]
 80093d0:	2d00      	cmp	r5, #0
 80093d2:	bfa8      	it	ge
 80093d4:	6821      	ldrge	r1, [r4, #0]
 80093d6:	60a5      	str	r5, [r4, #8]
 80093d8:	bfa4      	itt	ge
 80093da:	f021 0104 	bicge.w	r1, r1, #4
 80093de:	6021      	strge	r1, [r4, #0]
 80093e0:	b90e      	cbnz	r6, 80093e6 <_printf_i+0x11a>
 80093e2:	2d00      	cmp	r5, #0
 80093e4:	d04d      	beq.n	8009482 <_printf_i+0x1b6>
 80093e6:	4615      	mov	r5, r2
 80093e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80093ec:	fb03 6711 	mls	r7, r3, r1, r6
 80093f0:	5dc7      	ldrb	r7, [r0, r7]
 80093f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093f6:	4637      	mov	r7, r6
 80093f8:	42bb      	cmp	r3, r7
 80093fa:	460e      	mov	r6, r1
 80093fc:	d9f4      	bls.n	80093e8 <_printf_i+0x11c>
 80093fe:	2b08      	cmp	r3, #8
 8009400:	d10b      	bne.n	800941a <_printf_i+0x14e>
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	07de      	lsls	r6, r3, #31
 8009406:	d508      	bpl.n	800941a <_printf_i+0x14e>
 8009408:	6923      	ldr	r3, [r4, #16]
 800940a:	6861      	ldr	r1, [r4, #4]
 800940c:	4299      	cmp	r1, r3
 800940e:	bfde      	ittt	le
 8009410:	2330      	movle	r3, #48	; 0x30
 8009412:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009416:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800941a:	1b52      	subs	r2, r2, r5
 800941c:	6122      	str	r2, [r4, #16]
 800941e:	464b      	mov	r3, r9
 8009420:	4621      	mov	r1, r4
 8009422:	4640      	mov	r0, r8
 8009424:	f8cd a000 	str.w	sl, [sp]
 8009428:	aa03      	add	r2, sp, #12
 800942a:	f7ff fedf 	bl	80091ec <_printf_common>
 800942e:	3001      	adds	r0, #1
 8009430:	d14c      	bne.n	80094cc <_printf_i+0x200>
 8009432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009436:	b004      	add	sp, #16
 8009438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943c:	4834      	ldr	r0, [pc, #208]	; (8009510 <_printf_i+0x244>)
 800943e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009442:	6829      	ldr	r1, [r5, #0]
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	f851 6b04 	ldr.w	r6, [r1], #4
 800944a:	6029      	str	r1, [r5, #0]
 800944c:	061d      	lsls	r5, r3, #24
 800944e:	d514      	bpl.n	800947a <_printf_i+0x1ae>
 8009450:	07df      	lsls	r7, r3, #31
 8009452:	bf44      	itt	mi
 8009454:	f043 0320 	orrmi.w	r3, r3, #32
 8009458:	6023      	strmi	r3, [r4, #0]
 800945a:	b91e      	cbnz	r6, 8009464 <_printf_i+0x198>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	f023 0320 	bic.w	r3, r3, #32
 8009462:	6023      	str	r3, [r4, #0]
 8009464:	2310      	movs	r3, #16
 8009466:	e7af      	b.n	80093c8 <_printf_i+0xfc>
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	f043 0320 	orr.w	r3, r3, #32
 800946e:	6023      	str	r3, [r4, #0]
 8009470:	2378      	movs	r3, #120	; 0x78
 8009472:	4828      	ldr	r0, [pc, #160]	; (8009514 <_printf_i+0x248>)
 8009474:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009478:	e7e3      	b.n	8009442 <_printf_i+0x176>
 800947a:	0659      	lsls	r1, r3, #25
 800947c:	bf48      	it	mi
 800947e:	b2b6      	uxthmi	r6, r6
 8009480:	e7e6      	b.n	8009450 <_printf_i+0x184>
 8009482:	4615      	mov	r5, r2
 8009484:	e7bb      	b.n	80093fe <_printf_i+0x132>
 8009486:	682b      	ldr	r3, [r5, #0]
 8009488:	6826      	ldr	r6, [r4, #0]
 800948a:	1d18      	adds	r0, r3, #4
 800948c:	6961      	ldr	r1, [r4, #20]
 800948e:	6028      	str	r0, [r5, #0]
 8009490:	0635      	lsls	r5, r6, #24
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	d501      	bpl.n	800949a <_printf_i+0x1ce>
 8009496:	6019      	str	r1, [r3, #0]
 8009498:	e002      	b.n	80094a0 <_printf_i+0x1d4>
 800949a:	0670      	lsls	r0, r6, #25
 800949c:	d5fb      	bpl.n	8009496 <_printf_i+0x1ca>
 800949e:	8019      	strh	r1, [r3, #0]
 80094a0:	2300      	movs	r3, #0
 80094a2:	4615      	mov	r5, r2
 80094a4:	6123      	str	r3, [r4, #16]
 80094a6:	e7ba      	b.n	800941e <_printf_i+0x152>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	2100      	movs	r1, #0
 80094ac:	1d1a      	adds	r2, r3, #4
 80094ae:	602a      	str	r2, [r5, #0]
 80094b0:	681d      	ldr	r5, [r3, #0]
 80094b2:	6862      	ldr	r2, [r4, #4]
 80094b4:	4628      	mov	r0, r5
 80094b6:	f000 fed5 	bl	800a264 <memchr>
 80094ba:	b108      	cbz	r0, 80094c0 <_printf_i+0x1f4>
 80094bc:	1b40      	subs	r0, r0, r5
 80094be:	6060      	str	r0, [r4, #4]
 80094c0:	6863      	ldr	r3, [r4, #4]
 80094c2:	6123      	str	r3, [r4, #16]
 80094c4:	2300      	movs	r3, #0
 80094c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ca:	e7a8      	b.n	800941e <_printf_i+0x152>
 80094cc:	462a      	mov	r2, r5
 80094ce:	4649      	mov	r1, r9
 80094d0:	4640      	mov	r0, r8
 80094d2:	6923      	ldr	r3, [r4, #16]
 80094d4:	47d0      	blx	sl
 80094d6:	3001      	adds	r0, #1
 80094d8:	d0ab      	beq.n	8009432 <_printf_i+0x166>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	079b      	lsls	r3, r3, #30
 80094de:	d413      	bmi.n	8009508 <_printf_i+0x23c>
 80094e0:	68e0      	ldr	r0, [r4, #12]
 80094e2:	9b03      	ldr	r3, [sp, #12]
 80094e4:	4298      	cmp	r0, r3
 80094e6:	bfb8      	it	lt
 80094e8:	4618      	movlt	r0, r3
 80094ea:	e7a4      	b.n	8009436 <_printf_i+0x16a>
 80094ec:	2301      	movs	r3, #1
 80094ee:	4632      	mov	r2, r6
 80094f0:	4649      	mov	r1, r9
 80094f2:	4640      	mov	r0, r8
 80094f4:	47d0      	blx	sl
 80094f6:	3001      	adds	r0, #1
 80094f8:	d09b      	beq.n	8009432 <_printf_i+0x166>
 80094fa:	3501      	adds	r5, #1
 80094fc:	68e3      	ldr	r3, [r4, #12]
 80094fe:	9903      	ldr	r1, [sp, #12]
 8009500:	1a5b      	subs	r3, r3, r1
 8009502:	42ab      	cmp	r3, r5
 8009504:	dcf2      	bgt.n	80094ec <_printf_i+0x220>
 8009506:	e7eb      	b.n	80094e0 <_printf_i+0x214>
 8009508:	2500      	movs	r5, #0
 800950a:	f104 0619 	add.w	r6, r4, #25
 800950e:	e7f5      	b.n	80094fc <_printf_i+0x230>
 8009510:	08012542 	.word	0x08012542
 8009514:	08012553 	.word	0x08012553

08009518 <siprintf>:
 8009518:	b40e      	push	{r1, r2, r3}
 800951a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800951e:	b500      	push	{lr}
 8009520:	b09c      	sub	sp, #112	; 0x70
 8009522:	ab1d      	add	r3, sp, #116	; 0x74
 8009524:	9002      	str	r0, [sp, #8]
 8009526:	9006      	str	r0, [sp, #24]
 8009528:	9107      	str	r1, [sp, #28]
 800952a:	9104      	str	r1, [sp, #16]
 800952c:	4808      	ldr	r0, [pc, #32]	; (8009550 <siprintf+0x38>)
 800952e:	4909      	ldr	r1, [pc, #36]	; (8009554 <siprintf+0x3c>)
 8009530:	f853 2b04 	ldr.w	r2, [r3], #4
 8009534:	9105      	str	r1, [sp, #20]
 8009536:	6800      	ldr	r0, [r0, #0]
 8009538:	a902      	add	r1, sp, #8
 800953a:	9301      	str	r3, [sp, #4]
 800953c:	f001 fb7c 	bl	800ac38 <_svfiprintf_r>
 8009540:	2200      	movs	r2, #0
 8009542:	9b02      	ldr	r3, [sp, #8]
 8009544:	701a      	strb	r2, [r3, #0]
 8009546:	b01c      	add	sp, #112	; 0x70
 8009548:	f85d eb04 	ldr.w	lr, [sp], #4
 800954c:	b003      	add	sp, #12
 800954e:	4770      	bx	lr
 8009550:	20000014 	.word	0x20000014
 8009554:	ffff0208 	.word	0xffff0208

08009558 <quorem>:
 8009558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	6903      	ldr	r3, [r0, #16]
 800955e:	690c      	ldr	r4, [r1, #16]
 8009560:	4607      	mov	r7, r0
 8009562:	42a3      	cmp	r3, r4
 8009564:	f2c0 8082 	blt.w	800966c <quorem+0x114>
 8009568:	3c01      	subs	r4, #1
 800956a:	f100 0514 	add.w	r5, r0, #20
 800956e:	f101 0814 	add.w	r8, r1, #20
 8009572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800957c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009580:	3301      	adds	r3, #1
 8009582:	429a      	cmp	r2, r3
 8009584:	fbb2 f6f3 	udiv	r6, r2, r3
 8009588:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800958c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009590:	d331      	bcc.n	80095f6 <quorem+0x9e>
 8009592:	f04f 0e00 	mov.w	lr, #0
 8009596:	4640      	mov	r0, r8
 8009598:	46ac      	mov	ip, r5
 800959a:	46f2      	mov	sl, lr
 800959c:	f850 2b04 	ldr.w	r2, [r0], #4
 80095a0:	b293      	uxth	r3, r2
 80095a2:	fb06 e303 	mla	r3, r6, r3, lr
 80095a6:	0c12      	lsrs	r2, r2, #16
 80095a8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	fb06 e202 	mla	r2, r6, r2, lr
 80095b2:	ebaa 0303 	sub.w	r3, sl, r3
 80095b6:	f8dc a000 	ldr.w	sl, [ip]
 80095ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80095be:	fa1f fa8a 	uxth.w	sl, sl
 80095c2:	4453      	add	r3, sl
 80095c4:	f8dc a000 	ldr.w	sl, [ip]
 80095c8:	b292      	uxth	r2, r2
 80095ca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80095ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095d8:	4581      	cmp	r9, r0
 80095da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80095de:	f84c 3b04 	str.w	r3, [ip], #4
 80095e2:	d2db      	bcs.n	800959c <quorem+0x44>
 80095e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80095e8:	b92b      	cbnz	r3, 80095f6 <quorem+0x9e>
 80095ea:	9b01      	ldr	r3, [sp, #4]
 80095ec:	3b04      	subs	r3, #4
 80095ee:	429d      	cmp	r5, r3
 80095f0:	461a      	mov	r2, r3
 80095f2:	d32f      	bcc.n	8009654 <quorem+0xfc>
 80095f4:	613c      	str	r4, [r7, #16]
 80095f6:	4638      	mov	r0, r7
 80095f8:	f001 f8ce 	bl	800a798 <__mcmp>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	db25      	blt.n	800964c <quorem+0xf4>
 8009600:	4628      	mov	r0, r5
 8009602:	f04f 0c00 	mov.w	ip, #0
 8009606:	3601      	adds	r6, #1
 8009608:	f858 1b04 	ldr.w	r1, [r8], #4
 800960c:	f8d0 e000 	ldr.w	lr, [r0]
 8009610:	b28b      	uxth	r3, r1
 8009612:	ebac 0303 	sub.w	r3, ip, r3
 8009616:	fa1f f28e 	uxth.w	r2, lr
 800961a:	4413      	add	r3, r2
 800961c:	0c0a      	lsrs	r2, r1, #16
 800961e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009622:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009626:	b29b      	uxth	r3, r3
 8009628:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800962c:	45c1      	cmp	r9, r8
 800962e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009632:	f840 3b04 	str.w	r3, [r0], #4
 8009636:	d2e7      	bcs.n	8009608 <quorem+0xb0>
 8009638:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800963c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009640:	b922      	cbnz	r2, 800964c <quorem+0xf4>
 8009642:	3b04      	subs	r3, #4
 8009644:	429d      	cmp	r5, r3
 8009646:	461a      	mov	r2, r3
 8009648:	d30a      	bcc.n	8009660 <quorem+0x108>
 800964a:	613c      	str	r4, [r7, #16]
 800964c:	4630      	mov	r0, r6
 800964e:	b003      	add	sp, #12
 8009650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009654:	6812      	ldr	r2, [r2, #0]
 8009656:	3b04      	subs	r3, #4
 8009658:	2a00      	cmp	r2, #0
 800965a:	d1cb      	bne.n	80095f4 <quorem+0x9c>
 800965c:	3c01      	subs	r4, #1
 800965e:	e7c6      	b.n	80095ee <quorem+0x96>
 8009660:	6812      	ldr	r2, [r2, #0]
 8009662:	3b04      	subs	r3, #4
 8009664:	2a00      	cmp	r2, #0
 8009666:	d1f0      	bne.n	800964a <quorem+0xf2>
 8009668:	3c01      	subs	r4, #1
 800966a:	e7eb      	b.n	8009644 <quorem+0xec>
 800966c:	2000      	movs	r0, #0
 800966e:	e7ee      	b.n	800964e <quorem+0xf6>

08009670 <_dtoa_r>:
 8009670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009674:	4616      	mov	r6, r2
 8009676:	461f      	mov	r7, r3
 8009678:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800967a:	b099      	sub	sp, #100	; 0x64
 800967c:	4605      	mov	r5, r0
 800967e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009682:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009686:	b974      	cbnz	r4, 80096a6 <_dtoa_r+0x36>
 8009688:	2010      	movs	r0, #16
 800968a:	f000 fde3 	bl	800a254 <malloc>
 800968e:	4602      	mov	r2, r0
 8009690:	6268      	str	r0, [r5, #36]	; 0x24
 8009692:	b920      	cbnz	r0, 800969e <_dtoa_r+0x2e>
 8009694:	21ea      	movs	r1, #234	; 0xea
 8009696:	4ba8      	ldr	r3, [pc, #672]	; (8009938 <_dtoa_r+0x2c8>)
 8009698:	48a8      	ldr	r0, [pc, #672]	; (800993c <_dtoa_r+0x2cc>)
 800969a:	f001 fbdd 	bl	800ae58 <__assert_func>
 800969e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096a2:	6004      	str	r4, [r0, #0]
 80096a4:	60c4      	str	r4, [r0, #12]
 80096a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096a8:	6819      	ldr	r1, [r3, #0]
 80096aa:	b151      	cbz	r1, 80096c2 <_dtoa_r+0x52>
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	2301      	movs	r3, #1
 80096b0:	4093      	lsls	r3, r2
 80096b2:	604a      	str	r2, [r1, #4]
 80096b4:	608b      	str	r3, [r1, #8]
 80096b6:	4628      	mov	r0, r5
 80096b8:	f000 fe30 	bl	800a31c <_Bfree>
 80096bc:	2200      	movs	r2, #0
 80096be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096c0:	601a      	str	r2, [r3, #0]
 80096c2:	1e3b      	subs	r3, r7, #0
 80096c4:	bfaf      	iteee	ge
 80096c6:	2300      	movge	r3, #0
 80096c8:	2201      	movlt	r2, #1
 80096ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80096ce:	9305      	strlt	r3, [sp, #20]
 80096d0:	bfa8      	it	ge
 80096d2:	f8c8 3000 	strge.w	r3, [r8]
 80096d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80096da:	4b99      	ldr	r3, [pc, #612]	; (8009940 <_dtoa_r+0x2d0>)
 80096dc:	bfb8      	it	lt
 80096de:	f8c8 2000 	strlt.w	r2, [r8]
 80096e2:	ea33 0309 	bics.w	r3, r3, r9
 80096e6:	d119      	bne.n	800971c <_dtoa_r+0xac>
 80096e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80096ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096f4:	4333      	orrs	r3, r6
 80096f6:	f000 857f 	beq.w	800a1f8 <_dtoa_r+0xb88>
 80096fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096fc:	b953      	cbnz	r3, 8009714 <_dtoa_r+0xa4>
 80096fe:	4b91      	ldr	r3, [pc, #580]	; (8009944 <_dtoa_r+0x2d4>)
 8009700:	e022      	b.n	8009748 <_dtoa_r+0xd8>
 8009702:	4b91      	ldr	r3, [pc, #580]	; (8009948 <_dtoa_r+0x2d8>)
 8009704:	9303      	str	r3, [sp, #12]
 8009706:	3308      	adds	r3, #8
 8009708:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800970a:	6013      	str	r3, [r2, #0]
 800970c:	9803      	ldr	r0, [sp, #12]
 800970e:	b019      	add	sp, #100	; 0x64
 8009710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009714:	4b8b      	ldr	r3, [pc, #556]	; (8009944 <_dtoa_r+0x2d4>)
 8009716:	9303      	str	r3, [sp, #12]
 8009718:	3303      	adds	r3, #3
 800971a:	e7f5      	b.n	8009708 <_dtoa_r+0x98>
 800971c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009720:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009728:	2200      	movs	r2, #0
 800972a:	2300      	movs	r3, #0
 800972c:	f7f7 f93c 	bl	80009a8 <__aeabi_dcmpeq>
 8009730:	4680      	mov	r8, r0
 8009732:	b158      	cbz	r0, 800974c <_dtoa_r+0xdc>
 8009734:	2301      	movs	r3, #1
 8009736:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009738:	6013      	str	r3, [r2, #0]
 800973a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 8558 	beq.w	800a1f2 <_dtoa_r+0xb82>
 8009742:	4882      	ldr	r0, [pc, #520]	; (800994c <_dtoa_r+0x2dc>)
 8009744:	6018      	str	r0, [r3, #0]
 8009746:	1e43      	subs	r3, r0, #1
 8009748:	9303      	str	r3, [sp, #12]
 800974a:	e7df      	b.n	800970c <_dtoa_r+0x9c>
 800974c:	ab16      	add	r3, sp, #88	; 0x58
 800974e:	9301      	str	r3, [sp, #4]
 8009750:	ab17      	add	r3, sp, #92	; 0x5c
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	4628      	mov	r0, r5
 8009756:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800975a:	f001 f8c5 	bl	800a8e8 <__d2b>
 800975e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009762:	4683      	mov	fp, r0
 8009764:	2c00      	cmp	r4, #0
 8009766:	d07f      	beq.n	8009868 <_dtoa_r+0x1f8>
 8009768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800976c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800976e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009772:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009776:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800977a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800977e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009782:	2200      	movs	r2, #0
 8009784:	4b72      	ldr	r3, [pc, #456]	; (8009950 <_dtoa_r+0x2e0>)
 8009786:	f7f6 fcef 	bl	8000168 <__aeabi_dsub>
 800978a:	a365      	add	r3, pc, #404	; (adr r3, 8009920 <_dtoa_r+0x2b0>)
 800978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009790:	f7f6 fea2 	bl	80004d8 <__aeabi_dmul>
 8009794:	a364      	add	r3, pc, #400	; (adr r3, 8009928 <_dtoa_r+0x2b8>)
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	f7f6 fce7 	bl	800016c <__adddf3>
 800979e:	4606      	mov	r6, r0
 80097a0:	4620      	mov	r0, r4
 80097a2:	460f      	mov	r7, r1
 80097a4:	f7f6 fe2e 	bl	8000404 <__aeabi_i2d>
 80097a8:	a361      	add	r3, pc, #388	; (adr r3, 8009930 <_dtoa_r+0x2c0>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	f7f6 fe93 	bl	80004d8 <__aeabi_dmul>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	4630      	mov	r0, r6
 80097b8:	4639      	mov	r1, r7
 80097ba:	f7f6 fcd7 	bl	800016c <__adddf3>
 80097be:	4606      	mov	r6, r0
 80097c0:	460f      	mov	r7, r1
 80097c2:	f7f7 f939 	bl	8000a38 <__aeabi_d2iz>
 80097c6:	2200      	movs	r2, #0
 80097c8:	4682      	mov	sl, r0
 80097ca:	2300      	movs	r3, #0
 80097cc:	4630      	mov	r0, r6
 80097ce:	4639      	mov	r1, r7
 80097d0:	f7f7 f8f4 	bl	80009bc <__aeabi_dcmplt>
 80097d4:	b148      	cbz	r0, 80097ea <_dtoa_r+0x17a>
 80097d6:	4650      	mov	r0, sl
 80097d8:	f7f6 fe14 	bl	8000404 <__aeabi_i2d>
 80097dc:	4632      	mov	r2, r6
 80097de:	463b      	mov	r3, r7
 80097e0:	f7f7 f8e2 	bl	80009a8 <__aeabi_dcmpeq>
 80097e4:	b908      	cbnz	r0, 80097ea <_dtoa_r+0x17a>
 80097e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80097ea:	f1ba 0f16 	cmp.w	sl, #22
 80097ee:	d858      	bhi.n	80098a2 <_dtoa_r+0x232>
 80097f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097f4:	4b57      	ldr	r3, [pc, #348]	; (8009954 <_dtoa_r+0x2e4>)
 80097f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80097fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fe:	f7f7 f8dd 	bl	80009bc <__aeabi_dcmplt>
 8009802:	2800      	cmp	r0, #0
 8009804:	d04f      	beq.n	80098a6 <_dtoa_r+0x236>
 8009806:	2300      	movs	r3, #0
 8009808:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800980c:	930f      	str	r3, [sp, #60]	; 0x3c
 800980e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009810:	1b1c      	subs	r4, r3, r4
 8009812:	1e63      	subs	r3, r4, #1
 8009814:	9309      	str	r3, [sp, #36]	; 0x24
 8009816:	bf49      	itett	mi
 8009818:	f1c4 0301 	rsbmi	r3, r4, #1
 800981c:	2300      	movpl	r3, #0
 800981e:	9306      	strmi	r3, [sp, #24]
 8009820:	2300      	movmi	r3, #0
 8009822:	bf54      	ite	pl
 8009824:	9306      	strpl	r3, [sp, #24]
 8009826:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009828:	f1ba 0f00 	cmp.w	sl, #0
 800982c:	db3d      	blt.n	80098aa <_dtoa_r+0x23a>
 800982e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009830:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009834:	4453      	add	r3, sl
 8009836:	9309      	str	r3, [sp, #36]	; 0x24
 8009838:	2300      	movs	r3, #0
 800983a:	930a      	str	r3, [sp, #40]	; 0x28
 800983c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800983e:	2b09      	cmp	r3, #9
 8009840:	f200 808c 	bhi.w	800995c <_dtoa_r+0x2ec>
 8009844:	2b05      	cmp	r3, #5
 8009846:	bfc4      	itt	gt
 8009848:	3b04      	subgt	r3, #4
 800984a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800984c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800984e:	bfc8      	it	gt
 8009850:	2400      	movgt	r4, #0
 8009852:	f1a3 0302 	sub.w	r3, r3, #2
 8009856:	bfd8      	it	le
 8009858:	2401      	movle	r4, #1
 800985a:	2b03      	cmp	r3, #3
 800985c:	f200 808a 	bhi.w	8009974 <_dtoa_r+0x304>
 8009860:	e8df f003 	tbb	[pc, r3]
 8009864:	5b4d4f2d 	.word	0x5b4d4f2d
 8009868:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800986c:	441c      	add	r4, r3
 800986e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009872:	2b20      	cmp	r3, #32
 8009874:	bfc3      	ittte	gt
 8009876:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800987a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800987e:	fa09 f303 	lslgt.w	r3, r9, r3
 8009882:	f1c3 0320 	rsble	r3, r3, #32
 8009886:	bfc6      	itte	gt
 8009888:	fa26 f000 	lsrgt.w	r0, r6, r0
 800988c:	4318      	orrgt	r0, r3
 800988e:	fa06 f003 	lslle.w	r0, r6, r3
 8009892:	f7f6 fda7 	bl	80003e4 <__aeabi_ui2d>
 8009896:	2301      	movs	r3, #1
 8009898:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800989c:	3c01      	subs	r4, #1
 800989e:	9313      	str	r3, [sp, #76]	; 0x4c
 80098a0:	e76f      	b.n	8009782 <_dtoa_r+0x112>
 80098a2:	2301      	movs	r3, #1
 80098a4:	e7b2      	b.n	800980c <_dtoa_r+0x19c>
 80098a6:	900f      	str	r0, [sp, #60]	; 0x3c
 80098a8:	e7b1      	b.n	800980e <_dtoa_r+0x19e>
 80098aa:	9b06      	ldr	r3, [sp, #24]
 80098ac:	eba3 030a 	sub.w	r3, r3, sl
 80098b0:	9306      	str	r3, [sp, #24]
 80098b2:	f1ca 0300 	rsb	r3, sl, #0
 80098b6:	930a      	str	r3, [sp, #40]	; 0x28
 80098b8:	2300      	movs	r3, #0
 80098ba:	930e      	str	r3, [sp, #56]	; 0x38
 80098bc:	e7be      	b.n	800983c <_dtoa_r+0x1cc>
 80098be:	2300      	movs	r3, #0
 80098c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80098c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	dc58      	bgt.n	800997a <_dtoa_r+0x30a>
 80098c8:	f04f 0901 	mov.w	r9, #1
 80098cc:	464b      	mov	r3, r9
 80098ce:	f8cd 9020 	str.w	r9, [sp, #32]
 80098d2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80098d6:	2200      	movs	r2, #0
 80098d8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80098da:	6042      	str	r2, [r0, #4]
 80098dc:	2204      	movs	r2, #4
 80098de:	f102 0614 	add.w	r6, r2, #20
 80098e2:	429e      	cmp	r6, r3
 80098e4:	6841      	ldr	r1, [r0, #4]
 80098e6:	d94e      	bls.n	8009986 <_dtoa_r+0x316>
 80098e8:	4628      	mov	r0, r5
 80098ea:	f000 fcd7 	bl	800a29c <_Balloc>
 80098ee:	9003      	str	r0, [sp, #12]
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d14c      	bne.n	800998e <_dtoa_r+0x31e>
 80098f4:	4602      	mov	r2, r0
 80098f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80098fa:	4b17      	ldr	r3, [pc, #92]	; (8009958 <_dtoa_r+0x2e8>)
 80098fc:	e6cc      	b.n	8009698 <_dtoa_r+0x28>
 80098fe:	2301      	movs	r3, #1
 8009900:	e7de      	b.n	80098c0 <_dtoa_r+0x250>
 8009902:	2300      	movs	r3, #0
 8009904:	930b      	str	r3, [sp, #44]	; 0x2c
 8009906:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009908:	eb0a 0903 	add.w	r9, sl, r3
 800990c:	f109 0301 	add.w	r3, r9, #1
 8009910:	2b01      	cmp	r3, #1
 8009912:	9308      	str	r3, [sp, #32]
 8009914:	bfb8      	it	lt
 8009916:	2301      	movlt	r3, #1
 8009918:	e7dd      	b.n	80098d6 <_dtoa_r+0x266>
 800991a:	2301      	movs	r3, #1
 800991c:	e7f2      	b.n	8009904 <_dtoa_r+0x294>
 800991e:	bf00      	nop
 8009920:	636f4361 	.word	0x636f4361
 8009924:	3fd287a7 	.word	0x3fd287a7
 8009928:	8b60c8b3 	.word	0x8b60c8b3
 800992c:	3fc68a28 	.word	0x3fc68a28
 8009930:	509f79fb 	.word	0x509f79fb
 8009934:	3fd34413 	.word	0x3fd34413
 8009938:	08012571 	.word	0x08012571
 800993c:	08012588 	.word	0x08012588
 8009940:	7ff00000 	.word	0x7ff00000
 8009944:	0801256d 	.word	0x0801256d
 8009948:	08012564 	.word	0x08012564
 800994c:	08012541 	.word	0x08012541
 8009950:	3ff80000 	.word	0x3ff80000
 8009954:	08012678 	.word	0x08012678
 8009958:	080125e3 	.word	0x080125e3
 800995c:	2401      	movs	r4, #1
 800995e:	2300      	movs	r3, #0
 8009960:	940b      	str	r4, [sp, #44]	; 0x2c
 8009962:	9322      	str	r3, [sp, #136]	; 0x88
 8009964:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009968:	2200      	movs	r2, #0
 800996a:	2312      	movs	r3, #18
 800996c:	f8cd 9020 	str.w	r9, [sp, #32]
 8009970:	9223      	str	r2, [sp, #140]	; 0x8c
 8009972:	e7b0      	b.n	80098d6 <_dtoa_r+0x266>
 8009974:	2301      	movs	r3, #1
 8009976:	930b      	str	r3, [sp, #44]	; 0x2c
 8009978:	e7f4      	b.n	8009964 <_dtoa_r+0x2f4>
 800997a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800997e:	464b      	mov	r3, r9
 8009980:	f8cd 9020 	str.w	r9, [sp, #32]
 8009984:	e7a7      	b.n	80098d6 <_dtoa_r+0x266>
 8009986:	3101      	adds	r1, #1
 8009988:	6041      	str	r1, [r0, #4]
 800998a:	0052      	lsls	r2, r2, #1
 800998c:	e7a7      	b.n	80098de <_dtoa_r+0x26e>
 800998e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009990:	9a03      	ldr	r2, [sp, #12]
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	9b08      	ldr	r3, [sp, #32]
 8009996:	2b0e      	cmp	r3, #14
 8009998:	f200 80a8 	bhi.w	8009aec <_dtoa_r+0x47c>
 800999c:	2c00      	cmp	r4, #0
 800999e:	f000 80a5 	beq.w	8009aec <_dtoa_r+0x47c>
 80099a2:	f1ba 0f00 	cmp.w	sl, #0
 80099a6:	dd34      	ble.n	8009a12 <_dtoa_r+0x3a2>
 80099a8:	4a9a      	ldr	r2, [pc, #616]	; (8009c14 <_dtoa_r+0x5a4>)
 80099aa:	f00a 030f 	and.w	r3, sl, #15
 80099ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80099b2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80099b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80099ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80099be:	ea4f 142a 	mov.w	r4, sl, asr #4
 80099c2:	d016      	beq.n	80099f2 <_dtoa_r+0x382>
 80099c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099c8:	4b93      	ldr	r3, [pc, #588]	; (8009c18 <_dtoa_r+0x5a8>)
 80099ca:	2703      	movs	r7, #3
 80099cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099d0:	f7f6 feac 	bl	800072c <__aeabi_ddiv>
 80099d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099d8:	f004 040f 	and.w	r4, r4, #15
 80099dc:	4e8e      	ldr	r6, [pc, #568]	; (8009c18 <_dtoa_r+0x5a8>)
 80099de:	b954      	cbnz	r4, 80099f6 <_dtoa_r+0x386>
 80099e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80099e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099e8:	f7f6 fea0 	bl	800072c <__aeabi_ddiv>
 80099ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099f0:	e029      	b.n	8009a46 <_dtoa_r+0x3d6>
 80099f2:	2702      	movs	r7, #2
 80099f4:	e7f2      	b.n	80099dc <_dtoa_r+0x36c>
 80099f6:	07e1      	lsls	r1, r4, #31
 80099f8:	d508      	bpl.n	8009a0c <_dtoa_r+0x39c>
 80099fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80099fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a02:	f7f6 fd69 	bl	80004d8 <__aeabi_dmul>
 8009a06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009a0a:	3701      	adds	r7, #1
 8009a0c:	1064      	asrs	r4, r4, #1
 8009a0e:	3608      	adds	r6, #8
 8009a10:	e7e5      	b.n	80099de <_dtoa_r+0x36e>
 8009a12:	f000 80a5 	beq.w	8009b60 <_dtoa_r+0x4f0>
 8009a16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a1a:	f1ca 0400 	rsb	r4, sl, #0
 8009a1e:	4b7d      	ldr	r3, [pc, #500]	; (8009c14 <_dtoa_r+0x5a4>)
 8009a20:	f004 020f 	and.w	r2, r4, #15
 8009a24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	f7f6 fd54 	bl	80004d8 <__aeabi_dmul>
 8009a30:	2702      	movs	r7, #2
 8009a32:	2300      	movs	r3, #0
 8009a34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a38:	4e77      	ldr	r6, [pc, #476]	; (8009c18 <_dtoa_r+0x5a8>)
 8009a3a:	1124      	asrs	r4, r4, #4
 8009a3c:	2c00      	cmp	r4, #0
 8009a3e:	f040 8084 	bne.w	8009b4a <_dtoa_r+0x4da>
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1d2      	bne.n	80099ec <_dtoa_r+0x37c>
 8009a46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 808b 	beq.w	8009b64 <_dtoa_r+0x4f4>
 8009a4e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009a52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009a56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	4b6f      	ldr	r3, [pc, #444]	; (8009c1c <_dtoa_r+0x5ac>)
 8009a5e:	f7f6 ffad 	bl	80009bc <__aeabi_dcmplt>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d07e      	beq.n	8009b64 <_dtoa_r+0x4f4>
 8009a66:	9b08      	ldr	r3, [sp, #32]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d07b      	beq.n	8009b64 <_dtoa_r+0x4f4>
 8009a6c:	f1b9 0f00 	cmp.w	r9, #0
 8009a70:	dd38      	ble.n	8009ae4 <_dtoa_r+0x474>
 8009a72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a76:	2200      	movs	r2, #0
 8009a78:	4b69      	ldr	r3, [pc, #420]	; (8009c20 <_dtoa_r+0x5b0>)
 8009a7a:	f7f6 fd2d 	bl	80004d8 <__aeabi_dmul>
 8009a7e:	464c      	mov	r4, r9
 8009a80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a84:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8009a88:	3701      	adds	r7, #1
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	f7f6 fcba 	bl	8000404 <__aeabi_i2d>
 8009a90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a94:	f7f6 fd20 	bl	80004d8 <__aeabi_dmul>
 8009a98:	2200      	movs	r2, #0
 8009a9a:	4b62      	ldr	r3, [pc, #392]	; (8009c24 <_dtoa_r+0x5b4>)
 8009a9c:	f7f6 fb66 	bl	800016c <__adddf3>
 8009aa0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009aa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009aa8:	9611      	str	r6, [sp, #68]	; 0x44
 8009aaa:	2c00      	cmp	r4, #0
 8009aac:	d15d      	bne.n	8009b6a <_dtoa_r+0x4fa>
 8009aae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	4b5c      	ldr	r3, [pc, #368]	; (8009c28 <_dtoa_r+0x5b8>)
 8009ab6:	f7f6 fb57 	bl	8000168 <__aeabi_dsub>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ac2:	4633      	mov	r3, r6
 8009ac4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ac6:	f7f6 ff97 	bl	80009f8 <__aeabi_dcmpgt>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	f040 829c 	bne.w	800a008 <_dtoa_r+0x998>
 8009ad0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ad4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ad6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009ada:	f7f6 ff6f 	bl	80009bc <__aeabi_dcmplt>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	f040 8290 	bne.w	800a004 <_dtoa_r+0x994>
 8009ae4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009ae8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009aec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f2c0 8152 	blt.w	8009d98 <_dtoa_r+0x728>
 8009af4:	f1ba 0f0e 	cmp.w	sl, #14
 8009af8:	f300 814e 	bgt.w	8009d98 <_dtoa_r+0x728>
 8009afc:	4b45      	ldr	r3, [pc, #276]	; (8009c14 <_dtoa_r+0x5a4>)
 8009afe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b06:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009b0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f280 80db 	bge.w	8009cc8 <_dtoa_r+0x658>
 8009b12:	9b08      	ldr	r3, [sp, #32]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f300 80d7 	bgt.w	8009cc8 <_dtoa_r+0x658>
 8009b1a:	f040 8272 	bne.w	800a002 <_dtoa_r+0x992>
 8009b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b22:	2200      	movs	r2, #0
 8009b24:	4b40      	ldr	r3, [pc, #256]	; (8009c28 <_dtoa_r+0x5b8>)
 8009b26:	f7f6 fcd7 	bl	80004d8 <__aeabi_dmul>
 8009b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b2e:	f7f6 ff59 	bl	80009e4 <__aeabi_dcmpge>
 8009b32:	9c08      	ldr	r4, [sp, #32]
 8009b34:	4626      	mov	r6, r4
 8009b36:	2800      	cmp	r0, #0
 8009b38:	f040 8248 	bne.w	8009fcc <_dtoa_r+0x95c>
 8009b3c:	2331      	movs	r3, #49	; 0x31
 8009b3e:	9f03      	ldr	r7, [sp, #12]
 8009b40:	f10a 0a01 	add.w	sl, sl, #1
 8009b44:	f807 3b01 	strb.w	r3, [r7], #1
 8009b48:	e244      	b.n	8009fd4 <_dtoa_r+0x964>
 8009b4a:	07e2      	lsls	r2, r4, #31
 8009b4c:	d505      	bpl.n	8009b5a <_dtoa_r+0x4ea>
 8009b4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b52:	f7f6 fcc1 	bl	80004d8 <__aeabi_dmul>
 8009b56:	2301      	movs	r3, #1
 8009b58:	3701      	adds	r7, #1
 8009b5a:	1064      	asrs	r4, r4, #1
 8009b5c:	3608      	adds	r6, #8
 8009b5e:	e76d      	b.n	8009a3c <_dtoa_r+0x3cc>
 8009b60:	2702      	movs	r7, #2
 8009b62:	e770      	b.n	8009a46 <_dtoa_r+0x3d6>
 8009b64:	46d0      	mov	r8, sl
 8009b66:	9c08      	ldr	r4, [sp, #32]
 8009b68:	e78f      	b.n	8009a8a <_dtoa_r+0x41a>
 8009b6a:	9903      	ldr	r1, [sp, #12]
 8009b6c:	4b29      	ldr	r3, [pc, #164]	; (8009c14 <_dtoa_r+0x5a4>)
 8009b6e:	4421      	add	r1, r4
 8009b70:	9112      	str	r1, [sp, #72]	; 0x48
 8009b72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b78:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009b7c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b80:	2900      	cmp	r1, #0
 8009b82:	d055      	beq.n	8009c30 <_dtoa_r+0x5c0>
 8009b84:	2000      	movs	r0, #0
 8009b86:	4929      	ldr	r1, [pc, #164]	; (8009c2c <_dtoa_r+0x5bc>)
 8009b88:	f7f6 fdd0 	bl	800072c <__aeabi_ddiv>
 8009b8c:	463b      	mov	r3, r7
 8009b8e:	4632      	mov	r2, r6
 8009b90:	f7f6 faea 	bl	8000168 <__aeabi_dsub>
 8009b94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b98:	9f03      	ldr	r7, [sp, #12]
 8009b9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b9e:	f7f6 ff4b 	bl	8000a38 <__aeabi_d2iz>
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	f7f6 fc2e 	bl	8000404 <__aeabi_i2d>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bb0:	f7f6 fada 	bl	8000168 <__aeabi_dsub>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	3430      	adds	r4, #48	; 0x30
 8009bba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009bbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009bc2:	f807 4b01 	strb.w	r4, [r7], #1
 8009bc6:	f7f6 fef9 	bl	80009bc <__aeabi_dcmplt>
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d174      	bne.n	8009cb8 <_dtoa_r+0x648>
 8009bce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	4911      	ldr	r1, [pc, #68]	; (8009c1c <_dtoa_r+0x5ac>)
 8009bd6:	f7f6 fac7 	bl	8000168 <__aeabi_dsub>
 8009bda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009bde:	f7f6 feed 	bl	80009bc <__aeabi_dcmplt>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	f040 80b7 	bne.w	8009d56 <_dtoa_r+0x6e6>
 8009be8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bea:	429f      	cmp	r7, r3
 8009bec:	f43f af7a 	beq.w	8009ae4 <_dtoa_r+0x474>
 8009bf0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	4b0a      	ldr	r3, [pc, #40]	; (8009c20 <_dtoa_r+0x5b0>)
 8009bf8:	f7f6 fc6e 	bl	80004d8 <__aeabi_dmul>
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c06:	4b06      	ldr	r3, [pc, #24]	; (8009c20 <_dtoa_r+0x5b0>)
 8009c08:	f7f6 fc66 	bl	80004d8 <__aeabi_dmul>
 8009c0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c10:	e7c3      	b.n	8009b9a <_dtoa_r+0x52a>
 8009c12:	bf00      	nop
 8009c14:	08012678 	.word	0x08012678
 8009c18:	08012650 	.word	0x08012650
 8009c1c:	3ff00000 	.word	0x3ff00000
 8009c20:	40240000 	.word	0x40240000
 8009c24:	401c0000 	.word	0x401c0000
 8009c28:	40140000 	.word	0x40140000
 8009c2c:	3fe00000 	.word	0x3fe00000
 8009c30:	4630      	mov	r0, r6
 8009c32:	4639      	mov	r1, r7
 8009c34:	f7f6 fc50 	bl	80004d8 <__aeabi_dmul>
 8009c38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c3e:	9c03      	ldr	r4, [sp, #12]
 8009c40:	9314      	str	r3, [sp, #80]	; 0x50
 8009c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c46:	f7f6 fef7 	bl	8000a38 <__aeabi_d2iz>
 8009c4a:	9015      	str	r0, [sp, #84]	; 0x54
 8009c4c:	f7f6 fbda 	bl	8000404 <__aeabi_i2d>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c58:	f7f6 fa86 	bl	8000168 <__aeabi_dsub>
 8009c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c5e:	4606      	mov	r6, r0
 8009c60:	3330      	adds	r3, #48	; 0x30
 8009c62:	f804 3b01 	strb.w	r3, [r4], #1
 8009c66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c68:	460f      	mov	r7, r1
 8009c6a:	429c      	cmp	r4, r3
 8009c6c:	f04f 0200 	mov.w	r2, #0
 8009c70:	d124      	bne.n	8009cbc <_dtoa_r+0x64c>
 8009c72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c76:	4bb0      	ldr	r3, [pc, #704]	; (8009f38 <_dtoa_r+0x8c8>)
 8009c78:	f7f6 fa78 	bl	800016c <__adddf3>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4630      	mov	r0, r6
 8009c82:	4639      	mov	r1, r7
 8009c84:	f7f6 feb8 	bl	80009f8 <__aeabi_dcmpgt>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d163      	bne.n	8009d54 <_dtoa_r+0x6e4>
 8009c8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c90:	2000      	movs	r0, #0
 8009c92:	49a9      	ldr	r1, [pc, #676]	; (8009f38 <_dtoa_r+0x8c8>)
 8009c94:	f7f6 fa68 	bl	8000168 <__aeabi_dsub>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	4639      	mov	r1, r7
 8009ca0:	f7f6 fe8c 	bl	80009bc <__aeabi_dcmplt>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	f43f af1d 	beq.w	8009ae4 <_dtoa_r+0x474>
 8009caa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009cac:	1e7b      	subs	r3, r7, #1
 8009cae:	9314      	str	r3, [sp, #80]	; 0x50
 8009cb0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009cb4:	2b30      	cmp	r3, #48	; 0x30
 8009cb6:	d0f8      	beq.n	8009caa <_dtoa_r+0x63a>
 8009cb8:	46c2      	mov	sl, r8
 8009cba:	e03b      	b.n	8009d34 <_dtoa_r+0x6c4>
 8009cbc:	4b9f      	ldr	r3, [pc, #636]	; (8009f3c <_dtoa_r+0x8cc>)
 8009cbe:	f7f6 fc0b 	bl	80004d8 <__aeabi_dmul>
 8009cc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cc6:	e7bc      	b.n	8009c42 <_dtoa_r+0x5d2>
 8009cc8:	9f03      	ldr	r7, [sp, #12]
 8009cca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009cce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cd2:	4640      	mov	r0, r8
 8009cd4:	4649      	mov	r1, r9
 8009cd6:	f7f6 fd29 	bl	800072c <__aeabi_ddiv>
 8009cda:	f7f6 fead 	bl	8000a38 <__aeabi_d2iz>
 8009cde:	4604      	mov	r4, r0
 8009ce0:	f7f6 fb90 	bl	8000404 <__aeabi_i2d>
 8009ce4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ce8:	f7f6 fbf6 	bl	80004d8 <__aeabi_dmul>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4640      	mov	r0, r8
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	f7f6 fa38 	bl	8000168 <__aeabi_dsub>
 8009cf8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009cfc:	f807 6b01 	strb.w	r6, [r7], #1
 8009d00:	9e03      	ldr	r6, [sp, #12]
 8009d02:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009d06:	1bbe      	subs	r6, r7, r6
 8009d08:	45b4      	cmp	ip, r6
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	d136      	bne.n	8009d7e <_dtoa_r+0x70e>
 8009d10:	f7f6 fa2c 	bl	800016c <__adddf3>
 8009d14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d18:	4680      	mov	r8, r0
 8009d1a:	4689      	mov	r9, r1
 8009d1c:	f7f6 fe6c 	bl	80009f8 <__aeabi_dcmpgt>
 8009d20:	bb58      	cbnz	r0, 8009d7a <_dtoa_r+0x70a>
 8009d22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d26:	4640      	mov	r0, r8
 8009d28:	4649      	mov	r1, r9
 8009d2a:	f7f6 fe3d 	bl	80009a8 <__aeabi_dcmpeq>
 8009d2e:	b108      	cbz	r0, 8009d34 <_dtoa_r+0x6c4>
 8009d30:	07e1      	lsls	r1, r4, #31
 8009d32:	d422      	bmi.n	8009d7a <_dtoa_r+0x70a>
 8009d34:	4628      	mov	r0, r5
 8009d36:	4659      	mov	r1, fp
 8009d38:	f000 faf0 	bl	800a31c <_Bfree>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	703b      	strb	r3, [r7, #0]
 8009d40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009d42:	f10a 0001 	add.w	r0, sl, #1
 8009d46:	6018      	str	r0, [r3, #0]
 8009d48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f43f acde 	beq.w	800970c <_dtoa_r+0x9c>
 8009d50:	601f      	str	r7, [r3, #0]
 8009d52:	e4db      	b.n	800970c <_dtoa_r+0x9c>
 8009d54:	4627      	mov	r7, r4
 8009d56:	463b      	mov	r3, r7
 8009d58:	461f      	mov	r7, r3
 8009d5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d5e:	2a39      	cmp	r2, #57	; 0x39
 8009d60:	d107      	bne.n	8009d72 <_dtoa_r+0x702>
 8009d62:	9a03      	ldr	r2, [sp, #12]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d1f7      	bne.n	8009d58 <_dtoa_r+0x6e8>
 8009d68:	2230      	movs	r2, #48	; 0x30
 8009d6a:	9903      	ldr	r1, [sp, #12]
 8009d6c:	f108 0801 	add.w	r8, r8, #1
 8009d70:	700a      	strb	r2, [r1, #0]
 8009d72:	781a      	ldrb	r2, [r3, #0]
 8009d74:	3201      	adds	r2, #1
 8009d76:	701a      	strb	r2, [r3, #0]
 8009d78:	e79e      	b.n	8009cb8 <_dtoa_r+0x648>
 8009d7a:	46d0      	mov	r8, sl
 8009d7c:	e7eb      	b.n	8009d56 <_dtoa_r+0x6e6>
 8009d7e:	2200      	movs	r2, #0
 8009d80:	4b6e      	ldr	r3, [pc, #440]	; (8009f3c <_dtoa_r+0x8cc>)
 8009d82:	f7f6 fba9 	bl	80004d8 <__aeabi_dmul>
 8009d86:	2200      	movs	r2, #0
 8009d88:	2300      	movs	r3, #0
 8009d8a:	4680      	mov	r8, r0
 8009d8c:	4689      	mov	r9, r1
 8009d8e:	f7f6 fe0b 	bl	80009a8 <__aeabi_dcmpeq>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d09b      	beq.n	8009cce <_dtoa_r+0x65e>
 8009d96:	e7cd      	b.n	8009d34 <_dtoa_r+0x6c4>
 8009d98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d9a:	2a00      	cmp	r2, #0
 8009d9c:	f000 80d0 	beq.w	8009f40 <_dtoa_r+0x8d0>
 8009da0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009da2:	2a01      	cmp	r2, #1
 8009da4:	f300 80ae 	bgt.w	8009f04 <_dtoa_r+0x894>
 8009da8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009daa:	2a00      	cmp	r2, #0
 8009dac:	f000 80a6 	beq.w	8009efc <_dtoa_r+0x88c>
 8009db0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009db4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009db6:	9f06      	ldr	r7, [sp, #24]
 8009db8:	9a06      	ldr	r2, [sp, #24]
 8009dba:	2101      	movs	r1, #1
 8009dbc:	441a      	add	r2, r3
 8009dbe:	9206      	str	r2, [sp, #24]
 8009dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	441a      	add	r2, r3
 8009dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8009dc8:	f000 fb5e 	bl	800a488 <__i2b>
 8009dcc:	4606      	mov	r6, r0
 8009dce:	2f00      	cmp	r7, #0
 8009dd0:	dd0c      	ble.n	8009dec <_dtoa_r+0x77c>
 8009dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	dd09      	ble.n	8009dec <_dtoa_r+0x77c>
 8009dd8:	42bb      	cmp	r3, r7
 8009dda:	bfa8      	it	ge
 8009ddc:	463b      	movge	r3, r7
 8009dde:	9a06      	ldr	r2, [sp, #24]
 8009de0:	1aff      	subs	r7, r7, r3
 8009de2:	1ad2      	subs	r2, r2, r3
 8009de4:	9206      	str	r2, [sp, #24]
 8009de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	9309      	str	r3, [sp, #36]	; 0x24
 8009dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dee:	b1f3      	cbz	r3, 8009e2e <_dtoa_r+0x7be>
 8009df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 80a8 	beq.w	8009f48 <_dtoa_r+0x8d8>
 8009df8:	2c00      	cmp	r4, #0
 8009dfa:	dd10      	ble.n	8009e1e <_dtoa_r+0x7ae>
 8009dfc:	4631      	mov	r1, r6
 8009dfe:	4622      	mov	r2, r4
 8009e00:	4628      	mov	r0, r5
 8009e02:	f000 fbff 	bl	800a604 <__pow5mult>
 8009e06:	465a      	mov	r2, fp
 8009e08:	4601      	mov	r1, r0
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	f000 fb51 	bl	800a4b4 <__multiply>
 8009e12:	4680      	mov	r8, r0
 8009e14:	4659      	mov	r1, fp
 8009e16:	4628      	mov	r0, r5
 8009e18:	f000 fa80 	bl	800a31c <_Bfree>
 8009e1c:	46c3      	mov	fp, r8
 8009e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e20:	1b1a      	subs	r2, r3, r4
 8009e22:	d004      	beq.n	8009e2e <_dtoa_r+0x7be>
 8009e24:	4659      	mov	r1, fp
 8009e26:	4628      	mov	r0, r5
 8009e28:	f000 fbec 	bl	800a604 <__pow5mult>
 8009e2c:	4683      	mov	fp, r0
 8009e2e:	2101      	movs	r1, #1
 8009e30:	4628      	mov	r0, r5
 8009e32:	f000 fb29 	bl	800a488 <__i2b>
 8009e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e38:	4604      	mov	r4, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f340 8086 	ble.w	8009f4c <_dtoa_r+0x8dc>
 8009e40:	461a      	mov	r2, r3
 8009e42:	4601      	mov	r1, r0
 8009e44:	4628      	mov	r0, r5
 8009e46:	f000 fbdd 	bl	800a604 <__pow5mult>
 8009e4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	dd7f      	ble.n	8009f52 <_dtoa_r+0x8e2>
 8009e52:	f04f 0800 	mov.w	r8, #0
 8009e56:	6923      	ldr	r3, [r4, #16]
 8009e58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e5c:	6918      	ldr	r0, [r3, #16]
 8009e5e:	f000 fac5 	bl	800a3ec <__hi0bits>
 8009e62:	f1c0 0020 	rsb	r0, r0, #32
 8009e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e68:	4418      	add	r0, r3
 8009e6a:	f010 001f 	ands.w	r0, r0, #31
 8009e6e:	f000 8092 	beq.w	8009f96 <_dtoa_r+0x926>
 8009e72:	f1c0 0320 	rsb	r3, r0, #32
 8009e76:	2b04      	cmp	r3, #4
 8009e78:	f340 808a 	ble.w	8009f90 <_dtoa_r+0x920>
 8009e7c:	f1c0 001c 	rsb	r0, r0, #28
 8009e80:	9b06      	ldr	r3, [sp, #24]
 8009e82:	4407      	add	r7, r0
 8009e84:	4403      	add	r3, r0
 8009e86:	9306      	str	r3, [sp, #24]
 8009e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e8a:	4403      	add	r3, r0
 8009e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e8e:	9b06      	ldr	r3, [sp, #24]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	dd05      	ble.n	8009ea0 <_dtoa_r+0x830>
 8009e94:	4659      	mov	r1, fp
 8009e96:	461a      	mov	r2, r3
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f000 fc0d 	bl	800a6b8 <__lshift>
 8009e9e:	4683      	mov	fp, r0
 8009ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	dd05      	ble.n	8009eb2 <_dtoa_r+0x842>
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	4628      	mov	r0, r5
 8009eac:	f000 fc04 	bl	800a6b8 <__lshift>
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d070      	beq.n	8009f9a <_dtoa_r+0x92a>
 8009eb8:	4621      	mov	r1, r4
 8009eba:	4658      	mov	r0, fp
 8009ebc:	f000 fc6c 	bl	800a798 <__mcmp>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	da6a      	bge.n	8009f9a <_dtoa_r+0x92a>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	4659      	mov	r1, fp
 8009ec8:	220a      	movs	r2, #10
 8009eca:	4628      	mov	r0, r5
 8009ecc:	f000 fa48 	bl	800a360 <__multadd>
 8009ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ed2:	4683      	mov	fp, r0
 8009ed4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f000 8194 	beq.w	800a206 <_dtoa_r+0xb96>
 8009ede:	4631      	mov	r1, r6
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	220a      	movs	r2, #10
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	f000 fa3b 	bl	800a360 <__multadd>
 8009eea:	f1b9 0f00 	cmp.w	r9, #0
 8009eee:	4606      	mov	r6, r0
 8009ef0:	f300 8093 	bgt.w	800a01a <_dtoa_r+0x9aa>
 8009ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	dc57      	bgt.n	8009faa <_dtoa_r+0x93a>
 8009efa:	e08e      	b.n	800a01a <_dtoa_r+0x9aa>
 8009efc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009efe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f02:	e757      	b.n	8009db4 <_dtoa_r+0x744>
 8009f04:	9b08      	ldr	r3, [sp, #32]
 8009f06:	1e5c      	subs	r4, r3, #1
 8009f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f0a:	42a3      	cmp	r3, r4
 8009f0c:	bfb7      	itett	lt
 8009f0e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009f10:	1b1c      	subge	r4, r3, r4
 8009f12:	1ae2      	sublt	r2, r4, r3
 8009f14:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009f16:	bfbe      	ittt	lt
 8009f18:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009f1a:	189b      	addlt	r3, r3, r2
 8009f1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009f1e:	9b08      	ldr	r3, [sp, #32]
 8009f20:	bfb8      	it	lt
 8009f22:	2400      	movlt	r4, #0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	bfbb      	ittet	lt
 8009f28:	9b06      	ldrlt	r3, [sp, #24]
 8009f2a:	9a08      	ldrlt	r2, [sp, #32]
 8009f2c:	9f06      	ldrge	r7, [sp, #24]
 8009f2e:	1a9f      	sublt	r7, r3, r2
 8009f30:	bfac      	ite	ge
 8009f32:	9b08      	ldrge	r3, [sp, #32]
 8009f34:	2300      	movlt	r3, #0
 8009f36:	e73f      	b.n	8009db8 <_dtoa_r+0x748>
 8009f38:	3fe00000 	.word	0x3fe00000
 8009f3c:	40240000 	.word	0x40240000
 8009f40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f42:	9f06      	ldr	r7, [sp, #24]
 8009f44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009f46:	e742      	b.n	8009dce <_dtoa_r+0x75e>
 8009f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f4a:	e76b      	b.n	8009e24 <_dtoa_r+0x7b4>
 8009f4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	dc19      	bgt.n	8009f86 <_dtoa_r+0x916>
 8009f52:	9b04      	ldr	r3, [sp, #16]
 8009f54:	b9bb      	cbnz	r3, 8009f86 <_dtoa_r+0x916>
 8009f56:	9b05      	ldr	r3, [sp, #20]
 8009f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f5c:	b99b      	cbnz	r3, 8009f86 <_dtoa_r+0x916>
 8009f5e:	9b05      	ldr	r3, [sp, #20]
 8009f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f64:	0d1b      	lsrs	r3, r3, #20
 8009f66:	051b      	lsls	r3, r3, #20
 8009f68:	b183      	cbz	r3, 8009f8c <_dtoa_r+0x91c>
 8009f6a:	f04f 0801 	mov.w	r8, #1
 8009f6e:	9b06      	ldr	r3, [sp, #24]
 8009f70:	3301      	adds	r3, #1
 8009f72:	9306      	str	r3, [sp, #24]
 8009f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f76:	3301      	adds	r3, #1
 8009f78:	9309      	str	r3, [sp, #36]	; 0x24
 8009f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f47f af6a 	bne.w	8009e56 <_dtoa_r+0x7e6>
 8009f82:	2001      	movs	r0, #1
 8009f84:	e76f      	b.n	8009e66 <_dtoa_r+0x7f6>
 8009f86:	f04f 0800 	mov.w	r8, #0
 8009f8a:	e7f6      	b.n	8009f7a <_dtoa_r+0x90a>
 8009f8c:	4698      	mov	r8, r3
 8009f8e:	e7f4      	b.n	8009f7a <_dtoa_r+0x90a>
 8009f90:	f43f af7d 	beq.w	8009e8e <_dtoa_r+0x81e>
 8009f94:	4618      	mov	r0, r3
 8009f96:	301c      	adds	r0, #28
 8009f98:	e772      	b.n	8009e80 <_dtoa_r+0x810>
 8009f9a:	9b08      	ldr	r3, [sp, #32]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	dc36      	bgt.n	800a00e <_dtoa_r+0x99e>
 8009fa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	dd33      	ble.n	800a00e <_dtoa_r+0x99e>
 8009fa6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009faa:	f1b9 0f00 	cmp.w	r9, #0
 8009fae:	d10d      	bne.n	8009fcc <_dtoa_r+0x95c>
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	464b      	mov	r3, r9
 8009fb4:	2205      	movs	r2, #5
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f000 f9d2 	bl	800a360 <__multadd>
 8009fbc:	4601      	mov	r1, r0
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	4658      	mov	r0, fp
 8009fc2:	f000 fbe9 	bl	800a798 <__mcmp>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	f73f adb8 	bgt.w	8009b3c <_dtoa_r+0x4cc>
 8009fcc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009fce:	9f03      	ldr	r7, [sp, #12]
 8009fd0:	ea6f 0a03 	mvn.w	sl, r3
 8009fd4:	f04f 0800 	mov.w	r8, #0
 8009fd8:	4621      	mov	r1, r4
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f000 f99e 	bl	800a31c <_Bfree>
 8009fe0:	2e00      	cmp	r6, #0
 8009fe2:	f43f aea7 	beq.w	8009d34 <_dtoa_r+0x6c4>
 8009fe6:	f1b8 0f00 	cmp.w	r8, #0
 8009fea:	d005      	beq.n	8009ff8 <_dtoa_r+0x988>
 8009fec:	45b0      	cmp	r8, r6
 8009fee:	d003      	beq.n	8009ff8 <_dtoa_r+0x988>
 8009ff0:	4641      	mov	r1, r8
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f000 f992 	bl	800a31c <_Bfree>
 8009ff8:	4631      	mov	r1, r6
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f000 f98e 	bl	800a31c <_Bfree>
 800a000:	e698      	b.n	8009d34 <_dtoa_r+0x6c4>
 800a002:	2400      	movs	r4, #0
 800a004:	4626      	mov	r6, r4
 800a006:	e7e1      	b.n	8009fcc <_dtoa_r+0x95c>
 800a008:	46c2      	mov	sl, r8
 800a00a:	4626      	mov	r6, r4
 800a00c:	e596      	b.n	8009b3c <_dtoa_r+0x4cc>
 800a00e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a014:	2b00      	cmp	r3, #0
 800a016:	f000 80fd 	beq.w	800a214 <_dtoa_r+0xba4>
 800a01a:	2f00      	cmp	r7, #0
 800a01c:	dd05      	ble.n	800a02a <_dtoa_r+0x9ba>
 800a01e:	4631      	mov	r1, r6
 800a020:	463a      	mov	r2, r7
 800a022:	4628      	mov	r0, r5
 800a024:	f000 fb48 	bl	800a6b8 <__lshift>
 800a028:	4606      	mov	r6, r0
 800a02a:	f1b8 0f00 	cmp.w	r8, #0
 800a02e:	d05c      	beq.n	800a0ea <_dtoa_r+0xa7a>
 800a030:	4628      	mov	r0, r5
 800a032:	6871      	ldr	r1, [r6, #4]
 800a034:	f000 f932 	bl	800a29c <_Balloc>
 800a038:	4607      	mov	r7, r0
 800a03a:	b928      	cbnz	r0, 800a048 <_dtoa_r+0x9d8>
 800a03c:	4602      	mov	r2, r0
 800a03e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a042:	4b7f      	ldr	r3, [pc, #508]	; (800a240 <_dtoa_r+0xbd0>)
 800a044:	f7ff bb28 	b.w	8009698 <_dtoa_r+0x28>
 800a048:	6932      	ldr	r2, [r6, #16]
 800a04a:	f106 010c 	add.w	r1, r6, #12
 800a04e:	3202      	adds	r2, #2
 800a050:	0092      	lsls	r2, r2, #2
 800a052:	300c      	adds	r0, #12
 800a054:	f000 f914 	bl	800a280 <memcpy>
 800a058:	2201      	movs	r2, #1
 800a05a:	4639      	mov	r1, r7
 800a05c:	4628      	mov	r0, r5
 800a05e:	f000 fb2b 	bl	800a6b8 <__lshift>
 800a062:	46b0      	mov	r8, r6
 800a064:	4606      	mov	r6, r0
 800a066:	9b03      	ldr	r3, [sp, #12]
 800a068:	3301      	adds	r3, #1
 800a06a:	9308      	str	r3, [sp, #32]
 800a06c:	9b03      	ldr	r3, [sp, #12]
 800a06e:	444b      	add	r3, r9
 800a070:	930a      	str	r3, [sp, #40]	; 0x28
 800a072:	9b04      	ldr	r3, [sp, #16]
 800a074:	f003 0301 	and.w	r3, r3, #1
 800a078:	9309      	str	r3, [sp, #36]	; 0x24
 800a07a:	9b08      	ldr	r3, [sp, #32]
 800a07c:	4621      	mov	r1, r4
 800a07e:	3b01      	subs	r3, #1
 800a080:	4658      	mov	r0, fp
 800a082:	9304      	str	r3, [sp, #16]
 800a084:	f7ff fa68 	bl	8009558 <quorem>
 800a088:	4603      	mov	r3, r0
 800a08a:	4641      	mov	r1, r8
 800a08c:	3330      	adds	r3, #48	; 0x30
 800a08e:	9006      	str	r0, [sp, #24]
 800a090:	4658      	mov	r0, fp
 800a092:	930b      	str	r3, [sp, #44]	; 0x2c
 800a094:	f000 fb80 	bl	800a798 <__mcmp>
 800a098:	4632      	mov	r2, r6
 800a09a:	4681      	mov	r9, r0
 800a09c:	4621      	mov	r1, r4
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f000 fb96 	bl	800a7d0 <__mdiff>
 800a0a4:	68c2      	ldr	r2, [r0, #12]
 800a0a6:	4607      	mov	r7, r0
 800a0a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0aa:	bb02      	cbnz	r2, 800a0ee <_dtoa_r+0xa7e>
 800a0ac:	4601      	mov	r1, r0
 800a0ae:	4658      	mov	r0, fp
 800a0b0:	f000 fb72 	bl	800a798 <__mcmp>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a0c0:	f000 f92c 	bl	800a31c <_Bfree>
 800a0c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0c8:	9f08      	ldr	r7, [sp, #32]
 800a0ca:	ea43 0102 	orr.w	r1, r3, r2
 800a0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d0:	430b      	orrs	r3, r1
 800a0d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0d4:	d10d      	bne.n	800a0f2 <_dtoa_r+0xa82>
 800a0d6:	2b39      	cmp	r3, #57	; 0x39
 800a0d8:	d029      	beq.n	800a12e <_dtoa_r+0xabe>
 800a0da:	f1b9 0f00 	cmp.w	r9, #0
 800a0de:	dd01      	ble.n	800a0e4 <_dtoa_r+0xa74>
 800a0e0:	9b06      	ldr	r3, [sp, #24]
 800a0e2:	3331      	adds	r3, #49	; 0x31
 800a0e4:	9a04      	ldr	r2, [sp, #16]
 800a0e6:	7013      	strb	r3, [r2, #0]
 800a0e8:	e776      	b.n	8009fd8 <_dtoa_r+0x968>
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	e7b9      	b.n	800a062 <_dtoa_r+0x9f2>
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	e7e2      	b.n	800a0b8 <_dtoa_r+0xa48>
 800a0f2:	f1b9 0f00 	cmp.w	r9, #0
 800a0f6:	db06      	blt.n	800a106 <_dtoa_r+0xa96>
 800a0f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a0fa:	ea41 0909 	orr.w	r9, r1, r9
 800a0fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a100:	ea59 0101 	orrs.w	r1, r9, r1
 800a104:	d120      	bne.n	800a148 <_dtoa_r+0xad8>
 800a106:	2a00      	cmp	r2, #0
 800a108:	ddec      	ble.n	800a0e4 <_dtoa_r+0xa74>
 800a10a:	4659      	mov	r1, fp
 800a10c:	2201      	movs	r2, #1
 800a10e:	4628      	mov	r0, r5
 800a110:	9308      	str	r3, [sp, #32]
 800a112:	f000 fad1 	bl	800a6b8 <__lshift>
 800a116:	4621      	mov	r1, r4
 800a118:	4683      	mov	fp, r0
 800a11a:	f000 fb3d 	bl	800a798 <__mcmp>
 800a11e:	2800      	cmp	r0, #0
 800a120:	9b08      	ldr	r3, [sp, #32]
 800a122:	dc02      	bgt.n	800a12a <_dtoa_r+0xaba>
 800a124:	d1de      	bne.n	800a0e4 <_dtoa_r+0xa74>
 800a126:	07da      	lsls	r2, r3, #31
 800a128:	d5dc      	bpl.n	800a0e4 <_dtoa_r+0xa74>
 800a12a:	2b39      	cmp	r3, #57	; 0x39
 800a12c:	d1d8      	bne.n	800a0e0 <_dtoa_r+0xa70>
 800a12e:	2339      	movs	r3, #57	; 0x39
 800a130:	9a04      	ldr	r2, [sp, #16]
 800a132:	7013      	strb	r3, [r2, #0]
 800a134:	463b      	mov	r3, r7
 800a136:	461f      	mov	r7, r3
 800a138:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	2a39      	cmp	r2, #57	; 0x39
 800a140:	d050      	beq.n	800a1e4 <_dtoa_r+0xb74>
 800a142:	3201      	adds	r2, #1
 800a144:	701a      	strb	r2, [r3, #0]
 800a146:	e747      	b.n	8009fd8 <_dtoa_r+0x968>
 800a148:	2a00      	cmp	r2, #0
 800a14a:	dd03      	ble.n	800a154 <_dtoa_r+0xae4>
 800a14c:	2b39      	cmp	r3, #57	; 0x39
 800a14e:	d0ee      	beq.n	800a12e <_dtoa_r+0xabe>
 800a150:	3301      	adds	r3, #1
 800a152:	e7c7      	b.n	800a0e4 <_dtoa_r+0xa74>
 800a154:	9a08      	ldr	r2, [sp, #32]
 800a156:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a158:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a15c:	428a      	cmp	r2, r1
 800a15e:	d02a      	beq.n	800a1b6 <_dtoa_r+0xb46>
 800a160:	4659      	mov	r1, fp
 800a162:	2300      	movs	r3, #0
 800a164:	220a      	movs	r2, #10
 800a166:	4628      	mov	r0, r5
 800a168:	f000 f8fa 	bl	800a360 <__multadd>
 800a16c:	45b0      	cmp	r8, r6
 800a16e:	4683      	mov	fp, r0
 800a170:	f04f 0300 	mov.w	r3, #0
 800a174:	f04f 020a 	mov.w	r2, #10
 800a178:	4641      	mov	r1, r8
 800a17a:	4628      	mov	r0, r5
 800a17c:	d107      	bne.n	800a18e <_dtoa_r+0xb1e>
 800a17e:	f000 f8ef 	bl	800a360 <__multadd>
 800a182:	4680      	mov	r8, r0
 800a184:	4606      	mov	r6, r0
 800a186:	9b08      	ldr	r3, [sp, #32]
 800a188:	3301      	adds	r3, #1
 800a18a:	9308      	str	r3, [sp, #32]
 800a18c:	e775      	b.n	800a07a <_dtoa_r+0xa0a>
 800a18e:	f000 f8e7 	bl	800a360 <__multadd>
 800a192:	4631      	mov	r1, r6
 800a194:	4680      	mov	r8, r0
 800a196:	2300      	movs	r3, #0
 800a198:	220a      	movs	r2, #10
 800a19a:	4628      	mov	r0, r5
 800a19c:	f000 f8e0 	bl	800a360 <__multadd>
 800a1a0:	4606      	mov	r6, r0
 800a1a2:	e7f0      	b.n	800a186 <_dtoa_r+0xb16>
 800a1a4:	f1b9 0f00 	cmp.w	r9, #0
 800a1a8:	bfcc      	ite	gt
 800a1aa:	464f      	movgt	r7, r9
 800a1ac:	2701      	movle	r7, #1
 800a1ae:	f04f 0800 	mov.w	r8, #0
 800a1b2:	9a03      	ldr	r2, [sp, #12]
 800a1b4:	4417      	add	r7, r2
 800a1b6:	4659      	mov	r1, fp
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	9308      	str	r3, [sp, #32]
 800a1be:	f000 fa7b 	bl	800a6b8 <__lshift>
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	4683      	mov	fp, r0
 800a1c6:	f000 fae7 	bl	800a798 <__mcmp>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	dcb2      	bgt.n	800a134 <_dtoa_r+0xac4>
 800a1ce:	d102      	bne.n	800a1d6 <_dtoa_r+0xb66>
 800a1d0:	9b08      	ldr	r3, [sp, #32]
 800a1d2:	07db      	lsls	r3, r3, #31
 800a1d4:	d4ae      	bmi.n	800a134 <_dtoa_r+0xac4>
 800a1d6:	463b      	mov	r3, r7
 800a1d8:	461f      	mov	r7, r3
 800a1da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1de:	2a30      	cmp	r2, #48	; 0x30
 800a1e0:	d0fa      	beq.n	800a1d8 <_dtoa_r+0xb68>
 800a1e2:	e6f9      	b.n	8009fd8 <_dtoa_r+0x968>
 800a1e4:	9a03      	ldr	r2, [sp, #12]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d1a5      	bne.n	800a136 <_dtoa_r+0xac6>
 800a1ea:	2331      	movs	r3, #49	; 0x31
 800a1ec:	f10a 0a01 	add.w	sl, sl, #1
 800a1f0:	e779      	b.n	800a0e6 <_dtoa_r+0xa76>
 800a1f2:	4b14      	ldr	r3, [pc, #80]	; (800a244 <_dtoa_r+0xbd4>)
 800a1f4:	f7ff baa8 	b.w	8009748 <_dtoa_r+0xd8>
 800a1f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f47f aa81 	bne.w	8009702 <_dtoa_r+0x92>
 800a200:	4b11      	ldr	r3, [pc, #68]	; (800a248 <_dtoa_r+0xbd8>)
 800a202:	f7ff baa1 	b.w	8009748 <_dtoa_r+0xd8>
 800a206:	f1b9 0f00 	cmp.w	r9, #0
 800a20a:	dc03      	bgt.n	800a214 <_dtoa_r+0xba4>
 800a20c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a20e:	2b02      	cmp	r3, #2
 800a210:	f73f aecb 	bgt.w	8009faa <_dtoa_r+0x93a>
 800a214:	9f03      	ldr	r7, [sp, #12]
 800a216:	4621      	mov	r1, r4
 800a218:	4658      	mov	r0, fp
 800a21a:	f7ff f99d 	bl	8009558 <quorem>
 800a21e:	9a03      	ldr	r2, [sp, #12]
 800a220:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a224:	f807 3b01 	strb.w	r3, [r7], #1
 800a228:	1aba      	subs	r2, r7, r2
 800a22a:	4591      	cmp	r9, r2
 800a22c:	ddba      	ble.n	800a1a4 <_dtoa_r+0xb34>
 800a22e:	4659      	mov	r1, fp
 800a230:	2300      	movs	r3, #0
 800a232:	220a      	movs	r2, #10
 800a234:	4628      	mov	r0, r5
 800a236:	f000 f893 	bl	800a360 <__multadd>
 800a23a:	4683      	mov	fp, r0
 800a23c:	e7eb      	b.n	800a216 <_dtoa_r+0xba6>
 800a23e:	bf00      	nop
 800a240:	080125e3 	.word	0x080125e3
 800a244:	08012540 	.word	0x08012540
 800a248:	08012564 	.word	0x08012564

0800a24c <_localeconv_r>:
 800a24c:	4800      	ldr	r0, [pc, #0]	; (800a250 <_localeconv_r+0x4>)
 800a24e:	4770      	bx	lr
 800a250:	20000168 	.word	0x20000168

0800a254 <malloc>:
 800a254:	4b02      	ldr	r3, [pc, #8]	; (800a260 <malloc+0xc>)
 800a256:	4601      	mov	r1, r0
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	f000 bc1d 	b.w	800aa98 <_malloc_r>
 800a25e:	bf00      	nop
 800a260:	20000014 	.word	0x20000014

0800a264 <memchr>:
 800a264:	4603      	mov	r3, r0
 800a266:	b510      	push	{r4, lr}
 800a268:	b2c9      	uxtb	r1, r1
 800a26a:	4402      	add	r2, r0
 800a26c:	4293      	cmp	r3, r2
 800a26e:	4618      	mov	r0, r3
 800a270:	d101      	bne.n	800a276 <memchr+0x12>
 800a272:	2000      	movs	r0, #0
 800a274:	e003      	b.n	800a27e <memchr+0x1a>
 800a276:	7804      	ldrb	r4, [r0, #0]
 800a278:	3301      	adds	r3, #1
 800a27a:	428c      	cmp	r4, r1
 800a27c:	d1f6      	bne.n	800a26c <memchr+0x8>
 800a27e:	bd10      	pop	{r4, pc}

0800a280 <memcpy>:
 800a280:	440a      	add	r2, r1
 800a282:	4291      	cmp	r1, r2
 800a284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a288:	d100      	bne.n	800a28c <memcpy+0xc>
 800a28a:	4770      	bx	lr
 800a28c:	b510      	push	{r4, lr}
 800a28e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a292:	4291      	cmp	r1, r2
 800a294:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a298:	d1f9      	bne.n	800a28e <memcpy+0xe>
 800a29a:	bd10      	pop	{r4, pc}

0800a29c <_Balloc>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	460d      	mov	r5, r1
 800a2a4:	b976      	cbnz	r6, 800a2c4 <_Balloc+0x28>
 800a2a6:	2010      	movs	r0, #16
 800a2a8:	f7ff ffd4 	bl	800a254 <malloc>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	6260      	str	r0, [r4, #36]	; 0x24
 800a2b0:	b920      	cbnz	r0, 800a2bc <_Balloc+0x20>
 800a2b2:	2166      	movs	r1, #102	; 0x66
 800a2b4:	4b17      	ldr	r3, [pc, #92]	; (800a314 <_Balloc+0x78>)
 800a2b6:	4818      	ldr	r0, [pc, #96]	; (800a318 <_Balloc+0x7c>)
 800a2b8:	f000 fdce 	bl	800ae58 <__assert_func>
 800a2bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2c0:	6006      	str	r6, [r0, #0]
 800a2c2:	60c6      	str	r6, [r0, #12]
 800a2c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2c6:	68f3      	ldr	r3, [r6, #12]
 800a2c8:	b183      	cbz	r3, 800a2ec <_Balloc+0x50>
 800a2ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2d2:	b9b8      	cbnz	r0, 800a304 <_Balloc+0x68>
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	fa01 f605 	lsl.w	r6, r1, r5
 800a2da:	1d72      	adds	r2, r6, #5
 800a2dc:	4620      	mov	r0, r4
 800a2de:	0092      	lsls	r2, r2, #2
 800a2e0:	f000 fb5e 	bl	800a9a0 <_calloc_r>
 800a2e4:	b160      	cbz	r0, 800a300 <_Balloc+0x64>
 800a2e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2ea:	e00e      	b.n	800a30a <_Balloc+0x6e>
 800a2ec:	2221      	movs	r2, #33	; 0x21
 800a2ee:	2104      	movs	r1, #4
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f000 fb55 	bl	800a9a0 <_calloc_r>
 800a2f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2f8:	60f0      	str	r0, [r6, #12]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e4      	bne.n	800a2ca <_Balloc+0x2e>
 800a300:	2000      	movs	r0, #0
 800a302:	bd70      	pop	{r4, r5, r6, pc}
 800a304:	6802      	ldr	r2, [r0, #0]
 800a306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a30a:	2300      	movs	r3, #0
 800a30c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a310:	e7f7      	b.n	800a302 <_Balloc+0x66>
 800a312:	bf00      	nop
 800a314:	08012571 	.word	0x08012571
 800a318:	080125f4 	.word	0x080125f4

0800a31c <_Bfree>:
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a320:	4605      	mov	r5, r0
 800a322:	460c      	mov	r4, r1
 800a324:	b976      	cbnz	r6, 800a344 <_Bfree+0x28>
 800a326:	2010      	movs	r0, #16
 800a328:	f7ff ff94 	bl	800a254 <malloc>
 800a32c:	4602      	mov	r2, r0
 800a32e:	6268      	str	r0, [r5, #36]	; 0x24
 800a330:	b920      	cbnz	r0, 800a33c <_Bfree+0x20>
 800a332:	218a      	movs	r1, #138	; 0x8a
 800a334:	4b08      	ldr	r3, [pc, #32]	; (800a358 <_Bfree+0x3c>)
 800a336:	4809      	ldr	r0, [pc, #36]	; (800a35c <_Bfree+0x40>)
 800a338:	f000 fd8e 	bl	800ae58 <__assert_func>
 800a33c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a340:	6006      	str	r6, [r0, #0]
 800a342:	60c6      	str	r6, [r0, #12]
 800a344:	b13c      	cbz	r4, 800a356 <_Bfree+0x3a>
 800a346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a348:	6862      	ldr	r2, [r4, #4]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a350:	6021      	str	r1, [r4, #0]
 800a352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a356:	bd70      	pop	{r4, r5, r6, pc}
 800a358:	08012571 	.word	0x08012571
 800a35c:	080125f4 	.word	0x080125f4

0800a360 <__multadd>:
 800a360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a364:	4607      	mov	r7, r0
 800a366:	460c      	mov	r4, r1
 800a368:	461e      	mov	r6, r3
 800a36a:	2000      	movs	r0, #0
 800a36c:	690d      	ldr	r5, [r1, #16]
 800a36e:	f101 0c14 	add.w	ip, r1, #20
 800a372:	f8dc 3000 	ldr.w	r3, [ip]
 800a376:	3001      	adds	r0, #1
 800a378:	b299      	uxth	r1, r3
 800a37a:	fb02 6101 	mla	r1, r2, r1, r6
 800a37e:	0c1e      	lsrs	r6, r3, #16
 800a380:	0c0b      	lsrs	r3, r1, #16
 800a382:	fb02 3306 	mla	r3, r2, r6, r3
 800a386:	b289      	uxth	r1, r1
 800a388:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a38c:	4285      	cmp	r5, r0
 800a38e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a392:	f84c 1b04 	str.w	r1, [ip], #4
 800a396:	dcec      	bgt.n	800a372 <__multadd+0x12>
 800a398:	b30e      	cbz	r6, 800a3de <__multadd+0x7e>
 800a39a:	68a3      	ldr	r3, [r4, #8]
 800a39c:	42ab      	cmp	r3, r5
 800a39e:	dc19      	bgt.n	800a3d4 <__multadd+0x74>
 800a3a0:	6861      	ldr	r1, [r4, #4]
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	3101      	adds	r1, #1
 800a3a6:	f7ff ff79 	bl	800a29c <_Balloc>
 800a3aa:	4680      	mov	r8, r0
 800a3ac:	b928      	cbnz	r0, 800a3ba <__multadd+0x5a>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	21b5      	movs	r1, #181	; 0xb5
 800a3b2:	4b0c      	ldr	r3, [pc, #48]	; (800a3e4 <__multadd+0x84>)
 800a3b4:	480c      	ldr	r0, [pc, #48]	; (800a3e8 <__multadd+0x88>)
 800a3b6:	f000 fd4f 	bl	800ae58 <__assert_func>
 800a3ba:	6922      	ldr	r2, [r4, #16]
 800a3bc:	f104 010c 	add.w	r1, r4, #12
 800a3c0:	3202      	adds	r2, #2
 800a3c2:	0092      	lsls	r2, r2, #2
 800a3c4:	300c      	adds	r0, #12
 800a3c6:	f7ff ff5b 	bl	800a280 <memcpy>
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	4638      	mov	r0, r7
 800a3ce:	f7ff ffa5 	bl	800a31c <_Bfree>
 800a3d2:	4644      	mov	r4, r8
 800a3d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3d8:	3501      	adds	r5, #1
 800a3da:	615e      	str	r6, [r3, #20]
 800a3dc:	6125      	str	r5, [r4, #16]
 800a3de:	4620      	mov	r0, r4
 800a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e4:	080125e3 	.word	0x080125e3
 800a3e8:	080125f4 	.word	0x080125f4

0800a3ec <__hi0bits>:
 800a3ec:	0c02      	lsrs	r2, r0, #16
 800a3ee:	0412      	lsls	r2, r2, #16
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	b9ca      	cbnz	r2, 800a428 <__hi0bits+0x3c>
 800a3f4:	0403      	lsls	r3, r0, #16
 800a3f6:	2010      	movs	r0, #16
 800a3f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a3fc:	bf04      	itt	eq
 800a3fe:	021b      	lsleq	r3, r3, #8
 800a400:	3008      	addeq	r0, #8
 800a402:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a406:	bf04      	itt	eq
 800a408:	011b      	lsleq	r3, r3, #4
 800a40a:	3004      	addeq	r0, #4
 800a40c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a410:	bf04      	itt	eq
 800a412:	009b      	lsleq	r3, r3, #2
 800a414:	3002      	addeq	r0, #2
 800a416:	2b00      	cmp	r3, #0
 800a418:	db05      	blt.n	800a426 <__hi0bits+0x3a>
 800a41a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a41e:	f100 0001 	add.w	r0, r0, #1
 800a422:	bf08      	it	eq
 800a424:	2020      	moveq	r0, #32
 800a426:	4770      	bx	lr
 800a428:	2000      	movs	r0, #0
 800a42a:	e7e5      	b.n	800a3f8 <__hi0bits+0xc>

0800a42c <__lo0bits>:
 800a42c:	6803      	ldr	r3, [r0, #0]
 800a42e:	4602      	mov	r2, r0
 800a430:	f013 0007 	ands.w	r0, r3, #7
 800a434:	d00b      	beq.n	800a44e <__lo0bits+0x22>
 800a436:	07d9      	lsls	r1, r3, #31
 800a438:	d421      	bmi.n	800a47e <__lo0bits+0x52>
 800a43a:	0798      	lsls	r0, r3, #30
 800a43c:	bf49      	itett	mi
 800a43e:	085b      	lsrmi	r3, r3, #1
 800a440:	089b      	lsrpl	r3, r3, #2
 800a442:	2001      	movmi	r0, #1
 800a444:	6013      	strmi	r3, [r2, #0]
 800a446:	bf5c      	itt	pl
 800a448:	2002      	movpl	r0, #2
 800a44a:	6013      	strpl	r3, [r2, #0]
 800a44c:	4770      	bx	lr
 800a44e:	b299      	uxth	r1, r3
 800a450:	b909      	cbnz	r1, 800a456 <__lo0bits+0x2a>
 800a452:	2010      	movs	r0, #16
 800a454:	0c1b      	lsrs	r3, r3, #16
 800a456:	b2d9      	uxtb	r1, r3
 800a458:	b909      	cbnz	r1, 800a45e <__lo0bits+0x32>
 800a45a:	3008      	adds	r0, #8
 800a45c:	0a1b      	lsrs	r3, r3, #8
 800a45e:	0719      	lsls	r1, r3, #28
 800a460:	bf04      	itt	eq
 800a462:	091b      	lsreq	r3, r3, #4
 800a464:	3004      	addeq	r0, #4
 800a466:	0799      	lsls	r1, r3, #30
 800a468:	bf04      	itt	eq
 800a46a:	089b      	lsreq	r3, r3, #2
 800a46c:	3002      	addeq	r0, #2
 800a46e:	07d9      	lsls	r1, r3, #31
 800a470:	d403      	bmi.n	800a47a <__lo0bits+0x4e>
 800a472:	085b      	lsrs	r3, r3, #1
 800a474:	f100 0001 	add.w	r0, r0, #1
 800a478:	d003      	beq.n	800a482 <__lo0bits+0x56>
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	4770      	bx	lr
 800a47e:	2000      	movs	r0, #0
 800a480:	4770      	bx	lr
 800a482:	2020      	movs	r0, #32
 800a484:	4770      	bx	lr
	...

0800a488 <__i2b>:
 800a488:	b510      	push	{r4, lr}
 800a48a:	460c      	mov	r4, r1
 800a48c:	2101      	movs	r1, #1
 800a48e:	f7ff ff05 	bl	800a29c <_Balloc>
 800a492:	4602      	mov	r2, r0
 800a494:	b928      	cbnz	r0, 800a4a2 <__i2b+0x1a>
 800a496:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a49a:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <__i2b+0x24>)
 800a49c:	4804      	ldr	r0, [pc, #16]	; (800a4b0 <__i2b+0x28>)
 800a49e:	f000 fcdb 	bl	800ae58 <__assert_func>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	6144      	str	r4, [r0, #20]
 800a4a6:	6103      	str	r3, [r0, #16]
 800a4a8:	bd10      	pop	{r4, pc}
 800a4aa:	bf00      	nop
 800a4ac:	080125e3 	.word	0x080125e3
 800a4b0:	080125f4 	.word	0x080125f4

0800a4b4 <__multiply>:
 800a4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b8:	4691      	mov	r9, r2
 800a4ba:	690a      	ldr	r2, [r1, #16]
 800a4bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4c0:	460c      	mov	r4, r1
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	bfbe      	ittt	lt
 800a4c6:	460b      	movlt	r3, r1
 800a4c8:	464c      	movlt	r4, r9
 800a4ca:	4699      	movlt	r9, r3
 800a4cc:	6927      	ldr	r7, [r4, #16]
 800a4ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4d2:	68a3      	ldr	r3, [r4, #8]
 800a4d4:	6861      	ldr	r1, [r4, #4]
 800a4d6:	eb07 060a 	add.w	r6, r7, sl
 800a4da:	42b3      	cmp	r3, r6
 800a4dc:	b085      	sub	sp, #20
 800a4de:	bfb8      	it	lt
 800a4e0:	3101      	addlt	r1, #1
 800a4e2:	f7ff fedb 	bl	800a29c <_Balloc>
 800a4e6:	b930      	cbnz	r0, 800a4f6 <__multiply+0x42>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	f240 115d 	movw	r1, #349	; 0x15d
 800a4ee:	4b43      	ldr	r3, [pc, #268]	; (800a5fc <__multiply+0x148>)
 800a4f0:	4843      	ldr	r0, [pc, #268]	; (800a600 <__multiply+0x14c>)
 800a4f2:	f000 fcb1 	bl	800ae58 <__assert_func>
 800a4f6:	f100 0514 	add.w	r5, r0, #20
 800a4fa:	462b      	mov	r3, r5
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a502:	4543      	cmp	r3, r8
 800a504:	d321      	bcc.n	800a54a <__multiply+0x96>
 800a506:	f104 0314 	add.w	r3, r4, #20
 800a50a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a50e:	f109 0314 	add.w	r3, r9, #20
 800a512:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a516:	9202      	str	r2, [sp, #8]
 800a518:	1b3a      	subs	r2, r7, r4
 800a51a:	3a15      	subs	r2, #21
 800a51c:	f022 0203 	bic.w	r2, r2, #3
 800a520:	3204      	adds	r2, #4
 800a522:	f104 0115 	add.w	r1, r4, #21
 800a526:	428f      	cmp	r7, r1
 800a528:	bf38      	it	cc
 800a52a:	2204      	movcc	r2, #4
 800a52c:	9201      	str	r2, [sp, #4]
 800a52e:	9a02      	ldr	r2, [sp, #8]
 800a530:	9303      	str	r3, [sp, #12]
 800a532:	429a      	cmp	r2, r3
 800a534:	d80c      	bhi.n	800a550 <__multiply+0x9c>
 800a536:	2e00      	cmp	r6, #0
 800a538:	dd03      	ble.n	800a542 <__multiply+0x8e>
 800a53a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d059      	beq.n	800a5f6 <__multiply+0x142>
 800a542:	6106      	str	r6, [r0, #16]
 800a544:	b005      	add	sp, #20
 800a546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54a:	f843 2b04 	str.w	r2, [r3], #4
 800a54e:	e7d8      	b.n	800a502 <__multiply+0x4e>
 800a550:	f8b3 a000 	ldrh.w	sl, [r3]
 800a554:	f1ba 0f00 	cmp.w	sl, #0
 800a558:	d023      	beq.n	800a5a2 <__multiply+0xee>
 800a55a:	46a9      	mov	r9, r5
 800a55c:	f04f 0c00 	mov.w	ip, #0
 800a560:	f104 0e14 	add.w	lr, r4, #20
 800a564:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a568:	f8d9 1000 	ldr.w	r1, [r9]
 800a56c:	fa1f fb82 	uxth.w	fp, r2
 800a570:	b289      	uxth	r1, r1
 800a572:	fb0a 110b 	mla	r1, sl, fp, r1
 800a576:	4461      	add	r1, ip
 800a578:	f8d9 c000 	ldr.w	ip, [r9]
 800a57c:	0c12      	lsrs	r2, r2, #16
 800a57e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a582:	fb0a c202 	mla	r2, sl, r2, ip
 800a586:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a58a:	b289      	uxth	r1, r1
 800a58c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a590:	4577      	cmp	r7, lr
 800a592:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a596:	f849 1b04 	str.w	r1, [r9], #4
 800a59a:	d8e3      	bhi.n	800a564 <__multiply+0xb0>
 800a59c:	9a01      	ldr	r2, [sp, #4]
 800a59e:	f845 c002 	str.w	ip, [r5, r2]
 800a5a2:	9a03      	ldr	r2, [sp, #12]
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5aa:	f1b9 0f00 	cmp.w	r9, #0
 800a5ae:	d020      	beq.n	800a5f2 <__multiply+0x13e>
 800a5b0:	46ae      	mov	lr, r5
 800a5b2:	f04f 0a00 	mov.w	sl, #0
 800a5b6:	6829      	ldr	r1, [r5, #0]
 800a5b8:	f104 0c14 	add.w	ip, r4, #20
 800a5bc:	f8bc b000 	ldrh.w	fp, [ip]
 800a5c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a5c4:	b289      	uxth	r1, r1
 800a5c6:	fb09 220b 	mla	r2, r9, fp, r2
 800a5ca:	4492      	add	sl, r2
 800a5cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a5d0:	f84e 1b04 	str.w	r1, [lr], #4
 800a5d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a5d8:	f8be 1000 	ldrh.w	r1, [lr]
 800a5dc:	0c12      	lsrs	r2, r2, #16
 800a5de:	fb09 1102 	mla	r1, r9, r2, r1
 800a5e2:	4567      	cmp	r7, ip
 800a5e4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a5e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5ec:	d8e6      	bhi.n	800a5bc <__multiply+0x108>
 800a5ee:	9a01      	ldr	r2, [sp, #4]
 800a5f0:	50a9      	str	r1, [r5, r2]
 800a5f2:	3504      	adds	r5, #4
 800a5f4:	e79b      	b.n	800a52e <__multiply+0x7a>
 800a5f6:	3e01      	subs	r6, #1
 800a5f8:	e79d      	b.n	800a536 <__multiply+0x82>
 800a5fa:	bf00      	nop
 800a5fc:	080125e3 	.word	0x080125e3
 800a600:	080125f4 	.word	0x080125f4

0800a604 <__pow5mult>:
 800a604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a608:	4615      	mov	r5, r2
 800a60a:	f012 0203 	ands.w	r2, r2, #3
 800a60e:	4606      	mov	r6, r0
 800a610:	460f      	mov	r7, r1
 800a612:	d007      	beq.n	800a624 <__pow5mult+0x20>
 800a614:	4c25      	ldr	r4, [pc, #148]	; (800a6ac <__pow5mult+0xa8>)
 800a616:	3a01      	subs	r2, #1
 800a618:	2300      	movs	r3, #0
 800a61a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a61e:	f7ff fe9f 	bl	800a360 <__multadd>
 800a622:	4607      	mov	r7, r0
 800a624:	10ad      	asrs	r5, r5, #2
 800a626:	d03d      	beq.n	800a6a4 <__pow5mult+0xa0>
 800a628:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a62a:	b97c      	cbnz	r4, 800a64c <__pow5mult+0x48>
 800a62c:	2010      	movs	r0, #16
 800a62e:	f7ff fe11 	bl	800a254 <malloc>
 800a632:	4602      	mov	r2, r0
 800a634:	6270      	str	r0, [r6, #36]	; 0x24
 800a636:	b928      	cbnz	r0, 800a644 <__pow5mult+0x40>
 800a638:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a63c:	4b1c      	ldr	r3, [pc, #112]	; (800a6b0 <__pow5mult+0xac>)
 800a63e:	481d      	ldr	r0, [pc, #116]	; (800a6b4 <__pow5mult+0xb0>)
 800a640:	f000 fc0a 	bl	800ae58 <__assert_func>
 800a644:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a648:	6004      	str	r4, [r0, #0]
 800a64a:	60c4      	str	r4, [r0, #12]
 800a64c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a650:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a654:	b94c      	cbnz	r4, 800a66a <__pow5mult+0x66>
 800a656:	f240 2171 	movw	r1, #625	; 0x271
 800a65a:	4630      	mov	r0, r6
 800a65c:	f7ff ff14 	bl	800a488 <__i2b>
 800a660:	2300      	movs	r3, #0
 800a662:	4604      	mov	r4, r0
 800a664:	f8c8 0008 	str.w	r0, [r8, #8]
 800a668:	6003      	str	r3, [r0, #0]
 800a66a:	f04f 0900 	mov.w	r9, #0
 800a66e:	07eb      	lsls	r3, r5, #31
 800a670:	d50a      	bpl.n	800a688 <__pow5mult+0x84>
 800a672:	4639      	mov	r1, r7
 800a674:	4622      	mov	r2, r4
 800a676:	4630      	mov	r0, r6
 800a678:	f7ff ff1c 	bl	800a4b4 <__multiply>
 800a67c:	4680      	mov	r8, r0
 800a67e:	4639      	mov	r1, r7
 800a680:	4630      	mov	r0, r6
 800a682:	f7ff fe4b 	bl	800a31c <_Bfree>
 800a686:	4647      	mov	r7, r8
 800a688:	106d      	asrs	r5, r5, #1
 800a68a:	d00b      	beq.n	800a6a4 <__pow5mult+0xa0>
 800a68c:	6820      	ldr	r0, [r4, #0]
 800a68e:	b938      	cbnz	r0, 800a6a0 <__pow5mult+0x9c>
 800a690:	4622      	mov	r2, r4
 800a692:	4621      	mov	r1, r4
 800a694:	4630      	mov	r0, r6
 800a696:	f7ff ff0d 	bl	800a4b4 <__multiply>
 800a69a:	6020      	str	r0, [r4, #0]
 800a69c:	f8c0 9000 	str.w	r9, [r0]
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	e7e4      	b.n	800a66e <__pow5mult+0x6a>
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6aa:	bf00      	nop
 800a6ac:	08012740 	.word	0x08012740
 800a6b0:	08012571 	.word	0x08012571
 800a6b4:	080125f4 	.word	0x080125f4

0800a6b8 <__lshift>:
 800a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	460c      	mov	r4, r1
 800a6be:	4607      	mov	r7, r0
 800a6c0:	4691      	mov	r9, r2
 800a6c2:	6923      	ldr	r3, [r4, #16]
 800a6c4:	6849      	ldr	r1, [r1, #4]
 800a6c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6ca:	68a3      	ldr	r3, [r4, #8]
 800a6cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6d0:	f108 0601 	add.w	r6, r8, #1
 800a6d4:	42b3      	cmp	r3, r6
 800a6d6:	db0b      	blt.n	800a6f0 <__lshift+0x38>
 800a6d8:	4638      	mov	r0, r7
 800a6da:	f7ff fddf 	bl	800a29c <_Balloc>
 800a6de:	4605      	mov	r5, r0
 800a6e0:	b948      	cbnz	r0, 800a6f6 <__lshift+0x3e>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a6e8:	4b29      	ldr	r3, [pc, #164]	; (800a790 <__lshift+0xd8>)
 800a6ea:	482a      	ldr	r0, [pc, #168]	; (800a794 <__lshift+0xdc>)
 800a6ec:	f000 fbb4 	bl	800ae58 <__assert_func>
 800a6f0:	3101      	adds	r1, #1
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	e7ee      	b.n	800a6d4 <__lshift+0x1c>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f100 0114 	add.w	r1, r0, #20
 800a6fc:	f100 0210 	add.w	r2, r0, #16
 800a700:	4618      	mov	r0, r3
 800a702:	4553      	cmp	r3, sl
 800a704:	db37      	blt.n	800a776 <__lshift+0xbe>
 800a706:	6920      	ldr	r0, [r4, #16]
 800a708:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a70c:	f104 0314 	add.w	r3, r4, #20
 800a710:	f019 091f 	ands.w	r9, r9, #31
 800a714:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a718:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a71c:	d02f      	beq.n	800a77e <__lshift+0xc6>
 800a71e:	468a      	mov	sl, r1
 800a720:	f04f 0c00 	mov.w	ip, #0
 800a724:	f1c9 0e20 	rsb	lr, r9, #32
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	fa02 f209 	lsl.w	r2, r2, r9
 800a72e:	ea42 020c 	orr.w	r2, r2, ip
 800a732:	f84a 2b04 	str.w	r2, [sl], #4
 800a736:	f853 2b04 	ldr.w	r2, [r3], #4
 800a73a:	4298      	cmp	r0, r3
 800a73c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a740:	d8f2      	bhi.n	800a728 <__lshift+0x70>
 800a742:	1b03      	subs	r3, r0, r4
 800a744:	3b15      	subs	r3, #21
 800a746:	f023 0303 	bic.w	r3, r3, #3
 800a74a:	3304      	adds	r3, #4
 800a74c:	f104 0215 	add.w	r2, r4, #21
 800a750:	4290      	cmp	r0, r2
 800a752:	bf38      	it	cc
 800a754:	2304      	movcc	r3, #4
 800a756:	f841 c003 	str.w	ip, [r1, r3]
 800a75a:	f1bc 0f00 	cmp.w	ip, #0
 800a75e:	d001      	beq.n	800a764 <__lshift+0xac>
 800a760:	f108 0602 	add.w	r6, r8, #2
 800a764:	3e01      	subs	r6, #1
 800a766:	4638      	mov	r0, r7
 800a768:	4621      	mov	r1, r4
 800a76a:	612e      	str	r6, [r5, #16]
 800a76c:	f7ff fdd6 	bl	800a31c <_Bfree>
 800a770:	4628      	mov	r0, r5
 800a772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a776:	f842 0f04 	str.w	r0, [r2, #4]!
 800a77a:	3301      	adds	r3, #1
 800a77c:	e7c1      	b.n	800a702 <__lshift+0x4a>
 800a77e:	3904      	subs	r1, #4
 800a780:	f853 2b04 	ldr.w	r2, [r3], #4
 800a784:	4298      	cmp	r0, r3
 800a786:	f841 2f04 	str.w	r2, [r1, #4]!
 800a78a:	d8f9      	bhi.n	800a780 <__lshift+0xc8>
 800a78c:	e7ea      	b.n	800a764 <__lshift+0xac>
 800a78e:	bf00      	nop
 800a790:	080125e3 	.word	0x080125e3
 800a794:	080125f4 	.word	0x080125f4

0800a798 <__mcmp>:
 800a798:	4603      	mov	r3, r0
 800a79a:	690a      	ldr	r2, [r1, #16]
 800a79c:	6900      	ldr	r0, [r0, #16]
 800a79e:	b530      	push	{r4, r5, lr}
 800a7a0:	1a80      	subs	r0, r0, r2
 800a7a2:	d10d      	bne.n	800a7c0 <__mcmp+0x28>
 800a7a4:	3314      	adds	r3, #20
 800a7a6:	3114      	adds	r1, #20
 800a7a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a7ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a7b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a7b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7b8:	4295      	cmp	r5, r2
 800a7ba:	d002      	beq.n	800a7c2 <__mcmp+0x2a>
 800a7bc:	d304      	bcc.n	800a7c8 <__mcmp+0x30>
 800a7be:	2001      	movs	r0, #1
 800a7c0:	bd30      	pop	{r4, r5, pc}
 800a7c2:	42a3      	cmp	r3, r4
 800a7c4:	d3f4      	bcc.n	800a7b0 <__mcmp+0x18>
 800a7c6:	e7fb      	b.n	800a7c0 <__mcmp+0x28>
 800a7c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7cc:	e7f8      	b.n	800a7c0 <__mcmp+0x28>
	...

0800a7d0 <__mdiff>:
 800a7d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d4:	460d      	mov	r5, r1
 800a7d6:	4607      	mov	r7, r0
 800a7d8:	4611      	mov	r1, r2
 800a7da:	4628      	mov	r0, r5
 800a7dc:	4614      	mov	r4, r2
 800a7de:	f7ff ffdb 	bl	800a798 <__mcmp>
 800a7e2:	1e06      	subs	r6, r0, #0
 800a7e4:	d111      	bne.n	800a80a <__mdiff+0x3a>
 800a7e6:	4631      	mov	r1, r6
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	f7ff fd57 	bl	800a29c <_Balloc>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	b928      	cbnz	r0, 800a7fe <__mdiff+0x2e>
 800a7f2:	f240 2132 	movw	r1, #562	; 0x232
 800a7f6:	4b3a      	ldr	r3, [pc, #232]	; (800a8e0 <__mdiff+0x110>)
 800a7f8:	483a      	ldr	r0, [pc, #232]	; (800a8e4 <__mdiff+0x114>)
 800a7fa:	f000 fb2d 	bl	800ae58 <__assert_func>
 800a7fe:	2301      	movs	r3, #1
 800a800:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a804:	4610      	mov	r0, r2
 800a806:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a80a:	bfa4      	itt	ge
 800a80c:	4623      	movge	r3, r4
 800a80e:	462c      	movge	r4, r5
 800a810:	4638      	mov	r0, r7
 800a812:	6861      	ldr	r1, [r4, #4]
 800a814:	bfa6      	itte	ge
 800a816:	461d      	movge	r5, r3
 800a818:	2600      	movge	r6, #0
 800a81a:	2601      	movlt	r6, #1
 800a81c:	f7ff fd3e 	bl	800a29c <_Balloc>
 800a820:	4602      	mov	r2, r0
 800a822:	b918      	cbnz	r0, 800a82c <__mdiff+0x5c>
 800a824:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a828:	4b2d      	ldr	r3, [pc, #180]	; (800a8e0 <__mdiff+0x110>)
 800a82a:	e7e5      	b.n	800a7f8 <__mdiff+0x28>
 800a82c:	f102 0814 	add.w	r8, r2, #20
 800a830:	46c2      	mov	sl, r8
 800a832:	f04f 0c00 	mov.w	ip, #0
 800a836:	6927      	ldr	r7, [r4, #16]
 800a838:	60c6      	str	r6, [r0, #12]
 800a83a:	692e      	ldr	r6, [r5, #16]
 800a83c:	f104 0014 	add.w	r0, r4, #20
 800a840:	f105 0914 	add.w	r9, r5, #20
 800a844:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a848:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a84c:	3410      	adds	r4, #16
 800a84e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a852:	f859 3b04 	ldr.w	r3, [r9], #4
 800a856:	fa1f f18b 	uxth.w	r1, fp
 800a85a:	448c      	add	ip, r1
 800a85c:	b299      	uxth	r1, r3
 800a85e:	0c1b      	lsrs	r3, r3, #16
 800a860:	ebac 0101 	sub.w	r1, ip, r1
 800a864:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a868:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a86c:	b289      	uxth	r1, r1
 800a86e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a872:	454e      	cmp	r6, r9
 800a874:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a878:	f84a 3b04 	str.w	r3, [sl], #4
 800a87c:	d8e7      	bhi.n	800a84e <__mdiff+0x7e>
 800a87e:	1b73      	subs	r3, r6, r5
 800a880:	3b15      	subs	r3, #21
 800a882:	f023 0303 	bic.w	r3, r3, #3
 800a886:	3515      	adds	r5, #21
 800a888:	3304      	adds	r3, #4
 800a88a:	42ae      	cmp	r6, r5
 800a88c:	bf38      	it	cc
 800a88e:	2304      	movcc	r3, #4
 800a890:	4418      	add	r0, r3
 800a892:	4443      	add	r3, r8
 800a894:	461e      	mov	r6, r3
 800a896:	4605      	mov	r5, r0
 800a898:	4575      	cmp	r5, lr
 800a89a:	d30e      	bcc.n	800a8ba <__mdiff+0xea>
 800a89c:	f10e 0103 	add.w	r1, lr, #3
 800a8a0:	1a09      	subs	r1, r1, r0
 800a8a2:	f021 0103 	bic.w	r1, r1, #3
 800a8a6:	3803      	subs	r0, #3
 800a8a8:	4586      	cmp	lr, r0
 800a8aa:	bf38      	it	cc
 800a8ac:	2100      	movcc	r1, #0
 800a8ae:	4419      	add	r1, r3
 800a8b0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a8b4:	b18b      	cbz	r3, 800a8da <__mdiff+0x10a>
 800a8b6:	6117      	str	r7, [r2, #16]
 800a8b8:	e7a4      	b.n	800a804 <__mdiff+0x34>
 800a8ba:	f855 8b04 	ldr.w	r8, [r5], #4
 800a8be:	fa1f f188 	uxth.w	r1, r8
 800a8c2:	4461      	add	r1, ip
 800a8c4:	140c      	asrs	r4, r1, #16
 800a8c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a8ca:	b289      	uxth	r1, r1
 800a8cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a8d0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a8d4:	f846 1b04 	str.w	r1, [r6], #4
 800a8d8:	e7de      	b.n	800a898 <__mdiff+0xc8>
 800a8da:	3f01      	subs	r7, #1
 800a8dc:	e7e8      	b.n	800a8b0 <__mdiff+0xe0>
 800a8de:	bf00      	nop
 800a8e0:	080125e3 	.word	0x080125e3
 800a8e4:	080125f4 	.word	0x080125f4

0800a8e8 <__d2b>:
 800a8e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a8f2:	4690      	mov	r8, r2
 800a8f4:	461d      	mov	r5, r3
 800a8f6:	f7ff fcd1 	bl	800a29c <_Balloc>
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	b930      	cbnz	r0, 800a90c <__d2b+0x24>
 800a8fe:	4602      	mov	r2, r0
 800a900:	f240 310a 	movw	r1, #778	; 0x30a
 800a904:	4b24      	ldr	r3, [pc, #144]	; (800a998 <__d2b+0xb0>)
 800a906:	4825      	ldr	r0, [pc, #148]	; (800a99c <__d2b+0xb4>)
 800a908:	f000 faa6 	bl	800ae58 <__assert_func>
 800a90c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a910:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a914:	bb2d      	cbnz	r5, 800a962 <__d2b+0x7a>
 800a916:	9301      	str	r3, [sp, #4]
 800a918:	f1b8 0300 	subs.w	r3, r8, #0
 800a91c:	d026      	beq.n	800a96c <__d2b+0x84>
 800a91e:	4668      	mov	r0, sp
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	f7ff fd83 	bl	800a42c <__lo0bits>
 800a926:	9900      	ldr	r1, [sp, #0]
 800a928:	b1f0      	cbz	r0, 800a968 <__d2b+0x80>
 800a92a:	9a01      	ldr	r2, [sp, #4]
 800a92c:	f1c0 0320 	rsb	r3, r0, #32
 800a930:	fa02 f303 	lsl.w	r3, r2, r3
 800a934:	430b      	orrs	r3, r1
 800a936:	40c2      	lsrs	r2, r0
 800a938:	6163      	str	r3, [r4, #20]
 800a93a:	9201      	str	r2, [sp, #4]
 800a93c:	9b01      	ldr	r3, [sp, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	bf14      	ite	ne
 800a942:	2102      	movne	r1, #2
 800a944:	2101      	moveq	r1, #1
 800a946:	61a3      	str	r3, [r4, #24]
 800a948:	6121      	str	r1, [r4, #16]
 800a94a:	b1c5      	cbz	r5, 800a97e <__d2b+0x96>
 800a94c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a950:	4405      	add	r5, r0
 800a952:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a956:	603d      	str	r5, [r7, #0]
 800a958:	6030      	str	r0, [r6, #0]
 800a95a:	4620      	mov	r0, r4
 800a95c:	b002      	add	sp, #8
 800a95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a966:	e7d6      	b.n	800a916 <__d2b+0x2e>
 800a968:	6161      	str	r1, [r4, #20]
 800a96a:	e7e7      	b.n	800a93c <__d2b+0x54>
 800a96c:	a801      	add	r0, sp, #4
 800a96e:	f7ff fd5d 	bl	800a42c <__lo0bits>
 800a972:	2101      	movs	r1, #1
 800a974:	9b01      	ldr	r3, [sp, #4]
 800a976:	6121      	str	r1, [r4, #16]
 800a978:	6163      	str	r3, [r4, #20]
 800a97a:	3020      	adds	r0, #32
 800a97c:	e7e5      	b.n	800a94a <__d2b+0x62>
 800a97e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a982:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a986:	6038      	str	r0, [r7, #0]
 800a988:	6918      	ldr	r0, [r3, #16]
 800a98a:	f7ff fd2f 	bl	800a3ec <__hi0bits>
 800a98e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a992:	6031      	str	r1, [r6, #0]
 800a994:	e7e1      	b.n	800a95a <__d2b+0x72>
 800a996:	bf00      	nop
 800a998:	080125e3 	.word	0x080125e3
 800a99c:	080125f4 	.word	0x080125f4

0800a9a0 <_calloc_r>:
 800a9a0:	b570      	push	{r4, r5, r6, lr}
 800a9a2:	fba1 5402 	umull	r5, r4, r1, r2
 800a9a6:	b934      	cbnz	r4, 800a9b6 <_calloc_r+0x16>
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	f000 f875 	bl	800aa98 <_malloc_r>
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	b928      	cbnz	r0, 800a9be <_calloc_r+0x1e>
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	bd70      	pop	{r4, r5, r6, pc}
 800a9b6:	220c      	movs	r2, #12
 800a9b8:	2600      	movs	r6, #0
 800a9ba:	6002      	str	r2, [r0, #0]
 800a9bc:	e7f9      	b.n	800a9b2 <_calloc_r+0x12>
 800a9be:	462a      	mov	r2, r5
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	f7fe f941 	bl	8008c48 <memset>
 800a9c6:	e7f4      	b.n	800a9b2 <_calloc_r+0x12>

0800a9c8 <_free_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	4605      	mov	r5, r0
 800a9cc:	2900      	cmp	r1, #0
 800a9ce:	d040      	beq.n	800aa52 <_free_r+0x8a>
 800a9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d4:	1f0c      	subs	r4, r1, #4
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	bfb8      	it	lt
 800a9da:	18e4      	addlt	r4, r4, r3
 800a9dc:	f000 fa98 	bl	800af10 <__malloc_lock>
 800a9e0:	4a1c      	ldr	r2, [pc, #112]	; (800aa54 <_free_r+0x8c>)
 800a9e2:	6813      	ldr	r3, [r2, #0]
 800a9e4:	b933      	cbnz	r3, 800a9f4 <_free_r+0x2c>
 800a9e6:	6063      	str	r3, [r4, #4]
 800a9e8:	6014      	str	r4, [r2, #0]
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9f0:	f000 ba94 	b.w	800af1c <__malloc_unlock>
 800a9f4:	42a3      	cmp	r3, r4
 800a9f6:	d908      	bls.n	800aa0a <_free_r+0x42>
 800a9f8:	6820      	ldr	r0, [r4, #0]
 800a9fa:	1821      	adds	r1, r4, r0
 800a9fc:	428b      	cmp	r3, r1
 800a9fe:	bf01      	itttt	eq
 800aa00:	6819      	ldreq	r1, [r3, #0]
 800aa02:	685b      	ldreq	r3, [r3, #4]
 800aa04:	1809      	addeq	r1, r1, r0
 800aa06:	6021      	streq	r1, [r4, #0]
 800aa08:	e7ed      	b.n	800a9e6 <_free_r+0x1e>
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	b10b      	cbz	r3, 800aa14 <_free_r+0x4c>
 800aa10:	42a3      	cmp	r3, r4
 800aa12:	d9fa      	bls.n	800aa0a <_free_r+0x42>
 800aa14:	6811      	ldr	r1, [r2, #0]
 800aa16:	1850      	adds	r0, r2, r1
 800aa18:	42a0      	cmp	r0, r4
 800aa1a:	d10b      	bne.n	800aa34 <_free_r+0x6c>
 800aa1c:	6820      	ldr	r0, [r4, #0]
 800aa1e:	4401      	add	r1, r0
 800aa20:	1850      	adds	r0, r2, r1
 800aa22:	4283      	cmp	r3, r0
 800aa24:	6011      	str	r1, [r2, #0]
 800aa26:	d1e0      	bne.n	800a9ea <_free_r+0x22>
 800aa28:	6818      	ldr	r0, [r3, #0]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	4401      	add	r1, r0
 800aa2e:	6011      	str	r1, [r2, #0]
 800aa30:	6053      	str	r3, [r2, #4]
 800aa32:	e7da      	b.n	800a9ea <_free_r+0x22>
 800aa34:	d902      	bls.n	800aa3c <_free_r+0x74>
 800aa36:	230c      	movs	r3, #12
 800aa38:	602b      	str	r3, [r5, #0]
 800aa3a:	e7d6      	b.n	800a9ea <_free_r+0x22>
 800aa3c:	6820      	ldr	r0, [r4, #0]
 800aa3e:	1821      	adds	r1, r4, r0
 800aa40:	428b      	cmp	r3, r1
 800aa42:	bf01      	itttt	eq
 800aa44:	6819      	ldreq	r1, [r3, #0]
 800aa46:	685b      	ldreq	r3, [r3, #4]
 800aa48:	1809      	addeq	r1, r1, r0
 800aa4a:	6021      	streq	r1, [r4, #0]
 800aa4c:	6063      	str	r3, [r4, #4]
 800aa4e:	6054      	str	r4, [r2, #4]
 800aa50:	e7cb      	b.n	800a9ea <_free_r+0x22>
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	2000173c 	.word	0x2000173c

0800aa58 <sbrk_aligned>:
 800aa58:	b570      	push	{r4, r5, r6, lr}
 800aa5a:	4e0e      	ldr	r6, [pc, #56]	; (800aa94 <sbrk_aligned+0x3c>)
 800aa5c:	460c      	mov	r4, r1
 800aa5e:	6831      	ldr	r1, [r6, #0]
 800aa60:	4605      	mov	r5, r0
 800aa62:	b911      	cbnz	r1, 800aa6a <sbrk_aligned+0x12>
 800aa64:	f000 f9e8 	bl	800ae38 <_sbrk_r>
 800aa68:	6030      	str	r0, [r6, #0]
 800aa6a:	4621      	mov	r1, r4
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	f000 f9e3 	bl	800ae38 <_sbrk_r>
 800aa72:	1c43      	adds	r3, r0, #1
 800aa74:	d00a      	beq.n	800aa8c <sbrk_aligned+0x34>
 800aa76:	1cc4      	adds	r4, r0, #3
 800aa78:	f024 0403 	bic.w	r4, r4, #3
 800aa7c:	42a0      	cmp	r0, r4
 800aa7e:	d007      	beq.n	800aa90 <sbrk_aligned+0x38>
 800aa80:	1a21      	subs	r1, r4, r0
 800aa82:	4628      	mov	r0, r5
 800aa84:	f000 f9d8 	bl	800ae38 <_sbrk_r>
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d101      	bne.n	800aa90 <sbrk_aligned+0x38>
 800aa8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aa90:	4620      	mov	r0, r4
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	20001740 	.word	0x20001740

0800aa98 <_malloc_r>:
 800aa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9c:	1ccd      	adds	r5, r1, #3
 800aa9e:	f025 0503 	bic.w	r5, r5, #3
 800aaa2:	3508      	adds	r5, #8
 800aaa4:	2d0c      	cmp	r5, #12
 800aaa6:	bf38      	it	cc
 800aaa8:	250c      	movcc	r5, #12
 800aaaa:	2d00      	cmp	r5, #0
 800aaac:	4607      	mov	r7, r0
 800aaae:	db01      	blt.n	800aab4 <_malloc_r+0x1c>
 800aab0:	42a9      	cmp	r1, r5
 800aab2:	d905      	bls.n	800aac0 <_malloc_r+0x28>
 800aab4:	230c      	movs	r3, #12
 800aab6:	2600      	movs	r6, #0
 800aab8:	603b      	str	r3, [r7, #0]
 800aaba:	4630      	mov	r0, r6
 800aabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac0:	4e2e      	ldr	r6, [pc, #184]	; (800ab7c <_malloc_r+0xe4>)
 800aac2:	f000 fa25 	bl	800af10 <__malloc_lock>
 800aac6:	6833      	ldr	r3, [r6, #0]
 800aac8:	461c      	mov	r4, r3
 800aaca:	bb34      	cbnz	r4, 800ab1a <_malloc_r+0x82>
 800aacc:	4629      	mov	r1, r5
 800aace:	4638      	mov	r0, r7
 800aad0:	f7ff ffc2 	bl	800aa58 <sbrk_aligned>
 800aad4:	1c43      	adds	r3, r0, #1
 800aad6:	4604      	mov	r4, r0
 800aad8:	d14d      	bne.n	800ab76 <_malloc_r+0xde>
 800aada:	6834      	ldr	r4, [r6, #0]
 800aadc:	4626      	mov	r6, r4
 800aade:	2e00      	cmp	r6, #0
 800aae0:	d140      	bne.n	800ab64 <_malloc_r+0xcc>
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	4631      	mov	r1, r6
 800aae6:	4638      	mov	r0, r7
 800aae8:	eb04 0803 	add.w	r8, r4, r3
 800aaec:	f000 f9a4 	bl	800ae38 <_sbrk_r>
 800aaf0:	4580      	cmp	r8, r0
 800aaf2:	d13a      	bne.n	800ab6a <_malloc_r+0xd2>
 800aaf4:	6821      	ldr	r1, [r4, #0]
 800aaf6:	3503      	adds	r5, #3
 800aaf8:	1a6d      	subs	r5, r5, r1
 800aafa:	f025 0503 	bic.w	r5, r5, #3
 800aafe:	3508      	adds	r5, #8
 800ab00:	2d0c      	cmp	r5, #12
 800ab02:	bf38      	it	cc
 800ab04:	250c      	movcc	r5, #12
 800ab06:	4638      	mov	r0, r7
 800ab08:	4629      	mov	r1, r5
 800ab0a:	f7ff ffa5 	bl	800aa58 <sbrk_aligned>
 800ab0e:	3001      	adds	r0, #1
 800ab10:	d02b      	beq.n	800ab6a <_malloc_r+0xd2>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	442b      	add	r3, r5
 800ab16:	6023      	str	r3, [r4, #0]
 800ab18:	e00e      	b.n	800ab38 <_malloc_r+0xa0>
 800ab1a:	6822      	ldr	r2, [r4, #0]
 800ab1c:	1b52      	subs	r2, r2, r5
 800ab1e:	d41e      	bmi.n	800ab5e <_malloc_r+0xc6>
 800ab20:	2a0b      	cmp	r2, #11
 800ab22:	d916      	bls.n	800ab52 <_malloc_r+0xba>
 800ab24:	1961      	adds	r1, r4, r5
 800ab26:	42a3      	cmp	r3, r4
 800ab28:	6025      	str	r5, [r4, #0]
 800ab2a:	bf18      	it	ne
 800ab2c:	6059      	strne	r1, [r3, #4]
 800ab2e:	6863      	ldr	r3, [r4, #4]
 800ab30:	bf08      	it	eq
 800ab32:	6031      	streq	r1, [r6, #0]
 800ab34:	5162      	str	r2, [r4, r5]
 800ab36:	604b      	str	r3, [r1, #4]
 800ab38:	4638      	mov	r0, r7
 800ab3a:	f104 060b 	add.w	r6, r4, #11
 800ab3e:	f000 f9ed 	bl	800af1c <__malloc_unlock>
 800ab42:	f026 0607 	bic.w	r6, r6, #7
 800ab46:	1d23      	adds	r3, r4, #4
 800ab48:	1af2      	subs	r2, r6, r3
 800ab4a:	d0b6      	beq.n	800aaba <_malloc_r+0x22>
 800ab4c:	1b9b      	subs	r3, r3, r6
 800ab4e:	50a3      	str	r3, [r4, r2]
 800ab50:	e7b3      	b.n	800aaba <_malloc_r+0x22>
 800ab52:	6862      	ldr	r2, [r4, #4]
 800ab54:	42a3      	cmp	r3, r4
 800ab56:	bf0c      	ite	eq
 800ab58:	6032      	streq	r2, [r6, #0]
 800ab5a:	605a      	strne	r2, [r3, #4]
 800ab5c:	e7ec      	b.n	800ab38 <_malloc_r+0xa0>
 800ab5e:	4623      	mov	r3, r4
 800ab60:	6864      	ldr	r4, [r4, #4]
 800ab62:	e7b2      	b.n	800aaca <_malloc_r+0x32>
 800ab64:	4634      	mov	r4, r6
 800ab66:	6876      	ldr	r6, [r6, #4]
 800ab68:	e7b9      	b.n	800aade <_malloc_r+0x46>
 800ab6a:	230c      	movs	r3, #12
 800ab6c:	4638      	mov	r0, r7
 800ab6e:	603b      	str	r3, [r7, #0]
 800ab70:	f000 f9d4 	bl	800af1c <__malloc_unlock>
 800ab74:	e7a1      	b.n	800aaba <_malloc_r+0x22>
 800ab76:	6025      	str	r5, [r4, #0]
 800ab78:	e7de      	b.n	800ab38 <_malloc_r+0xa0>
 800ab7a:	bf00      	nop
 800ab7c:	2000173c 	.word	0x2000173c

0800ab80 <__ssputs_r>:
 800ab80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab84:	688e      	ldr	r6, [r1, #8]
 800ab86:	4682      	mov	sl, r0
 800ab88:	429e      	cmp	r6, r3
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	4690      	mov	r8, r2
 800ab8e:	461f      	mov	r7, r3
 800ab90:	d838      	bhi.n	800ac04 <__ssputs_r+0x84>
 800ab92:	898a      	ldrh	r2, [r1, #12]
 800ab94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab98:	d032      	beq.n	800ac00 <__ssputs_r+0x80>
 800ab9a:	6825      	ldr	r5, [r4, #0]
 800ab9c:	6909      	ldr	r1, [r1, #16]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	eba5 0901 	sub.w	r9, r5, r1
 800aba4:	6965      	ldr	r5, [r4, #20]
 800aba6:	444b      	add	r3, r9
 800aba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abb0:	106d      	asrs	r5, r5, #1
 800abb2:	429d      	cmp	r5, r3
 800abb4:	bf38      	it	cc
 800abb6:	461d      	movcc	r5, r3
 800abb8:	0553      	lsls	r3, r2, #21
 800abba:	d531      	bpl.n	800ac20 <__ssputs_r+0xa0>
 800abbc:	4629      	mov	r1, r5
 800abbe:	f7ff ff6b 	bl	800aa98 <_malloc_r>
 800abc2:	4606      	mov	r6, r0
 800abc4:	b950      	cbnz	r0, 800abdc <__ssputs_r+0x5c>
 800abc6:	230c      	movs	r3, #12
 800abc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abcc:	f8ca 3000 	str.w	r3, [sl]
 800abd0:	89a3      	ldrh	r3, [r4, #12]
 800abd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abd6:	81a3      	strh	r3, [r4, #12]
 800abd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abdc:	464a      	mov	r2, r9
 800abde:	6921      	ldr	r1, [r4, #16]
 800abe0:	f7ff fb4e 	bl	800a280 <memcpy>
 800abe4:	89a3      	ldrh	r3, [r4, #12]
 800abe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abee:	81a3      	strh	r3, [r4, #12]
 800abf0:	6126      	str	r6, [r4, #16]
 800abf2:	444e      	add	r6, r9
 800abf4:	6026      	str	r6, [r4, #0]
 800abf6:	463e      	mov	r6, r7
 800abf8:	6165      	str	r5, [r4, #20]
 800abfa:	eba5 0509 	sub.w	r5, r5, r9
 800abfe:	60a5      	str	r5, [r4, #8]
 800ac00:	42be      	cmp	r6, r7
 800ac02:	d900      	bls.n	800ac06 <__ssputs_r+0x86>
 800ac04:	463e      	mov	r6, r7
 800ac06:	4632      	mov	r2, r6
 800ac08:	4641      	mov	r1, r8
 800ac0a:	6820      	ldr	r0, [r4, #0]
 800ac0c:	f000 f966 	bl	800aedc <memmove>
 800ac10:	68a3      	ldr	r3, [r4, #8]
 800ac12:	2000      	movs	r0, #0
 800ac14:	1b9b      	subs	r3, r3, r6
 800ac16:	60a3      	str	r3, [r4, #8]
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	4433      	add	r3, r6
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	e7db      	b.n	800abd8 <__ssputs_r+0x58>
 800ac20:	462a      	mov	r2, r5
 800ac22:	f000 f981 	bl	800af28 <_realloc_r>
 800ac26:	4606      	mov	r6, r0
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d1e1      	bne.n	800abf0 <__ssputs_r+0x70>
 800ac2c:	4650      	mov	r0, sl
 800ac2e:	6921      	ldr	r1, [r4, #16]
 800ac30:	f7ff feca 	bl	800a9c8 <_free_r>
 800ac34:	e7c7      	b.n	800abc6 <__ssputs_r+0x46>
	...

0800ac38 <_svfiprintf_r>:
 800ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	4698      	mov	r8, r3
 800ac3e:	898b      	ldrh	r3, [r1, #12]
 800ac40:	4607      	mov	r7, r0
 800ac42:	061b      	lsls	r3, r3, #24
 800ac44:	460d      	mov	r5, r1
 800ac46:	4614      	mov	r4, r2
 800ac48:	b09d      	sub	sp, #116	; 0x74
 800ac4a:	d50e      	bpl.n	800ac6a <_svfiprintf_r+0x32>
 800ac4c:	690b      	ldr	r3, [r1, #16]
 800ac4e:	b963      	cbnz	r3, 800ac6a <_svfiprintf_r+0x32>
 800ac50:	2140      	movs	r1, #64	; 0x40
 800ac52:	f7ff ff21 	bl	800aa98 <_malloc_r>
 800ac56:	6028      	str	r0, [r5, #0]
 800ac58:	6128      	str	r0, [r5, #16]
 800ac5a:	b920      	cbnz	r0, 800ac66 <_svfiprintf_r+0x2e>
 800ac5c:	230c      	movs	r3, #12
 800ac5e:	603b      	str	r3, [r7, #0]
 800ac60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac64:	e0d1      	b.n	800ae0a <_svfiprintf_r+0x1d2>
 800ac66:	2340      	movs	r3, #64	; 0x40
 800ac68:	616b      	str	r3, [r5, #20]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac6e:	2320      	movs	r3, #32
 800ac70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac74:	2330      	movs	r3, #48	; 0x30
 800ac76:	f04f 0901 	mov.w	r9, #1
 800ac7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ae24 <_svfiprintf_r+0x1ec>
 800ac82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac86:	4623      	mov	r3, r4
 800ac88:	469a      	mov	sl, r3
 800ac8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac8e:	b10a      	cbz	r2, 800ac94 <_svfiprintf_r+0x5c>
 800ac90:	2a25      	cmp	r2, #37	; 0x25
 800ac92:	d1f9      	bne.n	800ac88 <_svfiprintf_r+0x50>
 800ac94:	ebba 0b04 	subs.w	fp, sl, r4
 800ac98:	d00b      	beq.n	800acb2 <_svfiprintf_r+0x7a>
 800ac9a:	465b      	mov	r3, fp
 800ac9c:	4622      	mov	r2, r4
 800ac9e:	4629      	mov	r1, r5
 800aca0:	4638      	mov	r0, r7
 800aca2:	f7ff ff6d 	bl	800ab80 <__ssputs_r>
 800aca6:	3001      	adds	r0, #1
 800aca8:	f000 80aa 	beq.w	800ae00 <_svfiprintf_r+0x1c8>
 800acac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acae:	445a      	add	r2, fp
 800acb0:	9209      	str	r2, [sp, #36]	; 0x24
 800acb2:	f89a 3000 	ldrb.w	r3, [sl]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 80a2 	beq.w	800ae00 <_svfiprintf_r+0x1c8>
 800acbc:	2300      	movs	r3, #0
 800acbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acc6:	f10a 0a01 	add.w	sl, sl, #1
 800acca:	9304      	str	r3, [sp, #16]
 800accc:	9307      	str	r3, [sp, #28]
 800acce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acd2:	931a      	str	r3, [sp, #104]	; 0x68
 800acd4:	4654      	mov	r4, sl
 800acd6:	2205      	movs	r2, #5
 800acd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acdc:	4851      	ldr	r0, [pc, #324]	; (800ae24 <_svfiprintf_r+0x1ec>)
 800acde:	f7ff fac1 	bl	800a264 <memchr>
 800ace2:	9a04      	ldr	r2, [sp, #16]
 800ace4:	b9d8      	cbnz	r0, 800ad1e <_svfiprintf_r+0xe6>
 800ace6:	06d0      	lsls	r0, r2, #27
 800ace8:	bf44      	itt	mi
 800acea:	2320      	movmi	r3, #32
 800acec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acf0:	0711      	lsls	r1, r2, #28
 800acf2:	bf44      	itt	mi
 800acf4:	232b      	movmi	r3, #43	; 0x2b
 800acf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acfa:	f89a 3000 	ldrb.w	r3, [sl]
 800acfe:	2b2a      	cmp	r3, #42	; 0x2a
 800ad00:	d015      	beq.n	800ad2e <_svfiprintf_r+0xf6>
 800ad02:	4654      	mov	r4, sl
 800ad04:	2000      	movs	r0, #0
 800ad06:	f04f 0c0a 	mov.w	ip, #10
 800ad0a:	9a07      	ldr	r2, [sp, #28]
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad12:	3b30      	subs	r3, #48	; 0x30
 800ad14:	2b09      	cmp	r3, #9
 800ad16:	d94e      	bls.n	800adb6 <_svfiprintf_r+0x17e>
 800ad18:	b1b0      	cbz	r0, 800ad48 <_svfiprintf_r+0x110>
 800ad1a:	9207      	str	r2, [sp, #28]
 800ad1c:	e014      	b.n	800ad48 <_svfiprintf_r+0x110>
 800ad1e:	eba0 0308 	sub.w	r3, r0, r8
 800ad22:	fa09 f303 	lsl.w	r3, r9, r3
 800ad26:	4313      	orrs	r3, r2
 800ad28:	46a2      	mov	sl, r4
 800ad2a:	9304      	str	r3, [sp, #16]
 800ad2c:	e7d2      	b.n	800acd4 <_svfiprintf_r+0x9c>
 800ad2e:	9b03      	ldr	r3, [sp, #12]
 800ad30:	1d19      	adds	r1, r3, #4
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	9103      	str	r1, [sp, #12]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	bfbb      	ittet	lt
 800ad3a:	425b      	neglt	r3, r3
 800ad3c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad40:	9307      	strge	r3, [sp, #28]
 800ad42:	9307      	strlt	r3, [sp, #28]
 800ad44:	bfb8      	it	lt
 800ad46:	9204      	strlt	r2, [sp, #16]
 800ad48:	7823      	ldrb	r3, [r4, #0]
 800ad4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ad4c:	d10c      	bne.n	800ad68 <_svfiprintf_r+0x130>
 800ad4e:	7863      	ldrb	r3, [r4, #1]
 800ad50:	2b2a      	cmp	r3, #42	; 0x2a
 800ad52:	d135      	bne.n	800adc0 <_svfiprintf_r+0x188>
 800ad54:	9b03      	ldr	r3, [sp, #12]
 800ad56:	3402      	adds	r4, #2
 800ad58:	1d1a      	adds	r2, r3, #4
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	9203      	str	r2, [sp, #12]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	bfb8      	it	lt
 800ad62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ad66:	9305      	str	r3, [sp, #20]
 800ad68:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ae28 <_svfiprintf_r+0x1f0>
 800ad6c:	2203      	movs	r2, #3
 800ad6e:	4650      	mov	r0, sl
 800ad70:	7821      	ldrb	r1, [r4, #0]
 800ad72:	f7ff fa77 	bl	800a264 <memchr>
 800ad76:	b140      	cbz	r0, 800ad8a <_svfiprintf_r+0x152>
 800ad78:	2340      	movs	r3, #64	; 0x40
 800ad7a:	eba0 000a 	sub.w	r0, r0, sl
 800ad7e:	fa03 f000 	lsl.w	r0, r3, r0
 800ad82:	9b04      	ldr	r3, [sp, #16]
 800ad84:	3401      	adds	r4, #1
 800ad86:	4303      	orrs	r3, r0
 800ad88:	9304      	str	r3, [sp, #16]
 800ad8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad8e:	2206      	movs	r2, #6
 800ad90:	4826      	ldr	r0, [pc, #152]	; (800ae2c <_svfiprintf_r+0x1f4>)
 800ad92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad96:	f7ff fa65 	bl	800a264 <memchr>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d038      	beq.n	800ae10 <_svfiprintf_r+0x1d8>
 800ad9e:	4b24      	ldr	r3, [pc, #144]	; (800ae30 <_svfiprintf_r+0x1f8>)
 800ada0:	bb1b      	cbnz	r3, 800adea <_svfiprintf_r+0x1b2>
 800ada2:	9b03      	ldr	r3, [sp, #12]
 800ada4:	3307      	adds	r3, #7
 800ada6:	f023 0307 	bic.w	r3, r3, #7
 800adaa:	3308      	adds	r3, #8
 800adac:	9303      	str	r3, [sp, #12]
 800adae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb0:	4433      	add	r3, r6
 800adb2:	9309      	str	r3, [sp, #36]	; 0x24
 800adb4:	e767      	b.n	800ac86 <_svfiprintf_r+0x4e>
 800adb6:	460c      	mov	r4, r1
 800adb8:	2001      	movs	r0, #1
 800adba:	fb0c 3202 	mla	r2, ip, r2, r3
 800adbe:	e7a5      	b.n	800ad0c <_svfiprintf_r+0xd4>
 800adc0:	2300      	movs	r3, #0
 800adc2:	f04f 0c0a 	mov.w	ip, #10
 800adc6:	4619      	mov	r1, r3
 800adc8:	3401      	adds	r4, #1
 800adca:	9305      	str	r3, [sp, #20]
 800adcc:	4620      	mov	r0, r4
 800adce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800add2:	3a30      	subs	r2, #48	; 0x30
 800add4:	2a09      	cmp	r2, #9
 800add6:	d903      	bls.n	800ade0 <_svfiprintf_r+0x1a8>
 800add8:	2b00      	cmp	r3, #0
 800adda:	d0c5      	beq.n	800ad68 <_svfiprintf_r+0x130>
 800addc:	9105      	str	r1, [sp, #20]
 800adde:	e7c3      	b.n	800ad68 <_svfiprintf_r+0x130>
 800ade0:	4604      	mov	r4, r0
 800ade2:	2301      	movs	r3, #1
 800ade4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ade8:	e7f0      	b.n	800adcc <_svfiprintf_r+0x194>
 800adea:	ab03      	add	r3, sp, #12
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	462a      	mov	r2, r5
 800adf0:	4638      	mov	r0, r7
 800adf2:	4b10      	ldr	r3, [pc, #64]	; (800ae34 <_svfiprintf_r+0x1fc>)
 800adf4:	a904      	add	r1, sp, #16
 800adf6:	f7fd ffcd 	bl	8008d94 <_printf_float>
 800adfa:	1c42      	adds	r2, r0, #1
 800adfc:	4606      	mov	r6, r0
 800adfe:	d1d6      	bne.n	800adae <_svfiprintf_r+0x176>
 800ae00:	89ab      	ldrh	r3, [r5, #12]
 800ae02:	065b      	lsls	r3, r3, #25
 800ae04:	f53f af2c 	bmi.w	800ac60 <_svfiprintf_r+0x28>
 800ae08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae0a:	b01d      	add	sp, #116	; 0x74
 800ae0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae10:	ab03      	add	r3, sp, #12
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	462a      	mov	r2, r5
 800ae16:	4638      	mov	r0, r7
 800ae18:	4b06      	ldr	r3, [pc, #24]	; (800ae34 <_svfiprintf_r+0x1fc>)
 800ae1a:	a904      	add	r1, sp, #16
 800ae1c:	f7fe fa56 	bl	80092cc <_printf_i>
 800ae20:	e7eb      	b.n	800adfa <_svfiprintf_r+0x1c2>
 800ae22:	bf00      	nop
 800ae24:	0801274c 	.word	0x0801274c
 800ae28:	08012752 	.word	0x08012752
 800ae2c:	08012756 	.word	0x08012756
 800ae30:	08008d95 	.word	0x08008d95
 800ae34:	0800ab81 	.word	0x0800ab81

0800ae38 <_sbrk_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	4d05      	ldr	r5, [pc, #20]	; (800ae54 <_sbrk_r+0x1c>)
 800ae3e:	4604      	mov	r4, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	602b      	str	r3, [r5, #0]
 800ae44:	f7f8 fe8c 	bl	8003b60 <_sbrk>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d102      	bne.n	800ae52 <_sbrk_r+0x1a>
 800ae4c:	682b      	ldr	r3, [r5, #0]
 800ae4e:	b103      	cbz	r3, 800ae52 <_sbrk_r+0x1a>
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	20001744 	.word	0x20001744

0800ae58 <__assert_func>:
 800ae58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae5a:	4614      	mov	r4, r2
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	4b09      	ldr	r3, [pc, #36]	; (800ae84 <__assert_func+0x2c>)
 800ae60:	4605      	mov	r5, r0
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	68d8      	ldr	r0, [r3, #12]
 800ae66:	b14c      	cbz	r4, 800ae7c <__assert_func+0x24>
 800ae68:	4b07      	ldr	r3, [pc, #28]	; (800ae88 <__assert_func+0x30>)
 800ae6a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae6e:	9100      	str	r1, [sp, #0]
 800ae70:	462b      	mov	r3, r5
 800ae72:	4906      	ldr	r1, [pc, #24]	; (800ae8c <__assert_func+0x34>)
 800ae74:	f000 f80e 	bl	800ae94 <fiprintf>
 800ae78:	f000 faaa 	bl	800b3d0 <abort>
 800ae7c:	4b04      	ldr	r3, [pc, #16]	; (800ae90 <__assert_func+0x38>)
 800ae7e:	461c      	mov	r4, r3
 800ae80:	e7f3      	b.n	800ae6a <__assert_func+0x12>
 800ae82:	bf00      	nop
 800ae84:	20000014 	.word	0x20000014
 800ae88:	0801275d 	.word	0x0801275d
 800ae8c:	0801276a 	.word	0x0801276a
 800ae90:	08012798 	.word	0x08012798

0800ae94 <fiprintf>:
 800ae94:	b40e      	push	{r1, r2, r3}
 800ae96:	b503      	push	{r0, r1, lr}
 800ae98:	4601      	mov	r1, r0
 800ae9a:	ab03      	add	r3, sp, #12
 800ae9c:	4805      	ldr	r0, [pc, #20]	; (800aeb4 <fiprintf+0x20>)
 800ae9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800aea2:	6800      	ldr	r0, [r0, #0]
 800aea4:	9301      	str	r3, [sp, #4]
 800aea6:	f000 f895 	bl	800afd4 <_vfiprintf_r>
 800aeaa:	b002      	add	sp, #8
 800aeac:	f85d eb04 	ldr.w	lr, [sp], #4
 800aeb0:	b003      	add	sp, #12
 800aeb2:	4770      	bx	lr
 800aeb4:	20000014 	.word	0x20000014

0800aeb8 <__ascii_mbtowc>:
 800aeb8:	b082      	sub	sp, #8
 800aeba:	b901      	cbnz	r1, 800aebe <__ascii_mbtowc+0x6>
 800aebc:	a901      	add	r1, sp, #4
 800aebe:	b142      	cbz	r2, 800aed2 <__ascii_mbtowc+0x1a>
 800aec0:	b14b      	cbz	r3, 800aed6 <__ascii_mbtowc+0x1e>
 800aec2:	7813      	ldrb	r3, [r2, #0]
 800aec4:	600b      	str	r3, [r1, #0]
 800aec6:	7812      	ldrb	r2, [r2, #0]
 800aec8:	1e10      	subs	r0, r2, #0
 800aeca:	bf18      	it	ne
 800aecc:	2001      	movne	r0, #1
 800aece:	b002      	add	sp, #8
 800aed0:	4770      	bx	lr
 800aed2:	4610      	mov	r0, r2
 800aed4:	e7fb      	b.n	800aece <__ascii_mbtowc+0x16>
 800aed6:	f06f 0001 	mvn.w	r0, #1
 800aeda:	e7f8      	b.n	800aece <__ascii_mbtowc+0x16>

0800aedc <memmove>:
 800aedc:	4288      	cmp	r0, r1
 800aede:	b510      	push	{r4, lr}
 800aee0:	eb01 0402 	add.w	r4, r1, r2
 800aee4:	d902      	bls.n	800aeec <memmove+0x10>
 800aee6:	4284      	cmp	r4, r0
 800aee8:	4623      	mov	r3, r4
 800aeea:	d807      	bhi.n	800aefc <memmove+0x20>
 800aeec:	1e43      	subs	r3, r0, #1
 800aeee:	42a1      	cmp	r1, r4
 800aef0:	d008      	beq.n	800af04 <memmove+0x28>
 800aef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aefa:	e7f8      	b.n	800aeee <memmove+0x12>
 800aefc:	4601      	mov	r1, r0
 800aefe:	4402      	add	r2, r0
 800af00:	428a      	cmp	r2, r1
 800af02:	d100      	bne.n	800af06 <memmove+0x2a>
 800af04:	bd10      	pop	{r4, pc}
 800af06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af0e:	e7f7      	b.n	800af00 <memmove+0x24>

0800af10 <__malloc_lock>:
 800af10:	4801      	ldr	r0, [pc, #4]	; (800af18 <__malloc_lock+0x8>)
 800af12:	f000 bc19 	b.w	800b748 <__retarget_lock_acquire_recursive>
 800af16:	bf00      	nop
 800af18:	20001748 	.word	0x20001748

0800af1c <__malloc_unlock>:
 800af1c:	4801      	ldr	r0, [pc, #4]	; (800af24 <__malloc_unlock+0x8>)
 800af1e:	f000 bc14 	b.w	800b74a <__retarget_lock_release_recursive>
 800af22:	bf00      	nop
 800af24:	20001748 	.word	0x20001748

0800af28 <_realloc_r>:
 800af28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2c:	4680      	mov	r8, r0
 800af2e:	4614      	mov	r4, r2
 800af30:	460e      	mov	r6, r1
 800af32:	b921      	cbnz	r1, 800af3e <_realloc_r+0x16>
 800af34:	4611      	mov	r1, r2
 800af36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af3a:	f7ff bdad 	b.w	800aa98 <_malloc_r>
 800af3e:	b92a      	cbnz	r2, 800af4c <_realloc_r+0x24>
 800af40:	f7ff fd42 	bl	800a9c8 <_free_r>
 800af44:	4625      	mov	r5, r4
 800af46:	4628      	mov	r0, r5
 800af48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af4c:	f000 fc64 	bl	800b818 <_malloc_usable_size_r>
 800af50:	4284      	cmp	r4, r0
 800af52:	4607      	mov	r7, r0
 800af54:	d802      	bhi.n	800af5c <_realloc_r+0x34>
 800af56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af5a:	d812      	bhi.n	800af82 <_realloc_r+0x5a>
 800af5c:	4621      	mov	r1, r4
 800af5e:	4640      	mov	r0, r8
 800af60:	f7ff fd9a 	bl	800aa98 <_malloc_r>
 800af64:	4605      	mov	r5, r0
 800af66:	2800      	cmp	r0, #0
 800af68:	d0ed      	beq.n	800af46 <_realloc_r+0x1e>
 800af6a:	42bc      	cmp	r4, r7
 800af6c:	4622      	mov	r2, r4
 800af6e:	4631      	mov	r1, r6
 800af70:	bf28      	it	cs
 800af72:	463a      	movcs	r2, r7
 800af74:	f7ff f984 	bl	800a280 <memcpy>
 800af78:	4631      	mov	r1, r6
 800af7a:	4640      	mov	r0, r8
 800af7c:	f7ff fd24 	bl	800a9c8 <_free_r>
 800af80:	e7e1      	b.n	800af46 <_realloc_r+0x1e>
 800af82:	4635      	mov	r5, r6
 800af84:	e7df      	b.n	800af46 <_realloc_r+0x1e>

0800af86 <__sfputc_r>:
 800af86:	6893      	ldr	r3, [r2, #8]
 800af88:	b410      	push	{r4}
 800af8a:	3b01      	subs	r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	6093      	str	r3, [r2, #8]
 800af90:	da07      	bge.n	800afa2 <__sfputc_r+0x1c>
 800af92:	6994      	ldr	r4, [r2, #24]
 800af94:	42a3      	cmp	r3, r4
 800af96:	db01      	blt.n	800af9c <__sfputc_r+0x16>
 800af98:	290a      	cmp	r1, #10
 800af9a:	d102      	bne.n	800afa2 <__sfputc_r+0x1c>
 800af9c:	bc10      	pop	{r4}
 800af9e:	f000 b949 	b.w	800b234 <__swbuf_r>
 800afa2:	6813      	ldr	r3, [r2, #0]
 800afa4:	1c58      	adds	r0, r3, #1
 800afa6:	6010      	str	r0, [r2, #0]
 800afa8:	7019      	strb	r1, [r3, #0]
 800afaa:	4608      	mov	r0, r1
 800afac:	bc10      	pop	{r4}
 800afae:	4770      	bx	lr

0800afb0 <__sfputs_r>:
 800afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb2:	4606      	mov	r6, r0
 800afb4:	460f      	mov	r7, r1
 800afb6:	4614      	mov	r4, r2
 800afb8:	18d5      	adds	r5, r2, r3
 800afba:	42ac      	cmp	r4, r5
 800afbc:	d101      	bne.n	800afc2 <__sfputs_r+0x12>
 800afbe:	2000      	movs	r0, #0
 800afc0:	e007      	b.n	800afd2 <__sfputs_r+0x22>
 800afc2:	463a      	mov	r2, r7
 800afc4:	4630      	mov	r0, r6
 800afc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afca:	f7ff ffdc 	bl	800af86 <__sfputc_r>
 800afce:	1c43      	adds	r3, r0, #1
 800afd0:	d1f3      	bne.n	800afba <__sfputs_r+0xa>
 800afd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800afd4 <_vfiprintf_r>:
 800afd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd8:	460d      	mov	r5, r1
 800afda:	4614      	mov	r4, r2
 800afdc:	4698      	mov	r8, r3
 800afde:	4606      	mov	r6, r0
 800afe0:	b09d      	sub	sp, #116	; 0x74
 800afe2:	b118      	cbz	r0, 800afec <_vfiprintf_r+0x18>
 800afe4:	6983      	ldr	r3, [r0, #24]
 800afe6:	b90b      	cbnz	r3, 800afec <_vfiprintf_r+0x18>
 800afe8:	f000 fb10 	bl	800b60c <__sinit>
 800afec:	4b89      	ldr	r3, [pc, #548]	; (800b214 <_vfiprintf_r+0x240>)
 800afee:	429d      	cmp	r5, r3
 800aff0:	d11b      	bne.n	800b02a <_vfiprintf_r+0x56>
 800aff2:	6875      	ldr	r5, [r6, #4]
 800aff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aff6:	07d9      	lsls	r1, r3, #31
 800aff8:	d405      	bmi.n	800b006 <_vfiprintf_r+0x32>
 800affa:	89ab      	ldrh	r3, [r5, #12]
 800affc:	059a      	lsls	r2, r3, #22
 800affe:	d402      	bmi.n	800b006 <_vfiprintf_r+0x32>
 800b000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b002:	f000 fba1 	bl	800b748 <__retarget_lock_acquire_recursive>
 800b006:	89ab      	ldrh	r3, [r5, #12]
 800b008:	071b      	lsls	r3, r3, #28
 800b00a:	d501      	bpl.n	800b010 <_vfiprintf_r+0x3c>
 800b00c:	692b      	ldr	r3, [r5, #16]
 800b00e:	b9eb      	cbnz	r3, 800b04c <_vfiprintf_r+0x78>
 800b010:	4629      	mov	r1, r5
 800b012:	4630      	mov	r0, r6
 800b014:	f000 f96e 	bl	800b2f4 <__swsetup_r>
 800b018:	b1c0      	cbz	r0, 800b04c <_vfiprintf_r+0x78>
 800b01a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b01c:	07dc      	lsls	r4, r3, #31
 800b01e:	d50e      	bpl.n	800b03e <_vfiprintf_r+0x6a>
 800b020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b024:	b01d      	add	sp, #116	; 0x74
 800b026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b02a:	4b7b      	ldr	r3, [pc, #492]	; (800b218 <_vfiprintf_r+0x244>)
 800b02c:	429d      	cmp	r5, r3
 800b02e:	d101      	bne.n	800b034 <_vfiprintf_r+0x60>
 800b030:	68b5      	ldr	r5, [r6, #8]
 800b032:	e7df      	b.n	800aff4 <_vfiprintf_r+0x20>
 800b034:	4b79      	ldr	r3, [pc, #484]	; (800b21c <_vfiprintf_r+0x248>)
 800b036:	429d      	cmp	r5, r3
 800b038:	bf08      	it	eq
 800b03a:	68f5      	ldreq	r5, [r6, #12]
 800b03c:	e7da      	b.n	800aff4 <_vfiprintf_r+0x20>
 800b03e:	89ab      	ldrh	r3, [r5, #12]
 800b040:	0598      	lsls	r0, r3, #22
 800b042:	d4ed      	bmi.n	800b020 <_vfiprintf_r+0x4c>
 800b044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b046:	f000 fb80 	bl	800b74a <__retarget_lock_release_recursive>
 800b04a:	e7e9      	b.n	800b020 <_vfiprintf_r+0x4c>
 800b04c:	2300      	movs	r3, #0
 800b04e:	9309      	str	r3, [sp, #36]	; 0x24
 800b050:	2320      	movs	r3, #32
 800b052:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b056:	2330      	movs	r3, #48	; 0x30
 800b058:	f04f 0901 	mov.w	r9, #1
 800b05c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b060:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b220 <_vfiprintf_r+0x24c>
 800b064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b068:	4623      	mov	r3, r4
 800b06a:	469a      	mov	sl, r3
 800b06c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b070:	b10a      	cbz	r2, 800b076 <_vfiprintf_r+0xa2>
 800b072:	2a25      	cmp	r2, #37	; 0x25
 800b074:	d1f9      	bne.n	800b06a <_vfiprintf_r+0x96>
 800b076:	ebba 0b04 	subs.w	fp, sl, r4
 800b07a:	d00b      	beq.n	800b094 <_vfiprintf_r+0xc0>
 800b07c:	465b      	mov	r3, fp
 800b07e:	4622      	mov	r2, r4
 800b080:	4629      	mov	r1, r5
 800b082:	4630      	mov	r0, r6
 800b084:	f7ff ff94 	bl	800afb0 <__sfputs_r>
 800b088:	3001      	adds	r0, #1
 800b08a:	f000 80aa 	beq.w	800b1e2 <_vfiprintf_r+0x20e>
 800b08e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b090:	445a      	add	r2, fp
 800b092:	9209      	str	r2, [sp, #36]	; 0x24
 800b094:	f89a 3000 	ldrb.w	r3, [sl]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 80a2 	beq.w	800b1e2 <_vfiprintf_r+0x20e>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0a8:	f10a 0a01 	add.w	sl, sl, #1
 800b0ac:	9304      	str	r3, [sp, #16]
 800b0ae:	9307      	str	r3, [sp, #28]
 800b0b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b0b6:	4654      	mov	r4, sl
 800b0b8:	2205      	movs	r2, #5
 800b0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0be:	4858      	ldr	r0, [pc, #352]	; (800b220 <_vfiprintf_r+0x24c>)
 800b0c0:	f7ff f8d0 	bl	800a264 <memchr>
 800b0c4:	9a04      	ldr	r2, [sp, #16]
 800b0c6:	b9d8      	cbnz	r0, 800b100 <_vfiprintf_r+0x12c>
 800b0c8:	06d1      	lsls	r1, r2, #27
 800b0ca:	bf44      	itt	mi
 800b0cc:	2320      	movmi	r3, #32
 800b0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0d2:	0713      	lsls	r3, r2, #28
 800b0d4:	bf44      	itt	mi
 800b0d6:	232b      	movmi	r3, #43	; 0x2b
 800b0d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b0e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0e2:	d015      	beq.n	800b110 <_vfiprintf_r+0x13c>
 800b0e4:	4654      	mov	r4, sl
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	f04f 0c0a 	mov.w	ip, #10
 800b0ec:	9a07      	ldr	r2, [sp, #28]
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0f4:	3b30      	subs	r3, #48	; 0x30
 800b0f6:	2b09      	cmp	r3, #9
 800b0f8:	d94e      	bls.n	800b198 <_vfiprintf_r+0x1c4>
 800b0fa:	b1b0      	cbz	r0, 800b12a <_vfiprintf_r+0x156>
 800b0fc:	9207      	str	r2, [sp, #28]
 800b0fe:	e014      	b.n	800b12a <_vfiprintf_r+0x156>
 800b100:	eba0 0308 	sub.w	r3, r0, r8
 800b104:	fa09 f303 	lsl.w	r3, r9, r3
 800b108:	4313      	orrs	r3, r2
 800b10a:	46a2      	mov	sl, r4
 800b10c:	9304      	str	r3, [sp, #16]
 800b10e:	e7d2      	b.n	800b0b6 <_vfiprintf_r+0xe2>
 800b110:	9b03      	ldr	r3, [sp, #12]
 800b112:	1d19      	adds	r1, r3, #4
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	9103      	str	r1, [sp, #12]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	bfbb      	ittet	lt
 800b11c:	425b      	neglt	r3, r3
 800b11e:	f042 0202 	orrlt.w	r2, r2, #2
 800b122:	9307      	strge	r3, [sp, #28]
 800b124:	9307      	strlt	r3, [sp, #28]
 800b126:	bfb8      	it	lt
 800b128:	9204      	strlt	r2, [sp, #16]
 800b12a:	7823      	ldrb	r3, [r4, #0]
 800b12c:	2b2e      	cmp	r3, #46	; 0x2e
 800b12e:	d10c      	bne.n	800b14a <_vfiprintf_r+0x176>
 800b130:	7863      	ldrb	r3, [r4, #1]
 800b132:	2b2a      	cmp	r3, #42	; 0x2a
 800b134:	d135      	bne.n	800b1a2 <_vfiprintf_r+0x1ce>
 800b136:	9b03      	ldr	r3, [sp, #12]
 800b138:	3402      	adds	r4, #2
 800b13a:	1d1a      	adds	r2, r3, #4
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	9203      	str	r2, [sp, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	bfb8      	it	lt
 800b144:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b148:	9305      	str	r3, [sp, #20]
 800b14a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b224 <_vfiprintf_r+0x250>
 800b14e:	2203      	movs	r2, #3
 800b150:	4650      	mov	r0, sl
 800b152:	7821      	ldrb	r1, [r4, #0]
 800b154:	f7ff f886 	bl	800a264 <memchr>
 800b158:	b140      	cbz	r0, 800b16c <_vfiprintf_r+0x198>
 800b15a:	2340      	movs	r3, #64	; 0x40
 800b15c:	eba0 000a 	sub.w	r0, r0, sl
 800b160:	fa03 f000 	lsl.w	r0, r3, r0
 800b164:	9b04      	ldr	r3, [sp, #16]
 800b166:	3401      	adds	r4, #1
 800b168:	4303      	orrs	r3, r0
 800b16a:	9304      	str	r3, [sp, #16]
 800b16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b170:	2206      	movs	r2, #6
 800b172:	482d      	ldr	r0, [pc, #180]	; (800b228 <_vfiprintf_r+0x254>)
 800b174:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b178:	f7ff f874 	bl	800a264 <memchr>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d03f      	beq.n	800b200 <_vfiprintf_r+0x22c>
 800b180:	4b2a      	ldr	r3, [pc, #168]	; (800b22c <_vfiprintf_r+0x258>)
 800b182:	bb1b      	cbnz	r3, 800b1cc <_vfiprintf_r+0x1f8>
 800b184:	9b03      	ldr	r3, [sp, #12]
 800b186:	3307      	adds	r3, #7
 800b188:	f023 0307 	bic.w	r3, r3, #7
 800b18c:	3308      	adds	r3, #8
 800b18e:	9303      	str	r3, [sp, #12]
 800b190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b192:	443b      	add	r3, r7
 800b194:	9309      	str	r3, [sp, #36]	; 0x24
 800b196:	e767      	b.n	800b068 <_vfiprintf_r+0x94>
 800b198:	460c      	mov	r4, r1
 800b19a:	2001      	movs	r0, #1
 800b19c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1a0:	e7a5      	b.n	800b0ee <_vfiprintf_r+0x11a>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f04f 0c0a 	mov.w	ip, #10
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	3401      	adds	r4, #1
 800b1ac:	9305      	str	r3, [sp, #20]
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1b4:	3a30      	subs	r2, #48	; 0x30
 800b1b6:	2a09      	cmp	r2, #9
 800b1b8:	d903      	bls.n	800b1c2 <_vfiprintf_r+0x1ee>
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d0c5      	beq.n	800b14a <_vfiprintf_r+0x176>
 800b1be:	9105      	str	r1, [sp, #20]
 800b1c0:	e7c3      	b.n	800b14a <_vfiprintf_r+0x176>
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ca:	e7f0      	b.n	800b1ae <_vfiprintf_r+0x1da>
 800b1cc:	ab03      	add	r3, sp, #12
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	462a      	mov	r2, r5
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	4b16      	ldr	r3, [pc, #88]	; (800b230 <_vfiprintf_r+0x25c>)
 800b1d6:	a904      	add	r1, sp, #16
 800b1d8:	f7fd fddc 	bl	8008d94 <_printf_float>
 800b1dc:	4607      	mov	r7, r0
 800b1de:	1c78      	adds	r0, r7, #1
 800b1e0:	d1d6      	bne.n	800b190 <_vfiprintf_r+0x1bc>
 800b1e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1e4:	07d9      	lsls	r1, r3, #31
 800b1e6:	d405      	bmi.n	800b1f4 <_vfiprintf_r+0x220>
 800b1e8:	89ab      	ldrh	r3, [r5, #12]
 800b1ea:	059a      	lsls	r2, r3, #22
 800b1ec:	d402      	bmi.n	800b1f4 <_vfiprintf_r+0x220>
 800b1ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1f0:	f000 faab 	bl	800b74a <__retarget_lock_release_recursive>
 800b1f4:	89ab      	ldrh	r3, [r5, #12]
 800b1f6:	065b      	lsls	r3, r3, #25
 800b1f8:	f53f af12 	bmi.w	800b020 <_vfiprintf_r+0x4c>
 800b1fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1fe:	e711      	b.n	800b024 <_vfiprintf_r+0x50>
 800b200:	ab03      	add	r3, sp, #12
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	462a      	mov	r2, r5
 800b206:	4630      	mov	r0, r6
 800b208:	4b09      	ldr	r3, [pc, #36]	; (800b230 <_vfiprintf_r+0x25c>)
 800b20a:	a904      	add	r1, sp, #16
 800b20c:	f7fe f85e 	bl	80092cc <_printf_i>
 800b210:	e7e4      	b.n	800b1dc <_vfiprintf_r+0x208>
 800b212:	bf00      	nop
 800b214:	080128c4 	.word	0x080128c4
 800b218:	080128e4 	.word	0x080128e4
 800b21c:	080128a4 	.word	0x080128a4
 800b220:	0801274c 	.word	0x0801274c
 800b224:	08012752 	.word	0x08012752
 800b228:	08012756 	.word	0x08012756
 800b22c:	08008d95 	.word	0x08008d95
 800b230:	0800afb1 	.word	0x0800afb1

0800b234 <__swbuf_r>:
 800b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b236:	460e      	mov	r6, r1
 800b238:	4614      	mov	r4, r2
 800b23a:	4605      	mov	r5, r0
 800b23c:	b118      	cbz	r0, 800b246 <__swbuf_r+0x12>
 800b23e:	6983      	ldr	r3, [r0, #24]
 800b240:	b90b      	cbnz	r3, 800b246 <__swbuf_r+0x12>
 800b242:	f000 f9e3 	bl	800b60c <__sinit>
 800b246:	4b21      	ldr	r3, [pc, #132]	; (800b2cc <__swbuf_r+0x98>)
 800b248:	429c      	cmp	r4, r3
 800b24a:	d12b      	bne.n	800b2a4 <__swbuf_r+0x70>
 800b24c:	686c      	ldr	r4, [r5, #4]
 800b24e:	69a3      	ldr	r3, [r4, #24]
 800b250:	60a3      	str	r3, [r4, #8]
 800b252:	89a3      	ldrh	r3, [r4, #12]
 800b254:	071a      	lsls	r2, r3, #28
 800b256:	d52f      	bpl.n	800b2b8 <__swbuf_r+0x84>
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	b36b      	cbz	r3, 800b2b8 <__swbuf_r+0x84>
 800b25c:	6923      	ldr	r3, [r4, #16]
 800b25e:	6820      	ldr	r0, [r4, #0]
 800b260:	b2f6      	uxtb	r6, r6
 800b262:	1ac0      	subs	r0, r0, r3
 800b264:	6963      	ldr	r3, [r4, #20]
 800b266:	4637      	mov	r7, r6
 800b268:	4283      	cmp	r3, r0
 800b26a:	dc04      	bgt.n	800b276 <__swbuf_r+0x42>
 800b26c:	4621      	mov	r1, r4
 800b26e:	4628      	mov	r0, r5
 800b270:	f000 f938 	bl	800b4e4 <_fflush_r>
 800b274:	bb30      	cbnz	r0, 800b2c4 <__swbuf_r+0x90>
 800b276:	68a3      	ldr	r3, [r4, #8]
 800b278:	3001      	adds	r0, #1
 800b27a:	3b01      	subs	r3, #1
 800b27c:	60a3      	str	r3, [r4, #8]
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	1c5a      	adds	r2, r3, #1
 800b282:	6022      	str	r2, [r4, #0]
 800b284:	701e      	strb	r6, [r3, #0]
 800b286:	6963      	ldr	r3, [r4, #20]
 800b288:	4283      	cmp	r3, r0
 800b28a:	d004      	beq.n	800b296 <__swbuf_r+0x62>
 800b28c:	89a3      	ldrh	r3, [r4, #12]
 800b28e:	07db      	lsls	r3, r3, #31
 800b290:	d506      	bpl.n	800b2a0 <__swbuf_r+0x6c>
 800b292:	2e0a      	cmp	r6, #10
 800b294:	d104      	bne.n	800b2a0 <__swbuf_r+0x6c>
 800b296:	4621      	mov	r1, r4
 800b298:	4628      	mov	r0, r5
 800b29a:	f000 f923 	bl	800b4e4 <_fflush_r>
 800b29e:	b988      	cbnz	r0, 800b2c4 <__swbuf_r+0x90>
 800b2a0:	4638      	mov	r0, r7
 800b2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a4:	4b0a      	ldr	r3, [pc, #40]	; (800b2d0 <__swbuf_r+0x9c>)
 800b2a6:	429c      	cmp	r4, r3
 800b2a8:	d101      	bne.n	800b2ae <__swbuf_r+0x7a>
 800b2aa:	68ac      	ldr	r4, [r5, #8]
 800b2ac:	e7cf      	b.n	800b24e <__swbuf_r+0x1a>
 800b2ae:	4b09      	ldr	r3, [pc, #36]	; (800b2d4 <__swbuf_r+0xa0>)
 800b2b0:	429c      	cmp	r4, r3
 800b2b2:	bf08      	it	eq
 800b2b4:	68ec      	ldreq	r4, [r5, #12]
 800b2b6:	e7ca      	b.n	800b24e <__swbuf_r+0x1a>
 800b2b8:	4621      	mov	r1, r4
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	f000 f81a 	bl	800b2f4 <__swsetup_r>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d0cb      	beq.n	800b25c <__swbuf_r+0x28>
 800b2c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b2c8:	e7ea      	b.n	800b2a0 <__swbuf_r+0x6c>
 800b2ca:	bf00      	nop
 800b2cc:	080128c4 	.word	0x080128c4
 800b2d0:	080128e4 	.word	0x080128e4
 800b2d4:	080128a4 	.word	0x080128a4

0800b2d8 <__ascii_wctomb>:
 800b2d8:	4603      	mov	r3, r0
 800b2da:	4608      	mov	r0, r1
 800b2dc:	b141      	cbz	r1, 800b2f0 <__ascii_wctomb+0x18>
 800b2de:	2aff      	cmp	r2, #255	; 0xff
 800b2e0:	d904      	bls.n	800b2ec <__ascii_wctomb+0x14>
 800b2e2:	228a      	movs	r2, #138	; 0x8a
 800b2e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2e8:	601a      	str	r2, [r3, #0]
 800b2ea:	4770      	bx	lr
 800b2ec:	2001      	movs	r0, #1
 800b2ee:	700a      	strb	r2, [r1, #0]
 800b2f0:	4770      	bx	lr
	...

0800b2f4 <__swsetup_r>:
 800b2f4:	4b32      	ldr	r3, [pc, #200]	; (800b3c0 <__swsetup_r+0xcc>)
 800b2f6:	b570      	push	{r4, r5, r6, lr}
 800b2f8:	681d      	ldr	r5, [r3, #0]
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	460c      	mov	r4, r1
 800b2fe:	b125      	cbz	r5, 800b30a <__swsetup_r+0x16>
 800b300:	69ab      	ldr	r3, [r5, #24]
 800b302:	b913      	cbnz	r3, 800b30a <__swsetup_r+0x16>
 800b304:	4628      	mov	r0, r5
 800b306:	f000 f981 	bl	800b60c <__sinit>
 800b30a:	4b2e      	ldr	r3, [pc, #184]	; (800b3c4 <__swsetup_r+0xd0>)
 800b30c:	429c      	cmp	r4, r3
 800b30e:	d10f      	bne.n	800b330 <__swsetup_r+0x3c>
 800b310:	686c      	ldr	r4, [r5, #4]
 800b312:	89a3      	ldrh	r3, [r4, #12]
 800b314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b318:	0719      	lsls	r1, r3, #28
 800b31a:	d42c      	bmi.n	800b376 <__swsetup_r+0x82>
 800b31c:	06dd      	lsls	r5, r3, #27
 800b31e:	d411      	bmi.n	800b344 <__swsetup_r+0x50>
 800b320:	2309      	movs	r3, #9
 800b322:	6033      	str	r3, [r6, #0]
 800b324:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b32c:	81a3      	strh	r3, [r4, #12]
 800b32e:	e03e      	b.n	800b3ae <__swsetup_r+0xba>
 800b330:	4b25      	ldr	r3, [pc, #148]	; (800b3c8 <__swsetup_r+0xd4>)
 800b332:	429c      	cmp	r4, r3
 800b334:	d101      	bne.n	800b33a <__swsetup_r+0x46>
 800b336:	68ac      	ldr	r4, [r5, #8]
 800b338:	e7eb      	b.n	800b312 <__swsetup_r+0x1e>
 800b33a:	4b24      	ldr	r3, [pc, #144]	; (800b3cc <__swsetup_r+0xd8>)
 800b33c:	429c      	cmp	r4, r3
 800b33e:	bf08      	it	eq
 800b340:	68ec      	ldreq	r4, [r5, #12]
 800b342:	e7e6      	b.n	800b312 <__swsetup_r+0x1e>
 800b344:	0758      	lsls	r0, r3, #29
 800b346:	d512      	bpl.n	800b36e <__swsetup_r+0x7a>
 800b348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b34a:	b141      	cbz	r1, 800b35e <__swsetup_r+0x6a>
 800b34c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b350:	4299      	cmp	r1, r3
 800b352:	d002      	beq.n	800b35a <__swsetup_r+0x66>
 800b354:	4630      	mov	r0, r6
 800b356:	f7ff fb37 	bl	800a9c8 <_free_r>
 800b35a:	2300      	movs	r3, #0
 800b35c:	6363      	str	r3, [r4, #52]	; 0x34
 800b35e:	89a3      	ldrh	r3, [r4, #12]
 800b360:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b364:	81a3      	strh	r3, [r4, #12]
 800b366:	2300      	movs	r3, #0
 800b368:	6063      	str	r3, [r4, #4]
 800b36a:	6923      	ldr	r3, [r4, #16]
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	89a3      	ldrh	r3, [r4, #12]
 800b370:	f043 0308 	orr.w	r3, r3, #8
 800b374:	81a3      	strh	r3, [r4, #12]
 800b376:	6923      	ldr	r3, [r4, #16]
 800b378:	b94b      	cbnz	r3, 800b38e <__swsetup_r+0x9a>
 800b37a:	89a3      	ldrh	r3, [r4, #12]
 800b37c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b384:	d003      	beq.n	800b38e <__swsetup_r+0x9a>
 800b386:	4621      	mov	r1, r4
 800b388:	4630      	mov	r0, r6
 800b38a:	f000 fa05 	bl	800b798 <__smakebuf_r>
 800b38e:	89a0      	ldrh	r0, [r4, #12]
 800b390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b394:	f010 0301 	ands.w	r3, r0, #1
 800b398:	d00a      	beq.n	800b3b0 <__swsetup_r+0xbc>
 800b39a:	2300      	movs	r3, #0
 800b39c:	60a3      	str	r3, [r4, #8]
 800b39e:	6963      	ldr	r3, [r4, #20]
 800b3a0:	425b      	negs	r3, r3
 800b3a2:	61a3      	str	r3, [r4, #24]
 800b3a4:	6923      	ldr	r3, [r4, #16]
 800b3a6:	b943      	cbnz	r3, 800b3ba <__swsetup_r+0xc6>
 800b3a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3ac:	d1ba      	bne.n	800b324 <__swsetup_r+0x30>
 800b3ae:	bd70      	pop	{r4, r5, r6, pc}
 800b3b0:	0781      	lsls	r1, r0, #30
 800b3b2:	bf58      	it	pl
 800b3b4:	6963      	ldrpl	r3, [r4, #20]
 800b3b6:	60a3      	str	r3, [r4, #8]
 800b3b8:	e7f4      	b.n	800b3a4 <__swsetup_r+0xb0>
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	e7f7      	b.n	800b3ae <__swsetup_r+0xba>
 800b3be:	bf00      	nop
 800b3c0:	20000014 	.word	0x20000014
 800b3c4:	080128c4 	.word	0x080128c4
 800b3c8:	080128e4 	.word	0x080128e4
 800b3cc:	080128a4 	.word	0x080128a4

0800b3d0 <abort>:
 800b3d0:	2006      	movs	r0, #6
 800b3d2:	b508      	push	{r3, lr}
 800b3d4:	f000 fa50 	bl	800b878 <raise>
 800b3d8:	2001      	movs	r0, #1
 800b3da:	f7f8 fb4e 	bl	8003a7a <_exit>
	...

0800b3e0 <__sflush_r>:
 800b3e0:	898a      	ldrh	r2, [r1, #12]
 800b3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e4:	4605      	mov	r5, r0
 800b3e6:	0710      	lsls	r0, r2, #28
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	d457      	bmi.n	800b49c <__sflush_r+0xbc>
 800b3ec:	684b      	ldr	r3, [r1, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	dc04      	bgt.n	800b3fc <__sflush_r+0x1c>
 800b3f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	dc01      	bgt.n	800b3fc <__sflush_r+0x1c>
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3fe:	2e00      	cmp	r6, #0
 800b400:	d0fa      	beq.n	800b3f8 <__sflush_r+0x18>
 800b402:	2300      	movs	r3, #0
 800b404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b408:	682f      	ldr	r7, [r5, #0]
 800b40a:	602b      	str	r3, [r5, #0]
 800b40c:	d032      	beq.n	800b474 <__sflush_r+0x94>
 800b40e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b410:	89a3      	ldrh	r3, [r4, #12]
 800b412:	075a      	lsls	r2, r3, #29
 800b414:	d505      	bpl.n	800b422 <__sflush_r+0x42>
 800b416:	6863      	ldr	r3, [r4, #4]
 800b418:	1ac0      	subs	r0, r0, r3
 800b41a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b41c:	b10b      	cbz	r3, 800b422 <__sflush_r+0x42>
 800b41e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b420:	1ac0      	subs	r0, r0, r3
 800b422:	2300      	movs	r3, #0
 800b424:	4602      	mov	r2, r0
 800b426:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b428:	4628      	mov	r0, r5
 800b42a:	6a21      	ldr	r1, [r4, #32]
 800b42c:	47b0      	blx	r6
 800b42e:	1c43      	adds	r3, r0, #1
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	d106      	bne.n	800b442 <__sflush_r+0x62>
 800b434:	6829      	ldr	r1, [r5, #0]
 800b436:	291d      	cmp	r1, #29
 800b438:	d82c      	bhi.n	800b494 <__sflush_r+0xb4>
 800b43a:	4a29      	ldr	r2, [pc, #164]	; (800b4e0 <__sflush_r+0x100>)
 800b43c:	40ca      	lsrs	r2, r1
 800b43e:	07d6      	lsls	r6, r2, #31
 800b440:	d528      	bpl.n	800b494 <__sflush_r+0xb4>
 800b442:	2200      	movs	r2, #0
 800b444:	6062      	str	r2, [r4, #4]
 800b446:	6922      	ldr	r2, [r4, #16]
 800b448:	04d9      	lsls	r1, r3, #19
 800b44a:	6022      	str	r2, [r4, #0]
 800b44c:	d504      	bpl.n	800b458 <__sflush_r+0x78>
 800b44e:	1c42      	adds	r2, r0, #1
 800b450:	d101      	bne.n	800b456 <__sflush_r+0x76>
 800b452:	682b      	ldr	r3, [r5, #0]
 800b454:	b903      	cbnz	r3, 800b458 <__sflush_r+0x78>
 800b456:	6560      	str	r0, [r4, #84]	; 0x54
 800b458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b45a:	602f      	str	r7, [r5, #0]
 800b45c:	2900      	cmp	r1, #0
 800b45e:	d0cb      	beq.n	800b3f8 <__sflush_r+0x18>
 800b460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b464:	4299      	cmp	r1, r3
 800b466:	d002      	beq.n	800b46e <__sflush_r+0x8e>
 800b468:	4628      	mov	r0, r5
 800b46a:	f7ff faad 	bl	800a9c8 <_free_r>
 800b46e:	2000      	movs	r0, #0
 800b470:	6360      	str	r0, [r4, #52]	; 0x34
 800b472:	e7c2      	b.n	800b3fa <__sflush_r+0x1a>
 800b474:	6a21      	ldr	r1, [r4, #32]
 800b476:	2301      	movs	r3, #1
 800b478:	4628      	mov	r0, r5
 800b47a:	47b0      	blx	r6
 800b47c:	1c41      	adds	r1, r0, #1
 800b47e:	d1c7      	bne.n	800b410 <__sflush_r+0x30>
 800b480:	682b      	ldr	r3, [r5, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d0c4      	beq.n	800b410 <__sflush_r+0x30>
 800b486:	2b1d      	cmp	r3, #29
 800b488:	d001      	beq.n	800b48e <__sflush_r+0xae>
 800b48a:	2b16      	cmp	r3, #22
 800b48c:	d101      	bne.n	800b492 <__sflush_r+0xb2>
 800b48e:	602f      	str	r7, [r5, #0]
 800b490:	e7b2      	b.n	800b3f8 <__sflush_r+0x18>
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b498:	81a3      	strh	r3, [r4, #12]
 800b49a:	e7ae      	b.n	800b3fa <__sflush_r+0x1a>
 800b49c:	690f      	ldr	r7, [r1, #16]
 800b49e:	2f00      	cmp	r7, #0
 800b4a0:	d0aa      	beq.n	800b3f8 <__sflush_r+0x18>
 800b4a2:	0793      	lsls	r3, r2, #30
 800b4a4:	bf18      	it	ne
 800b4a6:	2300      	movne	r3, #0
 800b4a8:	680e      	ldr	r6, [r1, #0]
 800b4aa:	bf08      	it	eq
 800b4ac:	694b      	ldreq	r3, [r1, #20]
 800b4ae:	1bf6      	subs	r6, r6, r7
 800b4b0:	600f      	str	r7, [r1, #0]
 800b4b2:	608b      	str	r3, [r1, #8]
 800b4b4:	2e00      	cmp	r6, #0
 800b4b6:	dd9f      	ble.n	800b3f8 <__sflush_r+0x18>
 800b4b8:	4633      	mov	r3, r6
 800b4ba:	463a      	mov	r2, r7
 800b4bc:	4628      	mov	r0, r5
 800b4be:	6a21      	ldr	r1, [r4, #32]
 800b4c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b4c4:	47e0      	blx	ip
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	dc06      	bgt.n	800b4d8 <__sflush_r+0xf8>
 800b4ca:	89a3      	ldrh	r3, [r4, #12]
 800b4cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4d4:	81a3      	strh	r3, [r4, #12]
 800b4d6:	e790      	b.n	800b3fa <__sflush_r+0x1a>
 800b4d8:	4407      	add	r7, r0
 800b4da:	1a36      	subs	r6, r6, r0
 800b4dc:	e7ea      	b.n	800b4b4 <__sflush_r+0xd4>
 800b4de:	bf00      	nop
 800b4e0:	20400001 	.word	0x20400001

0800b4e4 <_fflush_r>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	690b      	ldr	r3, [r1, #16]
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	b913      	cbnz	r3, 800b4f4 <_fflush_r+0x10>
 800b4ee:	2500      	movs	r5, #0
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}
 800b4f4:	b118      	cbz	r0, 800b4fe <_fflush_r+0x1a>
 800b4f6:	6983      	ldr	r3, [r0, #24]
 800b4f8:	b90b      	cbnz	r3, 800b4fe <_fflush_r+0x1a>
 800b4fa:	f000 f887 	bl	800b60c <__sinit>
 800b4fe:	4b14      	ldr	r3, [pc, #80]	; (800b550 <_fflush_r+0x6c>)
 800b500:	429c      	cmp	r4, r3
 800b502:	d11b      	bne.n	800b53c <_fflush_r+0x58>
 800b504:	686c      	ldr	r4, [r5, #4]
 800b506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0ef      	beq.n	800b4ee <_fflush_r+0xa>
 800b50e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b510:	07d0      	lsls	r0, r2, #31
 800b512:	d404      	bmi.n	800b51e <_fflush_r+0x3a>
 800b514:	0599      	lsls	r1, r3, #22
 800b516:	d402      	bmi.n	800b51e <_fflush_r+0x3a>
 800b518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b51a:	f000 f915 	bl	800b748 <__retarget_lock_acquire_recursive>
 800b51e:	4628      	mov	r0, r5
 800b520:	4621      	mov	r1, r4
 800b522:	f7ff ff5d 	bl	800b3e0 <__sflush_r>
 800b526:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b528:	4605      	mov	r5, r0
 800b52a:	07da      	lsls	r2, r3, #31
 800b52c:	d4e0      	bmi.n	800b4f0 <_fflush_r+0xc>
 800b52e:	89a3      	ldrh	r3, [r4, #12]
 800b530:	059b      	lsls	r3, r3, #22
 800b532:	d4dd      	bmi.n	800b4f0 <_fflush_r+0xc>
 800b534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b536:	f000 f908 	bl	800b74a <__retarget_lock_release_recursive>
 800b53a:	e7d9      	b.n	800b4f0 <_fflush_r+0xc>
 800b53c:	4b05      	ldr	r3, [pc, #20]	; (800b554 <_fflush_r+0x70>)
 800b53e:	429c      	cmp	r4, r3
 800b540:	d101      	bne.n	800b546 <_fflush_r+0x62>
 800b542:	68ac      	ldr	r4, [r5, #8]
 800b544:	e7df      	b.n	800b506 <_fflush_r+0x22>
 800b546:	4b04      	ldr	r3, [pc, #16]	; (800b558 <_fflush_r+0x74>)
 800b548:	429c      	cmp	r4, r3
 800b54a:	bf08      	it	eq
 800b54c:	68ec      	ldreq	r4, [r5, #12]
 800b54e:	e7da      	b.n	800b506 <_fflush_r+0x22>
 800b550:	080128c4 	.word	0x080128c4
 800b554:	080128e4 	.word	0x080128e4
 800b558:	080128a4 	.word	0x080128a4

0800b55c <std>:
 800b55c:	2300      	movs	r3, #0
 800b55e:	b510      	push	{r4, lr}
 800b560:	4604      	mov	r4, r0
 800b562:	e9c0 3300 	strd	r3, r3, [r0]
 800b566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b56a:	6083      	str	r3, [r0, #8]
 800b56c:	8181      	strh	r1, [r0, #12]
 800b56e:	6643      	str	r3, [r0, #100]	; 0x64
 800b570:	81c2      	strh	r2, [r0, #14]
 800b572:	6183      	str	r3, [r0, #24]
 800b574:	4619      	mov	r1, r3
 800b576:	2208      	movs	r2, #8
 800b578:	305c      	adds	r0, #92	; 0x5c
 800b57a:	f7fd fb65 	bl	8008c48 <memset>
 800b57e:	4b05      	ldr	r3, [pc, #20]	; (800b594 <std+0x38>)
 800b580:	6224      	str	r4, [r4, #32]
 800b582:	6263      	str	r3, [r4, #36]	; 0x24
 800b584:	4b04      	ldr	r3, [pc, #16]	; (800b598 <std+0x3c>)
 800b586:	62a3      	str	r3, [r4, #40]	; 0x28
 800b588:	4b04      	ldr	r3, [pc, #16]	; (800b59c <std+0x40>)
 800b58a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b58c:	4b04      	ldr	r3, [pc, #16]	; (800b5a0 <std+0x44>)
 800b58e:	6323      	str	r3, [r4, #48]	; 0x30
 800b590:	bd10      	pop	{r4, pc}
 800b592:	bf00      	nop
 800b594:	0800b8b1 	.word	0x0800b8b1
 800b598:	0800b8d3 	.word	0x0800b8d3
 800b59c:	0800b90b 	.word	0x0800b90b
 800b5a0:	0800b92f 	.word	0x0800b92f

0800b5a4 <_cleanup_r>:
 800b5a4:	4901      	ldr	r1, [pc, #4]	; (800b5ac <_cleanup_r+0x8>)
 800b5a6:	f000 b8af 	b.w	800b708 <_fwalk_reent>
 800b5aa:	bf00      	nop
 800b5ac:	0800b4e5 	.word	0x0800b4e5

0800b5b0 <__sfmoreglue>:
 800b5b0:	2268      	movs	r2, #104	; 0x68
 800b5b2:	b570      	push	{r4, r5, r6, lr}
 800b5b4:	1e4d      	subs	r5, r1, #1
 800b5b6:	4355      	muls	r5, r2
 800b5b8:	460e      	mov	r6, r1
 800b5ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b5be:	f7ff fa6b 	bl	800aa98 <_malloc_r>
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	b140      	cbz	r0, 800b5d8 <__sfmoreglue+0x28>
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	e9c0 1600 	strd	r1, r6, [r0]
 800b5cc:	300c      	adds	r0, #12
 800b5ce:	60a0      	str	r0, [r4, #8]
 800b5d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b5d4:	f7fd fb38 	bl	8008c48 <memset>
 800b5d8:	4620      	mov	r0, r4
 800b5da:	bd70      	pop	{r4, r5, r6, pc}

0800b5dc <__sfp_lock_acquire>:
 800b5dc:	4801      	ldr	r0, [pc, #4]	; (800b5e4 <__sfp_lock_acquire+0x8>)
 800b5de:	f000 b8b3 	b.w	800b748 <__retarget_lock_acquire_recursive>
 800b5e2:	bf00      	nop
 800b5e4:	20001749 	.word	0x20001749

0800b5e8 <__sfp_lock_release>:
 800b5e8:	4801      	ldr	r0, [pc, #4]	; (800b5f0 <__sfp_lock_release+0x8>)
 800b5ea:	f000 b8ae 	b.w	800b74a <__retarget_lock_release_recursive>
 800b5ee:	bf00      	nop
 800b5f0:	20001749 	.word	0x20001749

0800b5f4 <__sinit_lock_acquire>:
 800b5f4:	4801      	ldr	r0, [pc, #4]	; (800b5fc <__sinit_lock_acquire+0x8>)
 800b5f6:	f000 b8a7 	b.w	800b748 <__retarget_lock_acquire_recursive>
 800b5fa:	bf00      	nop
 800b5fc:	2000174a 	.word	0x2000174a

0800b600 <__sinit_lock_release>:
 800b600:	4801      	ldr	r0, [pc, #4]	; (800b608 <__sinit_lock_release+0x8>)
 800b602:	f000 b8a2 	b.w	800b74a <__retarget_lock_release_recursive>
 800b606:	bf00      	nop
 800b608:	2000174a 	.word	0x2000174a

0800b60c <__sinit>:
 800b60c:	b510      	push	{r4, lr}
 800b60e:	4604      	mov	r4, r0
 800b610:	f7ff fff0 	bl	800b5f4 <__sinit_lock_acquire>
 800b614:	69a3      	ldr	r3, [r4, #24]
 800b616:	b11b      	cbz	r3, 800b620 <__sinit+0x14>
 800b618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b61c:	f7ff bff0 	b.w	800b600 <__sinit_lock_release>
 800b620:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b624:	6523      	str	r3, [r4, #80]	; 0x50
 800b626:	4b13      	ldr	r3, [pc, #76]	; (800b674 <__sinit+0x68>)
 800b628:	4a13      	ldr	r2, [pc, #76]	; (800b678 <__sinit+0x6c>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b62e:	42a3      	cmp	r3, r4
 800b630:	bf08      	it	eq
 800b632:	2301      	moveq	r3, #1
 800b634:	4620      	mov	r0, r4
 800b636:	bf08      	it	eq
 800b638:	61a3      	streq	r3, [r4, #24]
 800b63a:	f000 f81f 	bl	800b67c <__sfp>
 800b63e:	6060      	str	r0, [r4, #4]
 800b640:	4620      	mov	r0, r4
 800b642:	f000 f81b 	bl	800b67c <__sfp>
 800b646:	60a0      	str	r0, [r4, #8]
 800b648:	4620      	mov	r0, r4
 800b64a:	f000 f817 	bl	800b67c <__sfp>
 800b64e:	2200      	movs	r2, #0
 800b650:	2104      	movs	r1, #4
 800b652:	60e0      	str	r0, [r4, #12]
 800b654:	6860      	ldr	r0, [r4, #4]
 800b656:	f7ff ff81 	bl	800b55c <std>
 800b65a:	2201      	movs	r2, #1
 800b65c:	2109      	movs	r1, #9
 800b65e:	68a0      	ldr	r0, [r4, #8]
 800b660:	f7ff ff7c 	bl	800b55c <std>
 800b664:	2202      	movs	r2, #2
 800b666:	2112      	movs	r1, #18
 800b668:	68e0      	ldr	r0, [r4, #12]
 800b66a:	f7ff ff77 	bl	800b55c <std>
 800b66e:	2301      	movs	r3, #1
 800b670:	61a3      	str	r3, [r4, #24]
 800b672:	e7d1      	b.n	800b618 <__sinit+0xc>
 800b674:	0801252c 	.word	0x0801252c
 800b678:	0800b5a5 	.word	0x0800b5a5

0800b67c <__sfp>:
 800b67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67e:	4607      	mov	r7, r0
 800b680:	f7ff ffac 	bl	800b5dc <__sfp_lock_acquire>
 800b684:	4b1e      	ldr	r3, [pc, #120]	; (800b700 <__sfp+0x84>)
 800b686:	681e      	ldr	r6, [r3, #0]
 800b688:	69b3      	ldr	r3, [r6, #24]
 800b68a:	b913      	cbnz	r3, 800b692 <__sfp+0x16>
 800b68c:	4630      	mov	r0, r6
 800b68e:	f7ff ffbd 	bl	800b60c <__sinit>
 800b692:	3648      	adds	r6, #72	; 0x48
 800b694:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b698:	3b01      	subs	r3, #1
 800b69a:	d503      	bpl.n	800b6a4 <__sfp+0x28>
 800b69c:	6833      	ldr	r3, [r6, #0]
 800b69e:	b30b      	cbz	r3, 800b6e4 <__sfp+0x68>
 800b6a0:	6836      	ldr	r6, [r6, #0]
 800b6a2:	e7f7      	b.n	800b694 <__sfp+0x18>
 800b6a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b6a8:	b9d5      	cbnz	r5, 800b6e0 <__sfp+0x64>
 800b6aa:	4b16      	ldr	r3, [pc, #88]	; (800b704 <__sfp+0x88>)
 800b6ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6b0:	60e3      	str	r3, [r4, #12]
 800b6b2:	6665      	str	r5, [r4, #100]	; 0x64
 800b6b4:	f000 f847 	bl	800b746 <__retarget_lock_init_recursive>
 800b6b8:	f7ff ff96 	bl	800b5e8 <__sfp_lock_release>
 800b6bc:	2208      	movs	r2, #8
 800b6be:	4629      	mov	r1, r5
 800b6c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b6c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b6c8:	6025      	str	r5, [r4, #0]
 800b6ca:	61a5      	str	r5, [r4, #24]
 800b6cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b6d0:	f7fd faba 	bl	8008c48 <memset>
 800b6d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b6d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b6dc:	4620      	mov	r0, r4
 800b6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6e0:	3468      	adds	r4, #104	; 0x68
 800b6e2:	e7d9      	b.n	800b698 <__sfp+0x1c>
 800b6e4:	2104      	movs	r1, #4
 800b6e6:	4638      	mov	r0, r7
 800b6e8:	f7ff ff62 	bl	800b5b0 <__sfmoreglue>
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	6030      	str	r0, [r6, #0]
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d1d5      	bne.n	800b6a0 <__sfp+0x24>
 800b6f4:	f7ff ff78 	bl	800b5e8 <__sfp_lock_release>
 800b6f8:	230c      	movs	r3, #12
 800b6fa:	603b      	str	r3, [r7, #0]
 800b6fc:	e7ee      	b.n	800b6dc <__sfp+0x60>
 800b6fe:	bf00      	nop
 800b700:	0801252c 	.word	0x0801252c
 800b704:	ffff0001 	.word	0xffff0001

0800b708 <_fwalk_reent>:
 800b708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b70c:	4606      	mov	r6, r0
 800b70e:	4688      	mov	r8, r1
 800b710:	2700      	movs	r7, #0
 800b712:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b716:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b71a:	f1b9 0901 	subs.w	r9, r9, #1
 800b71e:	d505      	bpl.n	800b72c <_fwalk_reent+0x24>
 800b720:	6824      	ldr	r4, [r4, #0]
 800b722:	2c00      	cmp	r4, #0
 800b724:	d1f7      	bne.n	800b716 <_fwalk_reent+0xe>
 800b726:	4638      	mov	r0, r7
 800b728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b72c:	89ab      	ldrh	r3, [r5, #12]
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d907      	bls.n	800b742 <_fwalk_reent+0x3a>
 800b732:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b736:	3301      	adds	r3, #1
 800b738:	d003      	beq.n	800b742 <_fwalk_reent+0x3a>
 800b73a:	4629      	mov	r1, r5
 800b73c:	4630      	mov	r0, r6
 800b73e:	47c0      	blx	r8
 800b740:	4307      	orrs	r7, r0
 800b742:	3568      	adds	r5, #104	; 0x68
 800b744:	e7e9      	b.n	800b71a <_fwalk_reent+0x12>

0800b746 <__retarget_lock_init_recursive>:
 800b746:	4770      	bx	lr

0800b748 <__retarget_lock_acquire_recursive>:
 800b748:	4770      	bx	lr

0800b74a <__retarget_lock_release_recursive>:
 800b74a:	4770      	bx	lr

0800b74c <__swhatbuf_r>:
 800b74c:	b570      	push	{r4, r5, r6, lr}
 800b74e:	460e      	mov	r6, r1
 800b750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b754:	4614      	mov	r4, r2
 800b756:	2900      	cmp	r1, #0
 800b758:	461d      	mov	r5, r3
 800b75a:	b096      	sub	sp, #88	; 0x58
 800b75c:	da08      	bge.n	800b770 <__swhatbuf_r+0x24>
 800b75e:	2200      	movs	r2, #0
 800b760:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b764:	602a      	str	r2, [r5, #0]
 800b766:	061a      	lsls	r2, r3, #24
 800b768:	d410      	bmi.n	800b78c <__swhatbuf_r+0x40>
 800b76a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b76e:	e00e      	b.n	800b78e <__swhatbuf_r+0x42>
 800b770:	466a      	mov	r2, sp
 800b772:	f000 f903 	bl	800b97c <_fstat_r>
 800b776:	2800      	cmp	r0, #0
 800b778:	dbf1      	blt.n	800b75e <__swhatbuf_r+0x12>
 800b77a:	9a01      	ldr	r2, [sp, #4]
 800b77c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b780:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b784:	425a      	negs	r2, r3
 800b786:	415a      	adcs	r2, r3
 800b788:	602a      	str	r2, [r5, #0]
 800b78a:	e7ee      	b.n	800b76a <__swhatbuf_r+0x1e>
 800b78c:	2340      	movs	r3, #64	; 0x40
 800b78e:	2000      	movs	r0, #0
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	b016      	add	sp, #88	; 0x58
 800b794:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b798 <__smakebuf_r>:
 800b798:	898b      	ldrh	r3, [r1, #12]
 800b79a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b79c:	079d      	lsls	r5, r3, #30
 800b79e:	4606      	mov	r6, r0
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	d507      	bpl.n	800b7b4 <__smakebuf_r+0x1c>
 800b7a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	6123      	str	r3, [r4, #16]
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	6163      	str	r3, [r4, #20]
 800b7b0:	b002      	add	sp, #8
 800b7b2:	bd70      	pop	{r4, r5, r6, pc}
 800b7b4:	466a      	mov	r2, sp
 800b7b6:	ab01      	add	r3, sp, #4
 800b7b8:	f7ff ffc8 	bl	800b74c <__swhatbuf_r>
 800b7bc:	9900      	ldr	r1, [sp, #0]
 800b7be:	4605      	mov	r5, r0
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f7ff f969 	bl	800aa98 <_malloc_r>
 800b7c6:	b948      	cbnz	r0, 800b7dc <__smakebuf_r+0x44>
 800b7c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7cc:	059a      	lsls	r2, r3, #22
 800b7ce:	d4ef      	bmi.n	800b7b0 <__smakebuf_r+0x18>
 800b7d0:	f023 0303 	bic.w	r3, r3, #3
 800b7d4:	f043 0302 	orr.w	r3, r3, #2
 800b7d8:	81a3      	strh	r3, [r4, #12]
 800b7da:	e7e3      	b.n	800b7a4 <__smakebuf_r+0xc>
 800b7dc:	4b0d      	ldr	r3, [pc, #52]	; (800b814 <__smakebuf_r+0x7c>)
 800b7de:	62b3      	str	r3, [r6, #40]	; 0x28
 800b7e0:	89a3      	ldrh	r3, [r4, #12]
 800b7e2:	6020      	str	r0, [r4, #0]
 800b7e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7e8:	81a3      	strh	r3, [r4, #12]
 800b7ea:	9b00      	ldr	r3, [sp, #0]
 800b7ec:	6120      	str	r0, [r4, #16]
 800b7ee:	6163      	str	r3, [r4, #20]
 800b7f0:	9b01      	ldr	r3, [sp, #4]
 800b7f2:	b15b      	cbz	r3, 800b80c <__smakebuf_r+0x74>
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7fa:	f000 f8d1 	bl	800b9a0 <_isatty_r>
 800b7fe:	b128      	cbz	r0, 800b80c <__smakebuf_r+0x74>
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	f023 0303 	bic.w	r3, r3, #3
 800b806:	f043 0301 	orr.w	r3, r3, #1
 800b80a:	81a3      	strh	r3, [r4, #12]
 800b80c:	89a0      	ldrh	r0, [r4, #12]
 800b80e:	4305      	orrs	r5, r0
 800b810:	81a5      	strh	r5, [r4, #12]
 800b812:	e7cd      	b.n	800b7b0 <__smakebuf_r+0x18>
 800b814:	0800b5a5 	.word	0x0800b5a5

0800b818 <_malloc_usable_size_r>:
 800b818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b81c:	1f18      	subs	r0, r3, #4
 800b81e:	2b00      	cmp	r3, #0
 800b820:	bfbc      	itt	lt
 800b822:	580b      	ldrlt	r3, [r1, r0]
 800b824:	18c0      	addlt	r0, r0, r3
 800b826:	4770      	bx	lr

0800b828 <_raise_r>:
 800b828:	291f      	cmp	r1, #31
 800b82a:	b538      	push	{r3, r4, r5, lr}
 800b82c:	4604      	mov	r4, r0
 800b82e:	460d      	mov	r5, r1
 800b830:	d904      	bls.n	800b83c <_raise_r+0x14>
 800b832:	2316      	movs	r3, #22
 800b834:	6003      	str	r3, [r0, #0]
 800b836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b83a:	bd38      	pop	{r3, r4, r5, pc}
 800b83c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b83e:	b112      	cbz	r2, 800b846 <_raise_r+0x1e>
 800b840:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b844:	b94b      	cbnz	r3, 800b85a <_raise_r+0x32>
 800b846:	4620      	mov	r0, r4
 800b848:	f000 f830 	bl	800b8ac <_getpid_r>
 800b84c:	462a      	mov	r2, r5
 800b84e:	4601      	mov	r1, r0
 800b850:	4620      	mov	r0, r4
 800b852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b856:	f000 b817 	b.w	800b888 <_kill_r>
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d00a      	beq.n	800b874 <_raise_r+0x4c>
 800b85e:	1c59      	adds	r1, r3, #1
 800b860:	d103      	bne.n	800b86a <_raise_r+0x42>
 800b862:	2316      	movs	r3, #22
 800b864:	6003      	str	r3, [r0, #0]
 800b866:	2001      	movs	r0, #1
 800b868:	e7e7      	b.n	800b83a <_raise_r+0x12>
 800b86a:	2400      	movs	r4, #0
 800b86c:	4628      	mov	r0, r5
 800b86e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b872:	4798      	blx	r3
 800b874:	2000      	movs	r0, #0
 800b876:	e7e0      	b.n	800b83a <_raise_r+0x12>

0800b878 <raise>:
 800b878:	4b02      	ldr	r3, [pc, #8]	; (800b884 <raise+0xc>)
 800b87a:	4601      	mov	r1, r0
 800b87c:	6818      	ldr	r0, [r3, #0]
 800b87e:	f7ff bfd3 	b.w	800b828 <_raise_r>
 800b882:	bf00      	nop
 800b884:	20000014 	.word	0x20000014

0800b888 <_kill_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	2300      	movs	r3, #0
 800b88c:	4d06      	ldr	r5, [pc, #24]	; (800b8a8 <_kill_r+0x20>)
 800b88e:	4604      	mov	r4, r0
 800b890:	4608      	mov	r0, r1
 800b892:	4611      	mov	r1, r2
 800b894:	602b      	str	r3, [r5, #0]
 800b896:	f7f8 f8e0 	bl	8003a5a <_kill>
 800b89a:	1c43      	adds	r3, r0, #1
 800b89c:	d102      	bne.n	800b8a4 <_kill_r+0x1c>
 800b89e:	682b      	ldr	r3, [r5, #0]
 800b8a0:	b103      	cbz	r3, 800b8a4 <_kill_r+0x1c>
 800b8a2:	6023      	str	r3, [r4, #0]
 800b8a4:	bd38      	pop	{r3, r4, r5, pc}
 800b8a6:	bf00      	nop
 800b8a8:	20001744 	.word	0x20001744

0800b8ac <_getpid_r>:
 800b8ac:	f7f8 b8ce 	b.w	8003a4c <_getpid>

0800b8b0 <__sread>:
 800b8b0:	b510      	push	{r4, lr}
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b8:	f000 f894 	bl	800b9e4 <_read_r>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	bfab      	itete	ge
 800b8c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8c2:	89a3      	ldrhlt	r3, [r4, #12]
 800b8c4:	181b      	addge	r3, r3, r0
 800b8c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8ca:	bfac      	ite	ge
 800b8cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8ce:	81a3      	strhlt	r3, [r4, #12]
 800b8d0:	bd10      	pop	{r4, pc}

0800b8d2 <__swrite>:
 800b8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d6:	461f      	mov	r7, r3
 800b8d8:	898b      	ldrh	r3, [r1, #12]
 800b8da:	4605      	mov	r5, r0
 800b8dc:	05db      	lsls	r3, r3, #23
 800b8de:	460c      	mov	r4, r1
 800b8e0:	4616      	mov	r6, r2
 800b8e2:	d505      	bpl.n	800b8f0 <__swrite+0x1e>
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ec:	f000 f868 	bl	800b9c0 <_lseek_r>
 800b8f0:	89a3      	ldrh	r3, [r4, #12]
 800b8f2:	4632      	mov	r2, r6
 800b8f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8f8:	81a3      	strh	r3, [r4, #12]
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	463b      	mov	r3, r7
 800b8fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b906:	f000 b817 	b.w	800b938 <_write_r>

0800b90a <__sseek>:
 800b90a:	b510      	push	{r4, lr}
 800b90c:	460c      	mov	r4, r1
 800b90e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b912:	f000 f855 	bl	800b9c0 <_lseek_r>
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	89a3      	ldrh	r3, [r4, #12]
 800b91a:	bf15      	itete	ne
 800b91c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b91e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b926:	81a3      	strheq	r3, [r4, #12]
 800b928:	bf18      	it	ne
 800b92a:	81a3      	strhne	r3, [r4, #12]
 800b92c:	bd10      	pop	{r4, pc}

0800b92e <__sclose>:
 800b92e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b932:	f000 b813 	b.w	800b95c <_close_r>
	...

0800b938 <_write_r>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4604      	mov	r4, r0
 800b93c:	4608      	mov	r0, r1
 800b93e:	4611      	mov	r1, r2
 800b940:	2200      	movs	r2, #0
 800b942:	4d05      	ldr	r5, [pc, #20]	; (800b958 <_write_r+0x20>)
 800b944:	602a      	str	r2, [r5, #0]
 800b946:	461a      	mov	r2, r3
 800b948:	f7f8 f8be 	bl	8003ac8 <_write>
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	d102      	bne.n	800b956 <_write_r+0x1e>
 800b950:	682b      	ldr	r3, [r5, #0]
 800b952:	b103      	cbz	r3, 800b956 <_write_r+0x1e>
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	bd38      	pop	{r3, r4, r5, pc}
 800b958:	20001744 	.word	0x20001744

0800b95c <_close_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	2300      	movs	r3, #0
 800b960:	4d05      	ldr	r5, [pc, #20]	; (800b978 <_close_r+0x1c>)
 800b962:	4604      	mov	r4, r0
 800b964:	4608      	mov	r0, r1
 800b966:	602b      	str	r3, [r5, #0]
 800b968:	f7f8 f8ca 	bl	8003b00 <_close>
 800b96c:	1c43      	adds	r3, r0, #1
 800b96e:	d102      	bne.n	800b976 <_close_r+0x1a>
 800b970:	682b      	ldr	r3, [r5, #0]
 800b972:	b103      	cbz	r3, 800b976 <_close_r+0x1a>
 800b974:	6023      	str	r3, [r4, #0]
 800b976:	bd38      	pop	{r3, r4, r5, pc}
 800b978:	20001744 	.word	0x20001744

0800b97c <_fstat_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	2300      	movs	r3, #0
 800b980:	4d06      	ldr	r5, [pc, #24]	; (800b99c <_fstat_r+0x20>)
 800b982:	4604      	mov	r4, r0
 800b984:	4608      	mov	r0, r1
 800b986:	4611      	mov	r1, r2
 800b988:	602b      	str	r3, [r5, #0]
 800b98a:	f7f8 f8c4 	bl	8003b16 <_fstat>
 800b98e:	1c43      	adds	r3, r0, #1
 800b990:	d102      	bne.n	800b998 <_fstat_r+0x1c>
 800b992:	682b      	ldr	r3, [r5, #0]
 800b994:	b103      	cbz	r3, 800b998 <_fstat_r+0x1c>
 800b996:	6023      	str	r3, [r4, #0]
 800b998:	bd38      	pop	{r3, r4, r5, pc}
 800b99a:	bf00      	nop
 800b99c:	20001744 	.word	0x20001744

0800b9a0 <_isatty_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	4d05      	ldr	r5, [pc, #20]	; (800b9bc <_isatty_r+0x1c>)
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	4608      	mov	r0, r1
 800b9aa:	602b      	str	r3, [r5, #0]
 800b9ac:	f7f8 f8c2 	bl	8003b34 <_isatty>
 800b9b0:	1c43      	adds	r3, r0, #1
 800b9b2:	d102      	bne.n	800b9ba <_isatty_r+0x1a>
 800b9b4:	682b      	ldr	r3, [r5, #0]
 800b9b6:	b103      	cbz	r3, 800b9ba <_isatty_r+0x1a>
 800b9b8:	6023      	str	r3, [r4, #0]
 800b9ba:	bd38      	pop	{r3, r4, r5, pc}
 800b9bc:	20001744 	.word	0x20001744

0800b9c0 <_lseek_r>:
 800b9c0:	b538      	push	{r3, r4, r5, lr}
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	4608      	mov	r0, r1
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	4d05      	ldr	r5, [pc, #20]	; (800b9e0 <_lseek_r+0x20>)
 800b9cc:	602a      	str	r2, [r5, #0]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	f7f8 f8ba 	bl	8003b48 <_lseek>
 800b9d4:	1c43      	adds	r3, r0, #1
 800b9d6:	d102      	bne.n	800b9de <_lseek_r+0x1e>
 800b9d8:	682b      	ldr	r3, [r5, #0]
 800b9da:	b103      	cbz	r3, 800b9de <_lseek_r+0x1e>
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	bd38      	pop	{r3, r4, r5, pc}
 800b9e0:	20001744 	.word	0x20001744

0800b9e4 <_read_r>:
 800b9e4:	b538      	push	{r3, r4, r5, lr}
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	4608      	mov	r0, r1
 800b9ea:	4611      	mov	r1, r2
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	4d05      	ldr	r5, [pc, #20]	; (800ba04 <_read_r+0x20>)
 800b9f0:	602a      	str	r2, [r5, #0]
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	f7f8 f84b 	bl	8003a8e <_read>
 800b9f8:	1c43      	adds	r3, r0, #1
 800b9fa:	d102      	bne.n	800ba02 <_read_r+0x1e>
 800b9fc:	682b      	ldr	r3, [r5, #0]
 800b9fe:	b103      	cbz	r3, 800ba02 <_read_r+0x1e>
 800ba00:	6023      	str	r3, [r4, #0]
 800ba02:	bd38      	pop	{r3, r4, r5, pc}
 800ba04:	20001744 	.word	0x20001744

0800ba08 <_init>:
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0a:	bf00      	nop
 800ba0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba0e:	bc08      	pop	{r3}
 800ba10:	469e      	mov	lr, r3
 800ba12:	4770      	bx	lr

0800ba14 <_fini>:
 800ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba16:	bf00      	nop
 800ba18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba1a:	bc08      	pop	{r3}
 800ba1c:	469e      	mov	lr, r3
 800ba1e:	4770      	bx	lr
